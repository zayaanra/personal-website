{"ast":null,"code":"export var parseAngle = function parseAngle(angle) {\n  \"worklet\";\n\n  if (angle.endsWith(\"deg\")) {\n    return parseFloat(angle) * (Math.PI / 180);\n  }\n\n  return parseFloat(angle);\n};\nexport var isTranslateX = function isTranslateX(transform) {\n  \"worklet\";\n\n  return Object.keys(transform).indexOf(\"translateX\") !== -1;\n};\nexport var isTranslateY = function isTranslateY(transform) {\n  \"worklet\";\n\n  return Object.keys(transform).indexOf(\"translateY\") !== -1;\n};\nexport var isScale = function isScale(transform) {\n  \"worklet\";\n\n  return Object.keys(transform).indexOf(\"scale\") !== -1;\n};\nexport var isScaleX = function isScaleX(transform) {\n  \"worklet\";\n\n  return Object.keys(transform).indexOf(\"scaleX\") !== -1;\n};\nexport var isScaleY = function isScaleY(transform) {\n  \"worklet\";\n\n  return Object.keys(transform).indexOf(\"scaleY\") !== -1;\n};\nexport var isSkewX = function isSkewX(transform) {\n  \"worklet\";\n\n  return Object.keys(transform).indexOf(\"skewX\") !== -1;\n};\nexport var isSkewY = function isSkewY(transform) {\n  \"worklet\";\n\n  return Object.keys(transform).indexOf(\"skewY\") !== -1;\n};\nexport var isRotate = function isRotate(transform) {\n  \"worklet\";\n\n  return Object.keys(transform).indexOf(\"rotate\") !== -1;\n};\nexport var isRotateZ = function isRotateZ(transform) {\n  \"worklet\";\n\n  return Object.keys(transform).indexOf(\"rotateZ\") !== -1;\n};\n\nvar exhaustiveCheck = function exhaustiveCheck(a) {\n  \"worklet\";\n\n  throw new Error(\"Unexhaustive handling for \" + a);\n};\n\nvar identityMatrix = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];\n\nvar translateXMatrix = function translateXMatrix(x) {\n  \"worklet\";\n\n  return [[1, 0, x], [0, 1, 0], [0, 0, 1]];\n};\n\nvar translateYMatrix = function translateYMatrix(y) {\n  \"worklet\";\n\n  return [[1, 0, 0], [0, 1, y], [0, 0, 1]];\n};\n\nvar scaleMatrix = function scaleMatrix(s) {\n  \"worklet\";\n\n  return [[s, 0, 0], [0, s, 0], [0, 0, 1]];\n};\n\nvar scaleXMatrix = function scaleXMatrix(s) {\n  \"worklet\";\n\n  return [[s, 0, 0], [0, 1, 0], [0, 0, 1]];\n};\n\nvar scaleYMatrix = function scaleYMatrix(s) {\n  \"worklet\";\n\n  return [[1, 0, 0], [0, s, 0], [0, 0, 1]];\n};\n\nvar skewXMatrix = function skewXMatrix(s) {\n  \"worklet\";\n\n  return [[1, Math.tan(s), 0], [0, 1, 0], [0, 0, 1]];\n};\n\nvar skewYMatrix = function skewYMatrix(s) {\n  \"worklet\";\n\n  return [[1, 0, 0], [Math.tan(s), 1, 0], [0, 0, 1]];\n};\n\nvar rotateZMatrix = function rotateZMatrix(r) {\n  \"worklet\";\n\n  return [[Math.cos(r), -1 * Math.sin(r), 0], [Math.sin(r), Math.cos(r), 0], [0, 0, 1]];\n};\n\nexport var dot3 = function dot3(row, col) {\n  \"worklet\";\n\n  return row[0] * col[0] + row[1] * col[1] + row[2] * col[2];\n};\nexport var matrixVecMul3 = function matrixVecMul3(m, v) {\n  \"worklet\";\n\n  return [dot3(m[0], v), dot3(m[1], v), dot3(m[2], v)];\n};\nexport var multiply3 = function multiply3(m1, m2) {\n  \"worklet\";\n\n  var col0 = [m2[0][0], m2[1][0], m2[2][0]];\n  var col1 = [m2[0][1], m2[1][1], m2[2][1]];\n  var col2 = [m2[0][2], m2[1][2], m2[2][2]];\n  return [[dot3(m1[0], col0), dot3(m1[0], col1), dot3(m1[0], col2)], [dot3(m1[1], col0), dot3(m1[1], col1), dot3(m1[1], col2)], [dot3(m1[2], col0), dot3(m1[2], col1), dot3(m1[2], col2)]];\n};\n\nvar serializeToSVGMatrix = function serializeToSVGMatrix(m) {\n  \"worklet\";\n\n  return \"matrix(\" + m[0][0] + \", \" + m[1][0] + \", \" + m[0][1] + \", \" + m[1][1] + \", \" + m[0][2] + \", \" + m[1][2] + \")\";\n};\n\nexport var svgMatrix = function svgMatrix(transforms) {\n  \"worklet\";\n\n  return serializeToSVGMatrix(processTransform2d(transforms));\n};\nexport var processTransform2d = function processTransform2d(transforms) {\n  \"worklet\";\n\n  return transforms.reduce(function (acc, transform) {\n    if (isTranslateX(transform)) {\n      return multiply3(acc, translateXMatrix(transform.translateX));\n    }\n\n    if (isTranslateY(transform)) {\n      return multiply3(acc, translateYMatrix(transform.translateY));\n    }\n\n    if (isScale(transform)) {\n      return multiply3(acc, scaleMatrix(transform.scale));\n    }\n\n    if (isScaleX(transform)) {\n      return multiply3(acc, scaleXMatrix(transform.scaleX));\n    }\n\n    if (isScaleY(transform)) {\n      return multiply3(acc, scaleYMatrix(transform.scaleY));\n    }\n\n    if (isSkewX(transform)) {\n      return multiply3(acc, skewXMatrix(parseAngle(transform.skewX)));\n    }\n\n    if (isSkewY(transform)) {\n      return multiply3(acc, skewYMatrix(parseAngle(transform.skewY)));\n    }\n\n    if (isRotate(transform)) {\n      return multiply3(acc, rotateZMatrix(parseAngle(transform.rotate)));\n    }\n\n    if (isRotateZ(transform)) {\n      return multiply3(acc, rotateZMatrix(parseAngle(transform.rotateZ)));\n    }\n\n    return exhaustiveCheck(transform);\n  }, identityMatrix);\n};\n\nvar isMatrix3 = function isMatrix3(arg) {\n  \"worklet\";\n\n  return arg.length === 3 && arg[0] instanceof Array;\n};\n\nexport var decompose2d = function decompose2d(arg) {\n  \"worklet\";\n\n  var m = isMatrix3(arg) ? arg : processTransform2d(arg);\n  var a = m[0][0];\n  var b = m[1][0];\n  var c = m[0][1];\n  var d = m[1][1];\n  var translateX = m[0][2];\n  var translateY = m[1][2];\n  var E = (a + d) / 2;\n  var F = (a - d) / 2;\n  var G = (c + b) / 2;\n  var H = (c - b) / 2;\n  var Q = Math.sqrt(Math.pow(E, 2) + Math.pow(H, 2));\n  var R = Math.sqrt(Math.pow(F, 2) + Math.pow(G, 2));\n  var scaleX = Q + R;\n  var scaleY = Q - R;\n  var a1 = Math.atan2(G, F);\n  var a2 = Math.atan2(H, E);\n  var theta = (a2 - a1) / 2;\n  var phi = (a2 + a1) / 2;\n  return [{\n    translateX: translateX\n  }, {\n    translateY: translateY\n  }, {\n    rotateZ: -1 * theta\n  }, {\n    scaleX: scaleX\n  }, {\n    scaleY: scaleY\n  }, {\n    rotateZ: -1 * phi\n  }];\n};\n\nvar adjugate = function adjugate(m) {\n  \"worklet\";\n\n  return [[m[1][1] * m[2][2] - m[1][2] * [2][1], m[0][2] * [2][1] - m[0][1] * [2][2], m[0][1] * [1][2] - m[0][2] * [1][1]], [m[1][2] * [2][0] - m[1][0] * [2][2], m[0][0] * [2][2] - m[0][2] * [2][0], m[0][2] * [1][0] - m[0][0] * [1][2]], [m[1][0] * [2][1] - m[1][1] * [2][0], m[0][1] * [2][0] - m[0][0] * [2][1], m[0][0] * [1][1] - m[0][1] * [1][0]]];\n};\n\nvar basisToPoints = function basisToPoints(_ref) {\n  \"worklet\";\n\n  var p1 = _ref.p1,\n      p2 = _ref.p2,\n      p3 = _ref.p3,\n      p4 = _ref.p4;\n  var m = [[p1.x, p2.x, p3.x], [p1.y, p2.y, p3.y], [1, 1, 1]];\n  var v = matrixVecMul3(adjugate(m), [p4.x, p4.y, 1]);\n  return multiply3(m, [[v[0], 0, 0], [0, v[1], 0], [0, 0, v[2]]]);\n};\n\nexport var transform2d = function transform2d(params) {\n  \"worklet\";\n\n  var s = basisToPoints(params.canvas);\n  var d = basisToPoints(params.projected);\n  var t = multiply3(d, adjugate(s));\n  return [[t[0][0] / t[2][2], t[0][1] / t[2][2], t[0][2] / t[2][2]], [t[1][0] / t[2][2], t[1][1] / t[2][2], t[1][2] / t[2][2]], [t[2][0] / t[2][2], t[2][1] / t[2][2], 1]];\n};","map":{"version":3,"sources":["C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\react-native-redash\\lib\\module\\Matrix3.ts"],"names":["parseAngle","angle","parseFloat","Math","isTranslateX","Object","isTranslateY","isScale","isScaleX","isScaleY","isSkewX","isSkewY","isRotate","isRotateZ","exhaustiveCheck","identityMatrix","translateXMatrix","translateYMatrix","scaleMatrix","scaleXMatrix","scaleYMatrix","skewXMatrix","skewYMatrix","rotateZMatrix","dot3","row","col","matrixVecMul3","m","multiply3","col0","m2","col1","col2","m1","serializeToSVGMatrix","svgMatrix","processTransform2d","transforms","transform","isMatrix3","arg","decompose2d","a","b","c","d","translateX","translateY","E","F","G","H","Q","R","scaleX","scaleY","a1","a2","theta","phi","rotateZ","adjugate","basisToPoints","p1","p2","p3","p4","v","transform2d","s","params","t"],"mappings":"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","sourcesContent":["/* eslint-disable prefer-destructuring */\nimport type { Vector } from \"./Vectors\";\n\nexport type Vec3 = readonly [number, number, number];\n\nexport type Matrix3 = readonly [Vec3, Vec3, Vec3];\n\nexport interface TransformProp {\n  transform: Transforms2d;\n}\n\ntype Transformations = {\n  translateX: number;\n  translateY: number;\n  scale: number;\n  skewX: string;\n  skewY: string;\n  scaleX: number;\n  scaleY: number;\n  rotateZ: string;\n  rotate: string;\n};\n\nexport type Transforms2d = (\n  | Pick<Transformations, \"translateX\">\n  | Pick<Transformations, \"translateY\">\n  | Pick<Transformations, \"scale\">\n  | Pick<Transformations, \"scaleX\">\n  | Pick<Transformations, \"scaleY\">\n  | Pick<Transformations, \"skewX\">\n  | Pick<Transformations, \"skewY\">\n  | Pick<Transformations, \"rotate\">\n  | Pick<Transformations, \"rotateZ\">\n)[];\n\nexport const parseAngle = (angle: string) => {\n  \"worklet\";\n  if (angle.endsWith(\"deg\")) {\n    return parseFloat(angle) * (Math.PI / 180);\n  }\n  return parseFloat(angle);\n};\n\nexport const isTranslateX = (\n  transform: Transforms2d[0]\n): transform is Pick<Transformations, \"translateX\"> => {\n  \"worklet\";\n  return Object.keys(transform).indexOf(\"translateX\") !== -1;\n};\n\nexport const isTranslateY = (\n  transform: Transforms2d[0]\n): transform is Pick<Transformations, \"translateY\"> => {\n  \"worklet\";\n  return Object.keys(transform).indexOf(\"translateY\") !== -1;\n};\n\nexport const isScale = (\n  transform: Transforms2d[0]\n): transform is Pick<Transformations, \"scale\"> => {\n  \"worklet\";\n  return Object.keys(transform).indexOf(\"scale\") !== -1;\n};\n\nexport const isScaleX = (\n  transform: Transforms2d[0]\n): transform is Pick<Transformations, \"scaleX\"> => {\n  \"worklet\";\n  return Object.keys(transform).indexOf(\"scaleX\") !== -1;\n};\n\nexport const isScaleY = (\n  transform: Transforms2d[0]\n): transform is Pick<Transformations, \"scaleY\"> => {\n  \"worklet\";\n  return Object.keys(transform).indexOf(\"scaleY\") !== -1;\n};\n\nexport const isSkewX = (\n  transform: Transforms2d[0]\n): transform is Pick<Transformations, \"skewX\"> => {\n  \"worklet\";\n  return Object.keys(transform).indexOf(\"skewX\") !== -1;\n};\n\nexport const isSkewY = (\n  transform: Transforms2d[0]\n): transform is Pick<Transformations, \"skewY\"> => {\n  \"worklet\";\n  return Object.keys(transform).indexOf(\"skewY\") !== -1;\n};\n\nexport const isRotate = (\n  transform: Transforms2d[0]\n): transform is Pick<Transformations, \"rotate\"> => {\n  \"worklet\";\n  return Object.keys(transform).indexOf(\"rotate\") !== -1;\n};\n\nexport const isRotateZ = (\n  transform: Transforms2d[0]\n): transform is Pick<Transformations, \"rotateZ\"> => {\n  \"worklet\";\n  return Object.keys(transform).indexOf(\"rotateZ\") !== -1;\n};\n\nconst exhaustiveCheck = (a: never): never => {\n  \"worklet\";\n  throw new Error(`Unexhaustive handling for ${a}`);\n};\n\nconst identityMatrix: Matrix3 = [\n  [1, 0, 0],\n  [0, 1, 0],\n  [0, 0, 1],\n];\n\nconst translateXMatrix = (x: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [1, 0, x],\n    [0, 1, 0],\n    [0, 0, 1],\n  ];\n};\n\nconst translateYMatrix = (y: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [1, 0, 0],\n    [0, 1, y],\n    [0, 0, 1],\n  ];\n};\n\nconst scaleMatrix = (s: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [s, 0, 0],\n    [0, s, 0],\n    [0, 0, 1],\n  ];\n};\n\nconst scaleXMatrix = (s: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [s, 0, 0],\n    [0, 1, 0],\n    [0, 0, 1],\n  ];\n};\n\nconst scaleYMatrix = (s: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [1, 0, 0],\n    [0, s, 0],\n    [0, 0, 1],\n  ];\n};\n\nconst skewXMatrix = (s: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [1, Math.tan(s), 0],\n    [0, 1, 0],\n    [0, 0, 1],\n  ];\n};\n\nconst skewYMatrix = (s: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [1, 0, 0],\n    [Math.tan(s), 1, 0],\n    [0, 0, 1],\n  ];\n};\n\nconst rotateZMatrix = (r: number): Matrix3 => {\n  \"worklet\";\n  return [\n    [Math.cos(r), -1 * Math.sin(r), 0],\n    [Math.sin(r), Math.cos(r), 0],\n    [0, 0, 1],\n  ];\n};\n\nexport const dot3 = (row: Vec3, col: Vec3) => {\n  \"worklet\";\n  return row[0] * col[0] + row[1] * col[1] + row[2] * col[2];\n};\n\nexport const matrixVecMul3 = (m: Matrix3, v: Vec3) => {\n  \"worklet\";\n  return [dot3(m[0], v), dot3(m[1], v), dot3(m[2], v)] as const;\n};\n\nexport const multiply3 = (m1: Matrix3, m2: Matrix3) => {\n  \"worklet\";\n  const col0 = [m2[0][0], m2[1][0], m2[2][0]] as const;\n  const col1 = [m2[0][1], m2[1][1], m2[2][1]] as const;\n  const col2 = [m2[0][2], m2[1][2], m2[2][2]] as const;\n  return [\n    [dot3(m1[0], col0), dot3(m1[0], col1), dot3(m1[0], col2)],\n    [dot3(m1[1], col0), dot3(m1[1], col1), dot3(m1[1], col2)],\n    [dot3(m1[2], col0), dot3(m1[2], col1), dot3(m1[2], col2)],\n  ] as const;\n};\n\nconst serializeToSVGMatrix = (m: Matrix3) => {\n  \"worklet\";\n  return `matrix(${m[0][0]}, ${m[1][0]}, ${m[0][1]}, ${m[1][1]}, ${m[0][2]}, ${m[1][2]})`;\n};\n\nexport const svgMatrix = (transforms: Transforms2d) => {\n  \"worklet\";\n  return serializeToSVGMatrix(processTransform2d(transforms));\n};\n\nexport const processTransform2d = (transforms: Transforms2d) => {\n  \"worklet\";\n  return transforms.reduce((acc, transform) => {\n    if (isTranslateX(transform)) {\n      return multiply3(acc, translateXMatrix(transform.translateX));\n    }\n    if (isTranslateY(transform)) {\n      return multiply3(acc, translateYMatrix(transform.translateY));\n    }\n    if (isScale(transform)) {\n      return multiply3(acc, scaleMatrix(transform.scale));\n    }\n    if (isScaleX(transform)) {\n      return multiply3(acc, scaleXMatrix(transform.scaleX));\n    }\n    if (isScaleY(transform)) {\n      return multiply3(acc, scaleYMatrix(transform.scaleY));\n    }\n    if (isSkewX(transform)) {\n      return multiply3(acc, skewXMatrix(parseAngle(transform.skewX)));\n    }\n    if (isSkewY(transform)) {\n      return multiply3(acc, skewYMatrix(parseAngle(transform.skewY)));\n    }\n    if (isRotate(transform)) {\n      return multiply3(acc, rotateZMatrix(parseAngle(transform.rotate)));\n    }\n    if (isRotateZ(transform)) {\n      return multiply3(acc, rotateZMatrix(parseAngle(transform.rotateZ)));\n    }\n    return exhaustiveCheck(transform);\n  }, identityMatrix);\n};\n\nconst isMatrix3 = (arg: Matrix3 | Transforms2d): arg is Matrix3 => {\n  \"worklet\";\n  return arg.length === 3 && arg[0] instanceof Array;\n};\n\n// https://math.stackexchange.com/questions/13150/extracting-rotation-scale-values-from-2d-transformation-matrix\nexport const decompose2d = (arg: Matrix3 | Transforms2d) => {\n  \"worklet\";\n  const m = isMatrix3(arg) ? arg : processTransform2d(arg);\n  const a = m[0][0];\n  const b = m[1][0];\n  const c = m[0][1];\n  const d = m[1][1];\n  const translateX = m[0][2];\n  const translateY = m[1][2];\n  const E = (a + d) / 2;\n  const F = (a - d) / 2;\n  const G = (c + b) / 2;\n  const H = (c - b) / 2;\n  const Q = Math.sqrt(Math.pow(E, 2) + Math.pow(H, 2));\n  const R = Math.sqrt(Math.pow(F, 2) + Math.pow(G, 2));\n  const scaleX = Q + R;\n  const scaleY = Q - R;\n  const a1 = Math.atan2(G, F);\n  const a2 = Math.atan2(H, E);\n  const theta = (a2 - a1) / 2;\n  const phi = (a2 + a1) / 2;\n  return [\n    { translateX },\n    { translateY },\n    { rotateZ: -1 * theta },\n    { scaleX },\n    { scaleY },\n    { rotateZ: -1 * phi },\n  ] as const;\n};\n\nconst adjugate = (m: Matrix3) => {\n  \"worklet\";\n  return [\n    [\n      m[1][1] * m[2][2] - m[1][2] * [2][1],\n      m[0][2] * [2][1] - m[0][1] * [2][2],\n      m[0][1] * [1][2] - m[0][2] * [1][1],\n    ],\n    [\n      m[1][2] * [2][0] - m[1][0] * [2][2],\n      m[0][0] * [2][2] - m[0][2] * [2][0],\n      m[0][2] * [1][0] - m[0][0] * [1][2],\n    ],\n    [\n      m[1][0] * [2][1] - m[1][1] * [2][0],\n      m[0][1] * [2][0] - m[0][0] * [2][1],\n      m[0][0] * [1][1] - m[0][1] * [1][0],\n    ],\n  ] as const;\n};\n\ninterface Quadrilateral {\n  p1: Vector;\n  p2: Vector;\n  p3: Vector;\n  p4: Vector;\n}\n\ninterface Parameters {\n  canvas: Quadrilateral;\n  projected: Quadrilateral;\n}\n\nconst basisToPoints = ({ p1, p2, p3, p4 }: Quadrilateral) => {\n  \"worklet\";\n  const m = [\n    [p1.x, p2.x, p3.x],\n    [p1.y, p2.y, p3.y],\n    [1, 1, 1],\n  ] as const;\n  const v = matrixVecMul3(adjugate(m), [p4.x, p4.y, 1]);\n  return multiply3(m, [\n    [v[0], 0, 0],\n    [0, v[1], 0],\n    [0, 0, v[2]],\n  ]);\n};\n\n// https://math.stackexchange.com/questions/296794/finding-the-transform-matrix-from-4-projected-points-with-javascript\n// https://franklinta.com/2014/09/08/computing-css-matrix3d-transforms/\n// http://jsfiddle.net/dFrHS/1/\nexport const transform2d = (params: Parameters) => {\n  \"worklet\";\n  const s = basisToPoints(params.canvas);\n  const d = basisToPoints(params.projected);\n  const t = multiply3(d, adjugate(s));\n  return [\n    [t[0][0] / t[2][2], t[0][1] / t[2][2], t[0][2] / t[2][2]],\n    [t[1][0] / t[2][2], t[1][1] / t[2][2], t[1][2] / t[2][2]],\n    [t[2][0] / t[2][2], t[2][1] / t[2][2], 1],\n  ] as const;\n};\n"]},"metadata":{},"sourceType":"module"}