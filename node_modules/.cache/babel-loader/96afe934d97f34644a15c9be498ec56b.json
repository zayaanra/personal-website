{"ast":null,"code":"import { useEvent, useHandler } from './Hooks';\nexport function useAnimatedScrollHandler(handlers, dependencies) {\n  // case when handlers is a function\n  const scrollHandlers = typeof handlers === 'function' ? {\n    onScroll: handlers\n  } : handlers;\n  const {\n    context,\n    doDependenciesDiffer\n  } = useHandler(scrollHandlers, dependencies); // build event subscription array\n\n  const subscribeForEvents = ['onScroll'];\n\n  if (scrollHandlers.onBeginDrag !== undefined) {\n    subscribeForEvents.push('onScrollBeginDrag');\n  }\n\n  if (scrollHandlers.onEndDrag !== undefined) {\n    subscribeForEvents.push('onScrollEndDrag');\n  }\n\n  if (scrollHandlers.onMomentumBegin !== undefined) {\n    subscribeForEvents.push('onMomentumScrollBegin');\n  }\n\n  if (scrollHandlers.onMomentumEnd !== undefined) {\n    subscribeForEvents.push('onMomentumScrollEnd');\n  }\n\n  return useEvent(event => {\n    'worklet';\n\n    const {\n      onScroll,\n      onBeginDrag,\n      onEndDrag,\n      onMomentumBegin,\n      onMomentumEnd\n    } = scrollHandlers;\n\n    if (onScroll && event.eventName.endsWith('onScroll')) {\n      onScroll(event, context);\n    } else if (onBeginDrag && event.eventName.endsWith('onScrollBeginDrag')) {\n      onBeginDrag(event, context);\n    } else if (onEndDrag && event.eventName.endsWith('onScrollEndDrag')) {\n      onEndDrag(event, context);\n    } else if (onMomentumBegin && event.eventName.endsWith('onMomentumScrollBegin')) {\n      onMomentumBegin(event, context);\n    } else if (onMomentumEnd && event.eventName.endsWith('onMomentumScrollEnd')) {\n      onMomentumEnd(event, context);\n    }\n  }, subscribeForEvents, doDependenciesDiffer);\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedScrollHandler.js"],"names":["useEvent","useHandler","useAnimatedScrollHandler","handlers","dependencies","scrollHandlers","onScroll","context","doDependenciesDiffer","subscribeForEvents","onBeginDrag","undefined","push","onEndDrag","onMomentumBegin","onMomentumEnd","event","eventName","endsWith"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,UAAnB,QAAqC,SAArC;AACA,OAAO,SAASC,wBAAT,CAAkCC,QAAlC,EAA4CC,YAA5C,EAA0D;AAC7D;AACA,QAAMC,cAAc,GAAG,OAAOF,QAAP,KAAoB,UAApB,GAAiC;AAAEG,IAAAA,QAAQ,EAAEH;AAAZ,GAAjC,GAA0DA,QAAjF;AACA,QAAM;AAAEI,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoCP,UAAU,CAACI,cAAD,EAAiBD,YAAjB,CAApD,CAH6D,CAI7D;;AACA,QAAMK,kBAAkB,GAAG,CAAC,UAAD,CAA3B;;AACA,MAAIJ,cAAc,CAACK,WAAf,KAA+BC,SAAnC,EAA8C;AAC1CF,IAAAA,kBAAkB,CAACG,IAAnB,CAAwB,mBAAxB;AACH;;AACD,MAAIP,cAAc,CAACQ,SAAf,KAA6BF,SAAjC,EAA4C;AACxCF,IAAAA,kBAAkB,CAACG,IAAnB,CAAwB,iBAAxB;AACH;;AACD,MAAIP,cAAc,CAACS,eAAf,KAAmCH,SAAvC,EAAkD;AAC9CF,IAAAA,kBAAkB,CAACG,IAAnB,CAAwB,uBAAxB;AACH;;AACD,MAAIP,cAAc,CAACU,aAAf,KAAiCJ,SAArC,EAAgD;AAC5CF,IAAAA,kBAAkB,CAACG,IAAnB,CAAwB,qBAAxB;AACH;;AACD,SAAOZ,QAAQ,CAAEgB,KAAD,IAAW;AACvB;;AACA,UAAM;AAAEV,MAAAA,QAAF;AAAYI,MAAAA,WAAZ;AAAyBG,MAAAA,SAAzB;AAAoCC,MAAAA,eAApC;AAAqDC,MAAAA;AAArD,QAAwEV,cAA9E;;AACA,QAAIC,QAAQ,IAAIU,KAAK,CAACC,SAAN,CAAgBC,QAAhB,CAAyB,UAAzB,CAAhB,EAAsD;AAClDZ,MAAAA,QAAQ,CAACU,KAAD,EAAQT,OAAR,CAAR;AACH,KAFD,MAGK,IAAIG,WAAW,IAAIM,KAAK,CAACC,SAAN,CAAgBC,QAAhB,CAAyB,mBAAzB,CAAnB,EAAkE;AACnER,MAAAA,WAAW,CAACM,KAAD,EAAQT,OAAR,CAAX;AACH,KAFI,MAGA,IAAIM,SAAS,IAAIG,KAAK,CAACC,SAAN,CAAgBC,QAAhB,CAAyB,iBAAzB,CAAjB,EAA8D;AAC/DL,MAAAA,SAAS,CAACG,KAAD,EAAQT,OAAR,CAAT;AACH,KAFI,MAGA,IAAIO,eAAe,IACpBE,KAAK,CAACC,SAAN,CAAgBC,QAAhB,CAAyB,uBAAzB,CADC,EACkD;AACnDJ,MAAAA,eAAe,CAACE,KAAD,EAAQT,OAAR,CAAf;AACH,KAHI,MAIA,IAAIQ,aAAa,IAClBC,KAAK,CAACC,SAAN,CAAgBC,QAAhB,CAAyB,qBAAzB,CADC,EACgD;AACjDH,MAAAA,aAAa,CAACC,KAAD,EAAQT,OAAR,CAAb;AACH;AACJ,GApBc,EAoBZE,kBApBY,EAoBQD,oBApBR,CAAf;AAqBH","sourcesContent":["import { useEvent, useHandler } from './Hooks';\nexport function useAnimatedScrollHandler(handlers, dependencies) {\n    // case when handlers is a function\n    const scrollHandlers = typeof handlers === 'function' ? { onScroll: handlers } : handlers;\n    const { context, doDependenciesDiffer } = useHandler(scrollHandlers, dependencies);\n    // build event subscription array\n    const subscribeForEvents = ['onScroll'];\n    if (scrollHandlers.onBeginDrag !== undefined) {\n        subscribeForEvents.push('onScrollBeginDrag');\n    }\n    if (scrollHandlers.onEndDrag !== undefined) {\n        subscribeForEvents.push('onScrollEndDrag');\n    }\n    if (scrollHandlers.onMomentumBegin !== undefined) {\n        subscribeForEvents.push('onMomentumScrollBegin');\n    }\n    if (scrollHandlers.onMomentumEnd !== undefined) {\n        subscribeForEvents.push('onMomentumScrollEnd');\n    }\n    return useEvent((event) => {\n        'worklet';\n        const { onScroll, onBeginDrag, onEndDrag, onMomentumBegin, onMomentumEnd, } = scrollHandlers;\n        if (onScroll && event.eventName.endsWith('onScroll')) {\n            onScroll(event, context);\n        }\n        else if (onBeginDrag && event.eventName.endsWith('onScrollBeginDrag')) {\n            onBeginDrag(event, context);\n        }\n        else if (onEndDrag && event.eventName.endsWith('onScrollEndDrag')) {\n            onEndDrag(event, context);\n        }\n        else if (onMomentumBegin &&\n            event.eventName.endsWith('onMomentumScrollBegin')) {\n            onMomentumBegin(event, context);\n        }\n        else if (onMomentumEnd &&\n            event.eventName.endsWith('onMomentumScrollEnd')) {\n            onMomentumEnd(event, context);\n        }\n    }, subscribeForEvents, doDependenciesDiffer);\n}\n"]},"metadata":{},"sourceType":"module"}