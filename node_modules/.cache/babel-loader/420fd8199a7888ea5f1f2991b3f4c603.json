{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = splitExportDeclaration;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  cloneNode,\n  exportNamedDeclaration,\n  exportSpecifier,\n  identifier,\n  variableDeclaration,\n  variableDeclarator\n} = _t;\n\nfunction splitExportDeclaration(exportDeclaration) {\n  if (!exportDeclaration.isExportDeclaration()) {\n    throw new Error(\"Only export declarations can be split.\");\n  }\n\n  const isDefault = exportDeclaration.isExportDefaultDeclaration();\n  const declaration = exportDeclaration.get(\"declaration\");\n  const isClassDeclaration = declaration.isClassDeclaration();\n\n  if (isDefault) {\n    const standaloneDeclaration = declaration.isFunctionDeclaration() || isClassDeclaration;\n    const scope = declaration.isScope() ? declaration.scope.parent : declaration.scope;\n    let id = declaration.node.id;\n    let needBindingRegistration = false;\n\n    if (!id) {\n      needBindingRegistration = true;\n      id = scope.generateUidIdentifier(\"default\");\n\n      if (standaloneDeclaration || declaration.isFunctionExpression() || declaration.isClassExpression()) {\n        declaration.node.id = cloneNode(id);\n      }\n    }\n\n    const updatedDeclaration = standaloneDeclaration ? declaration : variableDeclaration(\"var\", [variableDeclarator(cloneNode(id), declaration.node)]);\n    const updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier(\"default\"))]);\n    exportDeclaration.insertAfter(updatedExportDeclaration);\n    exportDeclaration.replaceWith(updatedDeclaration);\n\n    if (needBindingRegistration) {\n      scope.registerDeclaration(exportDeclaration);\n    }\n\n    return exportDeclaration;\n  }\n\n  if (exportDeclaration.get(\"specifiers\").length > 0) {\n    throw new Error(\"It doesn't make sense to split exported specifiers.\");\n  }\n\n  const bindingIdentifiers = declaration.getOuterBindingIdentifiers();\n  const specifiers = Object.keys(bindingIdentifiers).map(name => {\n    return exportSpecifier(identifier(name), identifier(name));\n  });\n  const aliasDeclar = exportNamedDeclaration(null, specifiers);\n  exportDeclaration.insertAfter(aliasDeclar);\n  exportDeclaration.replaceWith(declaration.node);\n  return exportDeclaration;\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/@babel/helper-split-export-declaration/lib/index.js"],"names":["Object","defineProperty","exports","value","default","splitExportDeclaration","_t","require","cloneNode","exportNamedDeclaration","exportSpecifier","identifier","variableDeclaration","variableDeclarator","exportDeclaration","isExportDeclaration","Error","isDefault","isExportDefaultDeclaration","declaration","get","isClassDeclaration","standaloneDeclaration","isFunctionDeclaration","scope","isScope","parent","id","node","needBindingRegistration","generateUidIdentifier","isFunctionExpression","isClassExpression","updatedDeclaration","updatedExportDeclaration","insertAfter","replaceWith","registerDeclaration","length","bindingIdentifiers","getOuterBindingIdentifiers","specifiers","keys","map","name","aliasDeclar"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = splitExportDeclaration;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  cloneNode,\n  exportNamedDeclaration,\n  exportSpecifier,\n  identifier,\n  variableDeclaration,\n  variableDeclarator\n} = _t;\n\nfunction splitExportDeclaration(exportDeclaration) {\n  if (!exportDeclaration.isExportDeclaration()) {\n    throw new Error(\"Only export declarations can be split.\");\n  }\n\n  const isDefault = exportDeclaration.isExportDefaultDeclaration();\n  const declaration = exportDeclaration.get(\"declaration\");\n  const isClassDeclaration = declaration.isClassDeclaration();\n\n  if (isDefault) {\n    const standaloneDeclaration = declaration.isFunctionDeclaration() || isClassDeclaration;\n    const scope = declaration.isScope() ? declaration.scope.parent : declaration.scope;\n    let id = declaration.node.id;\n    let needBindingRegistration = false;\n\n    if (!id) {\n      needBindingRegistration = true;\n      id = scope.generateUidIdentifier(\"default\");\n\n      if (standaloneDeclaration || declaration.isFunctionExpression() || declaration.isClassExpression()) {\n        declaration.node.id = cloneNode(id);\n      }\n    }\n\n    const updatedDeclaration = standaloneDeclaration ? declaration : variableDeclaration(\"var\", [variableDeclarator(cloneNode(id), declaration.node)]);\n    const updatedExportDeclaration = exportNamedDeclaration(null, [exportSpecifier(cloneNode(id), identifier(\"default\"))]);\n    exportDeclaration.insertAfter(updatedExportDeclaration);\n    exportDeclaration.replaceWith(updatedDeclaration);\n\n    if (needBindingRegistration) {\n      scope.registerDeclaration(exportDeclaration);\n    }\n\n    return exportDeclaration;\n  }\n\n  if (exportDeclaration.get(\"specifiers\").length > 0) {\n    throw new Error(\"It doesn't make sense to split exported specifiers.\");\n  }\n\n  const bindingIdentifiers = declaration.getOuterBindingIdentifiers();\n  const specifiers = Object.keys(bindingIdentifiers).map(name => {\n    return exportSpecifier(identifier(name), identifier(name));\n  });\n  const aliasDeclar = exportNamedDeclaration(null, specifiers);\n  exportDeclaration.insertAfter(aliasDeclar);\n  exportDeclaration.replaceWith(declaration.node);\n  return exportDeclaration;\n}"]},"metadata":{},"sourceType":"script"}