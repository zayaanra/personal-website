{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _gensync() {\n  const data = require(\"gensync\");\n\n  _gensync = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _async = require(\"../gensync-utils/async\");\n\nvar _util = require(\"./util\");\n\nvar context = require(\"../index\");\n\nvar _plugin = require(\"./plugin\");\n\nvar _item = require(\"./item\");\n\nvar _configChain = require(\"./config-chain\");\n\nfunction _traverse() {\n  const data = require(\"@babel/traverse\");\n\n  _traverse = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _caching = require(\"./caching\");\n\nvar _options = require(\"./validation/options\");\n\nvar _plugins = require(\"./validation/plugins\");\n\nvar _configApi = require(\"./helpers/config-api\");\n\nvar _partial = require(\"./partial\");\n\nvar Context = require(\"./cache-contexts\");\n\nvar _default = _gensync()(function* loadFullConfig(inputOpts) {\n  var _opts$assumptions;\n\n  const result = yield* (0, _partial.default)(inputOpts);\n\n  if (!result) {\n    return null;\n  }\n\n  const {\n    options,\n    context,\n    fileHandling\n  } = result;\n\n  if (fileHandling === \"ignored\") {\n    return null;\n  }\n\n  const optionDefaults = {};\n  const {\n    plugins,\n    presets\n  } = options;\n\n  if (!plugins || !presets) {\n    throw new Error(\"Assertion failure - plugins and presets exist\");\n  }\n\n  const presetContext = Object.assign({}, context, {\n    targets: options.targets\n  });\n\n  const toDescriptor = item => {\n    const desc = (0, _item.getItemDescriptor)(item);\n\n    if (!desc) {\n      throw new Error(\"Assertion failure - must be config item\");\n    }\n\n    return desc;\n  };\n\n  const presetsDescriptors = presets.map(toDescriptor);\n  const initialPluginsDescriptors = plugins.map(toDescriptor);\n  const pluginDescriptorsByPass = [[]];\n  const passes = [];\n  const ignored = yield* enhanceError(context, function* recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {\n    const presets = [];\n\n    for (let i = 0; i < rawPresets.length; i++) {\n      const descriptor = rawPresets[i];\n\n      if (descriptor.options !== false) {\n        try {\n          if (descriptor.ownPass) {\n            presets.push({\n              preset: yield* loadPresetDescriptor(descriptor, presetContext),\n              pass: []\n            });\n          } else {\n            presets.unshift({\n              preset: yield* loadPresetDescriptor(descriptor, presetContext),\n              pass: pluginDescriptorsPass\n            });\n          }\n        } catch (e) {\n          if (e.code === \"BABEL_UNKNOWN_OPTION\") {\n            (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i, \"preset\", e);\n          }\n\n          throw e;\n        }\n      }\n    }\n\n    if (presets.length > 0) {\n      pluginDescriptorsByPass.splice(1, 0, ...presets.map(o => o.pass).filter(p => p !== pluginDescriptorsPass));\n\n      for (const {\n        preset,\n        pass\n      } of presets) {\n        if (!preset) return true;\n        pass.push(...preset.plugins);\n        const ignored = yield* recursePresetDescriptors(preset.presets, pass);\n        if (ignored) return true;\n        preset.options.forEach(opts => {\n          (0, _util.mergeOptions)(optionDefaults, opts);\n        });\n      }\n    }\n  })(presetsDescriptors, pluginDescriptorsByPass[0]);\n  if (ignored) return null;\n  const opts = optionDefaults;\n  (0, _util.mergeOptions)(opts, options);\n  const pluginContext = Object.assign({}, presetContext, {\n    assumptions: (_opts$assumptions = opts.assumptions) != null ? _opts$assumptions : {}\n  });\n  yield* enhanceError(context, function* loadPluginDescriptors() {\n    pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);\n\n    for (const descs of pluginDescriptorsByPass) {\n      const pass = [];\n      passes.push(pass);\n\n      for (let i = 0; i < descs.length; i++) {\n        const descriptor = descs[i];\n\n        if (descriptor.options !== false) {\n          try {\n            pass.push(yield* loadPluginDescriptor(descriptor, pluginContext));\n          } catch (e) {\n            if (e.code === \"BABEL_UNKNOWN_PLUGIN_PROPERTY\") {\n              (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i, \"plugin\", e);\n            }\n\n            throw e;\n          }\n        }\n      }\n    }\n  })();\n  opts.plugins = passes[0];\n  opts.presets = passes.slice(1).filter(plugins => plugins.length > 0).map(plugins => ({\n    plugins\n  }));\n  opts.passPerPreset = opts.presets.length > 0;\n  return {\n    options: opts,\n    passes: passes\n  };\n});\n\nexports.default = _default;\n\nfunction enhanceError(context, fn) {\n  return function* (arg1, arg2) {\n    try {\n      return yield* fn(arg1, arg2);\n    } catch (e) {\n      if (!/^\\[BABEL\\]/.test(e.message)) {\n        e.message = `[BABEL] ${context.filename || \"unknown\"}: ${e.message}`;\n      }\n\n      throw e;\n    }\n  };\n}\n\nconst makeDescriptorLoader = apiFactory => (0, _caching.makeWeakCache)(function* (_ref, cache) {\n  let {\n    value,\n    options,\n    dirname,\n    alias\n  } = _ref;\n  if (options === false) throw new Error(\"Assertion failure\");\n  options = options || {};\n  let item = value;\n\n  if (typeof value === \"function\") {\n    const factory = (0, _async.maybeAsync)(value, `You appear to be using an async plugin/preset, but Babel has been called synchronously`);\n    const api = Object.assign({}, context, apiFactory(cache));\n\n    try {\n      item = yield* factory(api, options, dirname);\n    } catch (e) {\n      if (alias) {\n        e.message += ` (While processing: ${JSON.stringify(alias)})`;\n      }\n\n      throw e;\n    }\n  }\n\n  if (!item || typeof item !== \"object\") {\n    throw new Error(\"Plugin/Preset did not return an object.\");\n  }\n\n  if ((0, _async.isThenable)(item)) {\n    yield* [];\n    throw new Error(`You appear to be using a promise as a plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, ` + `you may need to upgrade your @babel/core version. ` + `As an alternative, you can prefix the promise with \"await\". ` + `(While processing: ${JSON.stringify(alias)})`);\n  }\n\n  return {\n    value: item,\n    options,\n    dirname,\n    alias\n  };\n});\n\nconst pluginDescriptorLoader = makeDescriptorLoader(_configApi.makePluginAPI);\nconst presetDescriptorLoader = makeDescriptorLoader(_configApi.makePresetAPI);\n\nfunction* loadPluginDescriptor(descriptor, context) {\n  if (descriptor.value instanceof _plugin.default) {\n    if (descriptor.options) {\n      throw new Error(\"Passed options to an existing Plugin instance will not work.\");\n    }\n\n    return descriptor.value;\n  }\n\n  return yield* instantiatePlugin(yield* pluginDescriptorLoader(descriptor, context), context);\n}\n\nconst instantiatePlugin = (0, _caching.makeWeakCache)(function* (_ref2, cache) {\n  let {\n    value,\n    options,\n    dirname,\n    alias\n  } = _ref2;\n  const pluginObj = (0, _plugins.validatePluginObject)(value);\n  const plugin = Object.assign({}, pluginObj);\n\n  if (plugin.visitor) {\n    plugin.visitor = _traverse().default.explode(Object.assign({}, plugin.visitor));\n  }\n\n  if (plugin.inherits) {\n    const inheritsDescriptor = {\n      name: undefined,\n      alias: `${alias}$inherits`,\n      value: plugin.inherits,\n      options,\n      dirname\n    };\n    const inherits = yield* (0, _async.forwardAsync)(loadPluginDescriptor, run => {\n      return cache.invalidate(data => run(inheritsDescriptor, data));\n    });\n    plugin.pre = chain(inherits.pre, plugin.pre);\n    plugin.post = chain(inherits.post, plugin.post);\n    plugin.manipulateOptions = chain(inherits.manipulateOptions, plugin.manipulateOptions);\n    plugin.visitor = _traverse().default.visitors.merge([inherits.visitor || {}, plugin.visitor || {}]);\n  }\n\n  return new _plugin.default(plugin, options, alias);\n});\n\nconst validateIfOptionNeedsFilename = (options, descriptor) => {\n  if (options.test || options.include || options.exclude) {\n    const formattedPresetName = descriptor.name ? `\"${descriptor.name}\"` : \"/* your preset */\";\n    throw new Error([`Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`, `\\`\\`\\``, `babel.transform(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`, `\\`\\`\\``, `See https://babeljs.io/docs/en/options#filename for more information.`].join(\"\\n\"));\n  }\n};\n\nconst validatePreset = (preset, context, descriptor) => {\n  if (!context.filename) {\n    const {\n      options\n    } = preset;\n    validateIfOptionNeedsFilename(options, descriptor);\n\n    if (options.overrides) {\n      options.overrides.forEach(overrideOptions => validateIfOptionNeedsFilename(overrideOptions, descriptor));\n    }\n  }\n};\n\nfunction* loadPresetDescriptor(descriptor, context) {\n  const preset = instantiatePreset(yield* presetDescriptorLoader(descriptor, context));\n  validatePreset(preset, context, descriptor);\n  return yield* (0, _configChain.buildPresetChain)(preset, context);\n}\n\nconst instantiatePreset = (0, _caching.makeWeakCacheSync)(_ref3 => {\n  let {\n    value,\n    dirname,\n    alias\n  } = _ref3;\n  return {\n    options: (0, _options.validate)(\"preset\", value),\n    alias,\n    dirname\n  };\n});\n\nfunction chain(a, b) {\n  const fns = [a, b].filter(Boolean);\n  if (fns.length <= 1) return fns[0];\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    for (const fn of fns) {\n      fn.apply(this, args);\n    }\n  };\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/@babel/core/lib/config/full.js"],"names":["Object","defineProperty","exports","value","default","_gensync","data","require","_async","_util","context","_plugin","_item","_configChain","_traverse","_caching","_options","_plugins","_configApi","_partial","Context","_default","loadFullConfig","inputOpts","_opts$assumptions","result","options","fileHandling","optionDefaults","plugins","presets","Error","presetContext","assign","targets","toDescriptor","item","desc","getItemDescriptor","presetsDescriptors","map","initialPluginsDescriptors","pluginDescriptorsByPass","passes","ignored","enhanceError","recursePresetDescriptors","rawPresets","pluginDescriptorsPass","i","length","descriptor","ownPass","push","preset","loadPresetDescriptor","pass","unshift","e","code","checkNoUnwrappedItemOptionPairs","splice","o","filter","p","forEach","opts","mergeOptions","pluginContext","assumptions","loadPluginDescriptors","descs","loadPluginDescriptor","slice","passPerPreset","fn","arg1","arg2","test","message","filename","makeDescriptorLoader","apiFactory","makeWeakCache","cache","dirname","alias","factory","maybeAsync","api","JSON","stringify","isThenable","pluginDescriptorLoader","makePluginAPI","presetDescriptorLoader","makePresetAPI","instantiatePlugin","pluginObj","validatePluginObject","plugin","visitor","explode","inherits","inheritsDescriptor","name","undefined","forwardAsync","run","invalidate","pre","chain","post","manipulateOptions","visitors","merge","validateIfOptionNeedsFilename","include","exclude","formattedPresetName","join","validatePreset","overrides","overrideOptions","instantiatePreset","buildPresetChain","makeWeakCacheSync","validate","a","b","fns","Boolean","args","apply"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nfunction _gensync() {\n  const data = require(\"gensync\");\n\n  _gensync = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _async = require(\"../gensync-utils/async\");\n\nvar _util = require(\"./util\");\n\nvar context = require(\"../index\");\n\nvar _plugin = require(\"./plugin\");\n\nvar _item = require(\"./item\");\n\nvar _configChain = require(\"./config-chain\");\n\nfunction _traverse() {\n  const data = require(\"@babel/traverse\");\n\n  _traverse = function () {\n    return data;\n  };\n\n  return data;\n}\n\nvar _caching = require(\"./caching\");\n\nvar _options = require(\"./validation/options\");\n\nvar _plugins = require(\"./validation/plugins\");\n\nvar _configApi = require(\"./helpers/config-api\");\n\nvar _partial = require(\"./partial\");\n\nvar Context = require(\"./cache-contexts\");\n\nvar _default = _gensync()(function* loadFullConfig(inputOpts) {\n  var _opts$assumptions;\n\n  const result = yield* (0, _partial.default)(inputOpts);\n\n  if (!result) {\n    return null;\n  }\n\n  const {\n    options,\n    context,\n    fileHandling\n  } = result;\n\n  if (fileHandling === \"ignored\") {\n    return null;\n  }\n\n  const optionDefaults = {};\n  const {\n    plugins,\n    presets\n  } = options;\n\n  if (!plugins || !presets) {\n    throw new Error(\"Assertion failure - plugins and presets exist\");\n  }\n\n  const presetContext = Object.assign({}, context, {\n    targets: options.targets\n  });\n\n  const toDescriptor = item => {\n    const desc = (0, _item.getItemDescriptor)(item);\n\n    if (!desc) {\n      throw new Error(\"Assertion failure - must be config item\");\n    }\n\n    return desc;\n  };\n\n  const presetsDescriptors = presets.map(toDescriptor);\n  const initialPluginsDescriptors = plugins.map(toDescriptor);\n  const pluginDescriptorsByPass = [[]];\n  const passes = [];\n  const ignored = yield* enhanceError(context, function* recursePresetDescriptors(rawPresets, pluginDescriptorsPass) {\n    const presets = [];\n\n    for (let i = 0; i < rawPresets.length; i++) {\n      const descriptor = rawPresets[i];\n\n      if (descriptor.options !== false) {\n        try {\n          if (descriptor.ownPass) {\n            presets.push({\n              preset: yield* loadPresetDescriptor(descriptor, presetContext),\n              pass: []\n            });\n          } else {\n            presets.unshift({\n              preset: yield* loadPresetDescriptor(descriptor, presetContext),\n              pass: pluginDescriptorsPass\n            });\n          }\n        } catch (e) {\n          if (e.code === \"BABEL_UNKNOWN_OPTION\") {\n            (0, _options.checkNoUnwrappedItemOptionPairs)(rawPresets, i, \"preset\", e);\n          }\n\n          throw e;\n        }\n      }\n    }\n\n    if (presets.length > 0) {\n      pluginDescriptorsByPass.splice(1, 0, ...presets.map(o => o.pass).filter(p => p !== pluginDescriptorsPass));\n\n      for (const {\n        preset,\n        pass\n      } of presets) {\n        if (!preset) return true;\n        pass.push(...preset.plugins);\n        const ignored = yield* recursePresetDescriptors(preset.presets, pass);\n        if (ignored) return true;\n        preset.options.forEach(opts => {\n          (0, _util.mergeOptions)(optionDefaults, opts);\n        });\n      }\n    }\n  })(presetsDescriptors, pluginDescriptorsByPass[0]);\n  if (ignored) return null;\n  const opts = optionDefaults;\n  (0, _util.mergeOptions)(opts, options);\n  const pluginContext = Object.assign({}, presetContext, {\n    assumptions: (_opts$assumptions = opts.assumptions) != null ? _opts$assumptions : {}\n  });\n  yield* enhanceError(context, function* loadPluginDescriptors() {\n    pluginDescriptorsByPass[0].unshift(...initialPluginsDescriptors);\n\n    for (const descs of pluginDescriptorsByPass) {\n      const pass = [];\n      passes.push(pass);\n\n      for (let i = 0; i < descs.length; i++) {\n        const descriptor = descs[i];\n\n        if (descriptor.options !== false) {\n          try {\n            pass.push(yield* loadPluginDescriptor(descriptor, pluginContext));\n          } catch (e) {\n            if (e.code === \"BABEL_UNKNOWN_PLUGIN_PROPERTY\") {\n              (0, _options.checkNoUnwrappedItemOptionPairs)(descs, i, \"plugin\", e);\n            }\n\n            throw e;\n          }\n        }\n      }\n    }\n  })();\n  opts.plugins = passes[0];\n  opts.presets = passes.slice(1).filter(plugins => plugins.length > 0).map(plugins => ({\n    plugins\n  }));\n  opts.passPerPreset = opts.presets.length > 0;\n  return {\n    options: opts,\n    passes: passes\n  };\n});\n\nexports.default = _default;\n\nfunction enhanceError(context, fn) {\n  return function* (arg1, arg2) {\n    try {\n      return yield* fn(arg1, arg2);\n    } catch (e) {\n      if (!/^\\[BABEL\\]/.test(e.message)) {\n        e.message = `[BABEL] ${context.filename || \"unknown\"}: ${e.message}`;\n      }\n\n      throw e;\n    }\n  };\n}\n\nconst makeDescriptorLoader = apiFactory => (0, _caching.makeWeakCache)(function* ({\n  value,\n  options,\n  dirname,\n  alias\n}, cache) {\n  if (options === false) throw new Error(\"Assertion failure\");\n  options = options || {};\n  let item = value;\n\n  if (typeof value === \"function\") {\n    const factory = (0, _async.maybeAsync)(value, `You appear to be using an async plugin/preset, but Babel has been called synchronously`);\n    const api = Object.assign({}, context, apiFactory(cache));\n\n    try {\n      item = yield* factory(api, options, dirname);\n    } catch (e) {\n      if (alias) {\n        e.message += ` (While processing: ${JSON.stringify(alias)})`;\n      }\n\n      throw e;\n    }\n  }\n\n  if (!item || typeof item !== \"object\") {\n    throw new Error(\"Plugin/Preset did not return an object.\");\n  }\n\n  if ((0, _async.isThenable)(item)) {\n    yield* [];\n    throw new Error(`You appear to be using a promise as a plugin, ` + `which your current version of Babel does not support. ` + `If you're using a published plugin, ` + `you may need to upgrade your @babel/core version. ` + `As an alternative, you can prefix the promise with \"await\". ` + `(While processing: ${JSON.stringify(alias)})`);\n  }\n\n  return {\n    value: item,\n    options,\n    dirname,\n    alias\n  };\n});\n\nconst pluginDescriptorLoader = makeDescriptorLoader(_configApi.makePluginAPI);\nconst presetDescriptorLoader = makeDescriptorLoader(_configApi.makePresetAPI);\n\nfunction* loadPluginDescriptor(descriptor, context) {\n  if (descriptor.value instanceof _plugin.default) {\n    if (descriptor.options) {\n      throw new Error(\"Passed options to an existing Plugin instance will not work.\");\n    }\n\n    return descriptor.value;\n  }\n\n  return yield* instantiatePlugin(yield* pluginDescriptorLoader(descriptor, context), context);\n}\n\nconst instantiatePlugin = (0, _caching.makeWeakCache)(function* ({\n  value,\n  options,\n  dirname,\n  alias\n}, cache) {\n  const pluginObj = (0, _plugins.validatePluginObject)(value);\n  const plugin = Object.assign({}, pluginObj);\n\n  if (plugin.visitor) {\n    plugin.visitor = _traverse().default.explode(Object.assign({}, plugin.visitor));\n  }\n\n  if (plugin.inherits) {\n    const inheritsDescriptor = {\n      name: undefined,\n      alias: `${alias}$inherits`,\n      value: plugin.inherits,\n      options,\n      dirname\n    };\n    const inherits = yield* (0, _async.forwardAsync)(loadPluginDescriptor, run => {\n      return cache.invalidate(data => run(inheritsDescriptor, data));\n    });\n    plugin.pre = chain(inherits.pre, plugin.pre);\n    plugin.post = chain(inherits.post, plugin.post);\n    plugin.manipulateOptions = chain(inherits.manipulateOptions, plugin.manipulateOptions);\n    plugin.visitor = _traverse().default.visitors.merge([inherits.visitor || {}, plugin.visitor || {}]);\n  }\n\n  return new _plugin.default(plugin, options, alias);\n});\n\nconst validateIfOptionNeedsFilename = (options, descriptor) => {\n  if (options.test || options.include || options.exclude) {\n    const formattedPresetName = descriptor.name ? `\"${descriptor.name}\"` : \"/* your preset */\";\n    throw new Error([`Preset ${formattedPresetName} requires a filename to be set when babel is called directly,`, `\\`\\`\\``, `babel.transform(code, { filename: 'file.ts', presets: [${formattedPresetName}] });`, `\\`\\`\\``, `See https://babeljs.io/docs/en/options#filename for more information.`].join(\"\\n\"));\n  }\n};\n\nconst validatePreset = (preset, context, descriptor) => {\n  if (!context.filename) {\n    const {\n      options\n    } = preset;\n    validateIfOptionNeedsFilename(options, descriptor);\n\n    if (options.overrides) {\n      options.overrides.forEach(overrideOptions => validateIfOptionNeedsFilename(overrideOptions, descriptor));\n    }\n  }\n};\n\nfunction* loadPresetDescriptor(descriptor, context) {\n  const preset = instantiatePreset(yield* presetDescriptorLoader(descriptor, context));\n  validatePreset(preset, context, descriptor);\n  return yield* (0, _configChain.buildPresetChain)(preset, context);\n}\n\nconst instantiatePreset = (0, _caching.makeWeakCacheSync)(({\n  value,\n  dirname,\n  alias\n}) => {\n  return {\n    options: (0, _options.validate)(\"preset\", value),\n    alias,\n    dirname\n  };\n});\n\nfunction chain(a, b) {\n  const fns = [a, b].filter(Boolean);\n  if (fns.length <= 1) return fns[0];\n  return function (...args) {\n    for (const fn of fns) {\n      fn.apply(this, args);\n    }\n  };\n}"]},"metadata":{},"sourceType":"script"}