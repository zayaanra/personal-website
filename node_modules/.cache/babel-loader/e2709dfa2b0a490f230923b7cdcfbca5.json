{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rewriteLiveReferences;\n\nvar _assert = require(\"assert\");\n\nvar _t = require(\"@babel/types\");\n\nvar _template = require(\"@babel/template\");\n\nvar _helperSimpleAccess = require(\"@babel/helper-simple-access\");\n\nconst {\n  assignmentExpression,\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  getOuterBindingIdentifiers,\n  identifier,\n  isMemberExpression,\n  isVariableDeclaration,\n  jsxIdentifier,\n  jsxMemberExpression,\n  memberExpression,\n  numericLiteral,\n  sequenceExpression,\n  stringLiteral,\n  variableDeclaration,\n  variableDeclarator\n} = _t;\n\nfunction isInType(path) {\n  do {\n    switch (path.parent.type) {\n      case \"TSTypeAnnotation\":\n      case \"TSTypeAliasDeclaration\":\n      case \"TSTypeReference\":\n      case \"TypeAnnotation\":\n      case \"TypeAlias\":\n        return true;\n\n      case \"ExportSpecifier\":\n        return path.parentPath.parent.exportKind === \"type\";\n\n      default:\n        if (path.parentPath.isStatement() || path.parentPath.isExpression()) {\n          return false;\n        }\n\n    }\n  } while (path = path.parentPath);\n}\n\nfunction rewriteLiveReferences(programPath, metadata) {\n  const imported = new Map();\n  const exported = new Map();\n\n  const requeueInParent = path => {\n    programPath.requeue(path);\n  };\n\n  for (const [source, data] of metadata.source) {\n    for (const [localName, importName] of data.imports) {\n      imported.set(localName, [source, importName, null]);\n    }\n\n    for (const localName of data.importsNamespace) {\n      imported.set(localName, [source, null, localName]);\n    }\n  }\n\n  for (const [local, data] of metadata.local) {\n    let exportMeta = exported.get(local);\n\n    if (!exportMeta) {\n      exportMeta = [];\n      exported.set(local, exportMeta);\n    }\n\n    exportMeta.push(...data.names);\n  }\n\n  const rewriteBindingInitVisitorState = {\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    exported\n  };\n  programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);\n  (0, _helperSimpleAccess.default)(programPath, new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]));\n  const rewriteReferencesVisitorState = {\n    seen: new WeakSet(),\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    imported,\n    exported,\n    buildImportReference: (_ref, identNode) => {\n      let [source, importName, localName] = _ref;\n      const meta = metadata.source.get(source);\n\n      if (localName) {\n        if (meta.lazy) identNode = callExpression(identNode, []);\n        return identNode;\n      }\n\n      let namespace = identifier(meta.name);\n      if (meta.lazy) namespace = callExpression(namespace, []);\n\n      if (importName === \"default\" && meta.interop === \"node-default\") {\n        return namespace;\n      }\n\n      const computed = metadata.stringSpecifiers.has(importName);\n      return memberExpression(namespace, computed ? stringLiteral(importName) : identifier(importName), computed);\n    }\n  };\n  programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);\n}\n\nconst rewriteBindingInitVisitor = {\n  Scope(path) {\n    path.skip();\n  },\n\n  ClassDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    const {\n      id\n    } = path.node;\n    if (!id) throw new Error(\"Expected class to have a name\");\n    const localName = id.name;\n    const exportNames = exported.get(localName) || [];\n\n    if (exportNames.length > 0) {\n      const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier(localName)));\n      statement._blockHoist = path.node._blockHoist;\n      requeueInParent(path.insertAfter(statement)[0]);\n    }\n  },\n\n  VariableDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    Object.keys(path.getOuterBindingIdentifiers()).forEach(localName => {\n      const exportNames = exported.get(localName) || [];\n\n      if (exportNames.length > 0) {\n        const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier(localName)));\n        statement._blockHoist = path.node._blockHoist;\n        requeueInParent(path.insertAfter(statement)[0]);\n      }\n    });\n  }\n\n};\n\nconst buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr) => {\n  return (exportNames || []).reduce((expr, exportName) => {\n    const {\n      stringSpecifiers\n    } = metadata;\n    const computed = stringSpecifiers.has(exportName);\n    return assignmentExpression(\"=\", memberExpression(identifier(metadata.exportName), computed ? stringLiteral(exportName) : identifier(exportName), computed), expr);\n  }, localExpr);\n};\n\nconst buildImportThrow = localName => {\n  return _template.default.expression.ast`\n    (function() {\n      throw new Error('\"' + '${localName}' + '\" is read-only.');\n    })()\n  `;\n};\n\nconst rewriteReferencesVisitor = {\n  ReferencedIdentifier(path) {\n    const {\n      seen,\n      buildImportReference,\n      scope,\n      imported,\n      requeueInParent\n    } = this;\n    if (seen.has(path.node)) return;\n    seen.add(path.node);\n    const localName = path.node.name;\n    const importData = imported.get(localName);\n\n    if (importData) {\n      if (isInType(path)) {\n        throw path.buildCodeFrameError(`Cannot transform the imported binding \"${localName}\" since it's also used in a type annotation. ` + `Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);\n      }\n\n      const localBinding = path.scope.getBinding(localName);\n      const rootBinding = scope.getBinding(localName);\n      if (rootBinding !== localBinding) return;\n      const ref = buildImportReference(importData, path.node);\n      ref.loc = path.node.loc;\n\n      if ((path.parentPath.isCallExpression({\n        callee: path.node\n      }) || path.parentPath.isOptionalCallExpression({\n        callee: path.node\n      }) || path.parentPath.isTaggedTemplateExpression({\n        tag: path.node\n      })) && isMemberExpression(ref)) {\n        path.replaceWith(sequenceExpression([numericLiteral(0), ref]));\n      } else if (path.isJSXIdentifier() && isMemberExpression(ref)) {\n        const {\n          object,\n          property\n        } = ref;\n        path.replaceWith(jsxMemberExpression(jsxIdentifier(object.name), jsxIdentifier(property.name)));\n      } else {\n        path.replaceWith(ref);\n      }\n\n      requeueInParent(path);\n      path.skip();\n    }\n  },\n\n  AssignmentExpression: {\n    exit(path) {\n      const {\n        scope,\n        seen,\n        imported,\n        exported,\n        requeueInParent,\n        buildImportReference\n      } = this;\n      if (seen.has(path.node)) return;\n      seen.add(path.node);\n      const left = path.get(\"left\");\n      if (left.isMemberExpression()) return;\n\n      if (left.isIdentifier()) {\n        const localName = left.node.name;\n\n        if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n          return;\n        }\n\n        const exportedNames = exported.get(localName);\n        const importData = imported.get(localName);\n\n        if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {\n          _assert(path.node.operator === \"=\", \"Path was not simplified\");\n\n          const assignment = path.node;\n\n          if (importData) {\n            assignment.left = buildImportReference(importData, assignment.left);\n            assignment.right = sequenceExpression([assignment.right, buildImportThrow(localName)]);\n          }\n\n          path.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment));\n          requeueInParent(path);\n        }\n      } else {\n        const ids = left.getOuterBindingIdentifiers();\n        const programScopeIds = Object.keys(ids).filter(localName => scope.getBinding(localName) === path.scope.getBinding(localName));\n        const id = programScopeIds.find(localName => imported.has(localName));\n\n        if (id) {\n          path.node.right = sequenceExpression([path.node.right, buildImportThrow(id)]);\n        }\n\n        const items = [];\n        programScopeIds.forEach(localName => {\n          const exportedNames = exported.get(localName) || [];\n\n          if (exportedNames.length > 0) {\n            items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier(localName)));\n          }\n        });\n\n        if (items.length > 0) {\n          let node = sequenceExpression(items);\n\n          if (path.parentPath.isExpressionStatement()) {\n            node = expressionStatement(node);\n            node._blockHoist = path.parentPath.node._blockHoist;\n          }\n\n          const statement = path.insertAfter(node)[0];\n          requeueInParent(statement);\n        }\n      }\n    }\n\n  },\n\n  \"ForOfStatement|ForInStatement\"(path) {\n    const {\n      scope,\n      node\n    } = path;\n    const {\n      left\n    } = node;\n    const {\n      exported,\n      imported,\n      scope: programScope\n    } = this;\n\n    if (!isVariableDeclaration(left)) {\n      let didTransformExport = false,\n          importConstViolationName;\n      const loopBodyScope = path.get(\"body\").scope;\n\n      for (const name of Object.keys(getOuterBindingIdentifiers(left))) {\n        if (programScope.getBinding(name) === scope.getBinding(name)) {\n          if (exported.has(name)) {\n            didTransformExport = true;\n\n            if (loopBodyScope.hasOwnBinding(name)) {\n              loopBodyScope.rename(name);\n            }\n          }\n\n          if (imported.has(name) && !importConstViolationName) {\n            importConstViolationName = name;\n          }\n        }\n      }\n\n      if (!didTransformExport && !importConstViolationName) {\n        return;\n      }\n\n      path.ensureBlock();\n      const bodyPath = path.get(\"body\");\n      const newLoopId = scope.generateUidIdentifierBasedOnNode(left);\n      path.get(\"left\").replaceWith(variableDeclaration(\"let\", [variableDeclarator(cloneNode(newLoopId))]));\n      scope.registerDeclaration(path.get(\"left\"));\n\n      if (didTransformExport) {\n        bodyPath.unshiftContainer(\"body\", expressionStatement(assignmentExpression(\"=\", left, newLoopId)));\n      }\n\n      if (importConstViolationName) {\n        bodyPath.unshiftContainer(\"body\", expressionStatement(buildImportThrow(importConstViolationName)));\n      }\n    }\n  }\n\n};","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/@babel/helper-module-transforms/lib/rewrite-live-references.js"],"names":["Object","defineProperty","exports","value","default","rewriteLiveReferences","_assert","require","_t","_template","_helperSimpleAccess","assignmentExpression","callExpression","cloneNode","expressionStatement","getOuterBindingIdentifiers","identifier","isMemberExpression","isVariableDeclaration","jsxIdentifier","jsxMemberExpression","memberExpression","numericLiteral","sequenceExpression","stringLiteral","variableDeclaration","variableDeclarator","isInType","path","parent","type","parentPath","exportKind","isStatement","isExpression","programPath","metadata","imported","Map","exported","requeueInParent","requeue","source","data","localName","importName","imports","set","importsNamespace","local","exportMeta","get","push","names","rewriteBindingInitVisitorState","scope","traverse","rewriteBindingInitVisitor","Set","Array","from","keys","rewriteReferencesVisitorState","seen","WeakSet","buildImportReference","identNode","meta","lazy","namespace","name","interop","computed","stringSpecifiers","has","rewriteReferencesVisitor","Scope","skip","ClassDeclaration","id","node","Error","exportNames","length","statement","buildBindingExportAssignmentExpression","_blockHoist","insertAfter","VariableDeclaration","forEach","localExpr","reduce","expr","exportName","buildImportThrow","expression","ast","ReferencedIdentifier","add","importData","buildCodeFrameError","localBinding","getBinding","rootBinding","ref","loc","isCallExpression","callee","isOptionalCallExpression","isTaggedTemplateExpression","tag","replaceWith","isJSXIdentifier","object","property","AssignmentExpression","exit","left","isIdentifier","exportedNames","operator","assignment","right","ids","programScopeIds","filter","find","items","isExpressionStatement","programScope","didTransformExport","importConstViolationName","loopBodyScope","hasOwnBinding","rename","ensureBlock","bodyPath","newLoopId","generateUidIdentifierBasedOnNode","registerDeclaration","unshiftContainer"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = rewriteLiveReferences;\n\nvar _assert = require(\"assert\");\n\nvar _t = require(\"@babel/types\");\n\nvar _template = require(\"@babel/template\");\n\nvar _helperSimpleAccess = require(\"@babel/helper-simple-access\");\n\nconst {\n  assignmentExpression,\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  getOuterBindingIdentifiers,\n  identifier,\n  isMemberExpression,\n  isVariableDeclaration,\n  jsxIdentifier,\n  jsxMemberExpression,\n  memberExpression,\n  numericLiteral,\n  sequenceExpression,\n  stringLiteral,\n  variableDeclaration,\n  variableDeclarator\n} = _t;\n\nfunction isInType(path) {\n  do {\n    switch (path.parent.type) {\n      case \"TSTypeAnnotation\":\n      case \"TSTypeAliasDeclaration\":\n      case \"TSTypeReference\":\n      case \"TypeAnnotation\":\n      case \"TypeAlias\":\n        return true;\n\n      case \"ExportSpecifier\":\n        return path.parentPath.parent.exportKind === \"type\";\n\n      default:\n        if (path.parentPath.isStatement() || path.parentPath.isExpression()) {\n          return false;\n        }\n\n    }\n  } while (path = path.parentPath);\n}\n\nfunction rewriteLiveReferences(programPath, metadata) {\n  const imported = new Map();\n  const exported = new Map();\n\n  const requeueInParent = path => {\n    programPath.requeue(path);\n  };\n\n  for (const [source, data] of metadata.source) {\n    for (const [localName, importName] of data.imports) {\n      imported.set(localName, [source, importName, null]);\n    }\n\n    for (const localName of data.importsNamespace) {\n      imported.set(localName, [source, null, localName]);\n    }\n  }\n\n  for (const [local, data] of metadata.local) {\n    let exportMeta = exported.get(local);\n\n    if (!exportMeta) {\n      exportMeta = [];\n      exported.set(local, exportMeta);\n    }\n\n    exportMeta.push(...data.names);\n  }\n\n  const rewriteBindingInitVisitorState = {\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    exported\n  };\n  programPath.traverse(rewriteBindingInitVisitor, rewriteBindingInitVisitorState);\n  (0, _helperSimpleAccess.default)(programPath, new Set([...Array.from(imported.keys()), ...Array.from(exported.keys())]));\n  const rewriteReferencesVisitorState = {\n    seen: new WeakSet(),\n    metadata,\n    requeueInParent,\n    scope: programPath.scope,\n    imported,\n    exported,\n    buildImportReference: ([source, importName, localName], identNode) => {\n      const meta = metadata.source.get(source);\n\n      if (localName) {\n        if (meta.lazy) identNode = callExpression(identNode, []);\n        return identNode;\n      }\n\n      let namespace = identifier(meta.name);\n      if (meta.lazy) namespace = callExpression(namespace, []);\n\n      if (importName === \"default\" && meta.interop === \"node-default\") {\n        return namespace;\n      }\n\n      const computed = metadata.stringSpecifiers.has(importName);\n      return memberExpression(namespace, computed ? stringLiteral(importName) : identifier(importName), computed);\n    }\n  };\n  programPath.traverse(rewriteReferencesVisitor, rewriteReferencesVisitorState);\n}\n\nconst rewriteBindingInitVisitor = {\n  Scope(path) {\n    path.skip();\n  },\n\n  ClassDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    const {\n      id\n    } = path.node;\n    if (!id) throw new Error(\"Expected class to have a name\");\n    const localName = id.name;\n    const exportNames = exported.get(localName) || [];\n\n    if (exportNames.length > 0) {\n      const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier(localName)));\n      statement._blockHoist = path.node._blockHoist;\n      requeueInParent(path.insertAfter(statement)[0]);\n    }\n  },\n\n  VariableDeclaration(path) {\n    const {\n      requeueInParent,\n      exported,\n      metadata\n    } = this;\n    Object.keys(path.getOuterBindingIdentifiers()).forEach(localName => {\n      const exportNames = exported.get(localName) || [];\n\n      if (exportNames.length > 0) {\n        const statement = expressionStatement(buildBindingExportAssignmentExpression(metadata, exportNames, identifier(localName)));\n        statement._blockHoist = path.node._blockHoist;\n        requeueInParent(path.insertAfter(statement)[0]);\n      }\n    });\n  }\n\n};\n\nconst buildBindingExportAssignmentExpression = (metadata, exportNames, localExpr) => {\n  return (exportNames || []).reduce((expr, exportName) => {\n    const {\n      stringSpecifiers\n    } = metadata;\n    const computed = stringSpecifiers.has(exportName);\n    return assignmentExpression(\"=\", memberExpression(identifier(metadata.exportName), computed ? stringLiteral(exportName) : identifier(exportName), computed), expr);\n  }, localExpr);\n};\n\nconst buildImportThrow = localName => {\n  return _template.default.expression.ast`\n    (function() {\n      throw new Error('\"' + '${localName}' + '\" is read-only.');\n    })()\n  `;\n};\n\nconst rewriteReferencesVisitor = {\n  ReferencedIdentifier(path) {\n    const {\n      seen,\n      buildImportReference,\n      scope,\n      imported,\n      requeueInParent\n    } = this;\n    if (seen.has(path.node)) return;\n    seen.add(path.node);\n    const localName = path.node.name;\n    const importData = imported.get(localName);\n\n    if (importData) {\n      if (isInType(path)) {\n        throw path.buildCodeFrameError(`Cannot transform the imported binding \"${localName}\" since it's also used in a type annotation. ` + `Please strip type annotations using @babel/preset-typescript or @babel/preset-flow.`);\n      }\n\n      const localBinding = path.scope.getBinding(localName);\n      const rootBinding = scope.getBinding(localName);\n      if (rootBinding !== localBinding) return;\n      const ref = buildImportReference(importData, path.node);\n      ref.loc = path.node.loc;\n\n      if ((path.parentPath.isCallExpression({\n        callee: path.node\n      }) || path.parentPath.isOptionalCallExpression({\n        callee: path.node\n      }) || path.parentPath.isTaggedTemplateExpression({\n        tag: path.node\n      })) && isMemberExpression(ref)) {\n        path.replaceWith(sequenceExpression([numericLiteral(0), ref]));\n      } else if (path.isJSXIdentifier() && isMemberExpression(ref)) {\n        const {\n          object,\n          property\n        } = ref;\n        path.replaceWith(jsxMemberExpression(jsxIdentifier(object.name), jsxIdentifier(property.name)));\n      } else {\n        path.replaceWith(ref);\n      }\n\n      requeueInParent(path);\n      path.skip();\n    }\n  },\n\n  AssignmentExpression: {\n    exit(path) {\n      const {\n        scope,\n        seen,\n        imported,\n        exported,\n        requeueInParent,\n        buildImportReference\n      } = this;\n      if (seen.has(path.node)) return;\n      seen.add(path.node);\n      const left = path.get(\"left\");\n      if (left.isMemberExpression()) return;\n\n      if (left.isIdentifier()) {\n        const localName = left.node.name;\n\n        if (scope.getBinding(localName) !== path.scope.getBinding(localName)) {\n          return;\n        }\n\n        const exportedNames = exported.get(localName);\n        const importData = imported.get(localName);\n\n        if ((exportedNames == null ? void 0 : exportedNames.length) > 0 || importData) {\n          _assert(path.node.operator === \"=\", \"Path was not simplified\");\n\n          const assignment = path.node;\n\n          if (importData) {\n            assignment.left = buildImportReference(importData, assignment.left);\n            assignment.right = sequenceExpression([assignment.right, buildImportThrow(localName)]);\n          }\n\n          path.replaceWith(buildBindingExportAssignmentExpression(this.metadata, exportedNames, assignment));\n          requeueInParent(path);\n        }\n      } else {\n        const ids = left.getOuterBindingIdentifiers();\n        const programScopeIds = Object.keys(ids).filter(localName => scope.getBinding(localName) === path.scope.getBinding(localName));\n        const id = programScopeIds.find(localName => imported.has(localName));\n\n        if (id) {\n          path.node.right = sequenceExpression([path.node.right, buildImportThrow(id)]);\n        }\n\n        const items = [];\n        programScopeIds.forEach(localName => {\n          const exportedNames = exported.get(localName) || [];\n\n          if (exportedNames.length > 0) {\n            items.push(buildBindingExportAssignmentExpression(this.metadata, exportedNames, identifier(localName)));\n          }\n        });\n\n        if (items.length > 0) {\n          let node = sequenceExpression(items);\n\n          if (path.parentPath.isExpressionStatement()) {\n            node = expressionStatement(node);\n            node._blockHoist = path.parentPath.node._blockHoist;\n          }\n\n          const statement = path.insertAfter(node)[0];\n          requeueInParent(statement);\n        }\n      }\n    }\n\n  },\n\n  \"ForOfStatement|ForInStatement\"(path) {\n    const {\n      scope,\n      node\n    } = path;\n    const {\n      left\n    } = node;\n    const {\n      exported,\n      imported,\n      scope: programScope\n    } = this;\n\n    if (!isVariableDeclaration(left)) {\n      let didTransformExport = false,\n          importConstViolationName;\n      const loopBodyScope = path.get(\"body\").scope;\n\n      for (const name of Object.keys(getOuterBindingIdentifiers(left))) {\n        if (programScope.getBinding(name) === scope.getBinding(name)) {\n          if (exported.has(name)) {\n            didTransformExport = true;\n\n            if (loopBodyScope.hasOwnBinding(name)) {\n              loopBodyScope.rename(name);\n            }\n          }\n\n          if (imported.has(name) && !importConstViolationName) {\n            importConstViolationName = name;\n          }\n        }\n      }\n\n      if (!didTransformExport && !importConstViolationName) {\n        return;\n      }\n\n      path.ensureBlock();\n      const bodyPath = path.get(\"body\");\n      const newLoopId = scope.generateUidIdentifierBasedOnNode(left);\n      path.get(\"left\").replaceWith(variableDeclaration(\"let\", [variableDeclarator(cloneNode(newLoopId))]));\n      scope.registerDeclaration(path.get(\"left\"));\n\n      if (didTransformExport) {\n        bodyPath.unshiftContainer(\"body\", expressionStatement(assignmentExpression(\"=\", left, newLoopId)));\n      }\n\n      if (importConstViolationName) {\n        bodyPath.unshiftContainer(\"body\", expressionStatement(buildImportThrow(importConstViolationName)));\n      }\n    }\n  }\n\n};"]},"metadata":{},"sourceType":"script"}