{"ast":null,"code":"import AnimatedNode, { getCallID, setCallID } from './AnimatedNode';\nimport { adapt } from './AnimatedBlock';\nimport { val } from '../val';\nimport invariant from 'invariant';\n\nclass AnimatedCallFunc extends AnimatedNode {\n  _previousCallID;\n  _what;\n  _args;\n  _params;\n\n  constructor(what, args, params) {\n    invariant(what instanceof AnimatedNode, `Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ${what}`);\n    invariant(args.every(el => el instanceof AnimatedNode), `Reanimated: every AnimatedCallFunc 'args' argument should be of type AnimatedNode but got ${args}`);\n    invariant(params.every(el => el instanceof AnimatedNode), `Reanimated: every AnimatedCallFunc 'params' argument should be of type AnimatedNode but got ${params}`);\n    super({\n      type: 'callfunc',\n      what,\n      args,\n      params\n    }, [...args]);\n    this._what = what;\n    this._args = args;\n    this._params = params;\n  }\n\n  toString() {\n    return `AnimatedCallFunc, id: ${this.__nodeID}`;\n  }\n\n  beginContext() {\n    this._previousCallID = getCallID();\n    setCallID(getCallID() + '/' + this.__nodeID);\n\n    this._params.forEach((param, index) => {\n      param.beginContext(this._args[index], this._previousCallID);\n    });\n  }\n\n  endContext() {\n    this._params.forEach(param => {\n      param.endContext();\n    });\n\n    setCallID(this._previousCallID);\n  }\n\n  __onEvaluate() {\n    this.beginContext();\n    const value = val(this._what);\n    this.endContext();\n    return value;\n  }\n\n}\n\nexport function createAnimatedCallFunc(proc, args, params) {\n  return new AnimatedCallFunc(proc, args.map(p => adapt(p)), params);\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCallFunc.js"],"names":["AnimatedNode","getCallID","setCallID","adapt","val","invariant","AnimatedCallFunc","_previousCallID","_what","_args","_params","constructor","what","args","params","every","el","type","toString","__nodeID","beginContext","forEach","param","index","endContext","__onEvaluate","value","createAnimatedCallFunc","proc","map","p"],"mappings":"AAAA,OAAOA,YAAP,IAAuBC,SAAvB,EAAkCC,SAAlC,QAAmD,gBAAnD;AACA,SAASC,KAAT,QAAsB,iBAAtB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAOC,SAAP,MAAsB,WAAtB;;AAEA,MAAMC,gBAAN,SAA+BN,YAA/B,CAA4C;AAC1CO,EAAAA,eAAe;AACfC,EAAAA,KAAK;AACLC,EAAAA,KAAK;AACLC,EAAAA,OAAO;;AACPC,EAAAA,WAAW,CAACC,IAAD,EAAOC,IAAP,EAAaC,MAAb,EAAqB;AAC9BT,IAAAA,SAAS,CACPO,IAAI,YAAYZ,YADT,EAEN,uFAAsFY,IAAK,EAFrF,CAAT;AAIAP,IAAAA,SAAS,CACPQ,IAAI,CAACE,KAAL,CAAYC,EAAD,IAAQA,EAAE,YAAYhB,YAAjC,CADO,EAEN,6FAA4Fa,IAAK,EAF3F,CAAT;AAIAR,IAAAA,SAAS,CACPS,MAAM,CAACC,KAAP,CAAcC,EAAD,IAAQA,EAAE,YAAYhB,YAAnC,CADO,EAEN,+FAA8Fc,MAAO,EAF/F,CAAT;AAIA,UACE;AACEG,MAAAA,IAAI,EAAE,UADR;AAEEL,MAAAA,IAFF;AAGEC,MAAAA,IAHF;AAIEC,MAAAA;AAJF,KADF,EAOE,CAAC,GAAGD,IAAJ,CAPF;AASA,SAAKL,KAAL,GAAaI,IAAb;AACA,SAAKH,KAAL,GAAaI,IAAb;AACA,SAAKH,OAAL,GAAeI,MAAf;AACD;;AAEDI,EAAAA,QAAQ,GAAG;AACT,WAAQ,yBAAwB,KAAKC,QAAS,EAA9C;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,SAAKb,eAAL,GAAuBN,SAAS,EAAhC;AACAC,IAAAA,SAAS,CAACD,SAAS,KAAK,GAAd,GAAoB,KAAKkB,QAA1B,CAAT;;AAEA,SAAKT,OAAL,CAAaW,OAAb,CAAqB,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACrCD,MAAAA,KAAK,CAACF,YAAN,CAAmB,KAAKX,KAAL,CAAWc,KAAX,CAAnB,EAAsC,KAAKhB,eAA3C;AACD,KAFD;AAGD;;AAEDiB,EAAAA,UAAU,GAAG;AACX,SAAKd,OAAL,CAAaW,OAAb,CAAsBC,KAAD,IAAW;AAC9BA,MAAAA,KAAK,CAACE,UAAN;AACD,KAFD;;AAGAtB,IAAAA,SAAS,CAAC,KAAKK,eAAN,CAAT;AACD;;AAEDkB,EAAAA,YAAY,GAAG;AACb,SAAKL,YAAL;AACA,UAAMM,KAAK,GAAGtB,GAAG,CAAC,KAAKI,KAAN,CAAjB;AACA,SAAKgB,UAAL;AACA,WAAOE,KAAP;AACD;;AAzDyC;;AA4D5C,OAAO,SAASC,sBAAT,CAAgCC,IAAhC,EAAsCf,IAAtC,EAA4CC,MAA5C,EAAoD;AACzD,SAAO,IAAIR,gBAAJ,CACLsB,IADK,EAELf,IAAI,CAACgB,GAAL,CAAUC,CAAD,IAAO3B,KAAK,CAAC2B,CAAD,CAArB,CAFK,EAGLhB,MAHK,CAAP;AAKD","sourcesContent":["import AnimatedNode, { getCallID, setCallID } from './AnimatedNode';\nimport { adapt } from './AnimatedBlock';\nimport { val } from '../val';\nimport invariant from 'invariant';\n\nclass AnimatedCallFunc extends AnimatedNode {\n  _previousCallID;\n  _what;\n  _args;\n  _params;\n  constructor(what, args, params) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ${what}`\n    );\n    invariant(\n      args.every((el) => el instanceof AnimatedNode),\n      `Reanimated: every AnimatedCallFunc 'args' argument should be of type AnimatedNode but got ${args}`\n    );\n    invariant(\n      params.every((el) => el instanceof AnimatedNode),\n      `Reanimated: every AnimatedCallFunc 'params' argument should be of type AnimatedNode but got ${params}`\n    );\n    super(\n      {\n        type: 'callfunc',\n        what,\n        args,\n        params,\n      },\n      [...args]\n    );\n    this._what = what;\n    this._args = args;\n    this._params = params;\n  }\n\n  toString() {\n    return `AnimatedCallFunc, id: ${this.__nodeID}`;\n  }\n\n  beginContext() {\n    this._previousCallID = getCallID();\n    setCallID(getCallID() + '/' + this.__nodeID);\n\n    this._params.forEach((param, index) => {\n      param.beginContext(this._args[index], this._previousCallID);\n    });\n  }\n\n  endContext() {\n    this._params.forEach((param) => {\n      param.endContext();\n    });\n    setCallID(this._previousCallID);\n  }\n\n  __onEvaluate() {\n    this.beginContext();\n    const value = val(this._what);\n    this.endContext();\n    return value;\n  }\n}\n\nexport function createAnimatedCallFunc(proc, args, params) {\n  return new AnimatedCallFunc(\n    proc,\n    args.map((p) => adapt(p)),\n    params\n  );\n}\n"]},"metadata":{},"sourceType":"module"}