{"ast":null,"code":"import { useSharedValue } from \"react-native-reanimated\";\nexport var useVector = function useVector() {\n  var x1 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var y1 = arguments.length > 1 ? arguments[1] : undefined;\n  var x = useSharedValue(x1);\n  var y = useSharedValue(y1 != null ? y1 : x1);\n  return {\n    x: x,\n    y: y\n  };\n};\nexport var vec2 = function vec2(x, y) {\n  \"worklet\";\n\n  var _ref;\n\n  return {\n    x: x != null ? x : 0,\n    y: (_ref = y != null ? y : x) != null ? _ref : 0\n  };\n};\nexport var vec = {\n  create: vec2\n};","map":{"version":3,"sources":["C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\react-native-redash\\lib\\module\\Vectors.ts"],"names":["useVector","x1","y1","x","useSharedValue","y","vec2","vec","create"],"mappings":"AACA,SAAA,cAAA,QAAA,yBAAA;AAkBA,OAAO,IAAMA,SAAS,GAATA,SAAAA,SAAAA,GAG8B;AAFzCC,MAAAA,EAEyC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,IAAA,SAAA,CAAA,CAAA,CAAA,KAAA,SAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAFpC,CAALA;AACAC,MAAAA,EACyC,GAAA,SAAA,CAAA,MAAA,GAAA,CAAA,GAAA,SAAA,CAAA,CAAA,CAAA,GAAA,SADzCA;AAEA,MAAMC,CAAC,GAAGC,cAAc,CAAxB,EAAwB,CAAxB;AACA,MAAMC,CAAC,GAAGD,cAAc,CAACF,EAAD,IAAA,IAACA,GAAD,EAACA,GAAzB,EAAwB,CAAxB;AACA,SAAO;AAAEC,IAAAA,CAAC,EAAH,CAAA;AAAKE,IAAAA,CAAC,EAAb;AAAO,GAAP;AANK,CAAA;AAoBP,OAAO,IAAMC,IAAY,GAAZA,SAAAA,IAAAA,CAAe,CAAfA,EAAe,CAAfA,EAGR;AACH;;AADG,MAAA,IAAA;;AAEH,SAAO;AACLH,IAAAA,CAAC,EAAEA,CAAF,IAAA,IAAEA,GAAF,CAAEA,GADE,CAAA;AAELE,IAAAA,CAAC,EAAA,CAAA,IAAA,GAAEA,CAAF,IAAA,IAAEA,GAAF,CAAEA,GAAF,CAAA,KAAA,IAAA,GAAA,IAAA,GAFH;AAAO,GAAP;AALK,CAAA;AAWP,OAAO,IAAME,GAAG,GAAG;AACjBC,EAAAA,MAAM,EADD;AAAY,CAAZ","sourcesContent":["import type Animated from \"react-native-reanimated\";\nimport { useSharedValue } from \"react-native-reanimated\";\n\n/**\n * @summary Type representing a vector\n * @example\n   export interface Vector<T = number> {\n    x: T;\n    y: T;\n  }\n */\nexport interface Vector<T = number> {\n  x: T;\n  y: T;\n}\n\n/**\n * @summary Returns a vector of shared values\n */\nexport const useVector = (\n  x1 = 0,\n  y1?: number\n): Vector<Animated.SharedValue<number>> => {\n  const x = useSharedValue(x1);\n  const y = useSharedValue(y1 ?? x1);\n  return { x, y };\n};\n\ntype Create = {\n  (): Vector<0>;\n  <T extends Animated.Adaptable<number>>(x: T, y?: T): Vector<T>;\n};\n\n/**\n *\n * @param x\n * @param y\n * @worklet\n */\nexport const vec2: Create = <T extends Animated.Adaptable<number>>(\n  x?: T,\n  y?: T\n) => {\n  \"worklet\";\n  return {\n    x: x ?? 0,\n    y: y ?? x ?? 0,\n  };\n};\n\nexport const vec = {\n  create: vec2,\n};\n"]},"metadata":{},"sourceType":"module"}