{"ast":null,"code":"import NativeReanimatedModule from './NativeReanimated';\n\nfunction jsListener(eventName, handler) {\n  return evt => {\n    handler(Object.assign(Object.assign({}, evt.nativeEvent), {\n      eventName\n    }));\n  };\n}\n\nexport default class WorkletEventHandler {\n  constructor(worklet) {\n    let eventNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n    this.worklet = worklet;\n    this.eventNames = eventNames;\n    this.reattachNeeded = false;\n    this.listeners = {};\n    this.viewTag = undefined;\n    this.registrations = [];\n\n    if (!NativeReanimatedModule.native) {\n      this.listeners = eventNames.reduce((acc, eventName) => {\n        acc[eventName] = jsListener(eventName, worklet);\n        return acc;\n      }, {});\n    }\n  }\n\n  updateWorklet(newWorklet) {\n    this.worklet = newWorklet;\n    this.reattachNeeded = true;\n  }\n\n  registerForEvents(viewTag, fallbackEventName) {\n    this.viewTag = viewTag;\n    this.registrations = this.eventNames.map(eventName => NativeReanimatedModule.registerEventHandler(viewTag + eventName, this.worklet));\n\n    if (this.registrations.length === 0 && fallbackEventName) {\n      this.registrations.push(NativeReanimatedModule.registerEventHandler(viewTag + fallbackEventName, this.worklet));\n    }\n  }\n\n  unregisterFromEvents() {\n    this.registrations.forEach(id => NativeReanimatedModule.unregisterEventHandler(id));\n    this.registrations = [];\n  }\n\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated2/WorkletEventHandler.js"],"names":["NativeReanimatedModule","jsListener","eventName","handler","evt","Object","assign","nativeEvent","WorkletEventHandler","constructor","worklet","eventNames","reattachNeeded","listeners","viewTag","undefined","registrations","native","reduce","acc","updateWorklet","newWorklet","registerForEvents","fallbackEventName","map","registerEventHandler","length","push","unregisterFromEvents","forEach","id","unregisterEventHandler"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,oBAAnC;;AACA,SAASC,UAAT,CAAoBC,SAApB,EAA+BC,OAA/B,EAAwC;AACpC,SAAQC,GAAD,IAAS;AACZD,IAAAA,OAAO,CAACE,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBF,GAAG,CAACG,WAAtB,CAAd,EAAkD;AAAEL,MAAAA;AAAF,KAAlD,CAAD,CAAP;AACH,GAFD;AAGH;;AACD,eAAe,MAAMM,mBAAN,CAA0B;AACrCC,EAAAA,WAAW,CAACC,OAAD,EAA2B;AAAA,QAAjBC,UAAiB,uEAAJ,EAAI;AAClC,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACA,SAAKC,cAAL,GAAsB,KAAtB;AACA,SAAKC,SAAL,GAAiB,EAAjB;AACA,SAAKC,OAAL,GAAeC,SAAf;AACA,SAAKC,aAAL,GAAqB,EAArB;;AACA,QAAI,CAAChB,sBAAsB,CAACiB,MAA5B,EAAoC;AAChC,WAAKJ,SAAL,GAAiBF,UAAU,CAACO,MAAX,CAAkB,CAACC,GAAD,EAAMjB,SAAN,KAAoB;AACnDiB,QAAAA,GAAG,CAACjB,SAAD,CAAH,GAAiBD,UAAU,CAACC,SAAD,EAAYQ,OAAZ,CAA3B;AACA,eAAOS,GAAP;AACH,OAHgB,EAGd,EAHc,CAAjB;AAIH;AACJ;;AACDC,EAAAA,aAAa,CAACC,UAAD,EAAa;AACtB,SAAKX,OAAL,GAAeW,UAAf;AACA,SAAKT,cAAL,GAAsB,IAAtB;AACH;;AACDU,EAAAA,iBAAiB,CAACR,OAAD,EAAUS,iBAAV,EAA6B;AAC1C,SAAKT,OAAL,GAAeA,OAAf;AACA,SAAKE,aAAL,GAAqB,KAAKL,UAAL,CAAgBa,GAAhB,CAAqBtB,SAAD,IAAeF,sBAAsB,CAACyB,oBAAvB,CAA4CX,OAAO,GAAGZ,SAAtD,EAAiE,KAAKQ,OAAtE,CAAnC,CAArB;;AACA,QAAI,KAAKM,aAAL,CAAmBU,MAAnB,KAA8B,CAA9B,IAAmCH,iBAAvC,EAA0D;AACtD,WAAKP,aAAL,CAAmBW,IAAnB,CAAwB3B,sBAAsB,CAACyB,oBAAvB,CAA4CX,OAAO,GAAGS,iBAAtD,EAAyE,KAAKb,OAA9E,CAAxB;AACH;AACJ;;AACDkB,EAAAA,oBAAoB,GAAG;AACnB,SAAKZ,aAAL,CAAmBa,OAAnB,CAA4BC,EAAD,IAAQ9B,sBAAsB,CAAC+B,sBAAvB,CAA8CD,EAA9C,CAAnC;AACA,SAAKd,aAAL,GAAqB,EAArB;AACH;;AA7BoC","sourcesContent":["import NativeReanimatedModule from './NativeReanimated';\nfunction jsListener(eventName, handler) {\n    return (evt) => {\n        handler(Object.assign(Object.assign({}, evt.nativeEvent), { eventName }));\n    };\n}\nexport default class WorkletEventHandler {\n    constructor(worklet, eventNames = []) {\n        this.worklet = worklet;\n        this.eventNames = eventNames;\n        this.reattachNeeded = false;\n        this.listeners = {};\n        this.viewTag = undefined;\n        this.registrations = [];\n        if (!NativeReanimatedModule.native) {\n            this.listeners = eventNames.reduce((acc, eventName) => {\n                acc[eventName] = jsListener(eventName, worklet);\n                return acc;\n            }, {});\n        }\n    }\n    updateWorklet(newWorklet) {\n        this.worklet = newWorklet;\n        this.reattachNeeded = true;\n    }\n    registerForEvents(viewTag, fallbackEventName) {\n        this.viewTag = viewTag;\n        this.registrations = this.eventNames.map((eventName) => NativeReanimatedModule.registerEventHandler(viewTag + eventName, this.worklet));\n        if (this.registrations.length === 0 && fallbackEventName) {\n            this.registrations.push(NativeReanimatedModule.registerEventHandler(viewTag + fallbackEventName, this.worklet));\n        }\n    }\n    unregisterFromEvents() {\n        this.registrations.forEach((id) => NativeReanimatedModule.unregisterEventHandler(id));\n        this.registrations = [];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}