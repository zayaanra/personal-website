{"ast":null,"code":"import { createAnimatedSet as set } from '../core/AnimatedSet';\nimport interpolate from '../derived/interpolate';\nimport InternalAnimatedValue from './InternalAnimatedValue';\nimport { Platform } from 'react-native';\nimport { evaluateOnce } from '../derived/evaluateOnce';\nimport ReanimatedModule from '../../ReanimatedModule';\nimport { val } from '../val'; // Animated value wrapped with extra methods for omit cycle of dependencies\n\nexport default class AnimatedValue extends InternalAnimatedValue {\n  setValue(value) {\n    this.__detachAnimation(this._animation);\n\n    if (Platform.OS === 'web' || Platform.OS === 'windows' || Platform.OS === 'macos') {\n      this._updateValue(val(value));\n    } else {\n      if (ReanimatedModule.setValue && typeof value === 'number') {\n        // FIXME Remove it after some time\n        // For OTA-safety\n        // FIXME handle setting value with a node\n        ReanimatedModule.setValue(this.__nodeID, value);\n      } else {\n        evaluateOnce(set(this, value), this);\n      }\n    }\n  }\n\n  toString() {\n    return `AnimatedValue, id: ${this.__nodeID}`;\n  }\n\n  interpolate(config) {\n    return interpolate(this, config);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedValue.js"],"names":["createAnimatedSet","set","interpolate","InternalAnimatedValue","Platform","evaluateOnce","ReanimatedModule","val","AnimatedValue","setValue","value","__detachAnimation","_animation","OS","_updateValue","__nodeID","toString","config"],"mappings":"AAAA,SAASA,iBAAiB,IAAIC,GAA9B,QAAyC,qBAAzC;AACA,OAAOC,WAAP,MAAwB,wBAAxB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,YAAT,QAA6B,yBAA7B;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AACA,SAASC,GAAT,QAAoB,QAApB,C,CAEA;;AACA,eAAe,MAAMC,aAAN,SAA4BL,qBAA5B,CAAkD;AAC/DM,EAAAA,QAAQ,CAACC,KAAD,EAAQ;AACd,SAAKC,iBAAL,CAAuB,KAAKC,UAA5B;;AACA,QACER,QAAQ,CAACS,EAAT,KAAgB,KAAhB,IACAT,QAAQ,CAACS,EAAT,KAAgB,SADhB,IAEAT,QAAQ,CAACS,EAAT,KAAgB,OAHlB,EAIE;AACA,WAAKC,YAAL,CAAkBP,GAAG,CAACG,KAAD,CAArB;AACD,KAND,MAMO;AACL,UAAIJ,gBAAgB,CAACG,QAAjB,IAA6B,OAAOC,KAAP,KAAiB,QAAlD,EAA4D;AAC1D;AACA;AACA;AACAJ,QAAAA,gBAAgB,CAACG,QAAjB,CAA0B,KAAKM,QAA/B,EAAyCL,KAAzC;AACD,OALD,MAKO;AACLL,QAAAA,YAAY,CAACJ,GAAG,CAAC,IAAD,EAAOS,KAAP,CAAJ,EAAmB,IAAnB,CAAZ;AACD;AACF;AACF;;AAEDM,EAAAA,QAAQ,GAAG;AACT,WAAQ,sBAAqB,KAAKD,QAAS,EAA3C;AACD;;AAEDb,EAAAA,WAAW,CAACe,MAAD,EAAS;AAClB,WAAOf,WAAW,CAAC,IAAD,EAAOe,MAAP,CAAlB;AACD;;AA3B8D","sourcesContent":["import { createAnimatedSet as set } from '../core/AnimatedSet';\nimport interpolate from '../derived/interpolate';\nimport InternalAnimatedValue from './InternalAnimatedValue';\nimport { Platform } from 'react-native';\nimport { evaluateOnce } from '../derived/evaluateOnce';\nimport ReanimatedModule from '../../ReanimatedModule';\nimport { val } from '../val';\n\n// Animated value wrapped with extra methods for omit cycle of dependencies\nexport default class AnimatedValue extends InternalAnimatedValue {\n  setValue(value) {\n    this.__detachAnimation(this._animation);\n    if (\n      Platform.OS === 'web' ||\n      Platform.OS === 'windows' ||\n      Platform.OS === 'macos'\n    ) {\n      this._updateValue(val(value));\n    } else {\n      if (ReanimatedModule.setValue && typeof value === 'number') {\n        // FIXME Remove it after some time\n        // For OTA-safety\n        // FIXME handle setting value with a node\n        ReanimatedModule.setValue(this.__nodeID, value);\n      } else {\n        evaluateOnce(set(this, value), this);\n      }\n    }\n  }\n\n  toString() {\n    return `AnimatedValue, id: ${this.__nodeID}`;\n  }\n\n  interpolate(config) {\n    return interpolate(this, config);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}