{"ast":null,"code":"import JSReanimated from './JSReanimated';\nimport { shouldBeUseWeb } from '../PlatformChecker';\nconst reanimatedJS = new JSReanimated();\n\nif (shouldBeUseWeb()) {\n  global._frameTimestamp = null;\n\n  global._setGlobalConsole = _val => {// noop\n  };\n\n  global._measure = () => {\n    console.warn(\"[Reanimated] You can't use 'measue' method with Chrome Debugger or with web version\");\n    return {\n      x: 0,\n      y: 0,\n      width: 0,\n      height: 0,\n      pageX: 0,\n      pageY: 0\n    };\n  };\n\n  global._scrollTo = () => {\n    console.warn(\"[Reanimated] You can't use 'scrollTo' method with Chrome Debugger or with web version\");\n  };\n\n  global._setGestureState = () => {\n    console.warn(\"[Reanimated] You can't use 'setGestureState' method with Chrome Debugger or with web version\");\n  };\n}\n\nexport const _updatePropsJS = (updates, viewRef) => {\n  if (viewRef._component) {\n    const component = viewRef._component;\n    const [rawStyles] = Object.keys(updates).reduce((acc, key) => {\n      const value = updates[key];\n      const index = typeof value === 'function' ? 1 : 0;\n      acc[index][key] = value;\n      return acc;\n    }, [{}, {}]);\n\n    if (typeof component.setNativeProps === 'function') {\n      setNativeProps(component, rawStyles);\n    } else if (Object.keys(component.props).length > 0) {\n      Object.keys(component.props).forEach(key => {\n        if (!rawStyles[key]) {\n          return;\n        }\n\n        const dashedKey = key.replace(/[A-Z]/g, m => '-' + m.toLowerCase());\n\n        component._touchableNode.setAttribute(dashedKey, rawStyles[key]);\n      });\n    } else {\n      console.warn('It is not possible to manipulate component');\n    }\n  }\n};\n\nconst setNativeProps = (component, style) => {\n  const previousStyle = component.previousStyle ? component.previousStyle : {};\n  const currentStyle = Object.assign(Object.assign({}, previousStyle), style);\n  component.previousStyle = currentStyle;\n  component.setNativeProps({\n    style: currentStyle\n  });\n};\n\nexport default reanimatedJS;","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/index.js"],"names":["JSReanimated","shouldBeUseWeb","reanimatedJS","global","_frameTimestamp","_setGlobalConsole","_val","_measure","console","warn","x","y","width","height","pageX","pageY","_scrollTo","_setGestureState","_updatePropsJS","updates","viewRef","_component","component","rawStyles","Object","keys","reduce","acc","key","value","index","setNativeProps","props","length","forEach","dashedKey","replace","m","toLowerCase","_touchableNode","setAttribute","style","previousStyle","currentStyle","assign"],"mappings":"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","sourcesContent":["import JSReanimated from './JSReanimated';\nimport { shouldBeUseWeb } from '../PlatformChecker';\nconst reanimatedJS = new JSReanimated();\nif (shouldBeUseWeb()) {\n    global._frameTimestamp = null;\n    global._setGlobalConsole = (_val) => {\n        // noop\n    };\n    global._measure = () => {\n        console.warn(\"[Reanimated] You can't use 'measue' method with Chrome Debugger or with web version\");\n        return {\n            x: 0,\n            y: 0,\n            width: 0,\n            height: 0,\n            pageX: 0,\n            pageY: 0,\n        };\n    };\n    global._scrollTo = () => {\n        console.warn(\"[Reanimated] You can't use 'scrollTo' method with Chrome Debugger or with web version\");\n    };\n    global._setGestureState = () => {\n        console.warn(\"[Reanimated] You can't use 'setGestureState' method with Chrome Debugger or with web version\");\n    };\n}\nexport const _updatePropsJS = (updates, viewRef) => {\n    if (viewRef._component) {\n        const component = viewRef._component;\n        const [rawStyles] = Object.keys(updates).reduce((acc, key) => {\n            const value = updates[key];\n            const index = typeof value === 'function' ? 1 : 0;\n            acc[index][key] = value;\n            return acc;\n        }, [{}, {}]);\n        if (typeof component.setNativeProps === 'function') {\n            setNativeProps(component, rawStyles);\n        }\n        else if (Object.keys(component.props).length > 0) {\n            Object.keys(component.props).forEach((key) => {\n                if (!rawStyles[key]) {\n                    return;\n                }\n                const dashedKey = key.replace(/[A-Z]/g, (m) => '-' + m.toLowerCase());\n                component._touchableNode.setAttribute(dashedKey, rawStyles[key]);\n            });\n        }\n        else {\n            console.warn('It is not possible to manipulate component');\n        }\n    }\n};\nconst setNativeProps = (component, style) => {\n    const previousStyle = component.previousStyle ? component.previousStyle : {};\n    const currentStyle = Object.assign(Object.assign({}, previousStyle), style);\n    component.previousStyle = currentStyle;\n    component.setNativeProps({ style: currentStyle });\n};\nexport default reanimatedJS;\n"]},"metadata":{},"sourceType":"module"}