{"ast":null,"code":"/* global _WORKLET */\nimport { convertToHSVA, isColor, toRGBA } from '../Colors';\nimport NativeReanimatedModule from '../NativeReanimated';\nlet IN_STYLE_UPDATER = false;\nexport function initialUpdaterRun(updater) {\n  IN_STYLE_UPDATER = true;\n  const result = updater();\n  IN_STYLE_UPDATER = false;\n  return result;\n}\n\nfunction recognizePrefixSuffix(value) {\n  'worklet';\n\n  var _a;\n\n  if (typeof value === 'string') {\n    const match = value.match(/([A-Za-z]*)(-?\\d*\\.?\\d*)([eE][-+]?[0-9]+)?([A-Za-z%]*)/);\n\n    if (!match) {\n      throw Error(\"Couldn't parse animation value. Check if there isn't any typo.\");\n    }\n\n    const prefix = match[1];\n    const suffix = match[4]; // number with scientific notation\n\n    const number = match[2] + ((_a = match[3]) !== null && _a !== void 0 ? _a : '');\n    return {\n      prefix,\n      suffix,\n      strippedValue: parseFloat(number)\n    };\n  } else {\n    return {\n      strippedValue: value\n    };\n  }\n}\n\nfunction decorateAnimation(animation) {\n  'worklet';\n\n  if (animation.isHigherOrder) {\n    return;\n  }\n\n  const baseOnStart = animation.onStart;\n  const baseOnFrame = animation.onFrame;\n  const animationCopy = Object.assign({}, animation);\n  delete animationCopy.callback;\n\n  const prefNumberSuffOnStart = (animation, value, timestamp, previousAnimation) => {\n    var _a, _b, _c, _d; // recognize prefix, suffix, and updates stripped value on animation start\n\n\n    const {\n      prefix,\n      suffix,\n      strippedValue\n    } = recognizePrefixSuffix(value);\n    animation.__prefix = prefix;\n    animation.__suffix = suffix;\n    animation.strippedCurrent = strippedValue;\n    const {\n      strippedValue: strippedToValue\n    } = recognizePrefixSuffix(animation.toValue);\n    animation.current = strippedValue;\n    animation.startValue = strippedValue;\n    animation.toValue = strippedToValue;\n\n    if (previousAnimation && previousAnimation !== animation) {\n      previousAnimation.current = previousAnimation.strippedCurrent;\n    }\n\n    baseOnStart(animation, strippedValue, timestamp, previousAnimation);\n    animation.current = ((_a = animation.__prefix) !== null && _a !== void 0 ? _a : '') + animation.current + ((_b = animation.__suffix) !== null && _b !== void 0 ? _b : '');\n\n    if (previousAnimation && previousAnimation !== animation) {\n      previousAnimation.current = ((_c = previousAnimation.__prefix) !== null && _c !== void 0 ? _c : '') + previousAnimation.current + ((_d = previousAnimation.__suffix) !== null && _d !== void 0 ? _d : '');\n    }\n  };\n\n  const prefNumberSuffOnFrame = (animation, timestamp) => {\n    var _a, _b;\n\n    animation.current = animation.strippedCurrent;\n    const res = baseOnFrame(animation, timestamp);\n    animation.strippedCurrent = animation.current;\n    animation.current = ((_a = animation.__prefix) !== null && _a !== void 0 ? _a : '') + animation.current + ((_b = animation.__suffix) !== null && _b !== void 0 ? _b : '');\n    return res;\n  };\n\n  const tab = ['H', 'S', 'V', 'A'];\n\n  const colorOnStart = (animation, value, timestamp, previousAnimation) => {\n    let HSVAValue;\n    let HSVACurrent;\n    let HSVAToValue;\n    const res = [];\n\n    if (isColor(value)) {\n      HSVACurrent = convertToHSVA(animation.current);\n      HSVAValue = convertToHSVA(value);\n\n      if (animation.toValue) {\n        HSVAToValue = convertToHSVA(animation.toValue);\n      }\n    }\n\n    tab.forEach((i, index) => {\n      animation[i] = Object.assign({}, animationCopy);\n      animation[i].current = HSVACurrent[index];\n      animation[i].toValue = HSVAToValue ? HSVAToValue[index] : undefined;\n      animation[i].onStart(animation[i], HSVAValue[index], timestamp, previousAnimation ? previousAnimation[i] : undefined);\n      res.push(animation[i].current);\n    });\n    animation.current = toRGBA(res);\n  };\n\n  const colorOnFrame = (animation, timestamp) => {\n    const HSVACurrent = convertToHSVA(animation.current);\n    const res = [];\n    let finished = true;\n    tab.forEach((i, index) => {\n      animation[i].current = HSVACurrent[index]; // @ts-ignore: disable-next-line\n\n      finished &= animation[i].onFrame(animation[i], timestamp);\n      res.push(animation[i].current);\n    });\n    animation.current = toRGBA(res);\n    return finished;\n  };\n\n  const arrayOnStart = (animation, value, timestamp, previousAnimation) => {\n    value.forEach((v, i) => {\n      animation[i] = Object.assign({}, animationCopy);\n      animation[i].current = v;\n      animation[i].toValue = animation.toValue[i];\n      animation[i].onStart(animation[i], v, timestamp, previousAnimation ? previousAnimation[i] : undefined);\n    });\n    animation.current = value;\n  };\n\n  const arrayOnFrame = (animation, timestamp) => {\n    let finished = true;\n    animation.current.forEach((v, i) => {\n      // @ts-ignore: disable-next-line\n      finished &= animation[i].onFrame(animation[i], timestamp);\n      animation.current[i] = animation[i].current;\n    });\n    return finished;\n  };\n\n  animation.onStart = (animation, value, timestamp, previousAnimation) => {\n    if (isColor(value)) {\n      colorOnStart(animation, value, timestamp, previousAnimation);\n      animation.onFrame = colorOnFrame;\n      return;\n    } else if (Array.isArray(value)) {\n      arrayOnStart(animation, value, timestamp, previousAnimation);\n      animation.onFrame = arrayOnFrame;\n      return;\n    } else if (typeof value === 'string') {\n      prefNumberSuffOnStart(animation, value, timestamp, previousAnimation);\n      animation.onFrame = prefNumberSuffOnFrame;\n      return;\n    }\n\n    baseOnStart(animation, value, timestamp, previousAnimation);\n  };\n}\n\nexport function defineAnimation(starting, factory) {\n  'worklet';\n\n  if (IN_STYLE_UPDATER) {\n    return starting;\n  }\n\n  const create = () => {\n    'worklet';\n\n    const animation = factory();\n    decorateAnimation(animation);\n    return animation;\n  };\n\n  if (_WORKLET || !NativeReanimatedModule.native) {\n    return create();\n  } // @ts-ignore: eslint-disable-line\n\n\n  return create;\n}\nexport function cancelAnimation(sharedValue) {\n  'worklet'; // setting the current value cancels the animation if one is currently running\n\n  sharedValue.value = sharedValue.value; // eslint-disable-line no-self-assign\n} // TODO it should work only if there was no animation before.\n\nexport function withStartValue(startValue, animation) {\n  'worklet';\n\n  return defineAnimation(startValue, () => {\n    'worklet';\n\n    if (!_WORKLET && typeof animation === 'function') {\n      animation = animation();\n    }\n\n    animation.current = startValue;\n    return animation;\n  });\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated2/animation/util.js"],"names":["convertToHSVA","isColor","toRGBA","NativeReanimatedModule","IN_STYLE_UPDATER","initialUpdaterRun","updater","result","recognizePrefixSuffix","value","_a","match","Error","prefix","suffix","number","strippedValue","parseFloat","decorateAnimation","animation","isHigherOrder","baseOnStart","onStart","baseOnFrame","onFrame","animationCopy","Object","assign","callback","prefNumberSuffOnStart","timestamp","previousAnimation","_b","_c","_d","__prefix","__suffix","strippedCurrent","strippedToValue","toValue","current","startValue","prefNumberSuffOnFrame","res","tab","colorOnStart","HSVAValue","HSVACurrent","HSVAToValue","forEach","i","index","undefined","push","colorOnFrame","finished","arrayOnStart","v","arrayOnFrame","Array","isArray","defineAnimation","starting","factory","create","_WORKLET","native","cancelAnimation","sharedValue","withStartValue"],"mappings":"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","sourcesContent":["/* global _WORKLET */\nimport { convertToHSVA, isColor, toRGBA } from '../Colors';\nimport NativeReanimatedModule from '../NativeReanimated';\nlet IN_STYLE_UPDATER = false;\nexport function initialUpdaterRun(updater) {\n    IN_STYLE_UPDATER = true;\n    const result = updater();\n    IN_STYLE_UPDATER = false;\n    return result;\n}\nfunction recognizePrefixSuffix(value) {\n    'worklet';\n    var _a;\n    if (typeof value === 'string') {\n        const match = value.match(/([A-Za-z]*)(-?\\d*\\.?\\d*)([eE][-+]?[0-9]+)?([A-Za-z%]*)/);\n        if (!match) {\n            throw Error(\"Couldn't parse animation value. Check if there isn't any typo.\");\n        }\n        const prefix = match[1];\n        const suffix = match[4];\n        // number with scientific notation\n        const number = match[2] + ((_a = match[3]) !== null && _a !== void 0 ? _a : '');\n        return { prefix, suffix, strippedValue: parseFloat(number) };\n    }\n    else {\n        return { strippedValue: value };\n    }\n}\nfunction decorateAnimation(animation) {\n    'worklet';\n    if (animation.isHigherOrder) {\n        return;\n    }\n    const baseOnStart = animation.onStart;\n    const baseOnFrame = animation.onFrame;\n    const animationCopy = Object.assign({}, animation);\n    delete animationCopy.callback;\n    const prefNumberSuffOnStart = (animation, value, timestamp, previousAnimation) => {\n        var _a, _b, _c, _d;\n        // recognize prefix, suffix, and updates stripped value on animation start\n        const { prefix, suffix, strippedValue } = recognizePrefixSuffix(value);\n        animation.__prefix = prefix;\n        animation.__suffix = suffix;\n        animation.strippedCurrent = strippedValue;\n        const { strippedValue: strippedToValue } = recognizePrefixSuffix(animation.toValue);\n        animation.current = strippedValue;\n        animation.startValue = strippedValue;\n        animation.toValue = strippedToValue;\n        if (previousAnimation && previousAnimation !== animation) {\n            previousAnimation.current = previousAnimation.strippedCurrent;\n        }\n        baseOnStart(animation, strippedValue, timestamp, previousAnimation);\n        animation.current =\n            ((_a = animation.__prefix) !== null && _a !== void 0 ? _a : '') +\n                animation.current +\n                ((_b = animation.__suffix) !== null && _b !== void 0 ? _b : '');\n        if (previousAnimation && previousAnimation !== animation) {\n            previousAnimation.current =\n                ((_c = previousAnimation.__prefix) !== null && _c !== void 0 ? _c : '') +\n                    previousAnimation.current +\n                    ((_d = previousAnimation.__suffix) !== null && _d !== void 0 ? _d : '');\n        }\n    };\n    const prefNumberSuffOnFrame = (animation, timestamp) => {\n        var _a, _b;\n        animation.current = animation.strippedCurrent;\n        const res = baseOnFrame(animation, timestamp);\n        animation.strippedCurrent = animation.current;\n        animation.current =\n            ((_a = animation.__prefix) !== null && _a !== void 0 ? _a : '') +\n                animation.current +\n                ((_b = animation.__suffix) !== null && _b !== void 0 ? _b : '');\n        return res;\n    };\n    const tab = ['H', 'S', 'V', 'A'];\n    const colorOnStart = (animation, value, timestamp, previousAnimation) => {\n        let HSVAValue;\n        let HSVACurrent;\n        let HSVAToValue;\n        const res = [];\n        if (isColor(value)) {\n            HSVACurrent = convertToHSVA(animation.current);\n            HSVAValue = convertToHSVA(value);\n            if (animation.toValue) {\n                HSVAToValue = convertToHSVA(animation.toValue);\n            }\n        }\n        tab.forEach((i, index) => {\n            animation[i] = Object.assign({}, animationCopy);\n            animation[i].current = HSVACurrent[index];\n            animation[i].toValue = HSVAToValue ? HSVAToValue[index] : undefined;\n            animation[i].onStart(animation[i], HSVAValue[index], timestamp, previousAnimation ? previousAnimation[i] : undefined);\n            res.push(animation[i].current);\n        });\n        animation.current = toRGBA(res);\n    };\n    const colorOnFrame = (animation, timestamp) => {\n        const HSVACurrent = convertToHSVA(animation.current);\n        const res = [];\n        let finished = true;\n        tab.forEach((i, index) => {\n            animation[i].current = HSVACurrent[index];\n            // @ts-ignore: disable-next-line\n            finished &= animation[i].onFrame(animation[i], timestamp);\n            res.push(animation[i].current);\n        });\n        animation.current = toRGBA(res);\n        return finished;\n    };\n    const arrayOnStart = (animation, value, timestamp, previousAnimation) => {\n        value.forEach((v, i) => {\n            animation[i] = Object.assign({}, animationCopy);\n            animation[i].current = v;\n            animation[i].toValue = animation.toValue[i];\n            animation[i].onStart(animation[i], v, timestamp, previousAnimation ? previousAnimation[i] : undefined);\n        });\n        animation.current = value;\n    };\n    const arrayOnFrame = (animation, timestamp) => {\n        let finished = true;\n        animation.current.forEach((v, i) => {\n            // @ts-ignore: disable-next-line\n            finished &= animation[i].onFrame(animation[i], timestamp);\n            animation.current[i] = animation[i].current;\n        });\n        return finished;\n    };\n    animation.onStart = (animation, value, timestamp, previousAnimation) => {\n        if (isColor(value)) {\n            colorOnStart(animation, value, timestamp, previousAnimation);\n            animation.onFrame = colorOnFrame;\n            return;\n        }\n        else if (Array.isArray(value)) {\n            arrayOnStart(animation, value, timestamp, previousAnimation);\n            animation.onFrame = arrayOnFrame;\n            return;\n        }\n        else if (typeof value === 'string') {\n            prefNumberSuffOnStart(animation, value, timestamp, previousAnimation);\n            animation.onFrame = prefNumberSuffOnFrame;\n            return;\n        }\n        baseOnStart(animation, value, timestamp, previousAnimation);\n    };\n}\nexport function defineAnimation(starting, factory) {\n    'worklet';\n    if (IN_STYLE_UPDATER) {\n        return starting;\n    }\n    const create = () => {\n        'worklet';\n        const animation = factory();\n        decorateAnimation(animation);\n        return animation;\n    };\n    if (_WORKLET || !NativeReanimatedModule.native) {\n        return create();\n    }\n    // @ts-ignore: eslint-disable-line\n    return create;\n}\nexport function cancelAnimation(sharedValue) {\n    'worklet';\n    // setting the current value cancels the animation if one is currently running\n    sharedValue.value = sharedValue.value; // eslint-disable-line no-self-assign\n}\n// TODO it should work only if there was no animation before.\nexport function withStartValue(startValue, animation) {\n    'worklet';\n    return defineAnimation(startValue, () => {\n        'worklet';\n        if (!_WORKLET && typeof animation === 'function') {\n            animation = animation();\n        }\n        animation.current = startValue;\n        return animation;\n    });\n}\n"]},"metadata":{},"sourceType":"module"}