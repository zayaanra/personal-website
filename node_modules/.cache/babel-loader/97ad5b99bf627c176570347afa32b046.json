{"ast":null,"code":"import invariant from 'invariant';\nimport { NativeModules } from 'react-native';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    invariant(typeof message === 'string', `Reanimated: Animated.debug node first argument should be of type string but got ${message}`);\n    invariant(value instanceof AnimatedNode, `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`);\n    super({\n      type: 'debug',\n      message,\n      value\n    }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n    const runningInRemoteDebugger = typeof atob !== 'undefined'; // read the executionEnvironment off of expo-constants without explicitly\n    // depending on the package\n\n    const runningInExpoShell = NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants?.executionEnvironment === 'storeClient';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([call([value], _ref => {\n        let [a] = _ref;\n        return console.log(`${message} ${a}`);\n      }), value]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  } // Debugging is disabled in PROD\n\n\n  return value;\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedDebug.js"],"names":["invariant","NativeModules","val","adapt","createAnimatedBlock","block","createAnimatedCall","call","AnimatedNode","AnimatedDebug","_message","_value","constructor","message","value","type","toString","__nodeID","__onEvaluate","console","log","createAnimatedDebug","__DEV__","runningInRemoteDebugger","atob","runningInExpoShell","NativeUnimoduleProxy","modulesConstants","ExponentConstants","executionEnvironment","a"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,KAAT,EAAgBC,mBAAmB,IAAIC,KAAvC,QAAoD,iBAApD;AACA,SAASC,kBAAkB,IAAIC,IAA/B,QAA2C,gBAA3C;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,aAAN,SAA4BD,YAA5B,CAAyC;AACvCE,EAAAA,QAAQ;AACRC,EAAAA,MAAM;;AAENC,EAAAA,WAAW,CAACC,OAAD,EAAUC,KAAV,EAAiB;AAC1Bd,IAAAA,SAAS,CACP,OAAOa,OAAP,KAAmB,QADZ,EAEN,mFAAkFA,OAAQ,EAFpF,CAAT;AAIAb,IAAAA,SAAS,CACPc,KAAK,YAAYN,YADV,EAEN,0FAAyFM,KAAM,EAFzF,CAAT;AAIA,UAAM;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBF,MAAAA,OAAjB;AAA0BC,MAAAA;AAA1B,KAAN,EAAyC,CAACA,KAAD,CAAzC;AACA,SAAKJ,QAAL,GAAgBG,OAAhB;AACA,SAAKF,MAAL,GAAcG,KAAd;AACD;;AAEDE,EAAAA,QAAQ,GAAG;AACT,WAAQ,sBAAqB,KAAKC,QAAS,EAA3C;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,UAAMJ,KAAK,GAAGZ,GAAG,CAAC,KAAKS,MAAN,CAAjB;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAKV,QAAjB,EAA2BI,KAA3B;AACA,WAAOA,KAAP;AACD;;AA1BsC;;AA6BzC,OAAO,SAASO,mBAAT,CAA6BR,OAA7B,EAAsCC,KAAtC,EAA6C;AAClD,MAAIQ,OAAJ,EAAa;AACX;AACA;AACA,UAAMC,uBAAuB,GAAG,OAAOC,IAAP,KAAgB,WAAhD,CAHW,CAKX;AACA;;AACA,UAAMC,kBAAkB,GACtBxB,aAAa,CAACyB,oBAAd,EAAoCC,gBAApC,EAAsDC,iBAAtD,EACIC,oBADJ,KAC6B,aAF/B;;AAIA,QAAIN,uBAAuB,IAAIE,kBAA/B,EAAmD;AACjD;AACA;AACA,aAAOpB,KAAK,CAAC,CACXE,IAAI,CAAC,CAACO,KAAD,CAAD,EAAU;AAAA,YAAC,CAACgB,CAAD,CAAD;AAAA,eAASX,OAAO,CAACC,GAAR,CAAa,GAAEP,OAAQ,IAAGiB,CAAE,EAA5B,CAAT;AAAA,OAAV,CADO,EAEXhB,KAFW,CAAD,CAAZ;AAID,KAPD,MAOO;AACL,aAAO,IAAIL,aAAJ,CAAkBI,OAAlB,EAA2BV,KAAK,CAACW,KAAD,CAAhC,CAAP;AACD;AACF,GAtBiD,CAuBlD;;;AACA,SAAOA,KAAP;AACD","sourcesContent":["import invariant from 'invariant';\nimport { NativeModules } from 'react-native';\nimport { val } from '../val';\nimport { adapt, createAnimatedBlock as block } from './AnimatedBlock';\nimport { createAnimatedCall as call } from './AnimatedCall';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedDebug extends AnimatedNode {\n  _message;\n  _value;\n\n  constructor(message, value) {\n    invariant(\n      typeof message === 'string',\n      `Reanimated: Animated.debug node first argument should be of type string but got ${message}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`\n    );\n    super({ type: 'debug', message, value }, [value]);\n    this._message = message;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedDebug, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const value = val(this._value);\n    console.log(this._message, value);\n    return value;\n  }\n}\n\nexport function createAnimatedDebug(message, value) {\n  if (__DEV__) {\n    // hack to detect if app is running in remote debugger\n    // https://stackoverflow.com/questions/39022216\n    const runningInRemoteDebugger = typeof atob !== 'undefined';\n\n    // read the executionEnvironment off of expo-constants without explicitly\n    // depending on the package\n    const runningInExpoShell =\n      NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants\n        ?.executionEnvironment === 'storeClient';\n\n    if (runningInRemoteDebugger || runningInExpoShell) {\n      // When running in expo or remote debugger we use JS console.log to output variables\n      // otherwise we output to the native console using native debug node\n      return block([\n        call([value], ([a]) => console.log(`${message} ${a}`)),\n        value,\n      ]);\n    } else {\n      return new AnimatedDebug(message, adapt(value));\n    }\n  }\n  // Debugging is disabled in PROD\n  return value;\n}\n"]},"metadata":{},"sourceType":"module"}