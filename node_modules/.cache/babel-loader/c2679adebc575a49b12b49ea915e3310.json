{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mergeSourceMap;\n\nfunction _sourceMap() {\n  const data = require(\"source-map\");\n\n  _sourceMap = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction mergeSourceMap(inputMap, map) {\n  const input = buildMappingData(inputMap);\n  const output = buildMappingData(map);\n  const mergedGenerator = new (_sourceMap().SourceMapGenerator)();\n\n  for (const {\n    source\n  } of input.sources) {\n    if (typeof source.content === \"string\") {\n      mergedGenerator.setSourceContent(source.path, source.content);\n    }\n  }\n\n  if (output.sources.length === 1) {\n    const defaultSource = output.sources[0];\n    const insertedMappings = new Map();\n    eachInputGeneratedRange(input, (generated, original, source) => {\n      eachOverlappingGeneratedOutputRange(defaultSource, generated, item => {\n        const key = makeMappingKey(item);\n        if (insertedMappings.has(key)) return;\n        insertedMappings.set(key, item);\n        mergedGenerator.addMapping({\n          source: source.path,\n          original: {\n            line: original.line,\n            column: original.columnStart\n          },\n          generated: {\n            line: item.line,\n            column: item.columnStart\n          },\n          name: original.name\n        });\n      });\n    });\n\n    for (const item of insertedMappings.values()) {\n      if (item.columnEnd === Infinity) {\n        continue;\n      }\n\n      const clearItem = {\n        line: item.line,\n        columnStart: item.columnEnd\n      };\n      const key = makeMappingKey(clearItem);\n\n      if (insertedMappings.has(key)) {\n        continue;\n      }\n\n      mergedGenerator.addMapping({\n        generated: {\n          line: clearItem.line,\n          column: clearItem.columnStart\n        }\n      });\n    }\n  }\n\n  const result = mergedGenerator.toJSON();\n\n  if (typeof input.sourceRoot === \"string\") {\n    result.sourceRoot = input.sourceRoot;\n  }\n\n  return result;\n}\n\nfunction makeMappingKey(item) {\n  return `${item.line}/${item.columnStart}`;\n}\n\nfunction eachOverlappingGeneratedOutputRange(outputFile, inputGeneratedRange, callback) {\n  const overlappingOriginal = filterApplicableOriginalRanges(outputFile, inputGeneratedRange);\n\n  for (const {\n    generated\n  } of overlappingOriginal) {\n    for (const item of generated) {\n      callback(item);\n    }\n  }\n}\n\nfunction filterApplicableOriginalRanges(_ref, _ref2) {\n  let {\n    mappings\n  } = _ref;\n  let {\n    line,\n    columnStart,\n    columnEnd\n  } = _ref2;\n  return filterSortedArray(mappings, _ref3 => {\n    let {\n      original: outOriginal\n    } = _ref3;\n    if (line > outOriginal.line) return -1;\n    if (line < outOriginal.line) return 1;\n    if (columnStart >= outOriginal.columnEnd) return -1;\n    if (columnEnd <= outOriginal.columnStart) return 1;\n    return 0;\n  });\n}\n\nfunction eachInputGeneratedRange(map, callback) {\n  for (const {\n    source,\n    mappings\n  } of map.sources) {\n    for (const {\n      original,\n      generated\n    } of mappings) {\n      for (const item of generated) {\n        callback(item, original, source);\n      }\n    }\n  }\n}\n\nfunction buildMappingData(map) {\n  const consumer = new (_sourceMap().SourceMapConsumer)(Object.assign({}, map, {\n    sourceRoot: null\n  }));\n  const sources = new Map();\n  const mappings = new Map();\n  let last = null;\n  consumer.computeColumnSpans();\n  consumer.eachMapping(m => {\n    if (m.originalLine === null) return;\n    let source = sources.get(m.source);\n\n    if (!source) {\n      source = {\n        path: m.source,\n        content: consumer.sourceContentFor(m.source, true)\n      };\n      sources.set(m.source, source);\n    }\n\n    let sourceData = mappings.get(source);\n\n    if (!sourceData) {\n      sourceData = {\n        source,\n        mappings: []\n      };\n      mappings.set(source, sourceData);\n    }\n\n    const obj = {\n      line: m.originalLine,\n      columnStart: m.originalColumn,\n      columnEnd: Infinity,\n      name: m.name\n    };\n\n    if (last && last.source === source && last.mapping.line === m.originalLine) {\n      last.mapping.columnEnd = m.originalColumn;\n    }\n\n    last = {\n      source,\n      mapping: obj\n    };\n    sourceData.mappings.push({\n      original: obj,\n      generated: consumer.allGeneratedPositionsFor({\n        source: m.source,\n        line: m.originalLine,\n        column: m.originalColumn\n      }).map(item => ({\n        line: item.line,\n        columnStart: item.column,\n        columnEnd: item.lastColumn + 1\n      }))\n    });\n  }, null, _sourceMap().SourceMapConsumer.ORIGINAL_ORDER);\n  return {\n    file: map.file,\n    sourceRoot: map.sourceRoot,\n    sources: Array.from(mappings.values())\n  };\n}\n\nfunction findInsertionLocation(array, callback) {\n  let left = 0;\n  let right = array.length;\n\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    const item = array[mid];\n    const result = callback(item);\n\n    if (result === 0) {\n      left = mid;\n      break;\n    }\n\n    if (result >= 0) {\n      right = mid;\n    } else {\n      left = mid + 1;\n    }\n  }\n\n  let i = left;\n\n  if (i < array.length) {\n    while (i >= 0 && callback(array[i]) >= 0) {\n      i--;\n    }\n\n    return i + 1;\n  }\n\n  return i;\n}\n\nfunction filterSortedArray(array, callback) {\n  const start = findInsertionLocation(array, callback);\n  const results = [];\n\n  for (let i = start; i < array.length && callback(array[i]) === 0; i++) {\n    results.push(array[i]);\n  }\n\n  return results;\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/@babel/core/lib/transformation/file/merge-map.js"],"names":["Object","defineProperty","exports","value","default","mergeSourceMap","_sourceMap","data","require","inputMap","map","input","buildMappingData","output","mergedGenerator","SourceMapGenerator","source","sources","content","setSourceContent","path","length","defaultSource","insertedMappings","Map","eachInputGeneratedRange","generated","original","eachOverlappingGeneratedOutputRange","item","key","makeMappingKey","has","set","addMapping","line","column","columnStart","name","values","columnEnd","Infinity","clearItem","result","toJSON","sourceRoot","outputFile","inputGeneratedRange","callback","overlappingOriginal","filterApplicableOriginalRanges","mappings","filterSortedArray","outOriginal","consumer","SourceMapConsumer","assign","last","computeColumnSpans","eachMapping","m","originalLine","get","sourceContentFor","sourceData","obj","originalColumn","mapping","push","allGeneratedPositionsFor","lastColumn","ORIGINAL_ORDER","file","Array","from","findInsertionLocation","array","left","right","mid","Math","floor","i","start","results"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = mergeSourceMap;\n\nfunction _sourceMap() {\n  const data = require(\"source-map\");\n\n  _sourceMap = function () {\n    return data;\n  };\n\n  return data;\n}\n\nfunction mergeSourceMap(inputMap, map) {\n  const input = buildMappingData(inputMap);\n  const output = buildMappingData(map);\n  const mergedGenerator = new (_sourceMap().SourceMapGenerator)();\n\n  for (const {\n    source\n  } of input.sources) {\n    if (typeof source.content === \"string\") {\n      mergedGenerator.setSourceContent(source.path, source.content);\n    }\n  }\n\n  if (output.sources.length === 1) {\n    const defaultSource = output.sources[0];\n    const insertedMappings = new Map();\n    eachInputGeneratedRange(input, (generated, original, source) => {\n      eachOverlappingGeneratedOutputRange(defaultSource, generated, item => {\n        const key = makeMappingKey(item);\n        if (insertedMappings.has(key)) return;\n        insertedMappings.set(key, item);\n        mergedGenerator.addMapping({\n          source: source.path,\n          original: {\n            line: original.line,\n            column: original.columnStart\n          },\n          generated: {\n            line: item.line,\n            column: item.columnStart\n          },\n          name: original.name\n        });\n      });\n    });\n\n    for (const item of insertedMappings.values()) {\n      if (item.columnEnd === Infinity) {\n        continue;\n      }\n\n      const clearItem = {\n        line: item.line,\n        columnStart: item.columnEnd\n      };\n      const key = makeMappingKey(clearItem);\n\n      if (insertedMappings.has(key)) {\n        continue;\n      }\n\n      mergedGenerator.addMapping({\n        generated: {\n          line: clearItem.line,\n          column: clearItem.columnStart\n        }\n      });\n    }\n  }\n\n  const result = mergedGenerator.toJSON();\n\n  if (typeof input.sourceRoot === \"string\") {\n    result.sourceRoot = input.sourceRoot;\n  }\n\n  return result;\n}\n\nfunction makeMappingKey(item) {\n  return `${item.line}/${item.columnStart}`;\n}\n\nfunction eachOverlappingGeneratedOutputRange(outputFile, inputGeneratedRange, callback) {\n  const overlappingOriginal = filterApplicableOriginalRanges(outputFile, inputGeneratedRange);\n\n  for (const {\n    generated\n  } of overlappingOriginal) {\n    for (const item of generated) {\n      callback(item);\n    }\n  }\n}\n\nfunction filterApplicableOriginalRanges({\n  mappings\n}, {\n  line,\n  columnStart,\n  columnEnd\n}) {\n  return filterSortedArray(mappings, ({\n    original: outOriginal\n  }) => {\n    if (line > outOriginal.line) return -1;\n    if (line < outOriginal.line) return 1;\n    if (columnStart >= outOriginal.columnEnd) return -1;\n    if (columnEnd <= outOriginal.columnStart) return 1;\n    return 0;\n  });\n}\n\nfunction eachInputGeneratedRange(map, callback) {\n  for (const {\n    source,\n    mappings\n  } of map.sources) {\n    for (const {\n      original,\n      generated\n    } of mappings) {\n      for (const item of generated) {\n        callback(item, original, source);\n      }\n    }\n  }\n}\n\nfunction buildMappingData(map) {\n  const consumer = new (_sourceMap().SourceMapConsumer)(Object.assign({}, map, {\n    sourceRoot: null\n  }));\n  const sources = new Map();\n  const mappings = new Map();\n  let last = null;\n  consumer.computeColumnSpans();\n  consumer.eachMapping(m => {\n    if (m.originalLine === null) return;\n    let source = sources.get(m.source);\n\n    if (!source) {\n      source = {\n        path: m.source,\n        content: consumer.sourceContentFor(m.source, true)\n      };\n      sources.set(m.source, source);\n    }\n\n    let sourceData = mappings.get(source);\n\n    if (!sourceData) {\n      sourceData = {\n        source,\n        mappings: []\n      };\n      mappings.set(source, sourceData);\n    }\n\n    const obj = {\n      line: m.originalLine,\n      columnStart: m.originalColumn,\n      columnEnd: Infinity,\n      name: m.name\n    };\n\n    if (last && last.source === source && last.mapping.line === m.originalLine) {\n      last.mapping.columnEnd = m.originalColumn;\n    }\n\n    last = {\n      source,\n      mapping: obj\n    };\n    sourceData.mappings.push({\n      original: obj,\n      generated: consumer.allGeneratedPositionsFor({\n        source: m.source,\n        line: m.originalLine,\n        column: m.originalColumn\n      }).map(item => ({\n        line: item.line,\n        columnStart: item.column,\n        columnEnd: item.lastColumn + 1\n      }))\n    });\n  }, null, _sourceMap().SourceMapConsumer.ORIGINAL_ORDER);\n  return {\n    file: map.file,\n    sourceRoot: map.sourceRoot,\n    sources: Array.from(mappings.values())\n  };\n}\n\nfunction findInsertionLocation(array, callback) {\n  let left = 0;\n  let right = array.length;\n\n  while (left < right) {\n    const mid = Math.floor((left + right) / 2);\n    const item = array[mid];\n    const result = callback(item);\n\n    if (result === 0) {\n      left = mid;\n      break;\n    }\n\n    if (result >= 0) {\n      right = mid;\n    } else {\n      left = mid + 1;\n    }\n  }\n\n  let i = left;\n\n  if (i < array.length) {\n    while (i >= 0 && callback(array[i]) >= 0) {\n      i--;\n    }\n\n    return i + 1;\n  }\n\n  return i;\n}\n\nfunction filterSortedArray(array, callback) {\n  const start = findInsertionLocation(array, callback);\n  const results = [];\n\n  for (let i = start; i < array.length && callback(array[i]) === 0; i++) {\n    results.push(array[i]);\n  }\n\n  return results;\n}"]},"metadata":{},"sourceType":"script"}