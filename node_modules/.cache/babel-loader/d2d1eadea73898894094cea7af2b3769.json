{"ast":null,"code":"import { Platform, findNodeHandle } from 'react-native';\nimport ReanimatedModule from '../../ReanimatedModule';\nimport AnimatedNode from './AnimatedNode';\nimport InternalAnimatedValue from './AnimatedValue';\nimport { createAnimatedAlways } from './AnimatedAlways';\nimport invariant from 'invariant';\nimport createEventObjectProxyPolyfill from './createEventObjectProxyPolyfill';\n\nfunction sanitizeArgMapping(argMapping) {\n  // Find animated values in `argMapping` and create an array representing their\n  // key path inside the `nativeEvent` object. Ex.: ['contentOffset', 'x'].\n  const eventMappings = [];\n  const alwaysNodes = [];\n\n  const getNode = node => {\n    if (Platform.OS === 'web' || Platform.OS === 'windows' || Platform.OS === 'macos') {\n      return node;\n    }\n\n    return node.__nodeID;\n  };\n\n  const traverse = (value, path) => {\n    if (value instanceof InternalAnimatedValue) {\n      eventMappings.push(path.concat(getNode(value)));\n    } else if (typeof value === 'object' && value.__val) {\n      eventMappings.push(path.concat(getNode(value.__val)));\n    } else if (typeof value === 'function') {\n      const node = new InternalAnimatedValue(0);\n      alwaysNodes.push(createAnimatedAlways(value(node)));\n      eventMappings.push(path.concat(getNode(node)));\n    } else if (typeof value === 'object') {\n      for (const key in value) {\n        traverse(value[key], path.concat(key));\n      }\n    }\n  };\n\n  invariant(argMapping[0] && argMapping[0].nativeEvent, 'Native driven events only support animated values contained inside `nativeEvent`.'); // Assume that the event containing `nativeEvent` is always the first argument.\n\n  const ev = argMapping[0].nativeEvent;\n\n  if (typeof ev === 'object') {\n    traverse(ev, []);\n  } else if (typeof ev === 'function') {\n    const proxyHandler = {\n      get: function (target, name) {\n        if (name === '__isProxy') {\n          return true;\n        }\n\n        if (!target[name] && name !== '__val') {\n          target[name] = new Proxy({}, proxyHandler);\n        }\n\n        return target[name];\n      },\n      set: function (target, prop, value) {\n        if (prop === '__val') {\n          target[prop] = value;\n          return true;\n        }\n\n        return false;\n      }\n    };\n    const proxy = typeof Proxy === 'function' ? new Proxy({}, proxyHandler) : createEventObjectProxyPolyfill();\n    alwaysNodes.push(createAnimatedAlways(ev(proxy)));\n    traverse(proxy, []);\n  }\n\n  return {\n    eventMappings,\n    alwaysNodes\n  };\n}\n\nexport default class AnimatedEvent extends AnimatedNode {\n  constructor(argMapping) {\n    let _config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    const {\n      eventMappings,\n      alwaysNodes\n    } = sanitizeArgMapping(argMapping);\n    super({\n      type: 'event',\n      argMapping: eventMappings\n    });\n    this._alwaysNodes = alwaysNodes;\n  }\n\n  toString() {\n    return `AnimatedEvent, id: ${this.__nodeID}`;\n  } // The below field is a temporary workaround to make AnimatedEvent object be recognized\n  // as Animated.event event callback and therefore filtered out from being send over the\n  // bridge which was causing the object to be frozen in JS.\n\n\n  __isNative = true;\n\n  attachEvent(viewRef, eventName) {\n    for (let i = 0; i < this._alwaysNodes.length; i++) {\n      this._alwaysNodes[i].__attach();\n    }\n\n    this.__attach();\n\n    const viewTag = findNodeHandle(viewRef);\n    ReanimatedModule.attachEvent(viewTag, eventName, this.__nodeID);\n  }\n\n  __onEvaluate() {\n    return 0;\n  }\n\n  detachEvent(viewRef, eventName) {\n    for (let i = 0; i < this._alwaysNodes.length; i++) {\n      this._alwaysNodes[i].isNativelyInitialized() && this._alwaysNodes[i].__detach();\n    }\n\n    const viewTag = findNodeHandle(viewRef);\n    ReanimatedModule.detachEvent(viewTag, eventName, this.__nodeID);\n\n    this.__detach();\n  }\n\n}\nexport function createAnimatedEvent(argMapping, config) {\n  return new AnimatedEvent(argMapping, config);\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedEvent.js"],"names":["Platform","findNodeHandle","ReanimatedModule","AnimatedNode","InternalAnimatedValue","createAnimatedAlways","invariant","createEventObjectProxyPolyfill","sanitizeArgMapping","argMapping","eventMappings","alwaysNodes","getNode","node","OS","__nodeID","traverse","value","path","push","concat","__val","key","nativeEvent","ev","proxyHandler","get","target","name","Proxy","set","prop","proxy","AnimatedEvent","constructor","_config","type","_alwaysNodes","toString","__isNative","attachEvent","viewRef","eventName","i","length","__attach","viewTag","__onEvaluate","detachEvent","isNativelyInitialized","__detach","createAnimatedEvent","config"],"mappings":"AAAA,SAASA,QAAT,EAAmBC,cAAnB,QAAyC,cAAzC;AACA,OAAOC,gBAAP,MAA6B,wBAA7B;AAEA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,qBAAP,MAAkC,iBAAlC;AACA,SAASC,oBAAT,QAAqC,kBAArC;AAEA,OAAOC,SAAP,MAAsB,WAAtB;AACA,OAAOC,8BAAP,MAA2C,kCAA3C;;AAEA,SAASC,kBAAT,CAA4BC,UAA5B,EAAwC;AACtC;AACA;AACA,QAAMC,aAAa,GAAG,EAAtB;AACA,QAAMC,WAAW,GAAG,EAApB;;AAEA,QAAMC,OAAO,GAAIC,IAAD,IAAU;AACxB,QACEb,QAAQ,CAACc,EAAT,KAAgB,KAAhB,IACAd,QAAQ,CAACc,EAAT,KAAgB,SADhB,IAEAd,QAAQ,CAACc,EAAT,KAAgB,OAHlB,EAIE;AACA,aAAOD,IAAP;AACD;;AACD,WAAOA,IAAI,CAACE,QAAZ;AACD,GATD;;AAWA,QAAMC,QAAQ,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AAChC,QAAID,KAAK,YAAYb,qBAArB,EAA4C;AAC1CM,MAAAA,aAAa,CAACS,IAAd,CAAmBD,IAAI,CAACE,MAAL,CAAYR,OAAO,CAACK,KAAD,CAAnB,CAAnB;AACD,KAFD,MAEO,IAAI,OAAOA,KAAP,KAAiB,QAAjB,IAA6BA,KAAK,CAACI,KAAvC,EAA8C;AACnDX,MAAAA,aAAa,CAACS,IAAd,CAAmBD,IAAI,CAACE,MAAL,CAAYR,OAAO,CAACK,KAAK,CAACI,KAAP,CAAnB,CAAnB;AACD,KAFM,MAEA,IAAI,OAAOJ,KAAP,KAAiB,UAArB,EAAiC;AACtC,YAAMJ,IAAI,GAAG,IAAIT,qBAAJ,CAA0B,CAA1B,CAAb;AACAO,MAAAA,WAAW,CAACQ,IAAZ,CAAiBd,oBAAoB,CAACY,KAAK,CAACJ,IAAD,CAAN,CAArC;AACAH,MAAAA,aAAa,CAACS,IAAd,CAAmBD,IAAI,CAACE,MAAL,CAAYR,OAAO,CAACC,IAAD,CAAnB,CAAnB;AACD,KAJM,MAIA,IAAI,OAAOI,KAAP,KAAiB,QAArB,EAA+B;AACpC,WAAK,MAAMK,GAAX,IAAkBL,KAAlB,EAAyB;AACvBD,QAAAA,QAAQ,CAACC,KAAK,CAACK,GAAD,CAAN,EAAaJ,IAAI,CAACE,MAAL,CAAYE,GAAZ,CAAb,CAAR;AACD;AACF;AACF,GAdD;;AAgBAhB,EAAAA,SAAS,CACPG,UAAU,CAAC,CAAD,CAAV,IAAiBA,UAAU,CAAC,CAAD,CAAV,CAAcc,WADxB,EAEP,mFAFO,CAAT,CAjCsC,CAsCtC;;AACA,QAAMC,EAAE,GAAGf,UAAU,CAAC,CAAD,CAAV,CAAcc,WAAzB;;AACA,MAAI,OAAOC,EAAP,KAAc,QAAlB,EAA4B;AAC1BR,IAAAA,QAAQ,CAACQ,EAAD,EAAK,EAAL,CAAR;AACD,GAFD,MAEO,IAAI,OAAOA,EAAP,KAAc,UAAlB,EAA8B;AACnC,UAAMC,YAAY,GAAG;AACnBC,MAAAA,GAAG,EAAE,UAAUC,MAAV,EAAkBC,IAAlB,EAAwB;AAC3B,YAAIA,IAAI,KAAK,WAAb,EAA0B;AACxB,iBAAO,IAAP;AACD;;AACD,YAAI,CAACD,MAAM,CAACC,IAAD,CAAP,IAAiBA,IAAI,KAAK,OAA9B,EAAuC;AACrCD,UAAAA,MAAM,CAACC,IAAD,CAAN,GAAe,IAAIC,KAAJ,CAAU,EAAV,EAAcJ,YAAd,CAAf;AACD;;AACD,eAAOE,MAAM,CAACC,IAAD,CAAb;AACD,OATkB;AAUnBE,MAAAA,GAAG,EAAE,UAAUH,MAAV,EAAkBI,IAAlB,EAAwBd,KAAxB,EAA+B;AAClC,YAAIc,IAAI,KAAK,OAAb,EAAsB;AACpBJ,UAAAA,MAAM,CAACI,IAAD,CAAN,GAAed,KAAf;AACA,iBAAO,IAAP;AACD;;AACD,eAAO,KAAP;AACD;AAhBkB,KAArB;AAmBA,UAAMe,KAAK,GACT,OAAOH,KAAP,KAAiB,UAAjB,GACI,IAAIA,KAAJ,CAAU,EAAV,EAAcJ,YAAd,CADJ,GAEIlB,8BAA8B,EAHpC;AAIAI,IAAAA,WAAW,CAACQ,IAAZ,CAAiBd,oBAAoB,CAACmB,EAAE,CAACQ,KAAD,CAAH,CAArC;AACAhB,IAAAA,QAAQ,CAACgB,KAAD,EAAQ,EAAR,CAAR;AACD;;AAED,SAAO;AAAEtB,IAAAA,aAAF;AAAiBC,IAAAA;AAAjB,GAAP;AACD;;AAED,eAAe,MAAMsB,aAAN,SAA4B9B,YAA5B,CAAyC;AACtD+B,EAAAA,WAAW,CAACzB,UAAD,EAA2B;AAAA,QAAd0B,OAAc,uEAAJ,EAAI;;AACpC,UAAM;AAAEzB,MAAAA,aAAF;AAAiBC,MAAAA;AAAjB,QAAiCH,kBAAkB,CAACC,UAAD,CAAzD;AACA,UAAM;AAAE2B,MAAAA,IAAI,EAAE,OAAR;AAAiB3B,MAAAA,UAAU,EAAEC;AAA7B,KAAN;AACA,SAAK2B,YAAL,GAAoB1B,WAApB;AACD;;AAED2B,EAAAA,QAAQ,GAAG;AACT,WAAQ,sBAAqB,KAAKvB,QAAS,EAA3C;AACD,GATqD,CAWtD;AACA;AACA;;;AACAwB,EAAAA,UAAU,GAAG,IAAH;;AAEVC,EAAAA,WAAW,CAACC,OAAD,EAAUC,SAAV,EAAqB;AAC9B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKN,YAAL,CAAkBO,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AACjD,WAAKN,YAAL,CAAkBM,CAAlB,EAAqBE,QAArB;AACD;;AACD,SAAKA,QAAL;;AACA,UAAMC,OAAO,GAAG7C,cAAc,CAACwC,OAAD,CAA9B;AACAvC,IAAAA,gBAAgB,CAACsC,WAAjB,CAA6BM,OAA7B,EAAsCJ,SAAtC,EAAiD,KAAK3B,QAAtD;AACD;;AAEDgC,EAAAA,YAAY,GAAG;AACb,WAAO,CAAP;AACD;;AAEDC,EAAAA,WAAW,CAACP,OAAD,EAAUC,SAAV,EAAqB;AAC9B,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKN,YAAL,CAAkBO,MAAtC,EAA8CD,CAAC,EAA/C,EAAmD;AACjD,WAAKN,YAAL,CAAkBM,CAAlB,EAAqBM,qBAArB,MACE,KAAKZ,YAAL,CAAkBM,CAAlB,EAAqBO,QAArB,EADF;AAED;;AACD,UAAMJ,OAAO,GAAG7C,cAAc,CAACwC,OAAD,CAA9B;AACAvC,IAAAA,gBAAgB,CAAC8C,WAAjB,CAA6BF,OAA7B,EAAsCJ,SAAtC,EAAiD,KAAK3B,QAAtD;;AACA,SAAKmC,QAAL;AACD;;AArCqD;AAwCxD,OAAO,SAASC,mBAAT,CAA6B1C,UAA7B,EAAyC2C,MAAzC,EAAiD;AACtD,SAAO,IAAInB,aAAJ,CAAkBxB,UAAlB,EAA8B2C,MAA9B,CAAP;AACD","sourcesContent":["import { Platform, findNodeHandle } from 'react-native';\nimport ReanimatedModule from '../../ReanimatedModule';\n\nimport AnimatedNode from './AnimatedNode';\nimport InternalAnimatedValue from './AnimatedValue';\nimport { createAnimatedAlways } from './AnimatedAlways';\n\nimport invariant from 'invariant';\nimport createEventObjectProxyPolyfill from './createEventObjectProxyPolyfill';\n\nfunction sanitizeArgMapping(argMapping) {\n  // Find animated values in `argMapping` and create an array representing their\n  // key path inside the `nativeEvent` object. Ex.: ['contentOffset', 'x'].\n  const eventMappings = [];\n  const alwaysNodes = [];\n\n  const getNode = (node) => {\n    if (\n      Platform.OS === 'web' ||\n      Platform.OS === 'windows' ||\n      Platform.OS === 'macos'\n    ) {\n      return node;\n    }\n    return node.__nodeID;\n  };\n\n  const traverse = (value, path) => {\n    if (value instanceof InternalAnimatedValue) {\n      eventMappings.push(path.concat(getNode(value)));\n    } else if (typeof value === 'object' && value.__val) {\n      eventMappings.push(path.concat(getNode(value.__val)));\n    } else if (typeof value === 'function') {\n      const node = new InternalAnimatedValue(0);\n      alwaysNodes.push(createAnimatedAlways(value(node)));\n      eventMappings.push(path.concat(getNode(node)));\n    } else if (typeof value === 'object') {\n      for (const key in value) {\n        traverse(value[key], path.concat(key));\n      }\n    }\n  };\n\n  invariant(\n    argMapping[0] && argMapping[0].nativeEvent,\n    'Native driven events only support animated values contained inside `nativeEvent`.'\n  );\n\n  // Assume that the event containing `nativeEvent` is always the first argument.\n  const ev = argMapping[0].nativeEvent;\n  if (typeof ev === 'object') {\n    traverse(ev, []);\n  } else if (typeof ev === 'function') {\n    const proxyHandler = {\n      get: function (target, name) {\n        if (name === '__isProxy') {\n          return true;\n        }\n        if (!target[name] && name !== '__val') {\n          target[name] = new Proxy({}, proxyHandler);\n        }\n        return target[name];\n      },\n      set: function (target, prop, value) {\n        if (prop === '__val') {\n          target[prop] = value;\n          return true;\n        }\n        return false;\n      },\n    };\n\n    const proxy =\n      typeof Proxy === 'function'\n        ? new Proxy({}, proxyHandler)\n        : createEventObjectProxyPolyfill();\n    alwaysNodes.push(createAnimatedAlways(ev(proxy)));\n    traverse(proxy, []);\n  }\n\n  return { eventMappings, alwaysNodes };\n}\n\nexport default class AnimatedEvent extends AnimatedNode {\n  constructor(argMapping, _config = {}) {\n    const { eventMappings, alwaysNodes } = sanitizeArgMapping(argMapping);\n    super({ type: 'event', argMapping: eventMappings });\n    this._alwaysNodes = alwaysNodes;\n  }\n\n  toString() {\n    return `AnimatedEvent, id: ${this.__nodeID}`;\n  }\n\n  // The below field is a temporary workaround to make AnimatedEvent object be recognized\n  // as Animated.event event callback and therefore filtered out from being send over the\n  // bridge which was causing the object to be frozen in JS.\n  __isNative = true;\n\n  attachEvent(viewRef, eventName) {\n    for (let i = 0; i < this._alwaysNodes.length; i++) {\n      this._alwaysNodes[i].__attach();\n    }\n    this.__attach();\n    const viewTag = findNodeHandle(viewRef);\n    ReanimatedModule.attachEvent(viewTag, eventName, this.__nodeID);\n  }\n\n  __onEvaluate() {\n    return 0;\n  }\n\n  detachEvent(viewRef, eventName) {\n    for (let i = 0; i < this._alwaysNodes.length; i++) {\n      this._alwaysNodes[i].isNativelyInitialized() &&\n        this._alwaysNodes[i].__detach();\n    }\n    const viewTag = findNodeHandle(viewRef);\n    ReanimatedModule.detachEvent(viewTag, eventName, this.__nodeID);\n    this.__detach();\n  }\n}\n\nexport function createAnimatedEvent(argMapping, config) {\n  return new AnimatedEvent(argMapping, config);\n}\n"]},"metadata":{},"sourceType":"module"}