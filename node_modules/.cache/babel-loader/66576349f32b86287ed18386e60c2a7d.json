{"ast":null,"code":"import AnimatedNode from './AnimatedNode';\nimport invariant from 'invariant';\nimport { val } from '../val';\nimport { adapt } from '../core/AnimatedBlock';\n\nclass AnimatedSet extends AnimatedNode {\n  _what;\n  _value;\n\n  constructor(what, value) {\n    invariant(what instanceof AnimatedNode, `Reanimated: Animated.set first argument should be of type AnimatedNode but got ${what}`);\n    invariant(value instanceof AnimatedNode, `Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got ${value}`);\n    super({\n      type: 'set',\n      what,\n      value\n    }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    this._what = what;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedSet, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const newValue = val(this._value);\n\n    this._what.setValue(newValue);\n\n    return newValue;\n  }\n\n}\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedSet.js"],"names":["AnimatedNode","invariant","val","adapt","AnimatedSet","_what","_value","constructor","what","value","type","_constant","toString","__nodeID","__onEvaluate","newValue","setValue","createAnimatedSet"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,gBAAzB;AACA,OAAOC,SAAP,MAAsB,WAAtB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,SAASC,KAAT,QAAsB,uBAAtB;;AAEA,MAAMC,WAAN,SAA0BJ,YAA1B,CAAuC;AACrCK,EAAAA,KAAK;AACLC,EAAAA,MAAM;;AAENC,EAAAA,WAAW,CAACC,IAAD,EAAOC,KAAP,EAAc;AACvBR,IAAAA,SAAS,CACPO,IAAI,YAAYR,YADT,EAEN,kFAAiFQ,IAAK,EAFhF,CAAT;AAIAP,IAAAA,SAAS,CACPQ,KAAK,YAAYT,YADV,EAEN,qGAAoGS,KAAM,EAFpG,CAAT;AAIA,UAAM;AAAEC,MAAAA,IAAI,EAAE,KAAR;AAAeF,MAAAA,IAAf;AAAqBC,MAAAA;AAArB,KAAN,EAAoC,CAACA,KAAD,CAApC;AACAR,IAAAA,SAAS,CAAC,CAACO,IAAI,CAACG,SAAP,EAAkB,oCAAlB,CAAT;AACA,SAAKN,KAAL,GAAaG,IAAb;AACA,SAAKF,MAAL,GAAcG,KAAd;AACD;;AAEDG,EAAAA,QAAQ,GAAG;AACT,WAAQ,oBAAmB,KAAKC,QAAS,EAAzC;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,UAAMC,QAAQ,GAAGb,GAAG,CAAC,KAAKI,MAAN,CAApB;;AACA,SAAKD,KAAL,CAAWW,QAAX,CAAoBD,QAApB;;AACA,WAAOA,QAAP;AACD;;AA3BoC;;AA8BvC,OAAO,SAASE,iBAAT,CAA2BT,IAA3B,EAAiCC,KAAjC,EAAwC;AAC7C,SAAO,IAAIL,WAAJ,CAAgBI,IAAhB,EAAsBL,KAAK,CAACM,KAAD,CAA3B,CAAP;AACD","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport invariant from 'invariant';\nimport { val } from '../val';\nimport { adapt } from '../core/AnimatedBlock';\n\nclass AnimatedSet extends AnimatedNode {\n  _what;\n  _value;\n\n  constructor(what, value) {\n    invariant(\n      what instanceof AnimatedNode,\n      `Reanimated: Animated.set first argument should be of type AnimatedNode but got ${what}`\n    );\n    invariant(\n      value instanceof AnimatedNode,\n      `Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got ${value}`\n    );\n    super({ type: 'set', what, value }, [value]);\n    invariant(!what._constant, 'Value to be set cannot be constant');\n    this._what = what;\n    this._value = value;\n  }\n\n  toString() {\n    return `AnimatedSet, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    const newValue = val(this._value);\n    this._what.setValue(newValue);\n    return newValue;\n  }\n}\n\nexport function createAnimatedSet(what, value) {\n  return new AnimatedSet(what, adapt(value));\n}\n"]},"metadata":{},"sourceType":"module"}