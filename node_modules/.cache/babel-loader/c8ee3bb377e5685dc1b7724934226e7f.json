{"ast":null,"code":"import { defineAnimation } from './util';\nexport function withSpring(toValue, userConfig, callback) {\n  'worklet';\n\n  return defineAnimation(toValue, () => {\n    'worklet'; // TODO: figure out why we can't use spread or Object.assign here\n    // when user config is \"frozen object\" we can't enumerate it (perhaps\n    // something is wrong with the object prototype).\n\n    const config = {\n      damping: 10,\n      mass: 1,\n      stiffness: 100,\n      overshootClamping: false,\n      restDisplacementThreshold: 0.01,\n      restSpeedThreshold: 2,\n      velocity: 0\n    };\n\n    if (userConfig) {\n      Object.keys(userConfig).forEach(key => config[key] = userConfig[key]);\n    }\n\n    function spring(animation, now) {\n      const {\n        toValue,\n        lastTimestamp,\n        current,\n        velocity\n      } = animation;\n      const deltaTime = Math.min(now - lastTimestamp, 64);\n      animation.lastTimestamp = now;\n      const c = config.damping;\n      const m = config.mass;\n      const k = config.stiffness;\n      const v0 = -velocity;\n      const x0 = toValue - current;\n      const zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n\n      const omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n\n      const omega1 = omega0 * Math.sqrt(1 - Math.pow(zeta, 2)); // exponential decay\n\n      const t = deltaTime / 1000;\n      const sin1 = Math.sin(omega1 * t);\n      const cos1 = Math.cos(omega1 * t); // under damped\n\n      const underDampedEnvelope = Math.exp(-zeta * omega0 * t);\n      const underDampedFrag1 = underDampedEnvelope * (sin1 * ((v0 + zeta * omega0 * x0) / omega1) + x0 * cos1);\n      const underDampedPosition = toValue - underDampedFrag1; // This looks crazy -- it's actually just the derivative of the oscillation function\n\n      const underDampedVelocity = zeta * omega0 * underDampedFrag1 - underDampedEnvelope * (cos1 * (v0 + zeta * omega0 * x0) - omega1 * x0 * sin1); // critically damped\n\n      const criticallyDampedEnvelope = Math.exp(-omega0 * t);\n      const criticallyDampedPosition = toValue - criticallyDampedEnvelope * (x0 + (v0 + omega0 * x0) * t);\n      const criticallyDampedVelocity = criticallyDampedEnvelope * (v0 * (t * omega0 - 1) + t * x0 * omega0 * omega0);\n\n      const isOvershooting = () => {\n        if (config.overshootClamping && config.stiffness !== 0) {\n          return current < toValue ? animation.current > toValue : animation.current < toValue;\n        } else {\n          return false;\n        }\n      };\n\n      const isVelocity = Math.abs(velocity) < config.restSpeedThreshold;\n      const isDisplacement = config.stiffness === 0 || Math.abs(toValue - current) < config.restDisplacementThreshold;\n\n      if (zeta < 1) {\n        animation.current = underDampedPosition;\n        animation.velocity = underDampedVelocity;\n      } else {\n        animation.current = criticallyDampedPosition;\n        animation.velocity = criticallyDampedVelocity;\n      }\n\n      if (isOvershooting() || isVelocity && isDisplacement) {\n        if (config.stiffness !== 0) {\n          animation.velocity = 0;\n          animation.current = toValue;\n        } // clear lastTimestamp to avoid using stale value by the next spring animation that starts after this one\n\n\n        animation.lastTimestamp = 0;\n        return true;\n      }\n\n      return false;\n    }\n\n    function onStart(animation, value, now, previousAnimation) {\n      animation.current = value;\n\n      if (previousAnimation) {\n        animation.velocity = previousAnimation.velocity || animation.velocity || 0;\n        animation.lastTimestamp = previousAnimation.lastTimestamp || now;\n      } else {\n        animation.lastTimestamp = now;\n      }\n    }\n\n    return {\n      onFrame: spring,\n      onStart,\n      toValue,\n      velocity: config.velocity || 0,\n      current: toValue,\n      callback,\n      lastTimestamp: 0\n    };\n  });\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated2/animation/spring.js"],"names":["defineAnimation","withSpring","toValue","userConfig","callback","config","damping","mass","stiffness","overshootClamping","restDisplacementThreshold","restSpeedThreshold","velocity","Object","keys","forEach","key","spring","animation","now","lastTimestamp","current","deltaTime","Math","min","c","m","k","v0","x0","zeta","sqrt","omega0","omega1","pow","t","sin1","sin","cos1","cos","underDampedEnvelope","exp","underDampedFrag1","underDampedPosition","underDampedVelocity","criticallyDampedEnvelope","criticallyDampedPosition","criticallyDampedVelocity","isOvershooting","isVelocity","abs","isDisplacement","onStart","value","previousAnimation","onFrame"],"mappings":"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","sourcesContent":["import { defineAnimation } from './util';\nexport function withSpring(toValue, userConfig, callback) {\n    'worklet';\n    return defineAnimation(toValue, () => {\n        'worklet';\n        // TODO: figure out why we can't use spread or Object.assign here\n        // when user config is \"frozen object\" we can't enumerate it (perhaps\n        // something is wrong with the object prototype).\n        const config = {\n            damping: 10,\n            mass: 1,\n            stiffness: 100,\n            overshootClamping: false,\n            restDisplacementThreshold: 0.01,\n            restSpeedThreshold: 2,\n            velocity: 0,\n        };\n        if (userConfig) {\n            Object.keys(userConfig).forEach((key) => (config[key] = userConfig[key]));\n        }\n        function spring(animation, now) {\n            const { toValue, lastTimestamp, current, velocity } = animation;\n            const deltaTime = Math.min(now - lastTimestamp, 64);\n            animation.lastTimestamp = now;\n            const c = config.damping;\n            const m = config.mass;\n            const k = config.stiffness;\n            const v0 = -velocity;\n            const x0 = toValue - current;\n            const zeta = c / (2 * Math.sqrt(k * m)); // damping ratio\n            const omega0 = Math.sqrt(k / m); // undamped angular frequency of the oscillator (rad/ms)\n            const omega1 = omega0 * Math.sqrt(1 - Math.pow(zeta, 2)); // exponential decay\n            const t = deltaTime / 1000;\n            const sin1 = Math.sin(omega1 * t);\n            const cos1 = Math.cos(omega1 * t);\n            // under damped\n            const underDampedEnvelope = Math.exp(-zeta * omega0 * t);\n            const underDampedFrag1 = underDampedEnvelope *\n                (sin1 * ((v0 + zeta * omega0 * x0) / omega1) + x0 * cos1);\n            const underDampedPosition = toValue - underDampedFrag1;\n            // This looks crazy -- it's actually just the derivative of the oscillation function\n            const underDampedVelocity = zeta * omega0 * underDampedFrag1 -\n                underDampedEnvelope *\n                    (cos1 * (v0 + zeta * omega0 * x0) - omega1 * x0 * sin1);\n            // critically damped\n            const criticallyDampedEnvelope = Math.exp(-omega0 * t);\n            const criticallyDampedPosition = toValue - criticallyDampedEnvelope * (x0 + (v0 + omega0 * x0) * t);\n            const criticallyDampedVelocity = criticallyDampedEnvelope *\n                (v0 * (t * omega0 - 1) + t * x0 * omega0 * omega0);\n            const isOvershooting = () => {\n                if (config.overshootClamping && config.stiffness !== 0) {\n                    return current < toValue\n                        ? animation.current > toValue\n                        : animation.current < toValue;\n                }\n                else {\n                    return false;\n                }\n            };\n            const isVelocity = Math.abs(velocity) < config.restSpeedThreshold;\n            const isDisplacement = config.stiffness === 0 ||\n                Math.abs(toValue - current) < config.restDisplacementThreshold;\n            if (zeta < 1) {\n                animation.current = underDampedPosition;\n                animation.velocity = underDampedVelocity;\n            }\n            else {\n                animation.current = criticallyDampedPosition;\n                animation.velocity = criticallyDampedVelocity;\n            }\n            if (isOvershooting() || (isVelocity && isDisplacement)) {\n                if (config.stiffness !== 0) {\n                    animation.velocity = 0;\n                    animation.current = toValue;\n                }\n                // clear lastTimestamp to avoid using stale value by the next spring animation that starts after this one\n                animation.lastTimestamp = 0;\n                return true;\n            }\n            return false;\n        }\n        function onStart(animation, value, now, previousAnimation) {\n            animation.current = value;\n            if (previousAnimation) {\n                animation.velocity =\n                    previousAnimation.velocity || animation.velocity || 0;\n                animation.lastTimestamp = previousAnimation.lastTimestamp || now;\n            }\n            else {\n                animation.lastTimestamp = now;\n            }\n        }\n        return {\n            onFrame: spring,\n            onStart,\n            toValue,\n            velocity: config.velocity || 0,\n            current: toValue,\n            callback,\n            lastTimestamp: 0,\n        };\n    });\n}\n"]},"metadata":{},"sourceType":"module"}