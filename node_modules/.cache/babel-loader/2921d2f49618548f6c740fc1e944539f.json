{"ast":null,"code":"import { defineAnimation } from './util';\nimport { Platform } from 'react-native';\nexport function withDecay(userConfig, callback) {\n  'worklet';\n\n  return defineAnimation(0, () => {\n    'worklet';\n\n    var _a;\n\n    const config = {\n      deceleration: 0.998,\n      velocityFactor: Platform.OS !== 'web' ? 1 : 1000,\n      velocity: 0\n    };\n\n    if (userConfig) {\n      Object.keys(userConfig).forEach(key => config[key] = userConfig[key]);\n    }\n\n    const VELOCITY_EPS = Platform.OS !== 'web' ? 1 : 1 / 20;\n    const SLOPE_FACTOR = 0.1;\n\n    function decay(animation, now) {\n      const {\n        lastTimestamp,\n        startTimestamp,\n        initialVelocity,\n        current,\n        velocity\n      } = animation;\n      const deltaTime = Math.min(now - lastTimestamp, 64);\n      const v = velocity * Math.exp(-(1 - config.deceleration) * (now - startTimestamp) * SLOPE_FACTOR);\n      animation.current = current + v * config.velocityFactor * deltaTime / 1000; // /1000 because time is in ms not in s\n\n      animation.velocity = v;\n      animation.lastTimestamp = now;\n\n      if (config.clamp) {\n        if (initialVelocity < 0 && animation.current <= config.clamp[0]) {\n          animation.current = config.clamp[0];\n          return true;\n        } else if (initialVelocity > 0 && animation.current >= config.clamp[1]) {\n          animation.current = config.clamp[1];\n          return true;\n        }\n      }\n\n      return Math.abs(v) < VELOCITY_EPS;\n    }\n\n    function validateConfig() {\n      if (config.clamp) {\n        if (!Array.isArray(config.clamp)) {\n          throw Error(`config.clamp must be an array but is ${typeof config.clamp}`);\n        }\n\n        if (config.clamp.length !== 2) {\n          throw Error(`clamp array must contain 2 items but is given ${config.clamp.length}`);\n        }\n      }\n\n      if (config.velocityFactor <= 0) {\n        throw Error(`config.velocityFactor must be greather then 0 but is ${config.velocityFactor}`);\n      }\n    }\n\n    function onStart(animation, value, now) {\n      animation.current = value;\n      animation.lastTimestamp = now;\n      animation.startTimestamp = now;\n      animation.initialVelocity = config.velocity;\n      validateConfig();\n    }\n\n    return {\n      onFrame: decay,\n      onStart,\n      callback,\n      velocity: (_a = config.velocity) !== null && _a !== void 0 ? _a : 0,\n      initialVelocity: 0,\n      current: 0,\n      lastTimestamp: 0,\n      startTimestamp: 0\n    };\n  });\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated2/animation/decay.js"],"names":["defineAnimation","Platform","withDecay","userConfig","callback","_a","config","deceleration","velocityFactor","OS","velocity","Object","keys","forEach","key","VELOCITY_EPS","SLOPE_FACTOR","decay","animation","now","lastTimestamp","startTimestamp","initialVelocity","current","deltaTime","Math","min","v","exp","clamp","abs","validateConfig","Array","isArray","Error","length","onStart","value","onFrame"],"mappings":"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","sourcesContent":["import { defineAnimation } from './util';\nimport { Platform } from 'react-native';\nexport function withDecay(userConfig, callback) {\n    'worklet';\n    return defineAnimation(0, () => {\n        'worklet';\n        var _a;\n        const config = {\n            deceleration: 0.998,\n            velocityFactor: Platform.OS !== 'web' ? 1 : 1000,\n            velocity: 0,\n        };\n        if (userConfig) {\n            Object.keys(userConfig).forEach((key) => (config[key] = userConfig[key]));\n        }\n        const VELOCITY_EPS = Platform.OS !== 'web' ? 1 : 1 / 20;\n        const SLOPE_FACTOR = 0.1;\n        function decay(animation, now) {\n            const { lastTimestamp, startTimestamp, initialVelocity, current, velocity, } = animation;\n            const deltaTime = Math.min(now - lastTimestamp, 64);\n            const v = velocity *\n                Math.exp(-(1 - config.deceleration) * (now - startTimestamp) * SLOPE_FACTOR);\n            animation.current =\n                current + (v * config.velocityFactor * deltaTime) / 1000; // /1000 because time is in ms not in s\n            animation.velocity = v;\n            animation.lastTimestamp = now;\n            if (config.clamp) {\n                if (initialVelocity < 0 && animation.current <= config.clamp[0]) {\n                    animation.current = config.clamp[0];\n                    return true;\n                }\n                else if (initialVelocity > 0 &&\n                    animation.current >= config.clamp[1]) {\n                    animation.current = config.clamp[1];\n                    return true;\n                }\n            }\n            return Math.abs(v) < VELOCITY_EPS;\n        }\n        function validateConfig() {\n            if (config.clamp) {\n                if (!Array.isArray(config.clamp)) {\n                    throw Error(`config.clamp must be an array but is ${typeof config.clamp}`);\n                }\n                if (config.clamp.length !== 2) {\n                    throw Error(`clamp array must contain 2 items but is given ${config.clamp.length}`);\n                }\n            }\n            if (config.velocityFactor <= 0) {\n                throw Error(`config.velocityFactor must be greather then 0 but is ${config.velocityFactor}`);\n            }\n        }\n        function onStart(animation, value, now) {\n            animation.current = value;\n            animation.lastTimestamp = now;\n            animation.startTimestamp = now;\n            animation.initialVelocity = config.velocity;\n            validateConfig();\n        }\n        return {\n            onFrame: decay,\n            onStart,\n            callback,\n            velocity: (_a = config.velocity) !== null && _a !== void 0 ? _a : 0,\n            initialVelocity: 0,\n            current: 0,\n            lastTimestamp: 0,\n            startTimestamp: 0,\n        };\n    });\n}\n"]},"metadata":{},"sourceType":"module"}