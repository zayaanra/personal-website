{"ast":null,"code":"import invariant from 'invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedCond extends AnimatedNode {\n  _condition;\n  _ifBlock;\n  _elseBlock;\n\n  constructor(condition, ifBlock, elseBlock) {\n    invariant(condition instanceof AnimatedNode, `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`);\n    invariant(ifBlock instanceof AnimatedNode, `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`);\n    invariant(elseBlock instanceof AnimatedNode || elseBlock === undefined, `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`);\n    super({\n      type: 'cond',\n      cond: condition,\n      ifBlock,\n      elseBlock\n    }, [condition, ifBlock, elseBlock]);\n    this._condition = condition;\n    this._ifBlock = ifBlock;\n    this._elseBlock = elseBlock;\n  }\n\n  toString() {\n    return `AnimatedCond, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (val(this._condition)) {\n      return val(this._ifBlock);\n    } else {\n      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n    }\n  }\n\n}\n\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(adapt(cond), adapt(ifBlock), elseBlock === undefined ? undefined : adapt(elseBlock));\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCond.js"],"names":["invariant","adapt","val","AnimatedNode","AnimatedCond","_condition","_ifBlock","_elseBlock","constructor","condition","ifBlock","elseBlock","undefined","type","cond","toString","__nodeID","__onEvaluate","createAnimatedCond"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,KAAT,QAAsB,uBAAtB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;;AAEA,MAAMC,YAAN,SAA2BD,YAA3B,CAAwC;AACtCE,EAAAA,UAAU;AACVC,EAAAA,QAAQ;AACRC,EAAAA,UAAU;;AAEVC,EAAAA,WAAW,CAACC,SAAD,EAAYC,OAAZ,EAAqBC,SAArB,EAAgC;AACzCX,IAAAA,SAAS,CACPS,SAAS,YAAYN,YADd,EAEN,wFAAuFM,SAAU,EAF3F,CAAT;AAIAT,IAAAA,SAAS,CACPU,OAAO,YAAYP,YADZ,EAEN,yFAAwFO,OAAQ,EAF1F,CAAT;AAIAV,IAAAA,SAAS,CACPW,SAAS,YAAYR,YAArB,IAAqCQ,SAAS,KAAKC,SAD5C,EAEN,+GAA8GD,SAAU,EAFlH,CAAT;AAIA,UACE;AACEE,MAAAA,IAAI,EAAE,MADR;AAEEC,MAAAA,IAAI,EAAEL,SAFR;AAGEC,MAAAA,OAHF;AAIEC,MAAAA;AAJF,KADF,EAOE,CAACF,SAAD,EAAYC,OAAZ,EAAqBC,SAArB,CAPF;AASA,SAAKN,UAAL,GAAkBI,SAAlB;AACA,SAAKH,QAAL,GAAgBI,OAAhB;AACA,SAAKH,UAAL,GAAkBI,SAAlB;AACD;;AAEDI,EAAAA,QAAQ,GAAG;AACT,WAAQ,qBAAoB,KAAKC,QAAS,EAA1C;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,QAAIf,GAAG,CAAC,KAAKG,UAAN,CAAP,EAA0B;AACxB,aAAOH,GAAG,CAAC,KAAKI,QAAN,CAAV;AACD,KAFD,MAEO;AACL,aAAO,KAAKC,UAAL,KAAoBK,SAApB,GAAgCV,GAAG,CAAC,KAAKK,UAAN,CAAnC,GAAuDK,SAA9D;AACD;AACF;;AA1CqC;;AA6CxC,OAAO,SAASM,kBAAT,CAA4BJ,IAA5B,EAAkCJ,OAAlC,EAA2CC,SAA3C,EAAsD;AAC3D,SAAO,IAAIP,YAAJ,CACLH,KAAK,CAACa,IAAD,CADA,EAELb,KAAK,CAACS,OAAD,CAFA,EAGLC,SAAS,KAAKC,SAAd,GAA0BA,SAA1B,GAAsCX,KAAK,CAACU,SAAD,CAHtC,CAAP;AAKD","sourcesContent":["import invariant from 'invariant';\nimport { adapt } from '../core/AnimatedBlock';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\n\nclass AnimatedCond extends AnimatedNode {\n  _condition;\n  _ifBlock;\n  _elseBlock;\n\n  constructor(condition, ifBlock, elseBlock) {\n    invariant(\n      condition instanceof AnimatedNode,\n      `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`\n    );\n    invariant(\n      ifBlock instanceof AnimatedNode,\n      `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`\n    );\n    invariant(\n      elseBlock instanceof AnimatedNode || elseBlock === undefined,\n      `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`\n    );\n    super(\n      {\n        type: 'cond',\n        cond: condition,\n        ifBlock,\n        elseBlock,\n      },\n      [condition, ifBlock, elseBlock]\n    );\n    this._condition = condition;\n    this._ifBlock = ifBlock;\n    this._elseBlock = elseBlock;\n  }\n\n  toString() {\n    return `AnimatedCond, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (val(this._condition)) {\n      return val(this._ifBlock);\n    } else {\n      return this._elseBlock !== undefined ? val(this._elseBlock) : undefined;\n    }\n  }\n}\n\nexport function createAnimatedCond(cond, ifBlock, elseBlock) {\n  return new AnimatedCond(\n    adapt(cond),\n    adapt(ifBlock),\n    elseBlock === undefined ? undefined : adapt(elseBlock)\n  );\n}\n"]},"metadata":{},"sourceType":"module"}