{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nconst lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nconst lineBreakG = new RegExp(lineBreak.source, \"g\");\n\nfunction isNewLine(code) {\n  switch (code) {\n    case 10:\n    case 13:\n    case 8232:\n    case 8233:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nconst skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\nconst skipWhiteSpaceInLine = /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\nconst skipWhiteSpaceToLineBreak = new RegExp(\"(?=(\" + skipWhiteSpaceInLine.source + \"))\\\\1\" + /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source, \"y\");\n\nfunction isWhitespace(code) {\n  switch (code) {\n    case 0x0009:\n    case 0x000b:\n    case 0x000c:\n    case 32:\n    case 160:\n    case 5760:\n    case 0x2000:\n    case 0x2001:\n    case 0x2002:\n    case 0x2003:\n    case 0x2004:\n    case 0x2005:\n    case 0x2006:\n    case 0x2007:\n    case 0x2008:\n    case 0x2009:\n    case 0x200a:\n    case 0x202f:\n    case 0x205f:\n    case 0x3000:\n    case 0xfeff:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nclass Position {\n  constructor(line, col) {\n    this.line = void 0;\n    this.column = void 0;\n    this.line = line;\n    this.column = col;\n  }\n\n}\n\nclass SourceLocation {\n  constructor(start, end) {\n    this.start = void 0;\n    this.end = void 0;\n    this.filename = void 0;\n    this.identifierName = void 0;\n    this.start = start;\n    this.end = end;\n  }\n\n}\n\nfunction getLineInfo(input, offset) {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\nfunction createPositionWithColumnOffset(position, columnOffset) {\n  const {\n    line,\n    column\n  } = position;\n  return new Position(line, column + columnOffset);\n}\n\nclass BaseParser {\n  constructor() {\n    this.sawUnambiguousESM = false;\n    this.ambiguousScriptDifferentAst = false;\n  }\n\n  hasPlugin(pluginConfig) {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n\n      const actualOptions = this.plugins.get(pluginName);\n\n      for (const key of Object.keys(pluginOptions)) {\n        if ((actualOptions == null ? void 0 : actualOptions[key]) !== pluginOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  }\n\n  getPluginOption(plugin, name) {\n    var _this$plugins$get;\n\n    return (_this$plugins$get = this.plugins.get(plugin)) == null ? void 0 : _this$plugins$get[name];\n  }\n\n}\n\nfunction setTrailingComments(node, comments) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\nfunction setLeadingComments(node, comments) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\nfunction setInnerComments(node, comments) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\nfunction adjustInnerComments(node, elements, commentWS) {\n  let lastElement = null;\n  let i = elements.length;\n\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\nclass CommentsParser extends BaseParser {\n  addComment(comment) {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  processComment(node) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const {\n      start: nodeStart\n    } = node;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n\n      if (commentEnd > nodeStart) {\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n\n        break;\n      }\n    }\n  }\n\n  finalizeComment(commentWS) {\n    const {\n      comments\n    } = commentWS;\n\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      const {\n        containingNode: node,\n        start: commentStart\n      } = commentWS;\n\n      if (this.input.charCodeAt(commentStart - 1) === 44) {\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n\n          default:\n            {\n              setInnerComments(node, comments);\n            }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  finalizeRemainingComments() {\n    const {\n      commentStack\n    } = this.state;\n\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n\n    this.state.commentStack = [];\n  }\n\n  resetPreviousNodeTrailingComments(node) {\n    const {\n      commentStack\n    } = this.state;\n    const {\n      length\n    } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  takeSurroundingComments(node, start, end) {\n    const {\n      commentStack\n    } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n\n}\n\nconst ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\"\n});\nconst ErrorMessages = makeErrorTemplates({\n  AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n  ArgumentsInClass: \"'arguments' is only allowed in functions and class methods.\",\n  AsyncFunctionInSingleStatementContext: \"Async functions can only be declared at the top level or inside a block.\",\n  AwaitBindingIdentifier: \"Can not use 'await' as identifier inside an async function.\",\n  AwaitBindingIdentifierInStaticBlock: \"Can not use 'await' as identifier inside a static block.\",\n  AwaitExpressionFormalParameter: \"'await' is not allowed in async function parameters.\",\n  AwaitNotInAsyncContext: \"'await' is only allowed within async functions and at the top levels of modules.\",\n  AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n  BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n  BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n  BadSetterRestParameter: \"A 'set' accesor function argument must not be a rest parameter.\",\n  ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n  ConstructorClassPrivateField: \"Classes may not have a private field named '#constructor'.\",\n  ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n  ConstructorIsAsync: \"Constructor can't be an async function.\",\n  ConstructorIsGenerator: \"Constructor can't be a generator.\",\n  DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n  DecoratorBeforeExport: \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n  DecoratorConstructor: \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n  DecoratorExportClass: \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n  DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n  DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n  DeletePrivateField: \"Deleting a private field is not allowed.\",\n  DestructureNamedImport: \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n  DuplicateConstructor: \"Duplicate constructor in the same class.\",\n  DuplicateDefaultExport: \"Only one default export allowed per module.\",\n  DuplicateExport: \"`%0` has already been exported. Exported identifiers must be unique.\",\n  DuplicateProto: \"Redefinition of __proto__ property.\",\n  DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n  ElementAfterRest: \"Rest element must be last element.\",\n  EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n  ExportBindingIsString: \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n  ExportDefaultFromAsIdentifier: \"'from' is not allowed as an identifier after 'export default'.\",\n  ForInOfLoopInitializer: \"'%0' loop variable declaration may not have an initializer.\",\n  ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n  ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n  GeneratorInSingleStatementContext: \"Generators can only be declared at the top level or inside a block.\",\n  IllegalBreakContinue: \"Unsyntactic %0.\",\n  IllegalLanguageModeDirective: \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n  IllegalReturn: \"'return' outside of function.\",\n  ImportBindingIsString: 'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n  ImportCallArgumentTrailingComma: \"Trailing comma is disallowed inside import(...) arguments.\",\n  ImportCallArity: \"`import()` requires exactly %0.\",\n  ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n  ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n  InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n  InvalidCodePoint: \"Code point out of bounds.\",\n  InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n  InvalidDecimal: \"Invalid decimal.\",\n  InvalidDigit: \"Expected number in radix %0.\",\n  InvalidEscapeSequence: \"Bad character escape sequence.\",\n  InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n  InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n  InvalidIdentifier: \"Invalid identifier %0.\",\n  InvalidLhs: \"Invalid left-hand side in %0.\",\n  InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n  InvalidNumber: \"Invalid number.\",\n  InvalidOrMissingExponent: \"Floating-point numbers require a valid exponent after the 'e'.\",\n  InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n  InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n  InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n  InvalidPropertyBindingPattern: \"Binding member expression.\",\n  InvalidRecordProperty: \"Only properties and spread elements are allowed in record definitions.\",\n  InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n  LabelRedeclaration: \"Label '%0' is already declared.\",\n  LetInLexicalBinding: \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n  LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n  MalformedRegExpFlags: \"Invalid regular expression flag.\",\n  MissingClassName: \"A class name is required.\",\n  MissingEqInAssignment: \"Only '=' operator can be used for specifying default value.\",\n  MissingSemicolon: \"Missing semicolon.\",\n  MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n  MixingCoalesceWithLogical: \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n  ModuleAttributeDifferentFromType: \"The only accepted module attribute is `type`.\",\n  ModuleAttributeInvalidValue: \"Only string literals are allowed as module attribute values.\",\n  ModuleAttributesWithDuplicateKeys: 'Duplicate key \"%0\" is not allowed in module attributes.',\n  ModuleExportNameHasLoneSurrogate: \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n  ModuleExportUndefined: \"Export '%0' is not defined.\",\n  MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n  NewlineAfterThrow: \"Illegal newline after throw.\",\n  NoCatchOrFinally: \"Missing catch or finally clause.\",\n  NumberIdentifier: \"Identifier directly after number.\",\n  NumericSeparatorInEscapeSequence: \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n  ObsoleteAwaitStar: \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n  OptionalChainingNoNew: \"Constructors in/after an Optional Chain are not allowed.\",\n  OptionalChainingNoTemplate: \"Tagged Template Literals are not allowed in optionalChain.\",\n  OverrideOnConstructor: \"'override' modifier cannot appear on a constructor declaration.\",\n  ParamDupe: \"Argument name clash.\",\n  PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n  PatternHasMethod: \"Object pattern can't contain methods.\",\n  PipeBodyIsTighter: \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n  PipeTopicRequiresHackPipes: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PipeTopicUnbound: \"Topic reference is unbound; it must be inside a pipe body.\",\n  PipeTopicUnconfiguredToken: 'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n  PipeTopicUnused: \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n  PipeUnparenthesizedBody: \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n  PipelineBodyNoArrow: 'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n  PipelineBodySequenceExpression: \"Pipeline body may not be a comma-separated sequence expression.\",\n  PipelineHeadSequenceExpression: \"Pipeline head should not be a comma-separated sequence expression.\",\n  PipelineTopicUnused: \"Pipeline is in topic style but does not use topic reference.\",\n  PrimaryTopicNotAllowed: \"Topic reference was used in a lexical context without topic binding.\",\n  PrimaryTopicRequiresSmartPipeline: 'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n  PrivateInExpectedIn: \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n  PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n  RecordExpressionBarIncorrectEndSyntaxType: \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionBarIncorrectStartSyntaxType: \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  RecordExpressionHashIncorrectStartSyntaxType: \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n  RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n  SloppyFunction: \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n  StaticPrototype: \"Classes may not have static property named prototype.\",\n  StrictDelete: \"Deleting local variable in strict mode.\",\n  StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n  StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n  StrictFunction: \"In strict mode code, functions can only be declared at top level or inside a block.\",\n  StrictNumericEscape: \"The only valid numeric escape in strict mode is '\\\\0'.\",\n  StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n  StrictWith: \"'with' in strict mode.\",\n  SuperNotAllowed: \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n  SuperPrivateField: \"Private fields can't be accessed on super.\",\n  TrailingDecorator: \"Decorators must be attached to a class element.\",\n  TupleExpressionBarIncorrectEndSyntaxType: \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionBarIncorrectStartSyntaxType: \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n  TupleExpressionHashIncorrectStartSyntaxType: \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n  UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n  UnexpectedAwaitAfterPipelineBody: 'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n  UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n  UnexpectedImportExport: \"'import' and 'export' may only appear at the top level.\",\n  UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n  UnexpectedLeadingDecorator: \"Leading decorators must be attached to a class declaration.\",\n  UnexpectedLexicalDeclaration: \"Lexical declaration cannot appear in a single-statement context.\",\n  UnexpectedNewTarget: \"`new.target` can only be used in functions or class properties.\",\n  UnexpectedNumericSeparator: \"A numeric separator is only allowed between two digits.\",\n  UnexpectedPrivateField: \"Unexpected private name.\",\n  UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n  UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n  UnexpectedToken: \"Unexpected token '%0'.\",\n  UnexpectedTokenUnaryExponentiation: \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n  UnsupportedBind: \"Binding should be performed on object property.\",\n  UnsupportedDecoratorExport: \"A decorated export must export a class declaration.\",\n  UnsupportedDefaultExport: \"Only expressions, functions or classes are allowed as the `default` export.\",\n  UnsupportedImport: \"`import` can only be used in `import()` or `import.meta`.\",\n  UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n  UnsupportedParameterDecorator: \"Decorators cannot be used to decorate parameters.\",\n  UnsupportedPropertyDecorator: \"Decorators cannot be used to decorate object literal properties.\",\n  UnsupportedSuper: \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n  UnterminatedComment: \"Unterminated comment.\",\n  UnterminatedRegExp: \"Unterminated regular expression.\",\n  UnterminatedString: \"Unterminated string constant.\",\n  UnterminatedTemplate: \"Unterminated template.\",\n  VarRedeclaration: \"Identifier '%0' has already been declared.\",\n  YieldBindingIdentifier: \"Can not use 'yield' as identifier inside a generator.\",\n  YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n  ZeroDigitNumericSeparator: \"Numeric separator can not be used after leading 0.\"\n}, ErrorCodes.SyntaxError);\nconst SourceTypeModuleErrorMessages = makeErrorTemplates({\n  ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n  ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`\n}, ErrorCodes.SourceTypeModuleError);\n\nfunction keepReasonCodeCompat(reasonCode, syntaxPlugin) {\n  {\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nfunction makeErrorTemplates(messages, code, syntaxPlugin) {\n  const templates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode]\n    });\n  });\n  return Object.freeze(templates);\n}\n\nclass ParserError extends CommentsParser {\n  getLocationForPosition(pos) {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;else if (pos === this.state.end) loc = this.state.endLoc;else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;else loc = getLineInfo(this.input, pos);\n    return loc;\n  }\n\n  raise(pos, _ref) {\n    let {\n      code,\n      reasonCode,\n      template\n    } = _ref;\n\n    for (var _len = arguments.length, params = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      params[_key - 2] = arguments[_key];\n    }\n\n    return this.raiseWithData(pos, {\n      code,\n      reasonCode\n    }, template, ...params);\n  }\n\n  raiseOverwrite(pos, _ref2) {\n    let {\n      code,\n      template\n    } = _ref2;\n\n    for (var _len2 = arguments.length, params = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      params[_key2 - 2] = arguments[_key2];\n    }\n\n    const loc = this.getLocationForPosition(pos);\n    const message = template.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n\n        if (error.pos === pos) {\n          return Object.assign(error, {\n            message\n          });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n\n    return this._raise({\n      code,\n      loc,\n      pos\n    }, message);\n  }\n\n  raiseWithData(pos, data, errorTemplate) {\n    for (var _len3 = arguments.length, params = new Array(_len3 > 3 ? _len3 - 3 : 0), _key3 = 3; _key3 < _len3; _key3++) {\n      params[_key3 - 3] = arguments[_key3];\n    }\n\n    const loc = this.getLocationForPosition(pos);\n    const message = errorTemplate.replace(/%(\\d+)/g, (_, i) => params[i]) + ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign({\n      loc,\n      pos\n    }, data), message);\n  }\n\n  _raise(errorContext, message) {\n    const err = new SyntaxError(message);\n    Object.assign(err, errorContext);\n\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n\n}\n\nvar estree = superClass => class extends superClass {\n  parseRegExpLiteral(_ref3) {\n    let {\n      pattern,\n      flags\n    } = _ref3;\n    let regex = null;\n\n    try {\n      regex = new RegExp(pattern, flags);\n    } catch (e) {}\n\n    const node = this.estreeParseLiteral(regex);\n    node.regex = {\n      pattern,\n      flags\n    };\n    return node;\n  }\n\n  parseBigIntLiteral(value) {\n    let bigInt;\n\n    try {\n      bigInt = BigInt(value);\n    } catch (_unused) {\n      bigInt = null;\n    }\n\n    const node = this.estreeParseLiteral(bigInt);\n    node.bigint = String(node.value || value);\n    return node;\n  }\n\n  parseDecimalLiteral(value) {\n    const decimal = null;\n    const node = this.estreeParseLiteral(decimal);\n    node.decimal = String(node.value || value);\n    return node;\n  }\n\n  estreeParseLiteral(value) {\n    return this.parseLiteral(value, \"Literal\");\n  }\n\n  parseStringLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNumericLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  parseNullLiteral() {\n    return this.estreeParseLiteral(null);\n  }\n\n  parseBooleanLiteral(value) {\n    return this.estreeParseLiteral(value);\n  }\n\n  directiveToStmt(directive) {\n    const directiveLiteral = directive.value;\n    const stmt = this.startNodeAt(directive.start, directive.loc.start);\n    const expression = this.startNodeAt(directiveLiteral.start, directiveLiteral.loc.start);\n    expression.value = directiveLiteral.extra.expressionValue;\n    expression.raw = directiveLiteral.extra.raw;\n    stmt.expression = this.finishNodeAt(expression, \"Literal\", directiveLiteral.end, directiveLiteral.loc.end);\n    stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n    return this.finishNodeAt(stmt, \"ExpressionStatement\", directive.end, directive.loc.end);\n  }\n\n  initFunction(node, isAsync) {\n    super.initFunction(node, isAsync);\n    node.expression = false;\n  }\n\n  checkDeclaration(node) {\n    if (node != null && this.isObjectProperty(node)) {\n      this.checkDeclaration(node.value);\n    } else {\n      super.checkDeclaration(node);\n    }\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.value.params;\n  }\n\n  isValidDirective(stmt) {\n    var _stmt$expression$extr;\n\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"Literal\" && typeof stmt.expression.value === \"string\" && !((_stmt$expression$extr = stmt.expression.extra) != null && _stmt$expression$extr.parenthesized);\n  }\n\n  parseBlockBody(node) {\n    for (var _len4 = arguments.length, args = new Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {\n      args[_key4 - 1] = arguments[_key4];\n    }\n\n    super.parseBlockBody(node, ...args);\n    const directiveStatements = node.directives.map(d => this.directiveToStmt(d));\n    node.body = directiveStatements.concat(node.body);\n    delete node.directives;\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true);\n\n    if (method.typeParameters) {\n      method.value.typeParameters = method.typeParameters;\n      delete method.typeParameters;\n    }\n\n    classBody.body.push(method);\n  }\n\n  parsePrivateName() {\n    const node = super.parsePrivateName();\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return node;\n      }\n    }\n    return this.convertPrivateNameToPrivateIdentifier(node);\n  }\n\n  convertPrivateNameToPrivateIdentifier(node) {\n    const name = super.getPrivateNameSV(node);\n    node = node;\n    delete node.id;\n    node.name = name;\n    node.type = \"PrivateIdentifier\";\n    return node;\n  }\n\n  isPrivateName(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.isPrivateName(node);\n      }\n    }\n    return node.type === \"PrivateIdentifier\";\n  }\n\n  getPrivateNameSV(node) {\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return super.getPrivateNameSV(node);\n      }\n    }\n    return node.name;\n  }\n\n  parseLiteral(value, type) {\n    const node = super.parseLiteral(value, type);\n    node.raw = node.extra.raw;\n    delete node.extra;\n    return node;\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    super.parseFunctionBody(node, allowExpression, isMethod);\n    node.expression = node.body.type !== \"BlockStatement\";\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    let funcNode = this.startNode();\n    funcNode.kind = node.kind;\n    funcNode = super.parseMethod(funcNode, isGenerator, isAsync, isConstructor, allowDirectSuper, type, inClassScope);\n    funcNode.type = \"FunctionExpression\";\n    delete funcNode.kind;\n    node.value = funcNode;\n\n    if (type === \"ClassPrivateMethod\") {\n      node.computed = false;\n    }\n\n    type = \"MethodDefinition\";\n    return this.finishNode(node, type);\n  }\n\n  parseClassProperty() {\n    const propertyNode = super.parseClassProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    return propertyNode;\n  }\n\n  parseClassPrivateProperty() {\n    const propertyNode = super.parseClassPrivateProperty(...arguments);\n    {\n      if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n        return propertyNode;\n      }\n    }\n    propertyNode.type = \"PropertyDefinition\";\n    propertyNode.computed = false;\n    return propertyNode;\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    const node = super.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor);\n\n    if (node) {\n      node.type = \"Property\";\n      if (node.kind === \"method\") node.kind = \"init\";\n      node.shorthand = false;\n    }\n\n    return node;\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    const node = super.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n\n    if (node) {\n      node.kind = \"init\";\n      node.type = \"Property\";\n    }\n\n    return node;\n  }\n\n  isAssignable(node, isBinding) {\n    if (node != null && this.isObjectProperty(node)) {\n      return this.isAssignable(node.value, isBinding);\n    }\n\n    return super.isAssignable(node, isBinding);\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (node != null && this.isObjectProperty(node)) {\n      this.toAssignable(node.value, isLHS);\n      return node;\n    }\n\n    return super.toAssignable(node, isLHS);\n  }\n\n  toAssignableObjectExpressionProp(prop) {\n    if (prop.kind === \"get\" || prop.kind === \"set\") {\n      this.raise(prop.key.start, ErrorMessages.PatternHasAccessor);\n    } else if (prop.method) {\n      this.raise(prop.key.start, ErrorMessages.PatternHasMethod);\n    } else {\n      for (var _len5 = arguments.length, args = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n        args[_key5 - 1] = arguments[_key5];\n      }\n\n      super.toAssignableObjectExpressionProp(prop, ...args);\n    }\n  }\n\n  finishCallExpression(node, optional) {\n    super.finishCallExpression(node, optional);\n\n    if (node.callee.type === \"Import\") {\n      node.type = \"ImportExpression\";\n      node.source = node.arguments[0];\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        var _node$arguments$;\n\n        node.attributes = (_node$arguments$ = node.arguments[1]) != null ? _node$arguments$ : null;\n      }\n\n      delete node.arguments;\n      delete node.callee;\n    }\n\n    return node;\n  }\n\n  toReferencedArguments(node) {\n    if (node.type === \"ImportExpression\") {\n      return;\n    }\n\n    super.toReferencedArguments(node);\n  }\n\n  parseExport(node) {\n    super.parseExport(node);\n\n    switch (node.type) {\n      case \"ExportAllDeclaration\":\n        node.exported = null;\n        break;\n\n      case \"ExportNamedDeclaration\":\n        if (node.specifiers.length === 1 && node.specifiers[0].type === \"ExportNamespaceSpecifier\") {\n          node.type = \"ExportAllDeclaration\";\n          node.exported = node.specifiers[0].exported;\n          delete node.specifiers;\n        }\n\n        break;\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const node = super.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n    if (state.optionalChainMember) {\n      if (node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\") {\n        node.type = node.type.substring(8);\n      }\n\n      if (state.stop) {\n        const chain = this.startNodeAtNode(node);\n        chain.expression = node;\n        return this.finishNode(chain, \"ChainExpression\");\n      }\n    } else if (node.type === \"MemberExpression\" || node.type === \"CallExpression\") {\n      node.optional = false;\n    }\n\n    return node;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    if (node.type === \"ChainExpression\") {\n      node = node.expression;\n    }\n\n    return super.hasPropertyAsPrivateName(node);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"ChainExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n  }\n\n  isObjectMethod(node) {\n    return node.method || node.kind === \"get\" || node.kind === \"set\";\n  }\n\n};\n\nclass TokContext {\n  constructor(token, preserveSpace) {\n    this.token = void 0;\n    this.preserveSpace = void 0;\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n}\n\nconst types = {\n  brace: new TokContext(\"{\"),\n  j_oTag: new TokContext(\"<tag\"),\n  j_cTag: new TokContext(\"</tag\"),\n  j_expr: new TokContext(\"<tag>...</tag>\", true)\n};\n{\n  types.template = new TokContext(\"`\", true);\n}\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\nclass ExportedTokenType {\n  constructor(label) {\n    let conf = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    this.label = void 0;\n    this.keyword = void 0;\n    this.beforeExpr = void 0;\n    this.startsExpr = void 0;\n    this.rightAssociative = void 0;\n    this.isLoop = void 0;\n    this.isAssign = void 0;\n    this.prefix = void 0;\n    this.postfix = void 0;\n    this.binop = void 0;\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    {\n      this.updateContext = null;\n    }\n  }\n\n}\n\nconst keywords$1 = new Map();\n\nfunction createKeyword(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords$1.set(name, token);\n  return token;\n}\n\nfunction createBinop(name, binop) {\n  return createToken(name, {\n    beforeExpr,\n    binop\n  });\n}\n\nlet tokenTypeCounter = -1;\nconst tokenTypes = [];\nconst tokenLabels = [];\nconst tokenBinops = [];\nconst tokenBeforeExprs = [];\nconst tokenStartsExprs = [];\nconst tokenPrefixes = [];\n\nfunction createToken(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop, _options$beforeExpr, _options$startsExpr, _options$prefix;\n\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop = options.binop) != null ? _options$binop : -1);\n  tokenBeforeExprs.push((_options$beforeExpr = options.beforeExpr) != null ? _options$beforeExpr : false);\n  tokenStartsExprs.push((_options$startsExpr = options.startsExpr) != null ? _options$startsExpr : false);\n  tokenPrefixes.push((_options$prefix = options.prefix) != null ? _options$prefix : false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(name) {\n  let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  var _options$binop2, _options$beforeExpr2, _options$startsExpr2, _options$prefix2;\n\n  ++tokenTypeCounter;\n  keywords$1.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push((_options$binop2 = options.binop) != null ? _options$binop2 : -1);\n  tokenBeforeExprs.push((_options$beforeExpr2 = options.beforeExpr) != null ? _options$beforeExpr2 : false);\n  tokenStartsExprs.push((_options$startsExpr2 = options.startsExpr) != null ? _options$startsExpr2 : false);\n  tokenPrefixes.push((_options$prefix2 = options.prefix) != null ? _options$prefix2 : false);\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n  return tokenTypeCounter;\n}\n\nconst tt = {\n  bracketL: createToken(\"[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketHashL: createToken(\"#[\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketBarL: createToken(\"[|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceBarL: createToken(\"{|\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceHashL: createToken(\"#{\", {\n    beforeExpr,\n    startsExpr\n  }),\n  braceR: createToken(\"}\", {\n    beforeExpr\n  }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", {\n    beforeExpr,\n    startsExpr\n  }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", {\n    beforeExpr\n  }),\n  semi: createToken(\";\", {\n    beforeExpr\n  }),\n  colon: createToken(\":\", {\n    beforeExpr\n  }),\n  doubleColon: createToken(\"::\", {\n    beforeExpr\n  }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", {\n    beforeExpr\n  }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", {\n    beforeExpr\n  }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", {\n    beforeExpr\n  }),\n  backQuote: createToken(\"`\", {\n    startsExpr\n  }),\n  dollarBraceL: createToken(\"${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  templateTail: createToken(\"...`\", {\n    startsExpr\n  }),\n  templateNonTail: createToken(\"...${\", {\n    beforeExpr,\n    startsExpr\n  }),\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", {\n    startsExpr\n  }),\n  interpreterDirective: createToken(\"#!...\"),\n  eq: createToken(\"=\", {\n    beforeExpr,\n    isAssign\n  }),\n  assign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  slashAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  xorAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  moduloAssign: createToken(\"_=\", {\n    beforeExpr,\n    isAssign\n  }),\n  incDec: createToken(\"++/--\", {\n    prefix,\n    postfix,\n    startsExpr\n  }),\n  bang: createToken(\"!\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  tilde: createToken(\"~\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", {\n    beforeExpr,\n    binop: 9,\n    prefix,\n    startsExpr\n  }),\n  modulo: createToken(\"%\", {\n    binop: 10,\n    startsExpr\n  }),\n  star: createToken(\"*\", {\n    binop: 10\n  }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true\n  }),\n  _in: createKeyword(\"in\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _instanceof: createKeyword(\"instanceof\", {\n    beforeExpr,\n    binop: 7\n  }),\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", {\n    beforeExpr\n  }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", {\n    beforeExpr\n  }),\n  _else: createKeyword(\"else\", {\n    beforeExpr\n  }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", {\n    startsExpr\n  }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", {\n    beforeExpr\n  }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", {\n    beforeExpr,\n    startsExpr\n  }),\n  _this: createKeyword(\"this\", {\n    startsExpr\n  }),\n  _super: createKeyword(\"super\", {\n    startsExpr\n  }),\n  _class: createKeyword(\"class\", {\n    startsExpr\n  }),\n  _extends: createKeyword(\"extends\", {\n    beforeExpr\n  }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", {\n    startsExpr\n  }),\n  _null: createKeyword(\"null\", {\n    startsExpr\n  }),\n  _true: createKeyword(\"true\", {\n    startsExpr\n  }),\n  _false: createKeyword(\"false\", {\n    startsExpr\n  }),\n  _typeof: createKeyword(\"typeof\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _void: createKeyword(\"void\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _delete: createKeyword(\"delete\", {\n    beforeExpr,\n    prefix,\n    startsExpr\n  }),\n  _do: createKeyword(\"do\", {\n    isLoop,\n    beforeExpr\n  }),\n  _for: createKeyword(\"for\", {\n    isLoop\n  }),\n  _while: createKeyword(\"while\", {\n    isLoop\n  }),\n  _as: createKeywordLike(\"as\", {\n    startsExpr\n  }),\n  _assert: createKeywordLike(\"assert\", {\n    startsExpr\n  }),\n  _async: createKeywordLike(\"async\", {\n    startsExpr\n  }),\n  _await: createKeywordLike(\"await\", {\n    startsExpr\n  }),\n  _from: createKeywordLike(\"from\", {\n    startsExpr\n  }),\n  _get: createKeywordLike(\"get\", {\n    startsExpr\n  }),\n  _let: createKeywordLike(\"let\", {\n    startsExpr\n  }),\n  _meta: createKeywordLike(\"meta\", {\n    startsExpr\n  }),\n  _of: createKeywordLike(\"of\", {\n    startsExpr\n  }),\n  _sent: createKeywordLike(\"sent\", {\n    startsExpr\n  }),\n  _set: createKeywordLike(\"set\", {\n    startsExpr\n  }),\n  _static: createKeywordLike(\"static\", {\n    startsExpr\n  }),\n  _yield: createKeywordLike(\"yield\", {\n    startsExpr\n  }),\n  _asserts: createKeywordLike(\"asserts\", {\n    startsExpr\n  }),\n  _checks: createKeywordLike(\"checks\", {\n    startsExpr\n  }),\n  _exports: createKeywordLike(\"exports\", {\n    startsExpr\n  }),\n  _global: createKeywordLike(\"global\", {\n    startsExpr\n  }),\n  _implements: createKeywordLike(\"implements\", {\n    startsExpr\n  }),\n  _intrinsic: createKeywordLike(\"intrinsic\", {\n    startsExpr\n  }),\n  _infer: createKeywordLike(\"infer\", {\n    startsExpr\n  }),\n  _is: createKeywordLike(\"is\", {\n    startsExpr\n  }),\n  _mixins: createKeywordLike(\"mixins\", {\n    startsExpr\n  }),\n  _proto: createKeywordLike(\"proto\", {\n    startsExpr\n  }),\n  _require: createKeywordLike(\"require\", {\n    startsExpr\n  }),\n  _keyof: createKeywordLike(\"keyof\", {\n    startsExpr\n  }),\n  _readonly: createKeywordLike(\"readonly\", {\n    startsExpr\n  }),\n  _unique: createKeywordLike(\"unique\", {\n    startsExpr\n  }),\n  _abstract: createKeywordLike(\"abstract\", {\n    startsExpr\n  }),\n  _declare: createKeywordLike(\"declare\", {\n    startsExpr\n  }),\n  _enum: createKeywordLike(\"enum\", {\n    startsExpr\n  }),\n  _module: createKeywordLike(\"module\", {\n    startsExpr\n  }),\n  _namespace: createKeywordLike(\"namespace\", {\n    startsExpr\n  }),\n  _interface: createKeywordLike(\"interface\", {\n    startsExpr\n  }),\n  _type: createKeywordLike(\"type\", {\n    startsExpr\n  }),\n  _opaque: createKeywordLike(\"opaque\", {\n    startsExpr\n  }),\n  name: createToken(\"name\", {\n    startsExpr\n  }),\n  string: createToken(\"string\", {\n    startsExpr\n  }),\n  num: createToken(\"num\", {\n    startsExpr\n  }),\n  bigint: createToken(\"bigint\", {\n    startsExpr\n  }),\n  decimal: createToken(\"decimal\", {\n    startsExpr\n  }),\n  regexp: createToken(\"regexp\", {\n    startsExpr\n  }),\n  privateName: createToken(\"#name\", {\n    startsExpr\n  }),\n  eof: createToken(\"eof\"),\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", {\n    beforeExpr: true\n  }),\n  jsxTagStart: createToken(\"jsxTagStart\", {\n    startsExpr: true\n  }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n  placeholder: createToken(\"%%\", {\n    startsExpr: true\n  })\n};\n\nfunction tokenIsIdentifier(token) {\n  return token >= 89 && token <= 124;\n}\n\nfunction tokenKeywordOrIdentifierIsKeyword(token) {\n  return token <= 88;\n}\n\nfunction tokenIsKeywordOrIdentifier(token) {\n  return token >= 54 && token <= 124;\n}\n\nfunction tokenIsLiteralPropertyName(token) {\n  return token >= 54 && token <= 128;\n}\n\nfunction tokenComesBeforeExpression(token) {\n  return tokenBeforeExprs[token];\n}\n\nfunction tokenCanStartExpression(token) {\n  return tokenStartsExprs[token];\n}\n\nfunction tokenIsAssignment(token) {\n  return token >= 29 && token <= 33;\n}\n\nfunction tokenIsFlowInterfaceOrTypeOrOpaque(token) {\n  return token >= 121 && token <= 123;\n}\n\nfunction tokenIsLoop(token) {\n  return token >= 86 && token <= 88;\n}\n\nfunction tokenIsKeyword(token) {\n  return token >= 54 && token <= 88;\n}\n\nfunction tokenIsOperator(token) {\n  return token >= 37 && token <= 55;\n}\n\nfunction tokenIsPostfix(token) {\n  return token === 34;\n}\n\nfunction tokenIsPrefix(token) {\n  return tokenPrefixes[token];\n}\n\nfunction tokenIsTSTypeOperator(token) {\n  return token >= 113 && token <= 115;\n}\n\nfunction tokenIsTSDeclarationStart(token) {\n  return token >= 116 && token <= 122;\n}\n\nfunction tokenLabelName(token) {\n  return tokenLabels[token];\n}\n\nfunction tokenOperatorPrecedence(token) {\n  return tokenBinops[token];\n}\n\nfunction tokenIsRightAssociative(token) {\n  return token === 53;\n}\n\nfunction tokenIsTemplate(token) {\n  return token >= 24 && token <= 25;\n}\n\nfunction getExportedToken(token) {\n  return tokenTypes[token];\n}\n\nfunction isTokenType(obj) {\n  return typeof obj === \"number\";\n}\n\n{\n  tokenTypes[8].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[5].updateContext = tokenTypes[7].updateContext = tokenTypes[23].updateContext = context => {\n    context.push(types.brace);\n  };\n\n  tokenTypes[22].updateContext = context => {\n    if (context[context.length - 1] === types.template) {\n      context.pop();\n    } else {\n      context.push(types.template);\n    }\n  };\n\n  tokenTypes[134].updateContext = context => {\n    context.push(types.j_expr, types.j_oTag);\n  };\n}\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\nconst nonASCIIidentifierStart = new RegExp(\"[\" + nonASCIIidentifierStartChars + \"]\");\nconst nonASCIIidentifier = new RegExp(\"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\");\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\nconst astralIdentifierStartCodes = [0, 11, 2, 25, 2, 18, 2, 1, 2, 14, 3, 13, 35, 122, 70, 52, 268, 28, 4, 48, 48, 31, 14, 29, 6, 37, 11, 29, 3, 35, 5, 7, 2, 4, 43, 157, 19, 35, 5, 35, 5, 39, 9, 51, 13, 10, 2, 14, 2, 6, 2, 1, 2, 10, 2, 14, 2, 6, 2, 1, 68, 310, 10, 21, 11, 7, 25, 5, 2, 41, 2, 8, 70, 5, 3, 0, 2, 43, 2, 1, 4, 0, 3, 22, 11, 22, 10, 30, 66, 18, 2, 1, 11, 21, 11, 25, 71, 55, 7, 1, 65, 0, 16, 3, 2, 2, 2, 28, 43, 28, 4, 28, 36, 7, 2, 27, 28, 53, 11, 21, 11, 18, 14, 17, 111, 72, 56, 50, 14, 50, 14, 35, 349, 41, 7, 1, 79, 28, 11, 0, 9, 21, 43, 17, 47, 20, 28, 22, 13, 52, 58, 1, 3, 0, 14, 44, 33, 24, 27, 35, 30, 0, 3, 0, 9, 34, 4, 0, 13, 47, 15, 3, 22, 0, 2, 0, 36, 17, 2, 24, 85, 6, 2, 0, 2, 3, 2, 14, 2, 9, 8, 46, 39, 7, 3, 1, 3, 21, 2, 6, 2, 1, 2, 4, 4, 0, 19, 0, 13, 4, 159, 52, 19, 3, 21, 2, 31, 47, 21, 1, 2, 0, 185, 46, 42, 3, 37, 47, 21, 0, 60, 42, 14, 0, 72, 26, 38, 6, 186, 43, 117, 63, 32, 7, 3, 0, 3, 7, 2, 1, 2, 23, 16, 0, 2, 0, 95, 7, 3, 38, 17, 0, 2, 0, 29, 0, 11, 39, 8, 0, 22, 0, 12, 45, 20, 0, 19, 72, 264, 8, 2, 36, 18, 0, 50, 29, 113, 6, 2, 1, 2, 37, 22, 0, 26, 5, 2, 1, 2, 31, 15, 0, 328, 18, 190, 0, 80, 921, 103, 110, 18, 195, 2637, 96, 16, 1070, 4050, 582, 8634, 568, 8, 30, 18, 78, 18, 29, 19, 47, 17, 3, 32, 20, 6, 18, 689, 63, 129, 74, 6, 0, 67, 12, 65, 1, 2, 0, 29, 6135, 9, 1237, 43, 8, 8936, 3, 2, 6, 2, 1, 2, 290, 46, 2, 18, 3, 9, 395, 2309, 106, 6, 12, 4, 8, 8, 9, 5991, 84, 2, 70, 2, 1, 3, 0, 3, 1, 3, 3, 2, 11, 2, 0, 2, 6, 2, 64, 2, 3, 3, 7, 2, 6, 2, 27, 2, 3, 2, 4, 2, 0, 4, 6, 2, 339, 3, 24, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 30, 2, 24, 2, 7, 1845, 30, 482, 44, 11, 6, 17, 0, 322, 29, 19, 43, 1269, 6, 2, 3, 2, 1, 2, 14, 2, 196, 60, 67, 8, 0, 1205, 3, 2, 26, 2, 1, 2, 0, 3, 0, 2, 9, 2, 3, 2, 0, 2, 0, 7, 0, 5, 0, 2, 0, 2, 0, 2, 2, 2, 1, 2, 0, 3, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 2, 0, 3, 3, 2, 6, 2, 3, 2, 3, 2, 0, 2, 9, 2, 16, 6, 2, 2, 4, 2, 16, 4421, 42719, 33, 4152, 8, 221, 3, 5761, 15, 7472, 3104, 541, 1507, 4938];\nconst astralIdentifierCodes = [509, 0, 227, 0, 150, 4, 294, 9, 1368, 2, 2, 1, 6, 3, 41, 2, 5, 0, 166, 1, 574, 3, 9, 9, 370, 1, 154, 10, 50, 3, 123, 2, 54, 14, 32, 10, 3, 1, 11, 3, 46, 10, 8, 0, 46, 9, 7, 2, 37, 13, 2, 9, 6, 1, 45, 0, 13, 2, 49, 13, 9, 3, 2, 11, 83, 11, 7, 0, 161, 11, 6, 9, 7, 3, 56, 1, 2, 6, 3, 1, 3, 2, 10, 0, 11, 1, 3, 6, 4, 4, 193, 17, 10, 9, 5, 0, 82, 19, 13, 9, 214, 6, 3, 8, 28, 1, 83, 16, 16, 9, 82, 12, 9, 9, 84, 14, 5, 9, 243, 14, 166, 9, 71, 5, 2, 1, 3, 3, 2, 0, 2, 1, 13, 9, 120, 6, 3, 6, 4, 0, 29, 9, 41, 6, 2, 3, 9, 0, 10, 10, 47, 15, 406, 7, 2, 7, 17, 9, 57, 21, 2, 13, 123, 5, 4, 0, 2, 1, 2, 6, 2, 0, 9, 9, 49, 4, 2, 1, 2, 4, 9, 9, 330, 3, 19306, 9, 87, 9, 39, 4, 60, 6, 26, 9, 1014, 0, 2, 54, 8, 3, 82, 0, 12, 1, 19628, 1, 4706, 45, 3, 22, 543, 4, 4, 5, 9, 7, 3, 6, 31, 3, 149, 2, 1418, 49, 513, 54, 5, 49, 9, 0, 15, 0, 23, 4, 2, 14, 1361, 6, 2, 16, 3, 6, 2, 1, 2, 4, 262, 6, 10, 9, 357, 0, 62, 13, 1495, 6, 110, 6, 6, 9, 4759, 9, 787719, 239];\n\nfunction isInAstralSet(code, set) {\n  let pos = 0x10000;\n\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n\n  return false;\n}\n\nfunction isIdentifierStart(code) {\n  if (code < 65) return code === 36;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\nfunction isIdentifierChar(code) {\n  if (code < 48) return code === 36;\n  if (code < 58) return true;\n  if (code < 65) return false;\n  if (code <= 90) return true;\n  if (code < 97) return code === 95;\n  if (code <= 122) return true;\n\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n\n  return isInAstralSet(code, astralIdentifierStartCodes) || isInAstralSet(code, astralIdentifierCodes);\n}\n\nconst reservedWords = {\n  keyword: [\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\"],\n  strict: [\"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\"],\n  strictBind: [\"eval\", \"arguments\"]\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\nfunction isReservedWord(word, inModule) {\n  return inModule && word === \"await\" || word === \"enum\";\n}\n\nfunction isStrictReservedWord(word, inModule) {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\nfunction isStrictBindOnlyReservedWord(word) {\n  return reservedWordsStrictBindSet.has(word);\n}\n\nfunction isStrictBindReservedWord(word, inModule) {\n  return isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word);\n}\n\nfunction isKeyword(word) {\n  return keywords.has(word);\n}\n\nfunction isIteratorStart(current, next) {\n  return current === 64 && next === 64;\n}\n\nconst reservedWordLikeSet = new Set([\"break\", \"case\", \"catch\", \"continue\", \"debugger\", \"default\", \"do\", \"else\", \"finally\", \"for\", \"function\", \"if\", \"return\", \"switch\", \"throw\", \"try\", \"var\", \"const\", \"while\", \"with\", \"new\", \"this\", \"super\", \"class\", \"extends\", \"export\", \"import\", \"null\", \"true\", \"false\", \"in\", \"instanceof\", \"typeof\", \"void\", \"delete\", \"implements\", \"interface\", \"let\", \"package\", \"private\", \"protected\", \"public\", \"static\", \"yield\", \"eval\", \"arguments\", \"enum\", \"await\"]);\n\nfunction canBeReservedWord(word) {\n  return reservedWordLikeSet.has(word);\n}\n\nconst SCOPE_OTHER = 0b000000000,\n      SCOPE_PROGRAM = 0b000000001,\n      SCOPE_FUNCTION = 0b000000010,\n      SCOPE_ARROW = 0b000000100,\n      SCOPE_SIMPLE_CATCH = 0b000001000,\n      SCOPE_SUPER = 0b000010000,\n      SCOPE_DIRECT_SUPER = 0b000100000,\n      SCOPE_CLASS = 0b001000000,\n      SCOPE_STATIC_BLOCK = 0b010000000,\n      SCOPE_TS_MODULE = 0b100000000,\n      SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\nconst BIND_KIND_VALUE = 0b000000000001,\n      BIND_KIND_TYPE = 0b000000000010,\n      BIND_SCOPE_VAR = 0b000000000100,\n      BIND_SCOPE_LEXICAL = 0b000000001000,\n      BIND_SCOPE_FUNCTION = 0b000000010000,\n      BIND_FLAGS_NONE = 0b000001000000,\n      BIND_FLAGS_CLASS = 0b000010000000,\n      BIND_FLAGS_TS_ENUM = 0b000100000000,\n      BIND_FLAGS_TS_CONST_ENUM = 0b001000000000,\n      BIND_FLAGS_TS_EXPORT_ONLY = 0b010000000000,\n      BIND_FLAGS_FLOW_DECLARE_FN = 0b100000000000;\nconst BIND_CLASS = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_CLASS,\n      BIND_LEXICAL = BIND_KIND_VALUE | 0 | BIND_SCOPE_LEXICAL | 0,\n      BIND_VAR = BIND_KIND_VALUE | 0 | BIND_SCOPE_VAR | 0,\n      BIND_FUNCTION = BIND_KIND_VALUE | 0 | BIND_SCOPE_FUNCTION | 0,\n      BIND_TS_INTERFACE = 0 | BIND_KIND_TYPE | 0 | BIND_FLAGS_CLASS,\n      BIND_TS_TYPE = 0 | BIND_KIND_TYPE | 0 | 0,\n      BIND_TS_ENUM = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL | BIND_FLAGS_TS_ENUM,\n      BIND_TS_AMBIENT = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_NONE = 0 | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_OUTSIDE = BIND_KIND_VALUE | 0 | 0 | BIND_FLAGS_NONE,\n      BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n      BIND_TS_NAMESPACE = 0 | 0 | 0 | BIND_FLAGS_TS_EXPORT_ONLY,\n      BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\nconst CLASS_ELEMENT_FLAG_STATIC = 0b100,\n      CLASS_ELEMENT_KIND_GETTER = 0b010,\n      CLASS_ELEMENT_KIND_SETTER = 0b001,\n      CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\nconst CLASS_ELEMENT_STATIC_GETTER = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_STATIC_SETTER = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n      CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n      CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n      CLASS_ELEMENT_OTHER = 0;\n\nclass Scope {\n  constructor(flags) {\n    this.var = new Set();\n    this.lexical = new Set();\n    this.functions = new Set();\n    this.flags = flags;\n  }\n\n}\n\nclass ScopeHandler {\n  constructor(raise, inModule) {\n    this.scopeStack = [];\n    this.undefinedExports = new Map();\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        return false;\n      }\n    }\n  }\n\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags) {\n    return new Scope(flags);\n  }\n\n  enter(flags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  treatFunctionsAsVarInScope(scope) {\n    return !!(scope.flags & SCOPE_FUNCTION || !this.inModule && scope.flags & SCOPE_PROGRAM);\n  }\n\n  declareName(name, bindingType, pos) {\n    let scope = this.currentScope();\n\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope, name) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(scope, name, bindingType, pos) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, ErrorMessages.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return scope.lexical.has(name) || scope.functions.has(name) || scope.var.has(name);\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return scope.lexical.has(name) || !this.treatFunctionsAsVarInScope(scope) && scope.var.has(name);\n    }\n\n    return scope.lexical.has(name) && !(scope.flags & SCOPE_SIMPLE_CATCH && scope.lexical.values().next().value === name) || !this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name);\n  }\n\n  checkLocalExport(id) {\n    const {\n      name\n    } = id;\n    const topLevelScope = this.scopeStack[0];\n\n    if (!topLevelScope.lexical.has(name) && !topLevelScope.var.has(name) && !topLevelScope.functions.has(name)) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope() {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  currentVarScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  currentThisScopeFlags() {\n    for (let i = this.scopeStack.length - 1;; i--) {\n      const {\n        flags\n      } = this.scopeStack[i];\n\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n\n}\n\nclass FlowScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.declareFunctions = new Set();\n  }\n\n}\n\nclass FlowScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new FlowScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return !scope.declareFunctions.has(name) && (scope.lexical.has(name) || scope.functions.has(name));\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nclass State {\n  constructor() {\n    this.strict = void 0;\n    this.curLine = void 0;\n    this.lineStart = void 0;\n    this.startLoc = void 0;\n    this.endLoc = void 0;\n    this.errors = [];\n    this.potentialArrowAt = -1;\n    this.noArrowAt = [];\n    this.noArrowParamsConversionAt = [];\n    this.maybeInArrowParameters = false;\n    this.inType = false;\n    this.noAnonFunctionType = false;\n    this.hasFlowComment = false;\n    this.isAmbientContext = false;\n    this.inAbstractClass = false;\n    this.topicContext = {\n      maxNumOfResolvableTopics: 0,\n      maxTopicIndex: null\n    };\n    this.soloAwait = false;\n    this.inFSharpPipelineDirectBody = false;\n    this.labels = [];\n    this.decoratorStack = [[]];\n    this.comments = [];\n    this.commentStack = [];\n    this.pos = 0;\n    this.type = 131;\n    this.value = null;\n    this.start = 0;\n    this.end = 0;\n    this.lastTokEndLoc = null;\n    this.lastTokStartLoc = null;\n    this.lastTokStart = 0;\n    this.lastTokEnd = 0;\n    this.context = [types.brace];\n    this.canStartJSXElement = true;\n    this.containsEsc = false;\n    this.strictErrors = new Map();\n    this.tokensLength = 0;\n  }\n\n  init(_ref4) {\n    let {\n      strictMode,\n      sourceType,\n      startLine,\n      startColumn\n    } = _ref4;\n    this.strict = strictMode === false ? false : strictMode === true ? true : sourceType === \"module\";\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn);\n  }\n\n  curPosition() {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays) {\n    const state = new State();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      state[key] = val;\n    }\n\n    return state;\n  }\n\n}\n\nvar _isDigit = function isDigit(code) {\n  return code >= 48 && code <= 57;\n};\n\nconst VALID_REGEX_FLAGS = new Set([103, 109, 115, 105, 121, 117, 100]);\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [46, 66, 69, 79, 95, 98, 101, 111],\n  hex: [46, 88, 95, 120]\n};\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [48, 49];\nallowedNumericSeparatorSiblings.oct = [...allowedNumericSeparatorSiblings.bin, 50, 51, 52, 53, 54, 55];\nallowedNumericSeparatorSiblings.dec = [...allowedNumericSeparatorSiblings.oct, 56, 57];\nallowedNumericSeparatorSiblings.hex = [...allowedNumericSeparatorSiblings.dec, 65, 66, 67, 68, 69, 70, 97, 98, 99, 100, 101, 102];\n\nclass Token {\n  constructor(state) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n}\n\nclass Tokenizer extends ParserError {\n  constructor(options, input) {\n    super();\n    this.isLookahead = void 0;\n    this.tokens = [];\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token) {\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  next() {\n    this.checkKeywordEscapes();\n\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  eat(type) {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  match(type) {\n    return this.state.type === type;\n  }\n\n  createLookaheadState(state) {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType\n    };\n  }\n\n  lookahead() {\n    const old = this.state;\n    this.state = this.createLookaheadState(old);\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart() {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos) {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode() {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos) {\n    let cp = this.input.charCodeAt(pos);\n\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n\n    return cp;\n  }\n\n  setStrict(strict) {\n    this.state.strict = strict;\n\n    if (strict) {\n      this.state.strictErrors.forEach((message, pos) => this.raise(pos, message));\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext() {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  nextToken() {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n\n    if (this.state.pos >= this.length) {\n      this.finishToken(131);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment() {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) throw this.raise(start, ErrorMessages.UnterminatedComment);\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    if (this.isLookahead) return;\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip) {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt(this.state.pos += startSkip);\n\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    if (this.isLookahead) return;\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition())\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipSpace() {\n    const spaceStart = this.state.pos;\n    const comments = [];\n\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 32:\n        case 160:\n        case 9:\n          ++this.state.pos;\n          break;\n\n        case 13:\n          if (this.input.charCodeAt(this.state.pos + 1) === 10) {\n            ++this.state.pos;\n          }\n\n        case 10:\n        case 8232:\n        case 8233:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case 47:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case 42:\n              {\n                const comment = this.skipBlockComment();\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            case 47:\n              {\n                const comment = this.skipLineComment(2);\n\n                if (comment !== undefined) {\n                  this.addComment(comment);\n                  if (this.options.attachComment) comments.push(comment);\n                }\n\n                break;\n              }\n\n            default:\n              break loop;\n          }\n\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === 45 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 45 && this.input.charCodeAt(pos + 2) === 62 && (spaceStart === 0 || this.state.lineStart > spaceStart)) {\n              const comment = this.skipLineComment(3);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === 60 && !this.inModule) {\n            const pos = this.state.pos;\n\n            if (this.input.charCodeAt(pos + 1) === 33 && this.input.charCodeAt(pos + 2) === 45 && this.input.charCodeAt(pos + 3) === 45) {\n              const comment = this.skipLineComment(4);\n\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  finishToken(type, val) {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type) {\n    this.state.type = type;\n    this.updateContext();\n  }\n\n  readToken_numberSign() {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n\n    if (next >= 48 && next <= 57) {\n      throw this.raise(this.state.pos, ErrorMessages.UnexpectedDigitAfterHash);\n    }\n\n    if (next === 123 || next === 91 && this.hasPlugin(\"recordAndTuple\")) {\n      this.expectPlugin(\"recordAndTuple\");\n\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(this.state.pos, next === 123 ? ErrorMessages.RecordExpressionHashIncorrectStartSyntaxType : ErrorMessages.TupleExpressionHashIncorrectStartSyntaxType);\n      }\n\n      this.state.pos += 2;\n\n      if (next === 123) {\n        this.finishToken(7);\n      } else {\n        this.finishToken(1);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(130, this.readWord1(next));\n    } else if (next === 92) {\n      ++this.state.pos;\n      this.finishToken(130, this.readWord1());\n    } else {\n      this.finishOp(27, 1);\n    }\n  }\n\n  readToken_dot() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next >= 48 && next <= 57) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (next === 46 && this.input.charCodeAt(this.state.pos + 2) === 46) {\n      this.state.pos += 3;\n      this.finishToken(21);\n    } else {\n      ++this.state.pos;\n      this.finishToken(16);\n    }\n  }\n\n  readToken_slash() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(31, 2);\n    } else {\n      this.finishOp(52, 1);\n    }\n  }\n\n  readToken_interpreter() {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== 33) return false;\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n    this.finishToken(28, value);\n    return true;\n  }\n\n  readToken_mult_modulo(code) {\n    let type = code === 42 ? 51 : 50;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 42) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = 53;\n    }\n\n    if (next === 61 && !this.state.inType) {\n      width++;\n      type = code === 37 ? 33 : 30;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(code === 124 ? 39 : 40, 2);\n      }\n\n      return;\n    }\n\n    if (code === 124) {\n      if (next === 62) {\n        this.finishOp(37, 2);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 125) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(9);\n        return;\n      }\n\n      if (this.hasPlugin(\"recordAndTuple\") && next === 93) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectEndSyntaxType);\n        }\n\n        this.state.pos += 2;\n        this.finishToken(4);\n        return;\n      }\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n      return;\n    }\n\n    this.finishOp(code === 124 ? 41 : 43, 1);\n  }\n\n  readToken_caret() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61 && !this.state.inType) {\n      this.finishOp(32, 2);\n    } else {\n      this.finishOp(42, 1);\n    }\n  }\n\n  readToken_plus_min(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(34, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(30, 2);\n    } else {\n      this.finishOp(49, 1);\n    }\n  }\n\n  readToken_lt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 60) {\n      if (this.input.charCodeAt(pos + 2) === 61) {\n        this.finishOp(30, 3);\n        return;\n      }\n\n      this.finishOp(48, 2);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(47, 2);\n      return;\n    }\n\n    this.finishOp(45, 1);\n  }\n\n  readToken_gt() {\n    const {\n      pos\n    } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === 62) {\n      const size = this.input.charCodeAt(pos + 2) === 62 ? 3 : 2;\n\n      if (this.input.charCodeAt(pos + size) === 61) {\n        this.finishOp(30, size + 1);\n        return;\n      }\n\n      this.finishOp(48, size);\n      return;\n    }\n\n    if (next === 61) {\n      this.finishOp(47, 2);\n      return;\n    }\n\n    this.finishOp(46, 1);\n  }\n\n  readToken_eq_excl(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === 61) {\n      this.finishOp(44, this.input.charCodeAt(this.state.pos + 2) === 61 ? 3 : 2);\n      return;\n    }\n\n    if (code === 61 && next === 62) {\n      this.state.pos += 2;\n      this.finishToken(19);\n      return;\n    }\n\n    this.finishOp(code === 61 ? 29 : 35, 1);\n  }\n\n  readToken_question() {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n\n    if (next === 63) {\n      if (next2 === 61) {\n        this.finishOp(30, 3);\n      } else {\n        this.finishOp(38, 2);\n      }\n    } else if (next === 46 && !(next2 >= 48 && next2 <= 57)) {\n      this.state.pos += 2;\n      this.finishToken(18);\n    } else {\n      ++this.state.pos;\n      this.finishToken(17);\n    }\n  }\n\n  getTokenFromCode(code) {\n    switch (code) {\n      case 46:\n        this.readToken_dot();\n        return;\n\n      case 40:\n        ++this.state.pos;\n        this.finishToken(10);\n        return;\n\n      case 41:\n        ++this.state.pos;\n        this.finishToken(11);\n        return;\n\n      case 59:\n        ++this.state.pos;\n        this.finishToken(13);\n        return;\n\n      case 44:\n        ++this.state.pos;\n        this.finishToken(12);\n        return;\n\n      case 91:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.TupleExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(0);\n        }\n\n        return;\n\n      case 93:\n        ++this.state.pos;\n        this.finishToken(3);\n        return;\n\n      case 123:\n        if (this.hasPlugin(\"recordAndTuple\") && this.input.charCodeAt(this.state.pos + 1) === 124) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(this.state.pos, ErrorMessages.RecordExpressionBarIncorrectStartSyntaxType);\n          }\n\n          this.state.pos += 2;\n          this.finishToken(6);\n        } else {\n          ++this.state.pos;\n          this.finishToken(5);\n        }\n\n        return;\n\n      case 125:\n        ++this.state.pos;\n        this.finishToken(8);\n        return;\n\n      case 58:\n        if (this.hasPlugin(\"functionBind\") && this.input.charCodeAt(this.state.pos + 1) === 58) {\n          this.finishOp(15, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(14);\n        }\n\n        return;\n\n      case 63:\n        this.readToken_question();\n        return;\n\n      case 96:\n        this.readTemplateToken();\n        return;\n\n      case 48:\n        {\n          const next = this.input.charCodeAt(this.state.pos + 1);\n\n          if (next === 120 || next === 88) {\n            this.readRadixNumber(16);\n            return;\n          }\n\n          if (next === 111 || next === 79) {\n            this.readRadixNumber(8);\n            return;\n          }\n\n          if (next === 98 || next === 66) {\n            this.readRadixNumber(2);\n            return;\n          }\n        }\n\n      case 49:\n      case 50:\n      case 51:\n      case 52:\n      case 53:\n      case 54:\n      case 55:\n      case 56:\n      case 57:\n        this.readNumber(false);\n        return;\n\n      case 34:\n      case 39:\n        this.readString(code);\n        return;\n\n      case 47:\n        this.readToken_slash();\n        return;\n\n      case 37:\n      case 42:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case 124:\n      case 38:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case 94:\n        this.readToken_caret();\n        return;\n\n      case 43:\n      case 45:\n        this.readToken_plus_min(code);\n        return;\n\n      case 60:\n        this.readToken_lt();\n        return;\n\n      case 62:\n        this.readToken_gt();\n        return;\n\n      case 61:\n      case 33:\n        this.readToken_eq_excl(code);\n        return;\n\n      case 126:\n        this.finishOp(36, 1);\n        return;\n\n      case 64:\n        ++this.state.pos;\n        this.finishToken(26);\n        return;\n\n      case 35:\n        this.readToken_numberSign();\n        return;\n\n      case 92:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n\n    }\n\n    throw this.raise(this.state.pos, ErrorMessages.InvalidOrUnexpectedToken, String.fromCodePoint(code));\n  }\n\n  finishOp(type, size) {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp() {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let {\n      pos\n    } = this.state;\n\n    for (;; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      const ch = this.input.charCodeAt(pos);\n\n      if (isNewLine(ch)) {\n        throw this.raise(start, ErrorMessages.UnterminatedRegExp);\n      }\n\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === 91) {\n          inClass = true;\n        } else if (ch === 93 && inClass) {\n          inClass = false;\n        } else if (ch === 47 && !inClass) {\n          break;\n        }\n\n        escaped = ch === 92;\n      }\n    }\n\n    const content = this.input.slice(start, pos);\n    ++pos;\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, ErrorMessages.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === 92) {\n        this.raise(pos + 1, ErrorMessages.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n\n    this.state.pos = pos;\n    this.finishToken(129, {\n      pattern: content,\n      flags: mods\n    });\n  }\n\n  readInt(radix, len, forceLen) {\n    let allowNumSeparator = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const start = this.state.pos;\n    const forbiddenSiblings = radix === 16 ? forbiddenNumericSeparatorSiblings.hex : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings = radix === 16 ? allowedNumericSeparatorSiblings.hex : radix === 10 ? allowedNumericSeparatorSiblings.dec : radix === 8 ? allowedNumericSeparatorSiblings.oct : allowedNumericSeparatorSiblings.bin;\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === 95) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        } else if (forbiddenSiblings.indexOf(prev) > -1 || forbiddenSiblings.indexOf(next) > -1 || Number.isNaN(next)) {\n          this.raise(this.state.pos, ErrorMessages.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, ErrorMessages.NumericSeparatorInEscapeSequence);\n        }\n\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= 97) {\n        val = code - 97 + 10;\n      } else if (code >= 65) {\n        val = code - 65 + 10;\n      } else if (_isDigit(code)) {\n        val = code - 48;\n      } else {\n        val = Infinity;\n      }\n\n      if (val >= radix) {\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, ErrorMessages.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n\n    if (this.state.pos === start || len != null && this.state.pos - start !== len || invalid) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix) {\n    const start = this.state.pos;\n    let isBigInt = false;\n    this.state.pos += 2;\n    const val = this.readInt(radix);\n\n    if (val == null) {\n      this.raise(this.state.start + 2, ErrorMessages.InvalidDigit, radix);\n    }\n\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 110) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === 109) {\n      throw this.raise(start, ErrorMessages.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(127, str);\n      return;\n    }\n\n    this.finishToken(126, val);\n  }\n\n  readNumber(startsWithDot) {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, ErrorMessages.InvalidNumber);\n    }\n\n    const hasLeadingZero = this.state.pos - start >= 2 && this.input.charCodeAt(start) === 48;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, ErrorMessages.StrictOctalLiteral);\n\n      if (!this.state.strict) {\n        const underscorePos = integer.indexOf(\"_\");\n\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, ErrorMessages.ZeroDigitNumericSeparator);\n        }\n      }\n\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n\n    if (next === 46 && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if ((next === 69 || next === 101) && !isOctal) {\n      next = this.input.charCodeAt(++this.state.pos);\n\n      if (next === 43 || next === 45) {\n        ++this.state.pos;\n      }\n\n      if (this.readInt(10) === null) {\n        this.raise(start, ErrorMessages.InvalidOrMissingExponent);\n      }\n\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === 110) {\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidBigIntLiteral);\n      }\n\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === 109) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, ErrorMessages.InvalidDecimal);\n      }\n\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, ErrorMessages.NumberIdentifier);\n    }\n\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(127, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(128, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(126, val);\n  }\n\n  readCodePoint(throwOnInvalid) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === 123) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(this.input.indexOf(\"}\", this.state.pos) - this.state.pos, true, throwOnInvalid);\n      ++this.state.pos;\n\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, ErrorMessages.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n\n    return code;\n  }\n\n  readString(quote) {\n    let out = \"\",\n        chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (ch === 8232 || ch === 8233) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(125, out);\n  }\n\n  readTemplateContinuation() {\n    if (!this.match(8)) {\n      this.unexpected(this.state.start, 8);\n    }\n\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  readTemplateToken() {\n    let out = \"\",\n        chunkStart = this.state.pos,\n        containsInvalid = false;\n    ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start + 1, ErrorMessages.UnterminatedTemplate);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      if (ch === 96) {\n        ++this.state.pos;\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(24, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 36 && this.input.charCodeAt(this.state.pos + 1) === 123) {\n        this.state.pos += 2;\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(25, containsInvalid ? null : out);\n        return;\n      }\n\n      if (ch === 92) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n\n        switch (ch) {\n          case 13:\n            if (this.input.charCodeAt(this.state.pos) === 10) {\n              ++this.state.pos;\n            }\n\n          case 10:\n            out += \"\\n\";\n            break;\n\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos, message) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  readEscapedChar(inTemplate) {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n\n    switch (ch) {\n      case 110:\n        return \"\\n\";\n\n      case 114:\n        return \"\\r\";\n\n      case 120:\n        {\n          const code = this.readHexChar(2, false, throwOnInvalid);\n          return code === null ? null : String.fromCharCode(code);\n        }\n\n      case 117:\n        {\n          const code = this.readCodePoint(throwOnInvalid);\n          return code === null ? null : String.fromCodePoint(code);\n        }\n\n      case 116:\n        return \"\\t\";\n\n      case 98:\n        return \"\\b\";\n\n      case 118:\n        return \"\\u000b\";\n\n      case 102:\n        return \"\\f\";\n\n      case 13:\n        if (this.input.charCodeAt(this.state.pos) === 10) {\n          ++this.state.pos;\n        }\n\n      case 10:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n\n      case 8232:\n      case 8233:\n        return \"\";\n\n      case 56:\n      case 57:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(this.state.pos - 1, ErrorMessages.StrictNumericEscape);\n        }\n\n      default:\n        if (ch >= 48 && ch <= 55) {\n          const codePos = this.state.pos - 1;\n          const match = this.input.substr(this.state.pos - 1, 3).match(/^[0-7]+/);\n          let octalStr = match[0];\n          let octal = parseInt(octalStr, 8);\n\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n\n          if (octalStr !== \"0\" || next === 56 || next === 57) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, ErrorMessages.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  readHexChar(len, forceLen, throwOnInvalid) {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, ErrorMessages.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n\n    return n;\n  }\n\n  readWord1(firstCode) {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === 92) {\n        this.state.containsEsc = true;\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck = this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== 117) {\n          this.raise(this.state.pos, ErrorMessages.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, ErrorMessages.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  readWord(firstCode) {\n    const word = this.readWord1(firstCode);\n    const type = keywords$1.get(word);\n\n    if (type !== undefined) {\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(124, word);\n    }\n  }\n\n  checkKeywordEscapes() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(this.state.start, ErrorMessages.InvalidEscapedReservedWord, tokenLabelName(type));\n    }\n  }\n\n  updateContext(prevType) {}\n\n}\n\nclass ClassScope {\n  constructor() {\n    this.privateNames = new Set();\n    this.loneAccessors = new Map();\n    this.undefinedPrivateNames = new Map();\n  }\n\n}\n\nclass ClassScopeHandler {\n  constructor(raise) {\n    this.stack = [];\n    this.undefinedPrivateNames = new Map();\n    this.raise = raise;\n  }\n\n  current() {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n    const current = this.current();\n\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(name, elementType, pos) {\n    const {\n      privateNames,\n      loneAccessors,\n      undefinedPrivateNames\n    } = this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, ErrorMessages.PrivateNameRedeclaration, name);\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name, pos) {\n    let classScope;\n\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      this.raise(pos, ErrorMessages.InvalidPrivateFieldResolution, name);\n    }\n  }\n\n}\n\nconst kExpression = 0,\n      kMaybeArrowParameterDeclaration = 1,\n      kMaybeAsyncArrowParameterDeclaration = 2,\n      kParameterDeclaration = 3;\n\nclass ExpressionScope {\n  constructor() {\n    let type = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : kExpression;\n    this.type = void 0;\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return this.type === kMaybeAsyncArrowParameterDeclaration || this.type === kMaybeArrowParameterDeclaration;\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  constructor(type) {\n    super(type);\n    this.errors = new Map();\n  }\n\n  recordDeclarationError(pos, template) {\n    this.errors.set(pos, template);\n  }\n\n  clearDeclarationError(pos) {\n    this.errors.delete(pos);\n  }\n\n  iterateErrors(iterator) {\n    this.errors.forEach(iterator);\n  }\n\n}\n\nclass ExpressionScopeHandler {\n  constructor(raise) {\n    this.stack = [new ExpressionScope()];\n    this.raise = raise;\n  }\n\n  enter(scope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  recordParameterInitializerError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        scope.recordDeclarationError(pos, template);\n      } else {\n        return;\n      }\n\n      scope = stack[--i];\n    }\n\n    this.raise(pos, template);\n  }\n\n  recordParenthesizedIdentifierError(pos, template) {\n    const {\n      stack\n    } = this;\n    const scope = stack[stack.length - 1];\n\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  recordAsyncArrowParametersError(pos, template) {\n    const {\n      stack\n    } = this;\n    let i = stack.length - 1;\n    let scope = stack[i];\n\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        scope.recordDeclarationError(pos, template);\n      }\n\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern() {\n    const {\n      stack\n    } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    currentScope.iterateErrors((template, pos) => {\n      this.raise(pos, template);\n      let i = stack.length - 2;\n      let scope = stack[i];\n\n      while (scope.canBeArrowParameterDeclaration()) {\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n\n}\n\nfunction newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nfunction newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nfunction newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nfunction newExpressionScope() {\n  return new ExpressionScope();\n}\n\nconst PARAM = 0b0000,\n      PARAM_YIELD = 0b0001,\n      PARAM_AWAIT = 0b0010,\n      PARAM_RETURN = 0b0100,\n      PARAM_IN = 0b1000;\n\nclass ProductionParameterHandler {\n  constructor() {\n    this.stacks = [];\n  }\n\n  enter(flags) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags() {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait() {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield() {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn() {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn() {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n\n}\n\nfunction functionFlags(isAsync, isGenerator) {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n\nclass UtilParser extends Tokenizer {\n  addExtra(node, key, val) {\n    if (!node) return;\n    const extra = node.extra = node.extra || {};\n    extra[key] = val;\n  }\n\n  isContextual(token) {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart, name) {\n    const nameEnd = nameStart + name.length;\n\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(isIdentifierChar(nextCh) || (nextCh & 0xfc00) === 0xd800);\n    }\n\n    return false;\n  }\n\n  isLookaheadContextual(name) {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  eatContextual(token) {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  expectContextual(token, template) {\n    if (!this.eatContextual(token)) this.unexpected(null, template);\n  }\n\n  canInsertSemicolon() {\n    return this.match(131) || this.match(8) || this.hasPrecedingLineBreak();\n  }\n\n  hasPrecedingLineBreak() {\n    return lineBreak.test(this.input.slice(this.state.lastTokEnd, this.state.start));\n  }\n\n  hasFollowingLineBreak() {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  isLineTerminator() {\n    return this.eat(13) || this.canInsertSemicolon();\n  }\n\n  semicolon() {\n    let allowAsi = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    if (allowAsi ? this.isLineTerminator() : this.eat(13)) return;\n    this.raise(this.state.lastTokEnd, ErrorMessages.MissingSemicolon);\n  }\n\n  expect(type, pos) {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  assertNoSpace() {\n    let message = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"Unexpected space.\";\n\n    if (this.state.start > this.state.lastTokEnd) {\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message\n      });\n    }\n  }\n\n  unexpected(pos) {\n    let messageOrType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      code: ErrorCodes.SyntaxError,\n      reasonCode: \"UnexpectedToken\",\n      template: \"Unexpected token\"\n    };\n\n    if (isTokenType(messageOrType)) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${tokenLabelName(messageOrType)}\"`\n      };\n    }\n\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n  }\n\n  getPluginNamesFromConfigs(pluginConfigs) {\n    return pluginConfigs.map(c => {\n      if (typeof c === \"string\") {\n        return c;\n      } else {\n        return c[0];\n      }\n    });\n  }\n\n  expectPlugin(pluginConfig, pos) {\n    if (!this.hasPlugin(pluginConfig)) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: this.getPluginNamesFromConfigs([pluginConfig])\n      }, `This experimental syntax requires enabling the parser plugin: ${JSON.stringify(pluginConfig)}.`);\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(pluginConfigs, pos) {\n    if (!pluginConfigs.some(c => this.hasPlugin(c))) {\n      throw this.raiseWithData(pos != null ? pos : this.state.start, {\n        missingPlugin: this.getPluginNamesFromConfigs(pluginConfigs)\n      }, `This experimental syntax requires enabling one of the following parser plugin(s): ${pluginConfigs.map(c => JSON.stringify(c)).join(\", \")}.`);\n    }\n  }\n\n  tryParse(fn) {\n    let oldState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.clone();\n    const abortSignal = {\n      node: null\n    };\n\n    try {\n      const node = fn(function () {\n        let node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: failState.errors[oldState.errors.length],\n          thrown: false,\n          aborted: false,\n          failState\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n\n      if (error instanceof SyntaxError) {\n        return {\n          node: null,\n          error,\n          thrown: true,\n          aborted: false,\n          failState\n        };\n      }\n\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(refExpressionErrors, andThrow) {\n    if (!refExpressionErrors) return false;\n    const {\n      shorthandAssign,\n      doubleProto,\n      optionalParameters\n    } = refExpressionErrors;\n    const hasErrors = shorthandAssign + doubleProto + optionalParameters > -3;\n\n    if (!andThrow) {\n      return hasErrors;\n    } else if (hasErrors) {\n      if (shorthandAssign >= 0) {\n        this.raise(shorthandAssign, ErrorMessages.InvalidCoverInitializedName);\n      }\n\n      if (doubleProto >= 0) {\n        this.raise(doubleProto, ErrorMessages.DuplicateProto);\n      }\n\n      if (optionalParameters >= 0) {\n        this.unexpected(optionalParameters);\n      }\n    }\n  }\n\n  isLiteralPropertyName() {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  isPrivateName(node) {\n    return node.type === \"PrivateName\";\n  }\n\n  getPrivateNameSV(node) {\n    return node.id.name;\n  }\n\n  hasPropertyAsPrivateName(node) {\n    return (node.type === \"MemberExpression\" || node.type === \"OptionalMemberExpression\") && this.isPrivateName(node.property);\n  }\n\n  isOptionalChain(node) {\n    return node.type === \"OptionalMemberExpression\" || node.type === \"OptionalCallExpression\";\n  }\n\n  isObjectProperty(node) {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node) {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes() {\n    let inModule = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options.sourceType === \"module\";\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n    return () => {\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n\n}\n\nclass ExpressionErrors {\n  constructor() {\n    this.shorthandAssign = -1;\n    this.doubleProto = -1;\n    this.optionalParameters = -1;\n  }\n\n}\n\nclass Node {\n  constructor(parser, pos, loc) {\n    this.type = \"\";\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser != null && parser.options.ranges) this.range = [pos, 0];\n    if (parser != null && parser.filename) this.loc.filename = parser.filename;\n  }\n\n}\n\nconst NodePrototype = Node.prototype;\n{\n  NodePrototype.__clone = function () {\n    const newNode = new Node();\n    const keys = Object.keys(this);\n\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n\n      if (key !== \"leadingComments\" && key !== \"trailingComments\" && key !== \"innerComments\") {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node) {\n  return cloneIdentifier(node);\n}\n\nfunction cloneIdentifier(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra,\n    name\n  } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n\n  return cloned;\n}\n\nfunction cloneStringLiteral(node) {\n  const {\n    type,\n    start,\n    end,\n    loc,\n    range,\n    extra\n  } = node;\n\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n\n  if (node.raw !== undefined) {\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n\n  cloned.value = node.value;\n  return cloned;\n}\n\nclass NodeUtils extends UtilParser {\n  startNode() {\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt(pos, loc) {\n    return new Node(this, pos, loc);\n  }\n\n  startNodeAtNode(type) {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  finishNode(node, type) {\n    return this.finishNodeAt(node, type, this.state.lastTokEnd, this.state.lastTokEndLoc);\n  }\n\n  finishNodeAt(node, type, pos, loc) {\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node, start, startLoc) {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(node) {\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.state.lastTokEnd;\n    let endLoc = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.state.lastTokEndLoc;\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  resetStartLocationFromNode(node, locationNode) {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n\n}\n\nconst reservedTypes = new Set([\"_\", \"any\", \"bool\", \"boolean\", \"empty\", \"extends\", \"false\", \"interface\", \"mixed\", \"null\", \"number\", \"static\", \"string\", \"true\", \"typeof\", \"void\"]);\nconst FlowErrors = makeErrorTemplates({\n  AmbiguousConditionalArrow: \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n  AmbiguousDeclareModuleKind: \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n  AssignReservedType: \"Cannot overwrite reserved type %0.\",\n  DeclareClassElement: \"The `declare` modifier can only appear on class fields.\",\n  DeclareClassFieldInitializer: \"Initializers are not allowed in fields with the `declare` modifier.\",\n  DuplicateDeclareModuleExports: \"Duplicate `declare module.exports` statement.\",\n  EnumBooleanMemberNotInitialized: \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n  EnumDuplicateMemberName: \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n  EnumInconsistentMemberValues: \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n  EnumInvalidExplicitType: \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidExplicitTypeUnknownSupplied: \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n  EnumInvalidMemberInitializerPrimaryType: \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n  EnumInvalidMemberInitializerSymbolType: \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n  EnumInvalidMemberInitializerUnknownType: \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n  EnumInvalidMemberName: \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n  EnumNumberMemberNotInitialized: \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n  EnumStringMemberInconsistentlyInitailized: \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n  GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n  ImportTypeShorthandOnlyInPureImport: \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n  InexactInsideExact: \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n  InexactInsideNonObject: \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n  InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n  InvalidNonTypeImportInDeclareModule: \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n  MissingTypeParamDefault: \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n  NestedDeclareModule: \"`declare module` cannot be used inside another `declare module`.\",\n  NestedFlowComment: \"Cannot have a flow comment inside another flow comment.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n  SpreadVariance: \"Spread properties cannot have variance.\",\n  ThisParamAnnotationRequired: \"A type annotation is required for the `this` parameter.\",\n  ThisParamBannedInConstructor: \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n  ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n  ThisParamMustBeFirst: \"The `this` parameter must be the first function parameter.\",\n  ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n  TypeBeforeInitializer: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeCastInPattern: \"The type cast expression is expected to be wrapped with parenthesis.\",\n  UnexpectedExplicitInexactInObject: \"Explicit inexact syntax must appear at the end of an inexact object.\",\n  UnexpectedReservedType: \"Unexpected reserved type %0.\",\n  UnexpectedReservedUnderscore: \"`_` is only allowed as a type argument to call or new.\",\n  UnexpectedSpaceBetweenModuloChecks: \"Spaces between `%` and `checks` are not allowed here.\",\n  UnexpectedSpreadType: \"Spread operator cannot appear in class or interface definitions.\",\n  UnexpectedSubtractionOperand: 'Unexpected token, expected \"number\" or \"bigint\".',\n  UnexpectedTokenAfterTypeParameter: \"Expected an arrow function after this type parameter declaration.\",\n  UnexpectedTypeParameterBeforeAsyncArrowFunction: \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n  UnsupportedDeclareExportKind: \"`declare export %0` is not supported. Use `%1` instead.\",\n  UnsupportedStatementInDeclareModule: \"Only declares and type imports are allowed inside declare module.\",\n  UnterminatedFlowComment: \"Unterminated flow-comment.\"\n}, ErrorCodes.SyntaxError, \"flow\");\n\nfunction isEsModuleType(bodyElement) {\n  return bodyElement.type === \"DeclareExportAllDeclaration\" || bodyElement.type === \"DeclareExportDeclaration\" && (!bodyElement.declaration || bodyElement.declaration.type !== \"TypeAlias\" && bodyElement.declaration.type !== \"InterfaceDeclaration\");\n}\n\nfunction hasTypeImportKind(node) {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type) {\n  return tokenIsKeywordOrIdentifier(type) && type !== 93;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\"\n};\n\nfunction partition(list, test) {\n  const list1 = [];\n  const list2 = [];\n\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\nvar flow = superClass => class extends superClass {\n  constructor() {\n    super(...arguments);\n    this.flowPragma = undefined;\n  }\n\n  getScopeHandler() {\n    return FlowScopeHandler;\n  }\n\n  shouldParseTypes() {\n    return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n  }\n\n  shouldParseEnums() {\n    return !!this.getPluginOption(\"flow\", \"enums\");\n  }\n\n  finishToken(type, val) {\n    if (type !== 125 && type !== 13 && type !== 28) {\n      if (this.flowPragma === undefined) {\n        this.flowPragma = null;\n      }\n    }\n\n    return super.finishToken(type, val);\n  }\n\n  addComment(comment) {\n    if (this.flowPragma === undefined) {\n      const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n      if (!matches) ;else if (matches[1] === \"flow\") {\n        this.flowPragma = \"flow\";\n      } else if (matches[1] === \"noflow\") {\n        this.flowPragma = \"noflow\";\n      } else {\n        throw new Error(\"Unexpected flow pragma\");\n      }\n    }\n\n    return super.addComment(comment);\n  }\n\n  flowParseTypeInitialiser(tok) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(tok || 14);\n    const type = this.flowParseType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParsePredicate() {\n    const node = this.startNode();\n    const moduloPos = this.state.start;\n    this.next();\n    this.expectContextual(103);\n\n    if (this.state.lastTokStart > moduloPos + 1) {\n      this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n    }\n\n    if (this.eat(10)) {\n      node.value = this.parseExpression();\n      this.expect(11);\n      return this.finishNode(node, \"DeclaredPredicate\");\n    } else {\n      return this.finishNode(node, \"InferredPredicate\");\n    }\n  }\n\n  flowParseTypeAndPredicateInitialiser() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    this.expect(14);\n    let type = null;\n    let predicate = null;\n\n    if (this.match(50)) {\n      this.state.inType = oldInType;\n      predicate = this.flowParsePredicate();\n    } else {\n      type = this.flowParseType();\n      this.state.inType = oldInType;\n\n      if (this.match(50)) {\n        predicate = this.flowParsePredicate();\n      }\n    }\n\n    return [type, predicate];\n  }\n\n  flowParseDeclareClass(node) {\n    this.next();\n    this.flowParseInterfaceish(node, true);\n    return this.finishNode(node, \"DeclareClass\");\n  }\n\n  flowParseDeclareFunction(node) {\n    this.next();\n    const id = node.id = this.parseIdentifier();\n    const typeNode = this.startNode();\n    const typeContainer = this.startNode();\n\n    if (this.match(45)) {\n      typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      typeNode.typeParameters = null;\n    }\n\n    this.expect(10);\n    const tmp = this.flowParseFunctionTypeParams();\n    typeNode.params = tmp.params;\n    typeNode.rest = tmp.rest;\n    typeNode.this = tmp._this;\n    this.expect(11);\n    [typeNode.returnType, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n    typeContainer.typeAnnotation = this.finishNode(typeNode, \"FunctionTypeAnnotation\");\n    id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n    this.resetEndLocation(id);\n    this.semicolon();\n    this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n    return this.finishNode(node, \"DeclareFunction\");\n  }\n\n  flowParseDeclare(node, insideModule) {\n    if (this.match(76)) {\n      return this.flowParseDeclareClass(node);\n    } else if (this.match(64)) {\n      return this.flowParseDeclareFunction(node);\n    } else if (this.match(70)) {\n      return this.flowParseDeclareVariable(node);\n    } else if (this.eatContextual(119)) {\n      if (this.match(16)) {\n        return this.flowParseDeclareModuleExports(node);\n      } else {\n        if (insideModule) {\n          this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n        }\n\n        return this.flowParseDeclareModule(node);\n      }\n    } else if (this.isContextual(122)) {\n      return this.flowParseDeclareTypeAlias(node);\n    } else if (this.isContextual(123)) {\n      return this.flowParseDeclareOpaqueType(node);\n    } else if (this.isContextual(121)) {\n      return this.flowParseDeclareInterface(node);\n    } else if (this.match(78)) {\n      return this.flowParseDeclareExportDeclaration(node, insideModule);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  flowParseDeclareVariable(node) {\n    this.next();\n    node.id = this.flowParseTypeAnnotatableIdentifier(true);\n    this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n    this.semicolon();\n    return this.finishNode(node, \"DeclareVariable\");\n  }\n\n  flowParseDeclareModule(node) {\n    this.scope.enter(SCOPE_OTHER);\n\n    if (this.match(125)) {\n      node.id = this.parseExprAtom();\n    } else {\n      node.id = this.parseIdentifier();\n    }\n\n    const bodyNode = node.body = this.startNode();\n    const body = bodyNode.body = [];\n    this.expect(5);\n\n    while (!this.match(8)) {\n      let bodyNode = this.startNode();\n\n      if (this.match(79)) {\n        this.next();\n\n        if (!this.isContextual(122) && !this.match(83)) {\n          this.raise(this.state.lastTokStart, FlowErrors.InvalidNonTypeImportInDeclareModule);\n        }\n\n        this.parseImport(bodyNode);\n      } else {\n        this.expectContextual(117, FlowErrors.UnsupportedStatementInDeclareModule);\n        bodyNode = this.flowParseDeclare(bodyNode, true);\n      }\n\n      body.push(bodyNode);\n    }\n\n    this.scope.exit();\n    this.expect(8);\n    this.finishNode(bodyNode, \"BlockStatement\");\n    let kind = null;\n    let hasModuleExport = false;\n    body.forEach(bodyElement => {\n      if (isEsModuleType(bodyElement)) {\n        if (kind === \"CommonJS\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"ES\";\n      } else if (bodyElement.type === \"DeclareModuleExports\") {\n        if (hasModuleExport) {\n          this.raise(bodyElement.start, FlowErrors.DuplicateDeclareModuleExports);\n        }\n\n        if (kind === \"ES\") {\n          this.raise(bodyElement.start, FlowErrors.AmbiguousDeclareModuleKind);\n        }\n\n        kind = \"CommonJS\";\n        hasModuleExport = true;\n      }\n    });\n    node.kind = kind || \"CommonJS\";\n    return this.finishNode(node, \"DeclareModule\");\n  }\n\n  flowParseDeclareExportDeclaration(node, insideModule) {\n    this.expect(78);\n\n    if (this.eat(61)) {\n      if (this.match(64) || this.match(76)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n      } else {\n        node.declaration = this.flowParseType();\n        this.semicolon();\n      }\n\n      node.default = true;\n      return this.finishNode(node, \"DeclareExportDeclaration\");\n    } else {\n      if (this.match(71) || this.isLet() || (this.isContextual(122) || this.isContextual(121)) && !insideModule) {\n        const label = this.state.value;\n        const suggestion = exportSuggestions[label];\n        throw this.raise(this.state.start, FlowErrors.UnsupportedDeclareExportKind, label, suggestion);\n      }\n\n      if (this.match(70) || this.match(64) || this.match(76) || this.isContextual(123)) {\n        node.declaration = this.flowParseDeclare(this.startNode());\n        node.default = false;\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else if (this.match(51) || this.match(5) || this.isContextual(121) || this.isContextual(122) || this.isContextual(123)) {\n        node = this.parseExport(node);\n\n        if (node.type === \"ExportNamedDeclaration\") {\n          node.type = \"ExportDeclaration\";\n          node.default = false;\n          delete node.exportKind;\n        }\n\n        node.type = \"Declare\" + node.type;\n        return node;\n      }\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParseDeclareModuleExports(node) {\n    this.next();\n    this.expectContextual(104);\n    node.typeAnnotation = this.flowParseTypeAnnotation();\n    this.semicolon();\n    return this.finishNode(node, \"DeclareModuleExports\");\n  }\n\n  flowParseDeclareTypeAlias(node) {\n    this.next();\n    this.flowParseTypeAlias(node);\n    node.type = \"DeclareTypeAlias\";\n    return node;\n  }\n\n  flowParseDeclareOpaqueType(node) {\n    this.next();\n    this.flowParseOpaqueType(node, true);\n    node.type = \"DeclareOpaqueType\";\n    return node;\n  }\n\n  flowParseDeclareInterface(node) {\n    this.next();\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"DeclareInterface\");\n  }\n\n  flowParseInterfaceish(node) {\n    let isClass = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.flowParseRestrictedIdentifier(!isClass, true);\n    this.scope.declareName(node.id.name, isClass ? BIND_FUNCTION : BIND_LEXICAL, node.id.start);\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.extends = [];\n    node.implements = [];\n    node.mixins = [];\n\n    if (this.eat(77)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (!isClass && this.eat(12));\n    }\n\n    if (this.isContextual(110)) {\n      this.next();\n\n      do {\n        node.mixins.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    if (this.isContextual(106)) {\n      this.next();\n\n      do {\n        node.implements.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: isClass,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: isClass,\n      allowInexact: false\n    });\n  }\n\n  flowParseInterfaceExtends() {\n    const node = this.startNode();\n    node.id = this.flowParseQualifiedTypeIdentifier();\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    } else {\n      node.typeParameters = null;\n    }\n\n    return this.finishNode(node, \"InterfaceExtends\");\n  }\n\n  flowParseInterface(node) {\n    this.flowParseInterfaceish(node);\n    return this.finishNode(node, \"InterfaceDeclaration\");\n  }\n\n  checkNotUnderscore(word) {\n    if (word === \"_\") {\n      this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n    }\n  }\n\n  checkReservedType(word, startLoc, declaration) {\n    if (!reservedTypes.has(word)) return;\n    this.raise(startLoc, declaration ? FlowErrors.AssignReservedType : FlowErrors.UnexpectedReservedType, word);\n  }\n\n  flowParseRestrictedIdentifier(liberal, declaration) {\n    this.checkReservedType(this.state.value, this.state.start, declaration);\n    return this.parseIdentifier(liberal);\n  }\n\n  flowParseTypeAlias(node) {\n    node.id = this.flowParseRestrictedIdentifier(false, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.right = this.flowParseTypeInitialiser(29);\n    this.semicolon();\n    return this.finishNode(node, \"TypeAlias\");\n  }\n\n  flowParseOpaqueType(node, declare) {\n    this.expectContextual(122);\n    node.id = this.flowParseRestrictedIdentifier(true, true);\n    this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    } else {\n      node.typeParameters = null;\n    }\n\n    node.supertype = null;\n\n    if (this.match(14)) {\n      node.supertype = this.flowParseTypeInitialiser(14);\n    }\n\n    node.impltype = null;\n\n    if (!declare) {\n      node.impltype = this.flowParseTypeInitialiser(29);\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"OpaqueType\");\n  }\n\n  flowParseTypeParameter() {\n    let requireDefault = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    const nodeStart = this.state.start;\n    const node = this.startNode();\n    const variance = this.flowParseVariance();\n    const ident = this.flowParseTypeAnnotatableIdentifier();\n    node.name = ident.name;\n    node.variance = variance;\n    node.bound = ident.typeAnnotation;\n\n    if (this.match(29)) {\n      this.eat(29);\n      node.default = this.flowParseType();\n    } else {\n      if (requireDefault) {\n        this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n      }\n    }\n\n    return this.finishNode(node, \"TypeParameter\");\n  }\n\n  flowParseTypeParameterDeclaration() {\n    const oldInType = this.state.inType;\n    const node = this.startNode();\n    node.params = [];\n    this.state.inType = true;\n\n    if (this.match(45) || this.match(134)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    let defaultRequired = false;\n\n    do {\n      const typeParameter = this.flowParseTypeParameter(defaultRequired);\n      node.params.push(typeParameter);\n\n      if (typeParameter.default) {\n        defaultRequired = true;\n      }\n\n      if (!this.match(46)) {\n        this.expect(12);\n      }\n    } while (!this.match(46));\n\n    this.expect(46);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterDeclaration\");\n  }\n\n  flowParseTypeParameterInstantiation() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(45);\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n    this.state.noAnonFunctionType = false;\n\n    while (!this.match(46)) {\n      node.params.push(this.flowParseType());\n\n      if (!this.match(46)) {\n        this.expect(12);\n      }\n    }\n\n    this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    this.expect(46);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseTypeParameterInstantiationCallOrNew() {\n    const node = this.startNode();\n    const oldInType = this.state.inType;\n    node.params = [];\n    this.state.inType = true;\n    this.expect(45);\n\n    while (!this.match(46)) {\n      node.params.push(this.flowParseTypeOrImplicitInstantiation());\n\n      if (!this.match(46)) {\n        this.expect(12);\n      }\n    }\n\n    this.expect(46);\n    this.state.inType = oldInType;\n    return this.finishNode(node, \"TypeParameterInstantiation\");\n  }\n\n  flowParseInterfaceType() {\n    const node = this.startNode();\n    this.expectContextual(121);\n    node.extends = [];\n\n    if (this.eat(77)) {\n      do {\n        node.extends.push(this.flowParseInterfaceExtends());\n      } while (this.eat(12));\n    }\n\n    node.body = this.flowParseObjectType({\n      allowStatic: false,\n      allowExact: false,\n      allowSpread: false,\n      allowProto: false,\n      allowInexact: false\n    });\n    return this.finishNode(node, \"InterfaceTypeAnnotation\");\n  }\n\n  flowParseObjectPropertyKey() {\n    return this.match(126) || this.match(125) ? this.parseExprAtom() : this.parseIdentifier(true);\n  }\n\n  flowParseObjectTypeIndexer(node, isStatic, variance) {\n    node.static = isStatic;\n\n    if (this.lookahead().type === 14) {\n      node.id = this.flowParseObjectPropertyKey();\n      node.key = this.flowParseTypeInitialiser();\n    } else {\n      node.id = null;\n      node.key = this.flowParseType();\n    }\n\n    this.expect(3);\n    node.value = this.flowParseTypeInitialiser();\n    node.variance = variance;\n    return this.finishNode(node, \"ObjectTypeIndexer\");\n  }\n\n  flowParseObjectTypeInternalSlot(node, isStatic) {\n    node.static = isStatic;\n    node.id = this.flowParseObjectPropertyKey();\n    this.expect(3);\n    this.expect(3);\n\n    if (this.match(45) || this.match(10)) {\n      node.method = true;\n      node.optional = false;\n      node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n    } else {\n      node.method = false;\n\n      if (this.eat(17)) {\n        node.optional = true;\n      }\n\n      node.value = this.flowParseTypeInitialiser();\n    }\n\n    return this.finishNode(node, \"ObjectTypeInternalSlot\");\n  }\n\n  flowParseObjectTypeMethodish(node) {\n    node.params = [];\n    node.rest = null;\n    node.typeParameters = null;\n    node.this = null;\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    this.expect(10);\n\n    if (this.match(74)) {\n      node.this = this.flowParseFunctionTypeParam(true);\n      node.this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      node.params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      node.rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    this.expect(11);\n    node.returnType = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"FunctionTypeAnnotation\");\n  }\n\n  flowParseObjectTypeCallProperty(node, isStatic) {\n    const valueNode = this.startNode();\n    node.static = isStatic;\n    node.value = this.flowParseObjectTypeMethodish(valueNode);\n    return this.finishNode(node, \"ObjectTypeCallProperty\");\n  }\n\n  flowParseObjectType(_ref5) {\n    let {\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact\n    } = _ref5;\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const nodeStart = this.startNode();\n    nodeStart.callProperties = [];\n    nodeStart.properties = [];\n    nodeStart.indexers = [];\n    nodeStart.internalSlots = [];\n    let endDelim;\n    let exact;\n    let inexact = false;\n\n    if (allowExact && this.match(6)) {\n      this.expect(6);\n      endDelim = 9;\n      exact = true;\n    } else {\n      this.expect(5);\n      endDelim = 8;\n      exact = false;\n    }\n\n    nodeStart.exact = exact;\n\n    while (!this.match(endDelim)) {\n      let isStatic = false;\n      let protoStart = null;\n      let inexactStart = null;\n      const node = this.startNode();\n\n      if (allowProto && this.isContextual(111)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          protoStart = this.state.start;\n          allowStatic = false;\n        }\n      }\n\n      if (allowStatic && this.isContextual(100)) {\n        const lookahead = this.lookahead();\n\n        if (lookahead.type !== 14 && lookahead.type !== 17) {\n          this.next();\n          isStatic = true;\n        }\n      }\n\n      const variance = this.flowParseVariance();\n\n      if (this.eat(0)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (this.eat(0)) {\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          nodeStart.internalSlots.push(this.flowParseObjectTypeInternalSlot(node, isStatic));\n        } else {\n          nodeStart.indexers.push(this.flowParseObjectTypeIndexer(node, isStatic, variance));\n        }\n      } else if (this.match(10) || this.match(45)) {\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        nodeStart.callProperties.push(this.flowParseObjectTypeCallProperty(node, isStatic));\n      } else {\n        let kind = \"init\";\n\n        if (this.isContextual(94) || this.isContextual(99)) {\n          const lookahead = this.lookahead();\n\n          if (tokenIsLiteralPropertyName(lookahead.type)) {\n            kind = this.state.value;\n            this.next();\n          }\n        }\n\n        const propOrInexact = this.flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact != null ? allowInexact : !exact);\n\n        if (propOrInexact === null) {\n          inexact = true;\n          inexactStart = this.state.lastTokStart;\n        } else {\n          nodeStart.properties.push(propOrInexact);\n        }\n      }\n\n      this.flowObjectTypeSemicolon();\n\n      if (inexactStart && !this.match(8) && !this.match(9)) {\n        this.raise(inexactStart, FlowErrors.UnexpectedExplicitInexactInObject);\n      }\n    }\n\n    this.expect(endDelim);\n\n    if (allowSpread) {\n      nodeStart.inexact = inexact;\n    }\n\n    const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n    this.state.inType = oldInType;\n    return out;\n  }\n\n  flowParseObjectTypeProperty(node, isStatic, protoStart, variance, kind, allowSpread, allowInexact) {\n    if (this.eat(21)) {\n      const isInexactToken = this.match(12) || this.match(13) || this.match(8) || this.match(9);\n\n      if (isInexactToken) {\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideNonObject);\n        } else if (!allowInexact) {\n          this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n        }\n\n        if (variance) {\n          this.raise(variance.start, FlowErrors.InexactVariance);\n        }\n\n        return null;\n      }\n\n      if (!allowSpread) {\n        this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n      }\n\n      if (protoStart != null) {\n        this.unexpected(protoStart);\n      }\n\n      if (variance) {\n        this.raise(variance.start, FlowErrors.SpreadVariance);\n      }\n\n      node.argument = this.flowParseType();\n      return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n    } else {\n      node.key = this.flowParseObjectPropertyKey();\n      node.static = isStatic;\n      node.proto = protoStart != null;\n      node.kind = kind;\n      let optional = false;\n\n      if (this.match(45) || this.match(10)) {\n        node.method = true;\n\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n\n        if (variance) {\n          this.unexpected(variance.start);\n        }\n\n        node.value = this.flowParseObjectTypeMethodish(this.startNodeAt(node.start, node.loc.start));\n\n        if (kind === \"get\" || kind === \"set\") {\n          this.flowCheckGetterSetterParams(node);\n        }\n\n        if (!allowSpread && node.key.name === \"constructor\" && node.value.this) {\n          this.raise(node.value.this.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      } else {\n        if (kind !== \"init\") this.unexpected();\n        node.method = false;\n\n        if (this.eat(17)) {\n          optional = true;\n        }\n\n        node.value = this.flowParseTypeInitialiser();\n        node.variance = variance;\n      }\n\n      node.optional = optional;\n      return this.finishNode(node, \"ObjectTypeProperty\");\n    }\n  }\n\n  flowCheckGetterSetterParams(property) {\n    const paramCount = property.kind === \"get\" ? 0 : 1;\n    const start = property.start;\n    const length = property.value.params.length + (property.value.rest ? 1 : 0);\n\n    if (property.value.this) {\n      this.raise(property.value.this.start, property.kind === \"get\" ? FlowErrors.GetterMayNotHaveThisParam : FlowErrors.SetterMayNotHaveThisParam);\n    }\n\n    if (length !== paramCount) {\n      if (property.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (property.kind === \"set\" && property.value.rest) {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  flowObjectTypeSemicolon() {\n    if (!this.eat(13) && !this.eat(12) && !this.match(8) && !this.match(9)) {\n      this.unexpected();\n    }\n  }\n\n  flowParseQualifiedTypeIdentifier(startPos, startLoc, id) {\n    startPos = startPos || this.state.start;\n    startLoc = startLoc || this.state.startLoc;\n    let node = id || this.flowParseRestrictedIdentifier(true);\n\n    while (this.eat(16)) {\n      const node2 = this.startNodeAt(startPos, startLoc);\n      node2.qualification = node;\n      node2.id = this.flowParseRestrictedIdentifier(true);\n      node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n    }\n\n    return node;\n  }\n\n  flowParseGenericType(startPos, startLoc, id) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.typeParameters = null;\n    node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    return this.finishNode(node, \"GenericTypeAnnotation\");\n  }\n\n  flowParseTypeofType() {\n    const node = this.startNode();\n    this.expect(83);\n    node.argument = this.flowParsePrimaryType();\n    return this.finishNode(node, \"TypeofTypeAnnotation\");\n  }\n\n  flowParseTupleType() {\n    const node = this.startNode();\n    node.types = [];\n    this.expect(0);\n\n    while (this.state.pos < this.length && !this.match(3)) {\n      node.types.push(this.flowParseType());\n      if (this.match(3)) break;\n      this.expect(12);\n    }\n\n    this.expect(3);\n    return this.finishNode(node, \"TupleTypeAnnotation\");\n  }\n\n  flowParseFunctionTypeParam(first) {\n    let name = null;\n    let optional = false;\n    let typeAnnotation = null;\n    const node = this.startNode();\n    const lh = this.lookahead();\n    const isThis = this.state.type === 74;\n\n    if (lh.type === 14 || lh.type === 17) {\n      if (isThis && !first) {\n        this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n      }\n\n      name = this.parseIdentifier(isThis);\n\n      if (this.eat(17)) {\n        optional = true;\n\n        if (isThis) {\n          this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n      }\n\n      typeAnnotation = this.flowParseTypeInitialiser();\n    } else {\n      typeAnnotation = this.flowParseType();\n    }\n\n    node.name = name;\n    node.optional = optional;\n    node.typeAnnotation = typeAnnotation;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  reinterpretTypeAsFunctionTypeParam(type) {\n    const node = this.startNodeAt(type.start, type.loc.start);\n    node.name = null;\n    node.optional = false;\n    node.typeAnnotation = type;\n    return this.finishNode(node, \"FunctionTypeParam\");\n  }\n\n  flowParseFunctionTypeParams() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let rest = null;\n    let _this = null;\n\n    if (this.match(74)) {\n      _this = this.flowParseFunctionTypeParam(true);\n      _this.name = null;\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    while (!this.match(11) && !this.match(21)) {\n      params.push(this.flowParseFunctionTypeParam(false));\n\n      if (!this.match(11)) {\n        this.expect(12);\n      }\n    }\n\n    if (this.eat(21)) {\n      rest = this.flowParseFunctionTypeParam(false);\n    }\n\n    return {\n      params,\n      rest,\n      _this\n    };\n  }\n\n  flowIdentToTypeAnnotation(startPos, startLoc, node, id) {\n    switch (id.name) {\n      case \"any\":\n        return this.finishNode(node, \"AnyTypeAnnotation\");\n\n      case \"bool\":\n      case \"boolean\":\n        return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n      case \"mixed\":\n        return this.finishNode(node, \"MixedTypeAnnotation\");\n\n      case \"empty\":\n        return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n      case \"number\":\n        return this.finishNode(node, \"NumberTypeAnnotation\");\n\n      case \"string\":\n        return this.finishNode(node, \"StringTypeAnnotation\");\n\n      case \"symbol\":\n        return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n      default:\n        this.checkNotUnderscore(id.name);\n        return this.flowParseGenericType(startPos, startLoc, id);\n    }\n  }\n\n  flowParsePrimaryType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const node = this.startNode();\n    let tmp;\n    let type;\n    let isGroupedType = false;\n    const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n    switch (this.state.type) {\n      case 5:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: false,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: true\n        });\n\n      case 6:\n        return this.flowParseObjectType({\n          allowStatic: false,\n          allowExact: true,\n          allowSpread: true,\n          allowProto: false,\n          allowInexact: false\n        });\n\n      case 0:\n        this.state.noAnonFunctionType = false;\n        type = this.flowParseTupleType();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        return type;\n\n      case 45:\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n        this.expect(10);\n        tmp = this.flowParseFunctionTypeParams();\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 10:\n        this.next();\n\n        if (!this.match(11) && !this.match(21)) {\n          if (tokenIsIdentifier(this.state.type) || this.match(74)) {\n            const token = this.lookahead().type;\n            isGroupedType = token !== 17 && token !== 14;\n          } else {\n            isGroupedType = true;\n          }\n        }\n\n        if (isGroupedType) {\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.state.noAnonFunctionType || !(this.match(12) || this.match(11) && this.lookahead().type === 19)) {\n            this.expect(11);\n            return type;\n          } else {\n            this.eat(12);\n          }\n        }\n\n        if (type) {\n          tmp = this.flowParseFunctionTypeParams([this.reinterpretTypeAsFunctionTypeParam(type)]);\n        } else {\n          tmp = this.flowParseFunctionTypeParams();\n        }\n\n        node.params = tmp.params;\n        node.rest = tmp.rest;\n        node.this = tmp._this;\n        this.expect(11);\n        this.expect(19);\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n      case 125:\n        return this.parseLiteral(this.state.value, \"StringLiteralTypeAnnotation\");\n\n      case 81:\n      case 82:\n        node.value = this.match(81);\n        this.next();\n        return this.finishNode(node, \"BooleanLiteralTypeAnnotation\");\n\n      case 49:\n        if (this.state.value === \"-\") {\n          this.next();\n\n          if (this.match(126)) {\n            return this.parseLiteralAtNode(-this.state.value, \"NumberLiteralTypeAnnotation\", node);\n          }\n\n          if (this.match(127)) {\n            return this.parseLiteralAtNode(-this.state.value, \"BigIntLiteralTypeAnnotation\", node);\n          }\n\n          throw this.raise(this.state.start, FlowErrors.UnexpectedSubtractionOperand);\n        }\n\n        throw this.unexpected();\n\n      case 126:\n        return this.parseLiteral(this.state.value, \"NumberLiteralTypeAnnotation\");\n\n      case 127:\n        return this.parseLiteral(this.state.value, \"BigIntLiteralTypeAnnotation\");\n\n      case 84:\n        this.next();\n        return this.finishNode(node, \"VoidTypeAnnotation\");\n\n      case 80:\n        this.next();\n        return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n      case 74:\n        this.next();\n        return this.finishNode(node, \"ThisTypeAnnotation\");\n\n      case 51:\n        this.next();\n        return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n      case 83:\n        return this.flowParseTypeofType();\n\n      default:\n        if (tokenIsKeyword(this.state.type)) {\n          const label = tokenLabelName(this.state.type);\n          this.next();\n          return super.createIdentifier(node, label);\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (this.isContextual(121)) {\n            return this.flowParseInterfaceType();\n          }\n\n          return this.flowIdentToTypeAnnotation(startPos, startLoc, node, this.parseIdentifier());\n        }\n\n    }\n\n    throw this.unexpected();\n  }\n\n  flowParsePostfixType() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let type = this.flowParsePrimaryType();\n    let seenOptionalIndexedAccess = false;\n\n    while ((this.match(0) || this.match(18)) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const optional = this.eat(18);\n      seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n      this.expect(0);\n\n      if (!optional && this.match(3)) {\n        node.elementType = type;\n        this.next();\n        type = this.finishNode(node, \"ArrayTypeAnnotation\");\n      } else {\n        node.objectType = type;\n        node.indexType = this.flowParseType();\n        this.expect(3);\n\n        if (seenOptionalIndexedAccess) {\n          node.optional = optional;\n          type = this.finishNode(node, \"OptionalIndexedAccessType\");\n        } else {\n          type = this.finishNode(node, \"IndexedAccessType\");\n        }\n      }\n    }\n\n    return type;\n  }\n\n  flowParsePrefixType() {\n    const node = this.startNode();\n\n    if (this.eat(17)) {\n      node.typeAnnotation = this.flowParsePrefixType();\n      return this.finishNode(node, \"NullableTypeAnnotation\");\n    } else {\n      return this.flowParsePostfixType();\n    }\n  }\n\n  flowParseAnonFunctionWithoutParens() {\n    const param = this.flowParsePrefixType();\n\n    if (!this.state.noAnonFunctionType && this.eat(19)) {\n      const node = this.startNodeAt(param.start, param.loc.start);\n      node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n      node.rest = null;\n      node.this = null;\n      node.returnType = this.flowParseType();\n      node.typeParameters = null;\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    return param;\n  }\n\n  flowParseIntersectionType() {\n    const node = this.startNode();\n    this.eat(43);\n    const type = this.flowParseAnonFunctionWithoutParens();\n    node.types = [type];\n\n    while (this.eat(43)) {\n      node.types.push(this.flowParseAnonFunctionWithoutParens());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"IntersectionTypeAnnotation\");\n  }\n\n  flowParseUnionType() {\n    const node = this.startNode();\n    this.eat(41);\n    const type = this.flowParseIntersectionType();\n    node.types = [type];\n\n    while (this.eat(41)) {\n      node.types.push(this.flowParseIntersectionType());\n    }\n\n    return node.types.length === 1 ? type : this.finishNode(node, \"UnionTypeAnnotation\");\n  }\n\n  flowParseType() {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n    const type = this.flowParseUnionType();\n    this.state.inType = oldInType;\n    return type;\n  }\n\n  flowParseTypeOrImplicitInstantiation() {\n    if (this.state.type === 124 && this.state.value === \"_\") {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.parseIdentifier();\n      return this.flowParseGenericType(startPos, startLoc, node);\n    } else {\n      return this.flowParseType();\n    }\n  }\n\n  flowParseTypeAnnotation() {\n    const node = this.startNode();\n    node.typeAnnotation = this.flowParseTypeInitialiser();\n    return this.finishNode(node, \"TypeAnnotation\");\n  }\n\n  flowParseTypeAnnotatableIdentifier(allowPrimitiveOverride) {\n    const ident = allowPrimitiveOverride ? this.parseIdentifier() : this.flowParseRestrictedIdentifier();\n\n    if (this.match(14)) {\n      ident.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(ident);\n    }\n\n    return ident;\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  flowParseVariance() {\n    let variance = null;\n\n    if (this.match(49)) {\n      variance = this.startNode();\n\n      if (this.state.value === \"+\") {\n        variance.kind = \"plus\";\n      } else {\n        variance.kind = \"minus\";\n      }\n\n      this.next();\n      this.finishNode(variance, \"Variance\");\n    }\n\n    return variance;\n  }\n\n  parseFunctionBody(node, allowExpressionBody) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (allowExpressionBody) {\n      return this.forwardNoArrowParamsConversionAt(node, () => super.parseFunctionBody(node, true, isMethod));\n    }\n\n    return super.parseFunctionBody(node, false, isMethod);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      const typeNode = this.startNode();\n      [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n      node.returnType = typeNode.typeAnnotation ? this.finishNode(typeNode, \"TypeAnnotation\") : null;\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.state.strict && this.isContextual(121)) {\n      const lookahead = this.lookahead();\n\n      if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseInterface(node);\n      }\n    } else if (this.shouldParseEnums() && this.isContextual(118)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    const stmt = super.parseStatement(context, topLevel);\n\n    if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n      this.flowPragma = null;\n    }\n\n    return stmt;\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type === \"Identifier\") {\n      if (expr.name === \"declare\") {\n        if (this.match(76) || tokenIsIdentifier(this.state.type) || this.match(64) || this.match(70) || this.match(78)) {\n          return this.flowParseDeclare(node);\n        }\n      } else if (tokenIsIdentifier(this.state.type)) {\n        if (expr.name === \"interface\") {\n          return this.flowParseInterface(node);\n        } else if (expr.name === \"type\") {\n          return this.flowParseTypeAlias(node);\n        } else if (expr.name === \"opaque\") {\n          return this.flowParseOpaqueType(node, false);\n        }\n      }\n    }\n\n    return super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 118) {\n      return !this.state.containsEsc;\n    }\n\n    return super.shouldParseExportDeclaration();\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsFlowInterfaceOrTypeOrOpaque(type) || this.shouldParseEnums() && type === 118) {\n      return this.state.containsEsc;\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseExportDefaultExpression() {\n    if (this.shouldParseEnums() && this.isContextual(118)) {\n      const node = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(node);\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.match(17)) return expr;\n\n    if (this.state.maybeInArrowParameters) {\n      const nextCh = this.lookaheadCharCode();\n\n      if (nextCh === 44 || nextCh === 61 || nextCh === 58 || nextCh === 41) {\n        this.setOptionalParametersError(refExpressionErrors);\n        return expr;\n      }\n    }\n\n    this.expect(17);\n    const state = this.state.clone();\n    const originalNoArrowAt = this.state.noArrowAt;\n    const node = this.startNodeAt(startPos, startLoc);\n    let {\n      consequent,\n      failed\n    } = this.tryParseConditionalConsequent();\n    let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n    if (failed || invalid.length > 0) {\n      const noArrowAt = [...originalNoArrowAt];\n\n      if (invalid.length > 0) {\n        this.state = state;\n        this.state.noArrowAt = noArrowAt;\n\n        for (let i = 0; i < invalid.length; i++) {\n          noArrowAt.push(invalid[i].start);\n        }\n\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n        [valid, invalid] = this.getArrowLikeExpressions(consequent);\n      }\n\n      if (failed && valid.length > 1) {\n        this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n      }\n\n      if (failed && valid.length === 1) {\n        this.state = state;\n        noArrowAt.push(valid[0].start);\n        this.state.noArrowAt = noArrowAt;\n        ({\n          consequent,\n          failed\n        } = this.tryParseConditionalConsequent());\n      }\n    }\n\n    this.getArrowLikeExpressions(consequent, true);\n    this.state.noArrowAt = originalNoArrowAt;\n    this.expect(14);\n    node.test = expr;\n    node.consequent = consequent;\n    node.alternate = this.forwardNoArrowParamsConversionAt(node, () => this.parseMaybeAssign(undefined, undefined));\n    return this.finishNode(node, \"ConditionalExpression\");\n  }\n\n  tryParseConditionalConsequent() {\n    this.state.noArrowParamsConversionAt.push(this.state.start);\n    const consequent = this.parseMaybeAssignAllowIn();\n    const failed = !this.match(14);\n    this.state.noArrowParamsConversionAt.pop();\n    return {\n      consequent,\n      failed\n    };\n  }\n\n  getArrowLikeExpressions(node, disallowInvalid) {\n    const stack = [node];\n    const arrows = [];\n\n    while (stack.length !== 0) {\n      const node = stack.pop();\n\n      if (node.type === \"ArrowFunctionExpression\") {\n        if (node.typeParameters || !node.returnType) {\n          this.finishArrowValidation(node);\n        } else {\n          arrows.push(node);\n        }\n\n        stack.push(node.body);\n      } else if (node.type === \"ConditionalExpression\") {\n        stack.push(node.consequent);\n        stack.push(node.alternate);\n      }\n    }\n\n    if (disallowInvalid) {\n      arrows.forEach(node => this.finishArrowValidation(node));\n      return [arrows, []];\n    }\n\n    return partition(arrows, node => node.params.every(param => this.isAssignable(param, true)));\n  }\n\n  finishArrowValidation(node) {\n    var _node$extra;\n\n    this.toAssignableList(node.params, (_node$extra = node.extra) == null ? void 0 : _node$extra.trailingComma, false);\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    super.checkParams(node, false, true);\n    this.scope.exit();\n  }\n\n  forwardNoArrowParamsConversionAt(node, parse) {\n    let result;\n\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n      result = parse();\n      this.state.noArrowParamsConversionAt.pop();\n    } else {\n      result = parse();\n    }\n\n    return result;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (node.type === \"ImportDeclaration\" && (node.importKind === \"type\" || node.importKind === \"typeof\") || node.type === \"ExportNamedDeclaration\" && node.exportKind === \"type\" || node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\") {\n      return;\n    }\n\n    super.assertModuleNodeAllowed(node);\n  }\n\n  parseExport(node) {\n    const decl = super.parseExport(node);\n\n    if (decl.type === \"ExportNamedDeclaration\" || decl.type === \"ExportAllDeclaration\") {\n      decl.exportKind = decl.exportKind || \"value\";\n    }\n\n    return decl;\n  }\n\n  parseExportDeclaration(node) {\n    if (this.isContextual(122)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n\n      if (this.match(5)) {\n        node.specifiers = this.parseExportSpecifiers(true);\n        this.parseExportFrom(node);\n        return null;\n      } else {\n        return this.flowParseTypeAlias(declarationNode);\n      }\n    } else if (this.isContextual(123)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseOpaqueType(declarationNode, false);\n    } else if (this.isContextual(121)) {\n      node.exportKind = \"type\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseInterface(declarationNode);\n    } else if (this.shouldParseEnums() && this.isContextual(118)) {\n      node.exportKind = \"value\";\n      const declarationNode = this.startNode();\n      this.next();\n      return this.flowParseEnumDeclaration(declarationNode);\n    } else {\n      return super.parseExportDeclaration(node);\n    }\n  }\n\n  eatExportStar(node) {\n    if (super.eatExportStar(...arguments)) return true;\n\n    if (this.isContextual(122) && this.lookahead().type === 51) {\n      node.exportKind = \"type\";\n      this.next();\n      this.next();\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    const pos = this.state.start;\n    const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n\n    if (hasNamespace && node.exportKind === \"type\") {\n      this.unexpected(pos);\n    }\n\n    return hasNamespace;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    super.parseClassId(node, isStatement, optionalId);\n\n    if (this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n  }\n\n  parseClassMember(classBody, member, state) {\n    const pos = this.state.start;\n\n    if (this.isContextual(117)) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      member.declare = true;\n    }\n\n    super.parseClassMember(classBody, member, state);\n\n    if (member.declare) {\n      if (member.type !== \"ClassProperty\" && member.type !== \"ClassPrivateProperty\" && member.type !== \"PropertyDefinition\") {\n        this.raise(pos, FlowErrors.DeclareClassElement);\n      } else if (member.value) {\n        this.raise(member.value.start, FlowErrors.DeclareClassFieldInitializer);\n      }\n    }\n  }\n\n  isIterator(word) {\n    return word === \"iterator\" || word === \"asyncIterator\";\n  }\n\n  readIterator() {\n    const word = super.readWord1();\n    const fullWord = \"@@\" + word;\n\n    if (!this.isIterator(word) || !this.state.inType) {\n      this.raise(this.state.pos, ErrorMessages.InvalidIdentifier, fullWord);\n    }\n\n    this.finishToken(124, fullWord);\n  }\n\n  getTokenFromCode(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 123 && next === 124) {\n      return this.finishOp(6, 2);\n    } else if (this.state.inType && (code === 62 || code === 60)) {\n      return this.finishOp(code === 62 ? 46 : 45, 1);\n    } else if (this.state.inType && code === 63) {\n      if (next === 46) {\n        return this.finishOp(18, 2);\n      }\n\n      return this.finishOp(17, 1);\n    } else if (isIteratorStart(code, next)) {\n      this.state.pos += 2;\n      return this.readIterator();\n    } else {\n      return super.getTokenFromCode(code);\n    }\n  }\n\n  isAssignable(node, isBinding) {\n    if (node.type === \"TypeCastExpression\") {\n      return this.isAssignable(node.expression, isBinding);\n    } else {\n      return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    if (node.type === \"TypeCastExpression\") {\n      return super.toAssignable(this.typeCastToParameter(node), isLHS);\n    } else {\n      return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n\n      if ((expr == null ? void 0 : expr.type) === \"TypeCastExpression\") {\n        exprList[i] = this.typeCastToParameter(expr);\n      }\n    }\n\n    return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    for (let i = 0; i < exprList.length; i++) {\n      var _expr$extra;\n\n      const expr = exprList[i];\n\n      if (expr && expr.type === \"TypeCastExpression\" && !((_expr$extra = expr.extra) != null && _expr$extra.parenthesized) && (exprList.length > 1 || !isParenthesizedExpr)) {\n        this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n      }\n    }\n\n    return exprList;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    const node = super.parseArrayLike(close, canBePattern, isTuple, refExpressionErrors);\n\n    if (canBePattern && !this.state.maybeInArrowParameters) {\n      this.toReferencedList(node.elements);\n    }\n\n    return node;\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"TypeCastExpression\") {\n      for (var _len6 = arguments.length, args = new Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {\n        args[_key6 - 1] = arguments[_key6];\n      }\n\n      return super.checkLVal(expr, ...args);\n    }\n  }\n\n  parseClassProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (this.match(14)) {\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n    }\n\n    return super.parseClassPrivateProperty(node);\n  }\n\n  isClassMethod() {\n    return this.match(45) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(14) || super.isClassProperty();\n  }\n\n  isNonstaticConstructor(method) {\n    return !this.match(14) && super.isNonstaticConstructor(method);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(45)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n\n    if (method.params && isConstructor) {\n      const params = method.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    } else if (method.type === \"MethodDefinition\" && isConstructor && method.value.params) {\n      const params = method.value.params;\n\n      if (params.length > 0 && this.isThisParam(params[0])) {\n        this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n      }\n    }\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    if (method.variance) {\n      this.unexpected(method.variance.start);\n    }\n\n    delete method.variance;\n\n    if (this.match(45)) {\n      method.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.match(45)) {\n      node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n    }\n\n    if (this.isContextual(106)) {\n      this.next();\n      const implemented = node.implements = [];\n\n      do {\n        const node = this.startNode();\n        node.id = this.flowParseRestrictedIdentifier(true);\n\n        if (this.match(45)) {\n          node.typeParameters = this.flowParseTypeParameterInstantiation();\n        } else {\n          node.typeParameters = null;\n        }\n\n        implemented.push(this.finishNode(node, \"ClassImplements\"));\n      } while (this.eat(12));\n    }\n  }\n\n  checkGetterSetterParams(method) {\n    super.checkGetterSetterParams(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    if (params.length > 0) {\n      const param = params[0];\n\n      if (this.isThisParam(param) && method.kind === \"get\") {\n        this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n      }\n    }\n  }\n\n  parsePropertyNamePrefixOperator(node) {\n    node.variance = this.flowParseVariance();\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    if (prop.variance) {\n      this.unexpected(prop.variance.start);\n    }\n\n    delete prop.variance;\n    let typeParameters;\n\n    if (this.match(45) && !isAccessor) {\n      typeParameters = this.flowParseTypeParameterDeclaration();\n      if (!this.match(10)) this.unexpected();\n    }\n\n    super.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors);\n\n    if (typeParameters) {\n      (prop.value || prop).typeParameters = typeParameters;\n    }\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\") {\n        this.raise(param.start, FlowErrors.PatternIsOptional);\n      }\n\n      if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n      }\n\n      param.optional = true;\n    }\n\n    if (this.match(14)) {\n      param.typeAnnotation = this.flowParseTypeAnnotation();\n    } else if (this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n    }\n\n    if (this.match(29) && this.isThisParam(param)) {\n      this.raise(param.start, FlowErrors.ThisParamNoDefault);\n    }\n\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n    }\n\n    return node;\n  }\n\n  shouldParseDefaultImport(node) {\n    if (!hasTypeImportKind(node)) {\n      return super.shouldParseDefaultImport(node);\n    }\n\n    return isMaybeDefaultImport(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = hasTypeImportKind(node) ? this.flowParseRestrictedIdentifier(true, true) : this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    node.importKind = \"value\";\n    let kind = null;\n\n    if (this.match(83)) {\n      kind = \"typeof\";\n    } else if (this.isContextual(122)) {\n      kind = \"type\";\n    }\n\n    if (kind) {\n      const lh = this.lookahead();\n      const {\n        type\n      } = lh;\n\n      if (kind === \"type\" && type === 51) {\n        this.unexpected(lh.start);\n      }\n\n      if (isMaybeDefaultImport(type) || type === 5 || type === 51) {\n        this.next();\n        node.importKind = kind;\n      }\n    }\n\n    return super.maybeParseDefaultImportSpecifier(node);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    const firstIdent = specifier.imported;\n    let specifierTypeKind = null;\n\n    if (firstIdent.type === \"Identifier\") {\n      if (firstIdent.name === \"type\") {\n        specifierTypeKind = \"type\";\n      } else if (firstIdent.name === \"typeof\") {\n        specifierTypeKind = \"typeof\";\n      }\n    }\n\n    let isBinding = false;\n\n    if (this.isContextual(89) && !this.isLookaheadContextual(\"as\")) {\n      const as_ident = this.parseIdentifier(true);\n\n      if (specifierTypeKind !== null && !tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = as_ident;\n        specifier.importKind = specifierTypeKind;\n        specifier.local = cloneIdentifier(as_ident);\n      } else {\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n        specifier.local = this.parseIdentifier();\n      }\n    } else {\n      if (specifierTypeKind !== null && tokenIsKeywordOrIdentifier(this.state.type)) {\n        specifier.imported = this.parseIdentifier(true);\n        specifier.importKind = specifierTypeKind;\n      } else {\n        if (importedIsString) {\n          throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, firstIdent.value);\n        }\n\n        specifier.imported = firstIdent;\n        specifier.importKind = null;\n      }\n\n      if (this.eatContextual(89)) {\n        specifier.local = this.parseIdentifier();\n      } else {\n        isBinding = true;\n        specifier.local = cloneIdentifier(specifier.imported);\n      }\n    }\n\n    const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n    if (isInTypeOnlyImport && specifierIsTypeImport) {\n      this.raise(specifier.start, FlowErrors.ImportTypeShorthandOnlyInPureImport);\n    }\n\n    if (isInTypeOnlyImport || specifierIsTypeImport) {\n      this.checkReservedType(specifier.local.name, specifier.local.start, true);\n    }\n\n    if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n      this.checkReservedWord(specifier.local.name, specifier.start, true, true);\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 74:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const kind = node.kind;\n\n    if (kind !== \"get\" && kind !== \"set\" && this.match(45)) {\n      node.typeParameters = this.flowParseTypeParameterDeclaration();\n    }\n\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (this.match(14)) {\n      decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = true;\n      node.returnType = this.flowParseTypeAnnotation();\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    var _jsx;\n\n    let state = null;\n    let jsx;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(134) || this.match(45))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(refExpressionErrors, afterLeftParse), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if ((_jsx = jsx) != null && _jsx.error || this.match(45)) {\n      var _jsx2, _jsx3;\n\n      state = state || this.state.clone();\n      let typeParameters;\n      const arrow = this.tryParse(abort => {\n        var _arrowExpression$extr;\n\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        const arrowExpression = this.forwardNoArrowParamsConversionAt(typeParameters, () => {\n          const result = super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n          this.resetStartLocationFromNode(result, typeParameters);\n          return result;\n        });\n        if ((_arrowExpression$extr = arrowExpression.extra) != null && _arrowExpression$extr.parenthesized) abort();\n        const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n        if (expr.type !== \"ArrowFunctionExpression\") abort();\n        expr.typeParameters = typeParameters;\n        this.resetStartLocationFromNode(expr, typeParameters);\n        return arrowExpression;\n      }, state);\n      let arrowExpression = null;\n\n      if (arrow.node && this.maybeUnwrapTypeCastExpression(arrow.node).type === \"ArrowFunctionExpression\") {\n        if (!arrow.error && !arrow.aborted) {\n          if (arrow.node.async) {\n            this.raise(typeParameters.start, FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction);\n          }\n\n          return arrow.node;\n        }\n\n        arrowExpression = arrow.node;\n      }\n\n      if ((_jsx2 = jsx) != null && _jsx2.node) {\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrowExpression) {\n        this.state = arrow.failState;\n        return arrowExpression;\n      }\n\n      if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      throw this.raise(typeParameters.start, FlowErrors.UnexpectedTokenAfterTypeParameter);\n    }\n\n    return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(() => {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        const typeNode = this.startNode();\n        [typeNode.typeAnnotation, node.predicate] = this.flowParseTypeAndPredicateInitialiser();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n        if (this.canInsertSemicolon()) this.unexpected();\n        if (!this.match(19)) this.unexpected();\n        return typeNode;\n      });\n      if (result.thrown) return null;\n      if (result.error) this.state = result.failState;\n      node.returnType = result.node.typeAnnotation ? this.finishNode(result.node, \"TypeAnnotation\") : null;\n    }\n\n    return super.parseArrow(node);\n  }\n\n  shouldParseArrow(params) {\n    return this.match(14) || super.shouldParseArrow(params);\n  }\n\n  setArrowFunctionParameters(node, params) {\n    if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      node.params = params;\n    } else {\n      super.setArrowFunctionParameters(node, params);\n    }\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    if (isArrowFunction && this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n      return;\n    }\n\n    for (let i = 0; i < node.params.length; i++) {\n      if (this.isThisParam(node.params[i]) && i > 0) {\n        this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n      }\n    }\n\n    return super.checkParams(...arguments);\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    return super.parseParenAndDistinguishExpression(canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    if (base.type === \"Identifier\" && base.name === \"async\" && this.state.noArrowAt.indexOf(startPos) !== -1) {\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      base = this.finishNode(node, \"CallExpression\");\n    } else if (base.type === \"Identifier\" && base.name === \"async\" && this.match(45)) {\n      const state = this.state.clone();\n      const arrow = this.tryParse(abort => this.parseAsyncArrowWithTypeParameters(startPos, startLoc) || abort(), state);\n      if (!arrow.error && !arrow.aborted) return arrow.node;\n      const result = this.tryParse(() => super.parseSubscripts(base, startPos, startLoc, noCalls), state);\n      if (result.node && !result.error) return result.node;\n\n      if (arrow.node) {\n        this.state = arrow.failState;\n        return arrow.node;\n      }\n\n      if (result.node) {\n        this.state = result.failState;\n        return result.node;\n      }\n\n      throw arrow.error || result.error;\n    }\n\n    return super.parseSubscripts(base, startPos, startLoc, noCalls);\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, subscriptState) {\n    if (this.match(18) && this.isLookaheadToken_lt()) {\n      subscriptState.optionalChainMember = true;\n\n      if (noCalls) {\n        subscriptState.stop = true;\n        return base;\n      }\n\n      this.next();\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      node.typeArguments = this.flowParseTypeParameterInstantiation();\n      this.expect(10);\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      node.optional = true;\n      return this.finishCallExpression(node, true);\n    } else if (!noCalls && this.shouldParseTypes() && this.match(45)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.callee = base;\n      const result = this.tryParse(() => {\n        node.typeArguments = this.flowParseTypeParameterInstantiationCallOrNew();\n        this.expect(10);\n        node.arguments = this.parseCallExpressionArguments(11, false);\n        if (subscriptState.optionalChainMember) node.optional = false;\n        return this.finishCallExpression(node, subscriptState.optionalChainMember);\n      });\n\n      if (result.node) {\n        if (result.error) this.state = result.failState;\n        return result.node;\n      }\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, subscriptState);\n  }\n\n  parseNewArguments(node) {\n    let targs = null;\n\n    if (this.shouldParseTypes() && this.match(45)) {\n      targs = this.tryParse(() => this.flowParseTypeParameterInstantiationCallOrNew()).node;\n    }\n\n    node.typeArguments = targs;\n    super.parseNewArguments(node);\n  }\n\n  parseAsyncArrowWithTypeParameters(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.parseFunctionParams(node);\n    if (!this.parseArrow(node)) return;\n    return this.parseArrowExpression(node, undefined, true);\n  }\n\n  readToken_mult_modulo(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 42 && next === 47 && this.state.hasFlowComment) {\n      this.state.hasFlowComment = false;\n      this.state.pos += 2;\n      this.nextToken();\n      return;\n    }\n\n    super.readToken_mult_modulo(code);\n  }\n\n  readToken_pipe_amp(code) {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (code === 124 && next === 125) {\n      this.finishOp(9, 2);\n      return;\n    }\n\n    super.readToken_pipe_amp(code);\n  }\n\n  parseTopLevel(file, program) {\n    const fileNode = super.parseTopLevel(file, program);\n\n    if (this.state.hasFlowComment) {\n      this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n    }\n\n    return fileNode;\n  }\n\n  skipBlockComment() {\n    if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n      if (this.state.hasFlowComment) {\n        this.unexpected(null, FlowErrors.NestedFlowComment);\n      }\n\n      this.hasFlowCommentCompletion();\n      this.state.pos += this.skipFlowComment();\n      this.state.hasFlowComment = true;\n      return;\n    }\n\n    if (this.state.hasFlowComment) {\n      const end = this.input.indexOf(\"*-/\", this.state.pos += 2);\n\n      if (end === -1) {\n        throw this.raise(this.state.pos - 2, ErrorMessages.UnterminatedComment);\n      }\n\n      this.state.pos = end + 3;\n      return;\n    }\n\n    return super.skipBlockComment();\n  }\n\n  skipFlowComment() {\n    const {\n      pos\n    } = this.state;\n    let shiftToFirstNonWhiteSpace = 2;\n\n    while ([32, 9].includes(this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace))) {\n      shiftToFirstNonWhiteSpace++;\n    }\n\n    const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n    const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n    if (ch2 === 58 && ch3 === 58) {\n      return shiftToFirstNonWhiteSpace + 2;\n    }\n\n    if (this.input.slice(shiftToFirstNonWhiteSpace + pos, shiftToFirstNonWhiteSpace + pos + 12) === \"flow-include\") {\n      return shiftToFirstNonWhiteSpace + 12;\n    }\n\n    if (ch2 === 58 && ch3 !== 58) {\n      return shiftToFirstNonWhiteSpace;\n    }\n\n    return false;\n  }\n\n  hasFlowCommentCompletion() {\n    const end = this.input.indexOf(\"*/\", this.state.pos);\n\n    if (end === -1) {\n      throw this.raise(this.state.pos, ErrorMessages.UnterminatedComment);\n    }\n  }\n\n  flowEnumErrorBooleanMemberNotInitialized(pos, _ref6) {\n    let {\n      enumName,\n      memberName\n    } = _ref6;\n    this.raise(pos, FlowErrors.EnumBooleanMemberNotInitialized, memberName, enumName);\n  }\n\n  flowEnumErrorInvalidMemberName(pos, _ref7) {\n    let {\n      enumName,\n      memberName\n    } = _ref7;\n    const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n    this.raise(pos, FlowErrors.EnumInvalidMemberName, memberName, suggestion, enumName);\n  }\n\n  flowEnumErrorDuplicateMemberName(pos, _ref8) {\n    let {\n      enumName,\n      memberName\n    } = _ref8;\n    this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n  }\n\n  flowEnumErrorInconsistentMemberValues(pos, _ref9) {\n    let {\n      enumName\n    } = _ref9;\n    this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n  }\n\n  flowEnumErrorInvalidExplicitType(pos, _ref10) {\n    let {\n      enumName,\n      suppliedType\n    } = _ref10;\n    return this.raise(pos, suppliedType === null ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied : FlowErrors.EnumInvalidExplicitType, enumName, suppliedType);\n  }\n\n  flowEnumErrorInvalidMemberInitializer(pos, _ref11) {\n    let {\n      enumName,\n      explicitType,\n      memberName\n    } = _ref11;\n    let message = null;\n\n    switch (explicitType) {\n      case \"boolean\":\n      case \"number\":\n      case \"string\":\n        message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n        break;\n\n      case \"symbol\":\n        message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n        break;\n\n      default:\n        message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n    }\n\n    return this.raise(pos, message, enumName, memberName, explicitType);\n  }\n\n  flowEnumErrorNumberMemberNotInitialized(pos, _ref12) {\n    let {\n      enumName,\n      memberName\n    } = _ref12;\n    this.raise(pos, FlowErrors.EnumNumberMemberNotInitialized, enumName, memberName);\n  }\n\n  flowEnumErrorStringMemberInconsistentlyInitailized(pos, _ref13) {\n    let {\n      enumName\n    } = _ref13;\n    this.raise(pos, FlowErrors.EnumStringMemberInconsistentlyInitailized, enumName);\n  }\n\n  flowEnumMemberInit() {\n    const startPos = this.state.start;\n\n    const endOfInit = () => this.match(12) || this.match(8);\n\n    switch (this.state.type) {\n      case 126:\n        {\n          const literal = this.parseNumericLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"number\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case 125:\n        {\n          const literal = this.parseStringLiteral(this.state.value);\n\n          if (endOfInit()) {\n            return {\n              type: \"string\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      case 81:\n      case 82:\n        {\n          const literal = this.parseBooleanLiteral(this.match(81));\n\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal\n            };\n          }\n\n          return {\n            type: \"invalid\",\n            pos: startPos\n          };\n        }\n\n      default:\n        return {\n          type: \"invalid\",\n          pos: startPos\n        };\n    }\n  }\n\n  flowEnumMemberRaw() {\n    const pos = this.state.start;\n    const id = this.parseIdentifier(true);\n    const init = this.eat(29) ? this.flowEnumMemberInit() : {\n      type: \"none\",\n      pos\n    };\n    return {\n      id,\n      init\n    };\n  }\n\n  flowEnumCheckExplicitTypeMismatch(pos, context, expectedType) {\n    const {\n      explicitType\n    } = context;\n\n    if (explicitType === null) {\n      return;\n    }\n\n    if (explicitType !== expectedType) {\n      this.flowEnumErrorInvalidMemberInitializer(pos, context);\n    }\n  }\n\n  flowEnumMembers(_ref14) {\n    let {\n      enumName,\n      explicitType\n    } = _ref14;\n    const seenNames = new Set();\n    const members = {\n      booleanMembers: [],\n      numberMembers: [],\n      stringMembers: [],\n      defaultedMembers: []\n    };\n    let hasUnknownMembers = false;\n\n    while (!this.match(8)) {\n      if (this.eat(21)) {\n        hasUnknownMembers = true;\n        break;\n      }\n\n      const memberNode = this.startNode();\n      const {\n        id,\n        init\n      } = this.flowEnumMemberRaw();\n      const memberName = id.name;\n\n      if (memberName === \"\") {\n        continue;\n      }\n\n      if (/^[a-z]/.test(memberName)) {\n        this.flowEnumErrorInvalidMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      if (seenNames.has(memberName)) {\n        this.flowEnumErrorDuplicateMemberName(id.start, {\n          enumName,\n          memberName\n        });\n      }\n\n      seenNames.add(memberName);\n      const context = {\n        enumName,\n        explicitType,\n        memberName\n      };\n      memberNode.id = id;\n\n      switch (init.type) {\n        case \"boolean\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"boolean\");\n            memberNode.init = init.value;\n            members.booleanMembers.push(this.finishNode(memberNode, \"EnumBooleanMember\"));\n            break;\n          }\n\n        case \"number\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(this.finishNode(memberNode, \"EnumNumberMember\"));\n            break;\n          }\n\n        case \"string\":\n          {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(this.finishNode(memberNode, \"EnumStringMember\"));\n            break;\n          }\n\n        case \"invalid\":\n          {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n\n        case \"none\":\n          {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(init.pos, context);\n                break;\n\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n\n              default:\n                members.defaultedMembers.push(this.finishNode(memberNode, \"EnumDefaultedMember\"));\n            }\n          }\n      }\n\n      if (!this.match(8)) {\n        this.expect(12);\n      }\n    }\n\n    return {\n      members,\n      hasUnknownMembers\n    };\n  }\n\n  flowEnumStringMembers(initializedMembers, defaultedMembers, _ref15) {\n    let {\n      enumName\n    } = _ref15;\n\n    if (initializedMembers.length === 0) {\n      return defaultedMembers;\n    } else if (defaultedMembers.length === 0) {\n      return initializedMembers;\n    } else if (defaultedMembers.length > initializedMembers.length) {\n      for (const member of initializedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return defaultedMembers;\n    } else {\n      for (const member of defaultedMembers) {\n        this.flowEnumErrorStringMemberInconsistentlyInitailized(member.start, {\n          enumName\n        });\n      }\n\n      return initializedMembers;\n    }\n  }\n\n  flowEnumParseExplicitType(_ref16) {\n    let {\n      enumName\n    } = _ref16;\n\n    if (this.eatContextual(97)) {\n      if (!tokenIsIdentifier(this.state.type)) {\n        throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: null\n        });\n      }\n\n      const {\n        value\n      } = this.state;\n      this.next();\n\n      if (value !== \"boolean\" && value !== \"number\" && value !== \"string\" && value !== \"symbol\") {\n        this.flowEnumErrorInvalidExplicitType(this.state.start, {\n          enumName,\n          suppliedType: value\n        });\n      }\n\n      return value;\n    }\n\n    return null;\n  }\n\n  flowEnumBody(node, _ref17) {\n    let {\n      enumName,\n      nameLoc\n    } = _ref17;\n    const explicitType = this.flowEnumParseExplicitType({\n      enumName\n    });\n    this.expect(5);\n    const {\n      members,\n      hasUnknownMembers\n    } = this.flowEnumMembers({\n      enumName,\n      explicitType\n    });\n    node.hasUnknownMembers = hasUnknownMembers;\n\n    switch (explicitType) {\n      case \"boolean\":\n        node.explicitType = true;\n        node.members = members.booleanMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumBooleanBody\");\n\n      case \"number\":\n        node.explicitType = true;\n        node.members = members.numberMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumNumberBody\");\n\n      case \"string\":\n        node.explicitType = true;\n        node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n          enumName\n        });\n        this.expect(8);\n        return this.finishNode(node, \"EnumStringBody\");\n\n      case \"symbol\":\n        node.members = members.defaultedMembers;\n        this.expect(8);\n        return this.finishNode(node, \"EnumSymbolBody\");\n\n      default:\n        {\n          const empty = () => {\n            node.members = [];\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n\n          node.explicitType = false;\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(members.stringMembers, members.defaultedMembers, {\n              enumName\n            });\n            this.expect(8);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.booleanMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name\n              });\n            }\n\n            node.members = members.numberMembers;\n            this.expect(8);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, {\n              enumName\n            });\n            return empty();\n          }\n        }\n    }\n  }\n\n  flowParseEnumDeclaration(node) {\n    const id = this.parseIdentifier();\n    node.id = id;\n    node.body = this.flowEnumBody(this.startNode(), {\n      enumName: id.name,\n      nameLoc: id.start\n    });\n    return this.finishNode(node, \"EnumDeclaration\");\n  }\n\n  isLookaheadToken_lt() {\n    const next = this.nextTokenStart();\n\n    if (this.input.charCodeAt(next) === 60) {\n      const afterNext = this.input.charCodeAt(next + 1);\n      return afterNext !== 60 && afterNext !== 61;\n    }\n\n    return false;\n  }\n\n  maybeUnwrapTypeCastExpression(node) {\n    return node.type === \"TypeCastExpression\" ? node.expression : node;\n  }\n\n};\n\nconst entities = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\"\n};\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\nconst JsxErrors = makeErrorTemplates({\n  AttributeIsEmpty: \"JSX attributes must only be assigned a non-empty expression.\",\n  MissingClosingTagElement: \"Expected corresponding JSX closing tag for <%0>.\",\n  MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n  UnexpectedSequenceExpression: \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n  UnsupportedJsxValue: \"JSX value should be either an expression or a quoted JSX text.\",\n  UnterminatedJsxContent: \"Unterminated JSX contents.\",\n  UnwrappedAdjacentJSXElements: \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\"\n}, ErrorCodes.SyntaxError, \"jsx\");\n\nfunction isFragment(object) {\n  return object ? object.type === \"JSXOpeningFragment\" || object.type === \"JSXClosingFragment\" : false;\n}\n\nfunction getQualifiedJSXName(object) {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return getQualifiedJSXName(object.object) + \".\" + getQualifiedJSXName(object.property);\n  }\n\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nvar jsx = superClass => class extends superClass {\n  jsxReadToken() {\n    let out = \"\";\n    let chunkStart = this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n\n      switch (ch) {\n        case 60:\n        case 123:\n          if (this.state.pos === this.state.start) {\n            if (ch === 60 && this.state.canStartJSXElement) {\n              ++this.state.pos;\n              return this.finishToken(134);\n            }\n\n            return super.getTokenFromCode(ch);\n          }\n\n          out += this.input.slice(chunkStart, this.state.pos);\n          return this.finishToken(133, out);\n\n        case 38:\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n          break;\n\n        case 62:\n        case 125:\n        default:\n          if (isNewLine(ch)) {\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadNewLine(true);\n            chunkStart = this.state.pos;\n          } else {\n            ++this.state.pos;\n          }\n\n      }\n    }\n  }\n\n  jsxReadNewLine(normalizeCRLF) {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let out;\n    ++this.state.pos;\n\n    if (ch === 13 && this.input.charCodeAt(this.state.pos) === 10) {\n      ++this.state.pos;\n      out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n    } else {\n      out = String.fromCharCode(ch);\n    }\n\n    ++this.state.curLine;\n    this.state.lineStart = this.state.pos;\n    return out;\n  }\n\n  jsxReadString(quote) {\n    let out = \"\";\n    let chunkStart = ++this.state.pos;\n\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, ErrorMessages.UnterminatedString);\n      }\n\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n\n      if (ch === 38) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadEntity();\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        out += this.jsxReadNewLine(false);\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n\n    out += this.input.slice(chunkStart, this.state.pos++);\n    return this.finishToken(125, out);\n  }\n\n  jsxReadEntity() {\n    let str = \"\";\n    let count = 0;\n    let entity;\n    let ch = this.input[this.state.pos];\n    const startPos = ++this.state.pos;\n\n    while (this.state.pos < this.length && count++ < 10) {\n      ch = this.input[this.state.pos++];\n\n      if (ch === \";\") {\n        if (str[0] === \"#\") {\n          if (str[1] === \"x\") {\n            str = str.substr(2);\n\n            if (HEX_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 16));\n            }\n          } else {\n            str = str.substr(1);\n\n            if (DECIMAL_NUMBER.test(str)) {\n              entity = String.fromCodePoint(parseInt(str, 10));\n            }\n          }\n        } else {\n          entity = entities[str];\n        }\n\n        break;\n      }\n\n      str += ch;\n    }\n\n    if (!entity) {\n      this.state.pos = startPos;\n      return \"&\";\n    }\n\n    return entity;\n  }\n\n  jsxReadWord() {\n    let ch;\n    const start = this.state.pos;\n\n    do {\n      ch = this.input.charCodeAt(++this.state.pos);\n    } while (isIdentifierChar(ch) || ch === 45);\n\n    return this.finishToken(132, this.input.slice(start, this.state.pos));\n  }\n\n  jsxParseIdentifier() {\n    const node = this.startNode();\n\n    if (this.match(132)) {\n      node.name = this.state.value;\n    } else if (tokenIsKeyword(this.state.type)) {\n      node.name = tokenLabelName(this.state.type);\n    } else {\n      this.unexpected();\n    }\n\n    this.next();\n    return this.finishNode(node, \"JSXIdentifier\");\n  }\n\n  jsxParseNamespacedName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const name = this.jsxParseIdentifier();\n    if (!this.eat(14)) return name;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.namespace = name;\n    node.name = this.jsxParseIdentifier();\n    return this.finishNode(node, \"JSXNamespacedName\");\n  }\n\n  jsxParseElementName() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let node = this.jsxParseNamespacedName();\n\n    if (node.type === \"JSXNamespacedName\") {\n      return node;\n    }\n\n    while (this.eat(16)) {\n      const newNode = this.startNodeAt(startPos, startLoc);\n      newNode.object = node;\n      newNode.property = this.jsxParseIdentifier();\n      node = this.finishNode(newNode, \"JSXMemberExpression\");\n    }\n\n    return node;\n  }\n\n  jsxParseAttributeValue() {\n    let node;\n\n    switch (this.state.type) {\n      case 5:\n        node = this.startNode();\n        this.setContext(types.brace);\n        this.next();\n        node = this.jsxParseExpressionContainer(node, types.j_oTag);\n\n        if (node.expression.type === \"JSXEmptyExpression\") {\n          this.raise(node.start, JsxErrors.AttributeIsEmpty);\n        }\n\n        return node;\n\n      case 134:\n      case 125:\n        return this.parseExprAtom();\n\n      default:\n        throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n    }\n  }\n\n  jsxParseEmptyExpression() {\n    const node = this.startNodeAt(this.state.lastTokEnd, this.state.lastTokEndLoc);\n    return this.finishNodeAt(node, \"JSXEmptyExpression\", this.state.start, this.state.startLoc);\n  }\n\n  jsxParseSpreadChild(node) {\n    this.next();\n    node.expression = this.parseExpression();\n    this.setContext(types.j_oTag);\n    this.expect(8);\n    return this.finishNode(node, \"JSXSpreadChild\");\n  }\n\n  jsxParseExpressionContainer(node, previousContext) {\n    if (this.match(8)) {\n      node.expression = this.jsxParseEmptyExpression();\n    } else {\n      const expression = this.parseExpression();\n      node.expression = expression;\n    }\n\n    this.setContext(previousContext);\n    this.expect(8);\n    return this.finishNode(node, \"JSXExpressionContainer\");\n  }\n\n  jsxParseAttribute() {\n    const node = this.startNode();\n\n    if (this.match(5)) {\n      this.setContext(types.brace);\n      this.next();\n      this.expect(21);\n      node.argument = this.parseMaybeAssignAllowIn();\n      this.setContext(types.j_oTag);\n      this.expect(8);\n      return this.finishNode(node, \"JSXSpreadAttribute\");\n    }\n\n    node.name = this.jsxParseNamespacedName();\n    node.value = this.eat(29) ? this.jsxParseAttributeValue() : null;\n    return this.finishNode(node, \"JSXAttribute\");\n  }\n\n  jsxParseOpeningElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(135)) {\n      this.expect(135);\n      return this.finishNode(node, \"JSXOpeningFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    return this.jsxParseOpeningElementAfterName(node);\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    const attributes = [];\n\n    while (!this.match(52) && !this.match(135)) {\n      attributes.push(this.jsxParseAttribute());\n    }\n\n    node.attributes = attributes;\n    node.selfClosing = this.eat(52);\n    this.expect(135);\n    return this.finishNode(node, \"JSXOpeningElement\");\n  }\n\n  jsxParseClosingElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    if (this.match(135)) {\n      this.expect(135);\n      return this.finishNode(node, \"JSXClosingFragment\");\n    }\n\n    node.name = this.jsxParseElementName();\n    this.expect(135);\n    return this.finishNode(node, \"JSXClosingElement\");\n  }\n\n  jsxParseElementAt(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    const children = [];\n    const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n    let closingElement = null;\n\n    if (!openingElement.selfClosing) {\n      contents: for (;;) {\n        switch (this.state.type) {\n          case 134:\n            startPos = this.state.start;\n            startLoc = this.state.startLoc;\n            this.next();\n\n            if (this.eat(52)) {\n              closingElement = this.jsxParseClosingElementAt(startPos, startLoc);\n              break contents;\n            }\n\n            children.push(this.jsxParseElementAt(startPos, startLoc));\n            break;\n\n          case 133:\n            children.push(this.parseExprAtom());\n            break;\n\n          case 5:\n            {\n              const node = this.startNode();\n              this.setContext(types.brace);\n              this.next();\n\n              if (this.match(21)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(this.jsxParseExpressionContainer(node, types.j_expr));\n              }\n\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      if (isFragment(openingElement) && !isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagFragment);\n      } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n        this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n      } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n        if (getQualifiedJSXName(closingElement.name) !== getQualifiedJSXName(openingElement.name)) {\n          this.raise(closingElement.start, JsxErrors.MissingClosingTagElement, getQualifiedJSXName(openingElement.name));\n        }\n      }\n    }\n\n    if (isFragment(openingElement)) {\n      node.openingFragment = openingElement;\n      node.closingFragment = closingElement;\n    } else {\n      node.openingElement = openingElement;\n      node.closingElement = closingElement;\n    }\n\n    node.children = children;\n\n    if (this.match(45)) {\n      throw this.raise(this.state.start, JsxErrors.UnwrappedAdjacentJSXElements);\n    }\n\n    return isFragment(openingElement) ? this.finishNode(node, \"JSXFragment\") : this.finishNode(node, \"JSXElement\");\n  }\n\n  jsxParseElement() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.next();\n    return this.jsxParseElementAt(startPos, startLoc);\n  }\n\n  setContext(newContext) {\n    const {\n      context\n    } = this.state;\n    context[context.length - 1] = newContext;\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    if (this.match(133)) {\n      return this.parseLiteral(this.state.value, \"JSXText\");\n    } else if (this.match(134)) {\n      return this.jsxParseElement();\n    } else if (this.match(45) && this.input.charCodeAt(this.state.pos) !== 33) {\n      this.replaceToken(134);\n      return this.jsxParseElement();\n    } else {\n      return super.parseExprAtom(refExpressionErrors);\n    }\n  }\n\n  skipSpace() {\n    const curContext = this.curContext();\n    if (!curContext.preserveSpace) super.skipSpace();\n  }\n\n  getTokenFromCode(code) {\n    const context = this.curContext();\n\n    if (context === types.j_expr) {\n      return this.jsxReadToken();\n    }\n\n    if (context === types.j_oTag || context === types.j_cTag) {\n      if (isIdentifierStart(code)) {\n        return this.jsxReadWord();\n      }\n\n      if (code === 62) {\n        ++this.state.pos;\n        return this.finishToken(135);\n      }\n\n      if ((code === 34 || code === 39) && context === types.j_oTag) {\n        return this.jsxReadString(code);\n      }\n    }\n\n    if (code === 60 && this.state.canStartJSXElement && this.input.charCodeAt(this.state.pos + 1) !== 33) {\n      ++this.state.pos;\n      return this.finishToken(134);\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  updateContext(prevType) {\n    const {\n      context,\n      type\n    } = this.state;\n\n    if (type === 52 && prevType === 134) {\n      context.splice(-2, 2, types.j_cTag);\n      this.state.canStartJSXElement = false;\n    } else if (type === 134) {\n      context.push(types.j_oTag);\n    } else if (type === 135) {\n      const out = context[context.length - 1];\n\n      if (out === types.j_oTag && prevType === 52 || out === types.j_cTag) {\n        context.pop();\n        this.state.canStartJSXElement = context[context.length - 1] === types.j_expr;\n      } else {\n        this.setContext(types.j_expr);\n        this.state.canStartJSXElement = true;\n      }\n    } else {\n      this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n    }\n  }\n\n};\n\nclass TypeScriptScope extends Scope {\n  constructor() {\n    super(...arguments);\n    this.types = new Set();\n    this.enums = new Set();\n    this.constEnums = new Set();\n    this.classes = new Set();\n    this.exportOnlyBindings = new Set();\n  }\n\n}\n\nclass TypeScriptScopeHandler extends ScopeHandler {\n  createScope(flags) {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name, bindingType, pos) {\n    const scope = this.currentScope();\n\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n\n      scope.types.add(name);\n    }\n\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(scope, name, bindingType) {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n\n      return true;\n    }\n\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        return false;\n      }\n    }\n\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id) {\n    const topLevelScope = this.scopeStack[0];\n    const {\n      name\n    } = id;\n\n    if (!topLevelScope.types.has(name) && !topLevelScope.exportOnlyBindings.has(name)) {\n      super.checkLocalExport(id);\n    }\n  }\n\n}\n\nfunction nonNull(x) {\n  if (x == null) {\n    throw new Error(`Unexpected ${x} value.`);\n  }\n\n  return x;\n}\n\nfunction assert(x) {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\nconst TSErrors = makeErrorTemplates({\n  AbstractMethodHasImplementation: \"Method '%0' cannot have an implementation because it is marked abstract.\",\n  AbstractPropertyHasInitializer: \"Property '%0' cannot have an initializer because it is marked abstract.\",\n  AccesorCannotDeclareThisParameter: \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n  AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n  ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n  ClassMethodHasReadonly: \"Class methods cannot have the 'readonly' modifier.\",\n  ConstructorHasTypeParameters: \"Type parameters cannot appear on a constructor declaration.\",\n  DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n  DeclareClassFieldHasInitializer: \"Initializers are not allowed in ambient contexts.\",\n  DeclareFunctionHasImplementation: \"An implementation cannot be declared in ambient contexts.\",\n  DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n  DuplicateModifier: \"Duplicate modifier: '%0'.\",\n  EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n  EmptyTypeArguments: \"Type argument list cannot be empty.\",\n  EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n  ExpectedAmbientAfterExportDeclare: \"'export declare' must be followed by an ambient declaration.\",\n  ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n  IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n  IndexSignatureHasAbstract: \"Index signatures cannot have the 'abstract' modifier.\",\n  IndexSignatureHasAccessibility: \"Index signatures cannot have an accessibility modifier ('%0').\",\n  IndexSignatureHasDeclare: \"Index signatures cannot have the 'declare' modifier.\",\n  IndexSignatureHasOverride: \"'override' modifier cannot appear on an index signature.\",\n  IndexSignatureHasStatic: \"Index signatures cannot have the 'static' modifier.\",\n  InvalidModifierOnTypeMember: \"'%0' modifier cannot appear on a type member.\",\n  InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n  InvalidTupleMemberLabel: \"Tuple members must be labeled with a simple identifier.\",\n  MissingInterfaceName: \"'interface' declarations must be followed by an identifier.\",\n  MixedLabeledAndUnlabeledElements: \"Tuple members must all have names or all not have names.\",\n  NonAbstractClassHasAbstractMethod: \"Abstract methods can only appear within an abstract class.\",\n  NonClassMethodPropertyHasAbstractModifer: \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n  OptionalTypeBeforeRequired: \"A required element cannot follow an optional element.\",\n  OverrideNotInSubClass: \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n  PatternIsOptional: \"A binding pattern parameter cannot be optional in an implementation signature.\",\n  PrivateElementHasAbstract: \"Private elements cannot have the 'abstract' modifier.\",\n  PrivateElementHasAccessibility: \"Private elements cannot have an accessibility modifier ('%0').\",\n  ReadonlyForMethodSignature: \"'readonly' modifier can only appear on a property declaration or index signature.\",\n  ReservedArrowTypeParam: \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n  ReservedTypeAssertion: \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n  SetAccesorCannotHaveOptionalParameter: \"A 'set' accessor cannot have an optional parameter.\",\n  SetAccesorCannotHaveRestParameter: \"A 'set' accessor cannot have rest parameter.\",\n  SetAccesorCannotHaveReturnType: \"A 'set' accessor cannot have a return type annotation.\",\n  StaticBlockCannotHaveModifier: \"Static class blocks cannot have any modifier.\",\n  TypeAnnotationAfterAssign: \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n  TypeImportCannotSpecifyDefaultAndNamed: \"A type-only import can specify a default import or named bindings, but not both.\",\n  TypeModifierIsUsedInTypeExports: \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n  TypeModifierIsUsedInTypeImports: \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n  UnexpectedParameterModifier: \"A parameter property is only allowed in a constructor implementation.\",\n  UnexpectedReadonly: \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n  UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n  UnexpectedTypeCastInParameter: \"Unexpected type cast in parameter position.\",\n  UnsupportedImportTypeArgument: \"Argument in a type import must be a string literal.\",\n  UnsupportedParameterPropertyKind: \"A parameter property may not be declared using a binding pattern.\",\n  UnsupportedSignatureParameterKind: \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\"\n}, ErrorCodes.SyntaxError, \"typescript\");\n\nfunction keywordTypeFromName(value) {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n\n    case \"never\":\n      return \"TSNeverKeyword\";\n\n    case \"number\":\n      return \"TSNumberKeyword\";\n\n    case \"object\":\n      return \"TSObjectKeyword\";\n\n    case \"string\":\n      return \"TSStringKeyword\";\n\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier) {\n  return modifier === \"private\" || modifier === \"public\" || modifier === \"protected\";\n}\n\nvar typescript = superClass => class extends superClass {\n  getScopeHandler() {\n    return TypeScriptScopeHandler;\n  }\n\n  tsIsIdentifier() {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  tsTokenCanFollowModifier() {\n    return (this.match(0) || this.match(5) || this.match(51) || this.match(21) || this.match(130) || this.isLiteralPropertyName()) && !this.hasPrecedingLineBreak();\n  }\n\n  tsNextTokenCanFollowModifier() {\n    this.next();\n    return this.tsTokenCanFollowModifier();\n  }\n\n  tsParseModifier(allowedModifiers, stopOnStartOfClassStaticBlock) {\n    if (!tokenIsIdentifier(this.state.type)) {\n      return undefined;\n    }\n\n    const modifier = this.state.value;\n\n    if (allowedModifiers.indexOf(modifier) !== -1) {\n      if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n        return undefined;\n      }\n\n      if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n        return modifier;\n      }\n    }\n\n    return undefined;\n  }\n\n  tsParseModifiers(modified, allowedModifiers, disallowedModifiers, errorTemplate, stopOnStartOfClassStaticBlock) {\n    const enforceOrder = (pos, modifier, before, after) => {\n      if (modifier === before && modified[after]) {\n        this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n      }\n    };\n\n    const incompatible = (pos, modifier, mod1, mod2) => {\n      if (modified[mod1] && modifier === mod2 || modified[mod2] && modifier === mod1) {\n        this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n      }\n    };\n\n    for (;;) {\n      const startPos = this.state.start;\n      const modifier = this.tsParseModifier(allowedModifiers.concat(disallowedModifiers != null ? disallowedModifiers : []), stopOnStartOfClassStaticBlock);\n      if (!modifier) break;\n\n      if (tsIsAccessModifier(modifier)) {\n        if (modified.accessibility) {\n          this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n        } else {\n          enforceOrder(startPos, modifier, modifier, \"override\");\n          enforceOrder(startPos, modifier, modifier, \"static\");\n          enforceOrder(startPos, modifier, modifier, \"readonly\");\n          modified.accessibility = modifier;\n        }\n      } else {\n        if (Object.hasOwnProperty.call(modified, modifier)) {\n          this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n        } else {\n          enforceOrder(startPos, modifier, \"static\", \"readonly\");\n          enforceOrder(startPos, modifier, \"static\", \"override\");\n          enforceOrder(startPos, modifier, \"override\", \"readonly\");\n          enforceOrder(startPos, modifier, \"abstract\", \"override\");\n          incompatible(startPos, modifier, \"declare\", \"override\");\n          incompatible(startPos, modifier, \"static\", \"abstract\");\n        }\n\n        modified[modifier] = true;\n      }\n\n      if (disallowedModifiers != null && disallowedModifiers.includes(modifier)) {\n        this.raise(startPos, errorTemplate, modifier);\n      }\n    }\n  }\n\n  tsIsListTerminator(kind) {\n    switch (kind) {\n      case \"EnumMembers\":\n      case \"TypeMembers\":\n        return this.match(8);\n\n      case \"HeritageClauseElement\":\n        return this.match(5);\n\n      case \"TupleElementTypes\":\n        return this.match(3);\n\n      case \"TypeParametersOrArguments\":\n        return this.match(46);\n    }\n\n    throw new Error(\"Unreachable\");\n  }\n\n  tsParseList(kind, parseElement) {\n    const result = [];\n\n    while (!this.tsIsListTerminator(kind)) {\n      result.push(parseElement());\n    }\n\n    return result;\n  }\n\n  tsParseDelimitedList(kind, parseElement, refTrailingCommaPos) {\n    return nonNull(this.tsParseDelimitedListWorker(kind, parseElement, true, refTrailingCommaPos));\n  }\n\n  tsParseDelimitedListWorker(kind, parseElement, expectSuccess, refTrailingCommaPos) {\n    const result = [];\n    let trailingCommaPos = -1;\n\n    for (;;) {\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      trailingCommaPos = -1;\n      const element = parseElement();\n\n      if (element == null) {\n        return undefined;\n      }\n\n      result.push(element);\n\n      if (this.eat(12)) {\n        trailingCommaPos = this.state.lastTokStart;\n        continue;\n      }\n\n      if (this.tsIsListTerminator(kind)) {\n        break;\n      }\n\n      if (expectSuccess) {\n        this.expect(12);\n      }\n\n      return undefined;\n    }\n\n    if (refTrailingCommaPos) {\n      refTrailingCommaPos.value = trailingCommaPos;\n    }\n\n    return result;\n  }\n\n  tsParseBracketedList(kind, parseElement, bracket, skipFirstToken, refTrailingCommaPos) {\n    if (!skipFirstToken) {\n      if (bracket) {\n        this.expect(0);\n      } else {\n        this.expect(45);\n      }\n    }\n\n    const result = this.tsParseDelimitedList(kind, parseElement, refTrailingCommaPos);\n\n    if (bracket) {\n      this.expect(3);\n    } else {\n      this.expect(46);\n    }\n\n    return result;\n  }\n\n  tsParseImportType() {\n    const node = this.startNode();\n    this.expect(79);\n    this.expect(10);\n\n    if (!this.match(125)) {\n      this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n    }\n\n    node.argument = this.parseExprAtom();\n    this.expect(11);\n\n    if (this.eat(16)) {\n      node.qualifier = this.tsParseEntityName(true);\n    }\n\n    if (this.match(45)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSImportType\");\n  }\n\n  tsParseEntityName(allowReservedWords) {\n    let entity = this.parseIdentifier();\n\n    while (this.eat(16)) {\n      const node = this.startNodeAtNode(entity);\n      node.left = entity;\n      node.right = this.parseIdentifier(allowReservedWords);\n      entity = this.finishNode(node, \"TSQualifiedName\");\n    }\n\n    return entity;\n  }\n\n  tsParseTypeReference() {\n    const node = this.startNode();\n    node.typeName = this.tsParseEntityName(false);\n\n    if (!this.hasPrecedingLineBreak() && this.match(45)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSTypeReference\");\n  }\n\n  tsParseThisTypePredicate(lhs) {\n    this.next();\n    const node = this.startNodeAtNode(lhs);\n    node.parameterName = lhs;\n    node.typeAnnotation = this.tsParseTypeAnnotation(false);\n    node.asserts = false;\n    return this.finishNode(node, \"TSTypePredicate\");\n  }\n\n  tsParseThisTypeNode() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"TSThisType\");\n  }\n\n  tsParseTypeQuery() {\n    const node = this.startNode();\n    this.expect(83);\n\n    if (this.match(79)) {\n      node.exprName = this.tsParseImportType();\n    } else {\n      node.exprName = this.tsParseEntityName(true);\n    }\n\n    return this.finishNode(node, \"TSTypeQuery\");\n  }\n\n  tsParseTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsEatThenParseType(77);\n    node.default = this.tsEatThenParseType(29);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsTryParseTypeParameters() {\n    if (this.match(45)) {\n      return this.tsParseTypeParameters();\n    }\n  }\n\n  tsParseTypeParameters() {\n    const node = this.startNode();\n\n    if (this.match(45) || this.match(134)) {\n      this.next();\n    } else {\n      this.unexpected();\n    }\n\n    const refTrailingCommaPos = {\n      value: -1\n    };\n    node.params = this.tsParseBracketedList(\"TypeParametersOrArguments\", this.tsParseTypeParameter.bind(this), false, true, refTrailingCommaPos);\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeParameters);\n    }\n\n    if (refTrailingCommaPos.value !== -1) {\n      this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n    }\n\n    return this.finishNode(node, \"TSTypeParameterDeclaration\");\n  }\n\n  tsTryNextParseConstantContext() {\n    if (this.lookahead().type === 71) {\n      this.next();\n      return this.tsParseTypeReference();\n    }\n\n    return null;\n  }\n\n  tsFillSignature(returnToken, signature) {\n    const returnTokenRequired = returnToken === 19;\n    signature.typeParameters = this.tsTryParseTypeParameters();\n    this.expect(10);\n    signature.parameters = this.tsParseBindingListForSignature();\n\n    if (returnTokenRequired) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    } else if (this.match(returnToken)) {\n      signature.typeAnnotation = this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n    }\n  }\n\n  tsParseBindingListForSignature() {\n    return this.parseBindingList(11, 41).map(pattern => {\n      if (pattern.type !== \"Identifier\" && pattern.type !== \"RestElement\" && pattern.type !== \"ObjectPattern\" && pattern.type !== \"ArrayPattern\") {\n        this.raise(pattern.start, TSErrors.UnsupportedSignatureParameterKind, pattern.type);\n      }\n\n      return pattern;\n    });\n  }\n\n  tsParseTypeMemberSemicolon() {\n    if (!this.eat(12) && !this.isLineTerminator()) {\n      this.expect(13);\n    }\n  }\n\n  tsParseSignatureMember(kind, node) {\n    this.tsFillSignature(14, node);\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, kind);\n  }\n\n  tsIsUnambiguouslyIndexSignature() {\n    this.next();\n\n    if (tokenIsIdentifier(this.state.type)) {\n      this.next();\n      return this.match(14);\n    }\n\n    return false;\n  }\n\n  tsTryParseIndexSignature(node) {\n    if (!(this.match(0) && this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this)))) {\n      return undefined;\n    }\n\n    this.expect(0);\n    const id = this.parseIdentifier();\n    id.typeAnnotation = this.tsParseTypeAnnotation();\n    this.resetEndLocation(id);\n    this.expect(3);\n    node.parameters = [id];\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n    this.tsParseTypeMemberSemicolon();\n    return this.finishNode(node, \"TSIndexSignature\");\n  }\n\n  tsParsePropertyOrMethodSignature(node, readonly) {\n    if (this.eat(17)) node.optional = true;\n    const nodeAny = node;\n\n    if (this.match(10) || this.match(45)) {\n      if (readonly) {\n        this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n      }\n\n      const method = nodeAny;\n\n      if (method.kind && this.match(45)) {\n        this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n      }\n\n      this.tsFillSignature(14, method);\n      this.tsParseTypeMemberSemicolon();\n\n      if (method.kind === \"get\") {\n        if (method.parameters.length > 0) {\n          this.raise(this.state.pos, ErrorMessages.BadGetterArity);\n\n          if (this.isThisParam(method.parameters[0])) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n        }\n      } else if (method.kind === \"set\") {\n        if (method.parameters.length !== 1) {\n          this.raise(this.state.pos, ErrorMessages.BadSetterArity);\n        } else {\n          const firstParameter = method.parameters[0];\n\n          if (this.isThisParam(firstParameter)) {\n            this.raise(this.state.pos, TSErrors.AccesorCannotDeclareThisParameter);\n          }\n\n          if (firstParameter.type === \"Identifier\" && firstParameter.optional) {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveOptionalParameter);\n          }\n\n          if (firstParameter.type === \"RestElement\") {\n            this.raise(this.state.pos, TSErrors.SetAccesorCannotHaveRestParameter);\n          }\n        }\n\n        if (method.typeAnnotation) {\n          this.raise(method.typeAnnotation.start, TSErrors.SetAccesorCannotHaveReturnType);\n        }\n      } else {\n        method.kind = \"method\";\n      }\n\n      return this.finishNode(method, \"TSMethodSignature\");\n    } else {\n      const property = nodeAny;\n      if (readonly) property.readonly = true;\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) property.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(property, \"TSPropertySignature\");\n    }\n  }\n\n  tsParseTypeMember() {\n    const node = this.startNode();\n\n    if (this.match(10) || this.match(45)) {\n      return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n    }\n\n    if (this.match(73)) {\n      const id = this.startNode();\n      this.next();\n\n      if (this.match(10) || this.match(45)) {\n        return this.tsParseSignatureMember(\"TSConstructSignatureDeclaration\", node);\n      } else {\n        node.key = this.createIdentifier(id, \"new\");\n        return this.tsParsePropertyOrMethodSignature(node, false);\n      }\n    }\n\n    this.tsParseModifiers(node, [\"readonly\"], [\"declare\", \"abstract\", \"private\", \"protected\", \"public\", \"static\", \"override\"], TSErrors.InvalidModifierOnTypeMember);\n    const idx = this.tsTryParseIndexSignature(node);\n\n    if (idx) {\n      return idx;\n    }\n\n    this.parsePropertyName(node);\n\n    if (!node.computed && node.key.type === \"Identifier\" && (node.key.name === \"get\" || node.key.name === \"set\") && this.tsTokenCanFollowModifier()) {\n      node.kind = node.key.name;\n      this.parsePropertyName(node);\n    }\n\n    return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n  }\n\n  tsParseTypeLiteral() {\n    const node = this.startNode();\n    node.members = this.tsParseObjectTypeMembers();\n    return this.finishNode(node, \"TSTypeLiteral\");\n  }\n\n  tsParseObjectTypeMembers() {\n    this.expect(5);\n    const members = this.tsParseList(\"TypeMembers\", this.tsParseTypeMember.bind(this));\n    this.expect(8);\n    return members;\n  }\n\n  tsIsStartOfMappedType() {\n    this.next();\n\n    if (this.eat(49)) {\n      return this.isContextual(114);\n    }\n\n    if (this.isContextual(114)) {\n      this.next();\n    }\n\n    if (!this.match(0)) {\n      return false;\n    }\n\n    this.next();\n\n    if (!this.tsIsIdentifier()) {\n      return false;\n    }\n\n    this.next();\n    return this.match(54);\n  }\n\n  tsParseMappedTypeParameter() {\n    const node = this.startNode();\n    node.name = this.tsParseTypeParameterName();\n    node.constraint = this.tsExpectThenParseType(54);\n    return this.finishNode(node, \"TSTypeParameter\");\n  }\n\n  tsParseMappedType() {\n    const node = this.startNode();\n    this.expect(5);\n\n    if (this.match(49)) {\n      node.readonly = this.state.value;\n      this.next();\n      this.expectContextual(114);\n    } else if (this.eatContextual(114)) {\n      node.readonly = true;\n    }\n\n    this.expect(0);\n    node.typeParameter = this.tsParseMappedTypeParameter();\n    node.nameType = this.eatContextual(89) ? this.tsParseType() : null;\n    this.expect(3);\n\n    if (this.match(49)) {\n      node.optional = this.state.value;\n      this.next();\n      this.expect(17);\n    } else if (this.eat(17)) {\n      node.optional = true;\n    }\n\n    node.typeAnnotation = this.tsTryParseType();\n    this.semicolon();\n    this.expect(8);\n    return this.finishNode(node, \"TSMappedType\");\n  }\n\n  tsParseTupleType() {\n    const node = this.startNode();\n    node.elementTypes = this.tsParseBracketedList(\"TupleElementTypes\", this.tsParseTupleElementType.bind(this), true, false);\n    let seenOptionalElement = false;\n    let labeledElements = null;\n    node.elementTypes.forEach(elementNode => {\n      var _labeledElements;\n\n      let {\n        type\n      } = elementNode;\n\n      if (seenOptionalElement && type !== \"TSRestType\" && type !== \"TSOptionalType\" && !(type === \"TSNamedTupleMember\" && elementNode.optional)) {\n        this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n      }\n\n      seenOptionalElement = seenOptionalElement || type === \"TSNamedTupleMember\" && elementNode.optional || type === \"TSOptionalType\";\n\n      if (type === \"TSRestType\") {\n        elementNode = elementNode.typeAnnotation;\n        type = elementNode.type;\n      }\n\n      const isLabeled = type === \"TSNamedTupleMember\";\n      labeledElements = (_labeledElements = labeledElements) != null ? _labeledElements : isLabeled;\n\n      if (labeledElements !== isLabeled) {\n        this.raise(elementNode.start, TSErrors.MixedLabeledAndUnlabeledElements);\n      }\n    });\n    return this.finishNode(node, \"TSTupleType\");\n  }\n\n  tsParseTupleElementType() {\n    const {\n      start: startPos,\n      startLoc\n    } = this.state;\n    const rest = this.eat(21);\n    let type = this.tsParseType();\n    const optional = this.eat(17);\n    const labeled = this.eat(14);\n\n    if (labeled) {\n      const labeledNode = this.startNodeAtNode(type);\n      labeledNode.optional = optional;\n\n      if (type.type === \"TSTypeReference\" && !type.typeParameters && type.typeName.type === \"Identifier\") {\n        labeledNode.label = type.typeName;\n      } else {\n        this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n        labeledNode.label = type;\n      }\n\n      labeledNode.elementType = this.tsParseType();\n      type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n    } else if (optional) {\n      const optionalTypeNode = this.startNodeAtNode(type);\n      optionalTypeNode.typeAnnotation = type;\n      type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n    }\n\n    if (rest) {\n      const restNode = this.startNodeAt(startPos, startLoc);\n      restNode.typeAnnotation = type;\n      type = this.finishNode(restNode, \"TSRestType\");\n    }\n\n    return type;\n  }\n\n  tsParseParenthesizedType() {\n    const node = this.startNode();\n    this.expect(10);\n    node.typeAnnotation = this.tsParseType();\n    this.expect(11);\n    return this.finishNode(node, \"TSParenthesizedType\");\n  }\n\n  tsParseFunctionOrConstructorType(type, abstract) {\n    const node = this.startNode();\n\n    if (type === \"TSConstructorType\") {\n      node.abstract = !!abstract;\n      if (abstract) this.next();\n      this.next();\n    }\n\n    this.tsFillSignature(19, node);\n    return this.finishNode(node, type);\n  }\n\n  tsParseLiteralTypeNode() {\n    const node = this.startNode();\n\n    node.literal = (() => {\n      switch (this.state.type) {\n        case 126:\n        case 127:\n        case 125:\n        case 81:\n        case 82:\n          return this.parseExprAtom();\n\n        default:\n          throw this.unexpected();\n      }\n    })();\n\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  tsParseTemplateLiteralType() {\n    const node = this.startNode();\n    node.literal = this.parseTemplate(false);\n    return this.finishNode(node, \"TSLiteralType\");\n  }\n\n  parseTemplateSubstitution() {\n    if (this.state.inType) return this.tsParseType();\n    return super.parseTemplateSubstitution();\n  }\n\n  tsParseThisTypeOrThisTypePredicate() {\n    const thisKeyword = this.tsParseThisTypeNode();\n\n    if (this.isContextual(109) && !this.hasPrecedingLineBreak()) {\n      return this.tsParseThisTypePredicate(thisKeyword);\n    } else {\n      return thisKeyword;\n    }\n  }\n\n  tsParseNonArrayType() {\n    switch (this.state.type) {\n      case 125:\n      case 126:\n      case 127:\n      case 81:\n      case 82:\n        return this.tsParseLiteralTypeNode();\n\n      case 49:\n        if (this.state.value === \"-\") {\n          const node = this.startNode();\n          const nextToken = this.lookahead();\n\n          if (nextToken.type !== 126 && nextToken.type !== 127) {\n            throw this.unexpected();\n          }\n\n          node.literal = this.parseMaybeUnary();\n          return this.finishNode(node, \"TSLiteralType\");\n        }\n\n        break;\n\n      case 74:\n        return this.tsParseThisTypeOrThisTypePredicate();\n\n      case 83:\n        return this.tsParseTypeQuery();\n\n      case 79:\n        return this.tsParseImportType();\n\n      case 5:\n        return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this)) ? this.tsParseMappedType() : this.tsParseTypeLiteral();\n\n      case 0:\n        return this.tsParseTupleType();\n\n      case 10:\n        return this.tsParseParenthesizedType();\n\n      case 25:\n      case 24:\n        return this.tsParseTemplateLiteralType();\n\n      default:\n        {\n          const {\n            type\n          } = this.state;\n\n          if (tokenIsIdentifier(type) || type === 84 || type === 80) {\n            const nodeType = type === 84 ? \"TSVoidKeyword\" : type === 80 ? \"TSNullKeyword\" : keywordTypeFromName(this.state.value);\n\n            if (nodeType !== undefined && this.lookaheadCharCode() !== 46) {\n              const node = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n\n            return this.tsParseTypeReference();\n          }\n        }\n    }\n\n    throw this.unexpected();\n  }\n\n  tsParseArrayTypeOrHigher() {\n    let type = this.tsParseNonArrayType();\n\n    while (!this.hasPrecedingLineBreak() && this.eat(0)) {\n      if (this.match(3)) {\n        const node = this.startNodeAtNode(type);\n        node.elementType = type;\n        this.expect(3);\n        type = this.finishNode(node, \"TSArrayType\");\n      } else {\n        const node = this.startNodeAtNode(type);\n        node.objectType = type;\n        node.indexType = this.tsParseType();\n        this.expect(3);\n        type = this.finishNode(node, \"TSIndexedAccessType\");\n      }\n    }\n\n    return type;\n  }\n\n  tsParseTypeOperator() {\n    const node = this.startNode();\n    const operator = this.state.value;\n    this.next();\n    node.operator = operator;\n    node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n    if (operator === \"readonly\") {\n      this.tsCheckTypeAnnotationForReadOnly(node);\n    }\n\n    return this.finishNode(node, \"TSTypeOperator\");\n  }\n\n  tsCheckTypeAnnotationForReadOnly(node) {\n    switch (node.typeAnnotation.type) {\n      case \"TSTupleType\":\n      case \"TSArrayType\":\n        return;\n\n      default:\n        this.raise(node.start, TSErrors.UnexpectedReadonly);\n    }\n  }\n\n  tsParseInferType() {\n    const node = this.startNode();\n    this.expectContextual(108);\n    const typeParameter = this.startNode();\n    typeParameter.name = this.tsParseTypeParameterName();\n    node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n    return this.finishNode(node, \"TSInferType\");\n  }\n\n  tsParseTypeOperatorOrHigher() {\n    const isTypeOperator = tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n    return isTypeOperator ? this.tsParseTypeOperator() : this.isContextual(108) ? this.tsParseInferType() : this.tsParseArrayTypeOrHigher();\n  }\n\n  tsParseUnionOrIntersectionType(kind, parseConstituentType, operator) {\n    const node = this.startNode();\n    const hasLeadingOperator = this.eat(operator);\n    const types = [];\n\n    do {\n      types.push(parseConstituentType());\n    } while (this.eat(operator));\n\n    if (types.length === 1 && !hasLeadingOperator) {\n      return types[0];\n    }\n\n    node.types = types;\n    return this.finishNode(node, kind);\n  }\n\n  tsParseIntersectionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSIntersectionType\", this.tsParseTypeOperatorOrHigher.bind(this), 43);\n  }\n\n  tsParseUnionTypeOrHigher() {\n    return this.tsParseUnionOrIntersectionType(\"TSUnionType\", this.tsParseIntersectionTypeOrHigher.bind(this), 41);\n  }\n\n  tsIsStartOfFunctionType() {\n    if (this.match(45)) {\n      return true;\n    }\n\n    return this.match(10) && this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this));\n  }\n\n  tsSkipParameterStart() {\n    if (tokenIsIdentifier(this.state.type) || this.match(74)) {\n      this.next();\n      return true;\n    }\n\n    if (this.match(5)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(5)) {\n          ++braceStackCounter;\n        } else if (this.match(8)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    if (this.match(0)) {\n      let braceStackCounter = 1;\n      this.next();\n\n      while (braceStackCounter > 0) {\n        if (this.match(0)) {\n          ++braceStackCounter;\n        } else if (this.match(3)) {\n          --braceStackCounter;\n        }\n\n        this.next();\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  tsIsUnambiguouslyStartOfFunctionType() {\n    this.next();\n\n    if (this.match(11) || this.match(21)) {\n      return true;\n    }\n\n    if (this.tsSkipParameterStart()) {\n      if (this.match(14) || this.match(12) || this.match(17) || this.match(29)) {\n        return true;\n      }\n\n      if (this.match(11)) {\n        this.next();\n\n        if (this.match(19)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  tsParseTypeOrTypePredicateAnnotation(returnToken) {\n    return this.tsInType(() => {\n      const t = this.startNode();\n      this.expect(returnToken);\n      const node = this.startNode();\n      const asserts = !!this.tsTryParse(this.tsParseTypePredicateAsserts.bind(this));\n\n      if (asserts && this.match(74)) {\n        let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n\n        if (thisTypePredicate.type === \"TSThisType\") {\n          node.parameterName = thisTypePredicate;\n          node.asserts = true;\n          node.typeAnnotation = null;\n          thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n        } else {\n          this.resetStartLocationFromNode(thisTypePredicate, node);\n          thisTypePredicate.asserts = true;\n        }\n\n        t.typeAnnotation = thisTypePredicate;\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const typePredicateVariable = this.tsIsIdentifier() && this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n      if (!typePredicateVariable) {\n        if (!asserts) {\n          return this.tsParseTypeAnnotation(false, t);\n        }\n\n        node.parameterName = this.parseIdentifier();\n        node.asserts = asserts;\n        node.typeAnnotation = null;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      }\n\n      const type = this.tsParseTypeAnnotation(false);\n      node.parameterName = typePredicateVariable;\n      node.typeAnnotation = type;\n      node.asserts = asserts;\n      t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    });\n  }\n\n  tsTryParseTypeOrTypePredicateAnnotation() {\n    return this.match(14) ? this.tsParseTypeOrTypePredicateAnnotation(14) : undefined;\n  }\n\n  tsTryParseTypeAnnotation() {\n    return this.match(14) ? this.tsParseTypeAnnotation() : undefined;\n  }\n\n  tsTryParseType() {\n    return this.tsEatThenParseType(14);\n  }\n\n  tsParseTypePredicatePrefix() {\n    const id = this.parseIdentifier();\n\n    if (this.isContextual(109) && !this.hasPrecedingLineBreak()) {\n      this.next();\n      return id;\n    }\n  }\n\n  tsParseTypePredicateAsserts() {\n    if (this.state.type !== 102) {\n      return false;\n    }\n\n    const containsEsc = this.state.containsEsc;\n    this.next();\n\n    if (!tokenIsIdentifier(this.state.type) && !this.match(74)) {\n      return false;\n    }\n\n    if (containsEsc) {\n      this.raise(this.state.lastTokStart, ErrorMessages.InvalidEscapedReservedWord, \"asserts\");\n    }\n\n    return true;\n  }\n\n  tsParseTypeAnnotation() {\n    let eatColon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n    let t = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.startNode();\n    this.tsInType(() => {\n      if (eatColon) this.expect(14);\n      t.typeAnnotation = this.tsParseType();\n    });\n    return this.finishNode(t, \"TSTypeAnnotation\");\n  }\n\n  tsParseType() {\n    assert(this.state.inType);\n    const type = this.tsParseNonConditionalType();\n\n    if (this.hasPrecedingLineBreak() || !this.eat(77)) {\n      return type;\n    }\n\n    const node = this.startNodeAtNode(type);\n    node.checkType = type;\n    node.extendsType = this.tsParseNonConditionalType();\n    this.expect(17);\n    node.trueType = this.tsParseType();\n    this.expect(14);\n    node.falseType = this.tsParseType();\n    return this.finishNode(node, \"TSConditionalType\");\n  }\n\n  isAbstractConstructorSignature() {\n    return this.isContextual(116) && this.lookahead().type === 73;\n  }\n\n  tsParseNonConditionalType() {\n    if (this.tsIsStartOfFunctionType()) {\n      return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n    }\n\n    if (this.match(73)) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n    } else if (this.isAbstractConstructorSignature()) {\n      return this.tsParseFunctionOrConstructorType(\"TSConstructorType\", true);\n    }\n\n    return this.tsParseUnionTypeOrHigher();\n  }\n\n  tsParseTypeAssertion() {\n    if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(this.state.start, TSErrors.ReservedTypeAssertion);\n    }\n\n    const node = this.startNode();\n\n    const _const = this.tsTryNextParseConstantContext();\n\n    node.typeAnnotation = _const || this.tsNextThenParseType();\n    this.expect(46);\n    node.expression = this.parseMaybeUnary();\n    return this.finishNode(node, \"TSTypeAssertion\");\n  }\n\n  tsParseHeritageClause(descriptor) {\n    const originalStart = this.state.start;\n    const delimitedList = this.tsParseDelimitedList(\"HeritageClauseElement\", this.tsParseExpressionWithTypeArguments.bind(this));\n\n    if (!delimitedList.length) {\n      this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n    }\n\n    return delimitedList;\n  }\n\n  tsParseExpressionWithTypeArguments() {\n    const node = this.startNode();\n    node.expression = this.tsParseEntityName(false);\n\n    if (this.match(45)) {\n      node.typeParameters = this.tsParseTypeArguments();\n    }\n\n    return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n  }\n\n  tsParseInterfaceDeclaration(node) {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript interface declaration\", BIND_TS_INTERFACE);\n    } else {\n      node.id = null;\n      this.raise(this.state.start, TSErrors.MissingInterfaceName);\n    }\n\n    node.typeParameters = this.tsTryParseTypeParameters();\n\n    if (this.eat(77)) {\n      node.extends = this.tsParseHeritageClause(\"extends\");\n    }\n\n    const body = this.startNode();\n    body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n    node.body = this.finishNode(body, \"TSInterfaceBody\");\n    return this.finishNode(node, \"TSInterfaceDeclaration\");\n  }\n\n  tsParseTypeAliasDeclaration(node) {\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n    node.typeParameters = this.tsTryParseTypeParameters();\n    node.typeAnnotation = this.tsInType(() => {\n      this.expect(29);\n\n      if (this.isContextual(107) && this.lookahead().type !== 16) {\n        const node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"TSIntrinsicKeyword\");\n      }\n\n      return this.tsParseType();\n    });\n    this.semicolon();\n    return this.finishNode(node, \"TSTypeAliasDeclaration\");\n  }\n\n  tsInNoContext(cb) {\n    const oldContext = this.state.context;\n    this.state.context = [oldContext[0]];\n\n    try {\n      return cb();\n    } finally {\n      this.state.context = oldContext;\n    }\n  }\n\n  tsInType(cb) {\n    const oldInType = this.state.inType;\n    this.state.inType = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.inType = oldInType;\n    }\n  }\n\n  tsEatThenParseType(token) {\n    return !this.match(token) ? undefined : this.tsNextThenParseType();\n  }\n\n  tsExpectThenParseType(token) {\n    return this.tsDoThenParseType(() => this.expect(token));\n  }\n\n  tsNextThenParseType() {\n    return this.tsDoThenParseType(() => this.next());\n  }\n\n  tsDoThenParseType(cb) {\n    return this.tsInType(() => {\n      cb();\n      return this.tsParseType();\n    });\n  }\n\n  tsParseEnumMember() {\n    const node = this.startNode();\n    node.id = this.match(125) ? this.parseExprAtom() : this.parseIdentifier(true);\n\n    if (this.eat(29)) {\n      node.initializer = this.parseMaybeAssignAllowIn();\n    }\n\n    return this.finishNode(node, \"TSEnumMember\");\n  }\n\n  tsParseEnumDeclaration(node, isConst) {\n    if (isConst) node.const = true;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"typescript enum declaration\", isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM);\n    this.expect(5);\n    node.members = this.tsParseDelimitedList(\"EnumMembers\", this.tsParseEnumMember.bind(this));\n    this.expect(8);\n    return this.finishNode(node, \"TSEnumDeclaration\");\n  }\n\n  tsParseModuleBlock() {\n    const node = this.startNode();\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(5);\n    this.parseBlockOrModuleBlockBody(node.body = [], undefined, true, 8);\n    this.scope.exit();\n    return this.finishNode(node, \"TSModuleBlock\");\n  }\n\n  tsParseModuleOrNamespaceDeclaration(node) {\n    let nested = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    node.id = this.parseIdentifier();\n\n    if (!nested) {\n      this.checkLVal(node.id, \"module or namespace declaration\", BIND_TS_NAMESPACE);\n    }\n\n    if (this.eat(16)) {\n      const inner = this.startNode();\n      this.tsParseModuleOrNamespaceDeclaration(inner, true);\n      node.body = inner;\n    } else {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseAmbientExternalModuleDeclaration(node) {\n    if (this.isContextual(105)) {\n      node.global = true;\n      node.id = this.parseIdentifier();\n    } else if (this.match(125)) {\n      node.id = this.parseExprAtom();\n    } else {\n      this.unexpected();\n    }\n\n    if (this.match(5)) {\n      this.scope.enter(SCOPE_TS_MODULE);\n      this.prodParam.enter(PARAM);\n      node.body = this.tsParseModuleBlock();\n      this.prodParam.exit();\n      this.scope.exit();\n    } else {\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"TSModuleDeclaration\");\n  }\n\n  tsParseImportEqualsDeclaration(node, isExport) {\n    node.isExport = isExport || false;\n    node.id = this.parseIdentifier();\n    this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n    this.expect(29);\n    const moduleReference = this.tsParseModuleReference();\n\n    if (node.importKind === \"type\" && moduleReference.type !== \"TSExternalModuleReference\") {\n      this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n    }\n\n    node.moduleReference = moduleReference;\n    this.semicolon();\n    return this.finishNode(node, \"TSImportEqualsDeclaration\");\n  }\n\n  tsIsExternalModuleReference() {\n    return this.isContextual(112) && this.lookaheadCharCode() === 40;\n  }\n\n  tsParseModuleReference() {\n    return this.tsIsExternalModuleReference() ? this.tsParseExternalModuleReference() : this.tsParseEntityName(false);\n  }\n\n  tsParseExternalModuleReference() {\n    const node = this.startNode();\n    this.expectContextual(112);\n    this.expect(10);\n\n    if (!this.match(125)) {\n      throw this.unexpected();\n    }\n\n    node.expression = this.parseExprAtom();\n    this.expect(11);\n    return this.finishNode(node, \"TSExternalModuleReference\");\n  }\n\n  tsLookAhead(f) {\n    const state = this.state.clone();\n    const res = f();\n    this.state = state;\n    return res;\n  }\n\n  tsTryParseAndCatch(f) {\n    const result = this.tryParse(abort => f() || abort());\n    if (result.aborted || !result.node) return undefined;\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  tsTryParse(f) {\n    const state = this.state.clone();\n    const result = f();\n\n    if (result !== undefined && result !== false) {\n      return result;\n    } else {\n      this.state = state;\n      return undefined;\n    }\n  }\n\n  tsTryParseDeclare(nany) {\n    if (this.isLineTerminator()) {\n      return;\n    }\n\n    let starttype = this.state.type;\n    let kind;\n\n    if (this.isContextual(95)) {\n      starttype = 70;\n      kind = \"let\";\n    }\n\n    return this.tsInAmbientContext(() => {\n      switch (starttype) {\n        case 64:\n          nany.declare = true;\n          return this.parseFunctionStatement(nany, false, true);\n\n        case 76:\n          nany.declare = true;\n          return this.parseClass(nany, true, false);\n\n        case 71:\n          if (this.match(71) && this.isLookaheadContextual(\"enum\")) {\n            this.expect(71);\n            this.expectContextual(118);\n            return this.tsParseEnumDeclaration(nany, true);\n          }\n\n        case 70:\n          kind = kind || this.state.value;\n          return this.parseVarStatement(nany, kind);\n\n        case 105:\n          return this.tsParseAmbientExternalModuleDeclaration(nany);\n\n        default:\n          {\n            if (tokenIsIdentifier(starttype)) {\n              return this.tsParseDeclaration(nany, this.state.value, true);\n            }\n          }\n      }\n    });\n  }\n\n  tsTryParseExportDeclaration() {\n    return this.tsParseDeclaration(this.startNode(), this.state.value, true);\n  }\n\n  tsParseExpressionStatement(node, expr) {\n    switch (expr.name) {\n      case \"declare\":\n        {\n          const declaration = this.tsTryParseDeclare(node);\n\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n\n          break;\n        }\n\n      case \"global\":\n        if (this.match(5)) {\n          this.scope.enter(SCOPE_TS_MODULE);\n          this.prodParam.enter(PARAM);\n          const mod = node;\n          mod.global = true;\n          mod.id = expr;\n          mod.body = this.tsParseModuleBlock();\n          this.scope.exit();\n          this.prodParam.exit();\n          return this.finishNode(mod, \"TSModuleDeclaration\");\n        }\n\n        break;\n\n      default:\n        return this.tsParseDeclaration(node, expr.name, false);\n    }\n  }\n\n  tsParseDeclaration(node, value, next) {\n    switch (value) {\n      case \"abstract\":\n        if (this.tsCheckLineTerminator(next) && (this.match(76) || tokenIsIdentifier(this.state.type))) {\n          return this.tsParseAbstractDeclaration(node);\n        }\n\n        break;\n\n      case \"enum\":\n        if (next || tokenIsIdentifier(this.state.type)) {\n          if (next) this.next();\n          return this.tsParseEnumDeclaration(node, false);\n        }\n\n        break;\n\n      case \"interface\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseInterfaceDeclaration(node);\n        }\n\n        break;\n\n      case \"module\":\n        if (this.tsCheckLineTerminator(next)) {\n          if (this.match(125)) {\n            return this.tsParseAmbientExternalModuleDeclaration(node);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n        }\n\n        break;\n\n      case \"namespace\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseModuleOrNamespaceDeclaration(node);\n        }\n\n        break;\n\n      case \"type\":\n        if (this.tsCheckLineTerminator(next) && tokenIsIdentifier(this.state.type)) {\n          return this.tsParseTypeAliasDeclaration(node);\n        }\n\n        break;\n    }\n  }\n\n  tsCheckLineTerminator(next) {\n    if (next) {\n      if (this.hasFollowingLineBreak()) return false;\n      this.next();\n      return true;\n    }\n\n    return !this.isLineTerminator();\n  }\n\n  tsTryParseGenericAsyncArrowFunction(startPos, startLoc) {\n    if (!this.match(45)) {\n      return undefined;\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = true;\n    const res = this.tsTryParseAndCatch(() => {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.typeParameters = this.tsParseTypeParameters();\n      super.parseFunctionParams(node);\n      node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n      this.expect(19);\n      return node;\n    });\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    if (!res) {\n      return undefined;\n    }\n\n    return this.parseArrowExpression(res, null, true);\n  }\n\n  tsParseTypeArguments() {\n    const node = this.startNode();\n    node.params = this.tsInType(() => this.tsInNoContext(() => {\n      this.expect(45);\n      return this.tsParseDelimitedList(\"TypeParametersOrArguments\", this.tsParseType.bind(this));\n    }));\n\n    if (node.params.length === 0) {\n      this.raise(node.start, TSErrors.EmptyTypeArguments);\n    }\n\n    this.expect(46);\n    return this.finishNode(node, \"TSTypeParameterInstantiation\");\n  }\n\n  tsIsDeclarationStart() {\n    return tokenIsTSDeclarationStart(this.state.type);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.tsIsDeclarationStart()) return false;\n    return super.isExportDefaultSpecifier();\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let accessibility;\n    let readonly = false;\n    let override = false;\n\n    if (allowModifiers !== undefined) {\n      const modified = {};\n      this.tsParseModifiers(modified, [\"public\", \"private\", \"protected\", \"override\", \"readonly\"]);\n      accessibility = modified.accessibility;\n      override = modified.override;\n      readonly = modified.readonly;\n\n      if (allowModifiers === false && (accessibility || readonly || override)) {\n        this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n      }\n    }\n\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (accessibility || readonly || override) {\n      const pp = this.startNodeAt(startPos, startLoc);\n\n      if (decorators.length) {\n        pp.decorators = decorators;\n      }\n\n      if (accessibility) pp.accessibility = accessibility;\n      if (readonly) pp.readonly = readonly;\n      if (override) pp.override = override;\n\n      if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n        this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n      }\n\n      pp.parameter = elt;\n      return this.finishNode(pp, \"TSParameterProperty\");\n    }\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n    }\n\n    const bodilessType = type === \"FunctionDeclaration\" ? \"TSDeclareFunction\" : type === \"ClassMethod\" || type === \"ClassPrivateMethod\" ? \"TSDeclareMethod\" : undefined;\n\n    if (bodilessType && !this.match(5) && this.isLineTerminator()) {\n      this.finishNode(node, bodilessType);\n      return;\n    }\n\n    if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n      this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n\n      if (node.declare) {\n        super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n        return;\n      }\n    }\n\n    super.parseFunctionBodyAndFinish(node, type, isMethod);\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.body && node.id) {\n      this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n    } else {\n      super.registerFunctionStatementId(...arguments);\n    }\n  }\n\n  tsCheckForInvalidTypeCasts(items) {\n    items.forEach(node => {\n      if ((node == null ? void 0 : node.type) === \"TSTypeCastExpression\") {\n        this.raise(node.typeAnnotation.start, TSErrors.UnexpectedTypeAnnotation);\n      }\n    });\n  }\n\n  toReferencedList(exprList, isInParens) {\n    this.tsCheckForInvalidTypeCasts(exprList);\n    return exprList;\n  }\n\n  parseArrayLike() {\n    const node = super.parseArrayLike(...arguments);\n\n    if (node.type === \"ArrayExpression\") {\n      this.tsCheckForInvalidTypeCasts(node.elements);\n    }\n\n    return node;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    if (!this.hasPrecedingLineBreak() && this.match(35)) {\n      this.state.canStartJSXElement = false;\n      this.next();\n      const nonNullExpression = this.startNodeAt(startPos, startLoc);\n      nonNullExpression.expression = base;\n      return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n    }\n\n    let isOptionalCall = false;\n\n    if (this.match(18) && this.lookaheadCharCode() === 60) {\n      if (noCalls) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = isOptionalCall = true;\n      this.next();\n    }\n\n    if (this.match(45)) {\n      let missingParenErrorPos;\n      const result = this.tsTryParseAndCatch(() => {\n        if (!noCalls && this.atPossibleAsyncArrow(base)) {\n          const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(startPos, startLoc);\n\n          if (asyncArrowFn) {\n            return asyncArrowFn;\n          }\n        }\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (typeArguments) {\n          if (isOptionalCall && !this.match(10)) {\n            missingParenErrorPos = this.state.pos;\n            this.unexpected();\n          }\n\n          if (!noCalls && this.eat(10)) {\n            node.arguments = this.parseCallExpressionArguments(11, false);\n            this.tsCheckForInvalidTypeCasts(node.arguments);\n            node.typeParameters = typeArguments;\n\n            if (state.optionalChainMember) {\n              node.optional = isOptionalCall;\n            }\n\n            return this.finishCallExpression(node, state.optionalChainMember);\n          } else if (tokenIsTemplate(this.state.type)) {\n            const result = this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n            result.typeParameters = typeArguments;\n            return result;\n          }\n        }\n\n        this.unexpected();\n      });\n\n      if (missingParenErrorPos) {\n        this.unexpected(missingParenErrorPos, 10);\n      }\n\n      if (result) return result;\n    }\n\n    return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n  }\n\n  parseNewArguments(node) {\n    if (this.match(45)) {\n      const typeParameters = this.tsTryParseAndCatch(() => {\n        const args = this.tsParseTypeArguments();\n        if (!this.match(10)) this.unexpected();\n        return args;\n      });\n\n      if (typeParameters) {\n        node.typeParameters = typeParameters;\n      }\n    }\n\n    super.parseNewArguments(node);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (tokenOperatorPrecedence(54) > minPrec && !this.hasPrecedingLineBreak() && this.isContextual(89)) {\n      const node = this.startNodeAt(leftStartPos, leftStartLoc);\n      node.expression = left;\n\n      const _const = this.tsTryNextParseConstantContext();\n\n      if (_const) {\n        node.typeAnnotation = _const;\n      } else {\n        node.typeAnnotation = this.tsNextThenParseType();\n      }\n\n      this.finishNode(node, \"TSAsExpression\");\n      this.reScan_lt_gt();\n      return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {}\n\n  checkDuplicateExports() {}\n\n  parseImport(node) {\n    node.importKind = \"value\";\n\n    if (tokenIsIdentifier(this.state.type) || this.match(51) || this.match(5)) {\n      let ahead = this.lookahead();\n\n      if (this.isContextual(122) && ahead.type !== 12 && ahead.type !== 93 && ahead.type !== 29) {\n        node.importKind = \"type\";\n        this.next();\n        ahead = this.lookahead();\n      }\n\n      if (tokenIsIdentifier(this.state.type) && ahead.type === 29) {\n        return this.tsParseImportEqualsDeclaration(node);\n      }\n    }\n\n    const importNode = super.parseImport(node);\n\n    if (importNode.importKind === \"type\" && importNode.specifiers.length > 1 && importNode.specifiers[0].type === \"ImportDefaultSpecifier\") {\n      this.raise(importNode.start, TSErrors.TypeImportCannotSpecifyDefaultAndNamed);\n    }\n\n    return importNode;\n  }\n\n  parseExport(node) {\n    if (this.match(79)) {\n      this.next();\n\n      if (this.isContextual(122) && this.lookaheadCharCode() !== 61) {\n        node.importKind = \"type\";\n        this.next();\n      } else {\n        node.importKind = \"value\";\n      }\n\n      return this.tsParseImportEqualsDeclaration(node, true);\n    } else if (this.eat(29)) {\n      const assign = node;\n      assign.expression = this.parseExpression();\n      this.semicolon();\n      return this.finishNode(assign, \"TSExportAssignment\");\n    } else if (this.eatContextual(89)) {\n      const decl = node;\n      this.expectContextual(120);\n      decl.id = this.parseIdentifier();\n      this.semicolon();\n      return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n    } else {\n      if (this.isContextual(122) && this.lookahead().type === 5) {\n        this.next();\n        node.exportKind = \"type\";\n      } else {\n        node.exportKind = \"value\";\n      }\n\n      return super.parseExport(node);\n    }\n  }\n\n  isAbstractClass() {\n    return this.isContextual(116) && this.lookahead().type === 76;\n  }\n\n  parseExportDefaultExpression() {\n    if (this.isAbstractClass()) {\n      const cls = this.startNode();\n      this.next();\n      cls.abstract = true;\n      this.parseClass(cls, true, true);\n      return cls;\n    }\n\n    if (this.match(121)) {\n      const interfaceNode = this.startNode();\n      this.next();\n      const result = this.tsParseInterfaceDeclaration(interfaceNode);\n      if (result) return result;\n    }\n\n    return super.parseExportDefaultExpression();\n  }\n\n  parseStatementContent(context, topLevel) {\n    if (this.state.type === 71) {\n      const ahead = this.lookahead();\n\n      if (ahead.type === 118) {\n        const node = this.startNode();\n        this.next();\n        this.expectContextual(118);\n        return this.tsParseEnumDeclaration(node, true);\n      }\n    }\n\n    return super.parseStatementContent(context, topLevel);\n  }\n\n  parseAccessModifier() {\n    return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n  }\n\n  tsHasSomeModifiers(member, modifiers) {\n    return modifiers.some(modifier => {\n      if (tsIsAccessModifier(modifier)) {\n        return member.accessibility === modifier;\n      }\n\n      return !!member[modifier];\n    });\n  }\n\n  tsIsStartOfStaticBlocks() {\n    return this.isContextual(100) && this.lookaheadCharCode() === 123;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const modifiers = [\"declare\", \"private\", \"public\", \"protected\", \"override\", \"abstract\", \"readonly\", \"static\"];\n    this.tsParseModifiers(member, modifiers, undefined, undefined, true);\n\n    const callParseClassMemberWithIsStatic = () => {\n      if (this.tsIsStartOfStaticBlocks()) {\n        this.next();\n        this.next();\n\n        if (this.tsHasSomeModifiers(member, modifiers)) {\n          this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n        }\n\n        this.parseClassStaticBlock(classBody, member);\n      } else {\n        this.parseClassMemberWithIsStatic(classBody, member, state, !!member.static);\n      }\n    };\n\n    if (member.declare) {\n      this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n    } else {\n      callParseClassMemberWithIsStatic();\n    }\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const idx = this.tsTryParseIndexSignature(member);\n\n    if (idx) {\n      classBody.body.push(idx);\n\n      if (member.abstract) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n      }\n\n      if (member.accessibility) {\n        this.raise(member.start, TSErrors.IndexSignatureHasAccessibility, member.accessibility);\n      }\n\n      if (member.declare) {\n        this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n      }\n\n      if (member.override) {\n        this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n      }\n\n      return;\n    }\n\n    if (!this.state.inAbstractClass && member.abstract) {\n      this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n    }\n\n    if (member.override) {\n      if (!state.hadSuperClass) {\n        this.raise(member.start, TSErrors.OverrideNotInSubClass);\n      }\n    }\n\n    super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {\n    const optional = this.eat(17);\n    if (optional) methodOrProp.optional = true;\n\n    if (methodOrProp.readonly && this.match(10)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n    }\n\n    if (methodOrProp.declare && this.match(10)) {\n      this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n    }\n  }\n\n  parseExpressionStatement(node, expr) {\n    const decl = expr.type === \"Identifier\" ? this.tsParseExpressionStatement(node, expr) : undefined;\n    return decl || super.parseExpressionStatement(node, expr);\n  }\n\n  shouldParseExportDeclaration() {\n    if (this.tsIsDeclarationStart()) return true;\n    return super.shouldParseExportDeclaration();\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (!this.state.maybeInArrowParameters || !this.match(17)) {\n      return super.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n    }\n\n    const result = this.tryParse(() => super.parseConditional(expr, startPos, startLoc));\n\n    if (!result.node) {\n      if (result.error) {\n        super.setOptionalParametersError(refExpressionErrors, result.error);\n      }\n\n      return expr;\n    }\n\n    if (result.error) this.state = result.failState;\n    return result.node;\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    node = super.parseParenItem(node, startPos, startLoc);\n\n    if (this.eat(17)) {\n      node.optional = true;\n      this.resetEndLocation(node);\n    }\n\n    if (this.match(14)) {\n      const typeCastNode = this.startNodeAt(startPos, startLoc);\n      typeCastNode.expression = node;\n      typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n      return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n    }\n\n    return node;\n  }\n\n  parseExportDeclaration(node) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isDeclare = this.eatContextual(117);\n\n    if (isDeclare && (this.isContextual(117) || !this.shouldParseExportDeclaration())) {\n      throw this.raise(this.state.start, TSErrors.ExpectedAmbientAfterExportDeclare);\n    }\n\n    let declaration;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      declaration = this.tsTryParseExportDeclaration();\n    }\n\n    if (!declaration) {\n      declaration = super.parseExportDeclaration(node);\n    }\n\n    if (declaration && (declaration.type === \"TSInterfaceDeclaration\" || declaration.type === \"TSTypeAliasDeclaration\" || isDeclare)) {\n      node.exportKind = \"type\";\n    }\n\n    if (declaration && isDeclare) {\n      this.resetStartLocation(declaration, startPos, startLoc);\n      declaration.declare = true;\n    }\n\n    return declaration;\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    if ((!isStatement || optionalId) && this.isContextual(106)) {\n      return;\n    }\n\n    super.parseClassId(node, isStatement, optionalId, node.declare ? BIND_TS_AMBIENT : BIND_CLASS);\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n  }\n\n  parseClassPropertyAnnotation(node) {\n    if (!node.optional && this.eat(35)) {\n      node.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) node.typeAnnotation = type;\n  }\n\n  parseClassProperty(node) {\n    this.parseClassPropertyAnnotation(node);\n\n    if (this.state.isAmbientContext && this.match(29)) {\n      this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n    }\n\n    if (node.abstract && this.match(29)) {\n      const {\n        key\n      } = node;\n      this.raise(this.state.start, TSErrors.AbstractPropertyHasInitializer, key.type === \"Identifier\" && !node.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n    }\n\n    return super.parseClassProperty(node);\n  }\n\n  parseClassPrivateProperty(node) {\n    if (node.abstract) {\n      this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n    }\n\n    if (node.accessibility) {\n      this.raise(node.start, TSErrors.PrivateElementHasAccessibility, node.accessibility);\n    }\n\n    this.parseClassPropertyAnnotation(node);\n    return super.parseClassPrivateProperty(node);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    const typeParameters = this.tsTryParseTypeParameters();\n\n    if (typeParameters && isConstructor) {\n      this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n    }\n\n    if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n      this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n    }\n\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper);\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) method.typeParameters = typeParameters;\n    super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    if (node.type === \"TSDeclareMethod\") return;\n    if (node.type === \"MethodDefinition\" && !node.value.body) return;\n    super.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  parseClassSuper(node) {\n    super.parseClassSuper(node);\n\n    if (node.superClass && this.match(45)) {\n      node.superTypeParameters = this.tsParseTypeArguments();\n    }\n\n    if (this.eatContextual(106)) {\n      node.implements = this.tsParseHeritageClause(\"implements\");\n    }\n  }\n\n  parseObjPropValue(prop) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) prop.typeParameters = typeParameters;\n\n    for (var _len7 = arguments.length, args = new Array(_len7 > 1 ? _len7 - 1 : 0), _key7 = 1; _key7 < _len7; _key7++) {\n      args[_key7 - 1] = arguments[_key7];\n    }\n\n    super.parseObjPropValue(prop, ...args);\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    const typeParameters = this.tsTryParseTypeParameters();\n    if (typeParameters) node.typeParameters = typeParameters;\n    super.parseFunctionParams(node, allowModifiers);\n  }\n\n  parseVarId(decl, kind) {\n    super.parseVarId(decl, kind);\n\n    if (decl.id.type === \"Identifier\" && this.eat(35)) {\n      decl.definite = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      decl.id.typeAnnotation = type;\n      this.resetEndLocation(decl.id);\n    }\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    if (this.match(14)) {\n      node.returnType = this.tsParseTypeAnnotation();\n    }\n\n    return super.parseAsyncArrowFromCallExpression(node, call);\n  }\n\n  parseMaybeAssign() {\n    for (var _len8 = arguments.length, args = new Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {\n      args[_key8] = arguments[_key8];\n    }\n\n    var _jsx, _jsx2, _typeCast, _jsx3, _typeCast2, _jsx4, _typeCast3;\n\n    let state;\n    let jsx;\n    let typeCast;\n\n    if (this.hasPlugin(\"jsx\") && (this.match(134) || this.match(45))) {\n      state = this.state.clone();\n      jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!jsx.error) return jsx.node;\n      const {\n        context\n      } = this.state;\n      const currentContext = context[context.length - 1];\n\n      if (currentContext === types.j_oTag || currentContext === types.j_expr) {\n        context.pop();\n      }\n    }\n\n    if (!((_jsx = jsx) != null && _jsx.error) && !this.match(45)) {\n      return super.parseMaybeAssign(...args);\n    }\n\n    let typeParameters;\n    state = state || this.state.clone();\n    const arrow = this.tryParse(abort => {\n      var _expr$extra, _typeParameters;\n\n      typeParameters = this.tsParseTypeParameters();\n      const expr = super.parseMaybeAssign(...args);\n\n      if (expr.type !== \"ArrowFunctionExpression\" || (_expr$extra = expr.extra) != null && _expr$extra.parenthesized) {\n        abort();\n      }\n\n      if (((_typeParameters = typeParameters) == null ? void 0 : _typeParameters.params.length) !== 0) {\n        this.resetStartLocationFromNode(expr, typeParameters);\n      }\n\n      expr.typeParameters = typeParameters;\n      return expr;\n    }, state);\n\n    if (!arrow.error && !arrow.aborted) {\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if (!jsx) {\n      assert(!this.hasPlugin(\"jsx\"));\n      typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n      if (!typeCast.error) return typeCast.node;\n    }\n\n    if ((_jsx2 = jsx) != null && _jsx2.node) {\n      this.state = jsx.failState;\n      return jsx.node;\n    }\n\n    if (arrow.node) {\n      this.state = arrow.failState;\n      if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n      return arrow.node;\n    }\n\n    if ((_typeCast = typeCast) != null && _typeCast.node) {\n      this.state = typeCast.failState;\n      return typeCast.node;\n    }\n\n    if ((_jsx3 = jsx) != null && _jsx3.thrown) throw jsx.error;\n    if (arrow.thrown) throw arrow.error;\n    if ((_typeCast2 = typeCast) != null && _typeCast2.thrown) throw typeCast.error;\n    throw ((_jsx4 = jsx) == null ? void 0 : _jsx4.error) || arrow.error || ((_typeCast3 = typeCast) == null ? void 0 : _typeCast3.error);\n  }\n\n  reportReservedArrowTypeParam(node) {\n    var _node$extra;\n\n    if (node.params.length === 1 && !((_node$extra = node.extra) != null && _node$extra.trailingComma) && this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n      this.raise(node.start, TSErrors.ReservedArrowTypeParam);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors) {\n    if (!this.hasPlugin(\"jsx\") && this.match(45)) {\n      return this.tsParseTypeAssertion();\n    } else {\n      return super.parseMaybeUnary(refExpressionErrors);\n    }\n  }\n\n  parseArrow(node) {\n    if (this.match(14)) {\n      const result = this.tryParse(abort => {\n        const returnType = this.tsParseTypeOrTypePredicateAnnotation(14);\n        if (this.canInsertSemicolon() || !this.match(19)) abort();\n        return returnType;\n      });\n      if (result.aborted) return;\n\n      if (!result.thrown) {\n        if (result.error) this.state = result.failState;\n        node.returnType = result.node;\n      }\n    }\n\n    return super.parseArrow(node);\n  }\n\n  parseAssignableListItemTypes(param) {\n    if (this.eat(17)) {\n      if (param.type !== \"Identifier\" && !this.state.isAmbientContext && !this.state.inType) {\n        this.raise(param.start, TSErrors.PatternIsOptional);\n      }\n\n      param.optional = true;\n    }\n\n    const type = this.tsTryParseTypeAnnotation();\n    if (type) param.typeAnnotation = type;\n    this.resetEndLocation(param);\n    return param;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return this.isAssignable(node.expression, isBinding);\n\n      case \"TSParameterProperty\":\n        return true;\n\n      default:\n        return super.isAssignable(node, isBinding);\n    }\n  }\n\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    switch (node.type) {\n      case \"TSTypeCastExpression\":\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n\n      case \"TSParameterProperty\":\n        return super.toAssignable(node, isLHS);\n\n      case \"ParenthesizedExpression\":\n        return this.toAssignableParenthesizedExpression(node, isLHS);\n\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  toAssignableParenthesizedExpression(node, isLHS) {\n    switch (node.expression.type) {\n      case \"TSAsExpression\":\n      case \"TSNonNullExpression\":\n      case \"TSTypeAssertion\":\n      case \"ParenthesizedExpression\":\n        node.expression = this.toAssignable(node.expression, isLHS);\n        return node;\n\n      default:\n        return super.toAssignable(node, isLHS);\n    }\n  }\n\n  checkLVal(expr, contextDescription) {\n    var _expr$extra2;\n\n    for (var _len9 = arguments.length, args = new Array(_len9 > 2 ? _len9 - 2 : 0), _key9 = 2; _key9 < _len9; _key9++) {\n      args[_key9 - 2] = arguments[_key9];\n    }\n\n    switch (expr.type) {\n      case \"TSTypeCastExpression\":\n        return;\n\n      case \"TSParameterProperty\":\n        this.checkLVal(expr.parameter, \"parameter property\", ...args);\n        return;\n\n      case \"TSAsExpression\":\n      case \"TSTypeAssertion\":\n        if (!args[0] && contextDescription !== \"parenthesized expression\" && !((_expr$extra2 = expr.extra) != null && _expr$extra2.parenthesized)) {\n          this.raise(expr.start, ErrorMessages.InvalidLhs, contextDescription);\n          break;\n        }\n\n        this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n        return;\n\n      case \"TSNonNullExpression\":\n        this.checkLVal(expr.expression, contextDescription, ...args);\n        return;\n\n      default:\n        super.checkLVal(expr, contextDescription, ...args);\n        return;\n    }\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 74:\n        return this.parseIdentifier(true);\n\n      default:\n        return super.parseBindingAtom();\n    }\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.match(45)) {\n      const typeArguments = this.tsParseTypeArguments();\n\n      if (this.match(10)) {\n        const call = super.parseMaybeDecoratorArguments(expr);\n        call.typeParameters = typeArguments;\n        return call;\n      }\n\n      this.unexpected(this.state.start, 10);\n    }\n\n    return super.parseMaybeDecoratorArguments(expr);\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.state.isAmbientContext && this.match(12) && this.lookaheadCharCode() === close) {\n      this.next();\n    } else {\n      super.checkCommaAfterRest(close);\n    }\n  }\n\n  isClassMethod() {\n    return this.match(45) || super.isClassMethod();\n  }\n\n  isClassProperty() {\n    return this.match(35) || this.match(14) || super.isClassProperty();\n  }\n\n  parseMaybeDefault() {\n    const node = super.parseMaybeDefault(...arguments);\n\n    if (node.type === \"AssignmentPattern\" && node.typeAnnotation && node.right.start < node.typeAnnotation.start) {\n      this.raise(node.typeAnnotation.start, TSErrors.TypeAnnotationAfterAssign);\n    }\n\n    return node;\n  }\n\n  getTokenFromCode(code) {\n    if (this.state.inType) {\n      if (code === 62) {\n        return this.finishOp(46, 1);\n      }\n\n      if (code === 60) {\n        return this.finishOp(45, 1);\n      }\n    }\n\n    return super.getTokenFromCode(code);\n  }\n\n  reScan_lt_gt() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 45) {\n      this.state.pos -= 1;\n      this.readToken_lt();\n    } else if (type === 46) {\n      this.state.pos -= 1;\n      this.readToken_gt();\n    }\n  }\n\n  toAssignableList(exprList) {\n    for (let i = 0; i < exprList.length; i++) {\n      const expr = exprList[i];\n      if (!expr) continue;\n\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          exprList[i] = this.typeCastToParameter(expr);\n          break;\n\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (!this.state.maybeInArrowParameters) {\n            exprList[i] = this.typeCastToParameter(expr);\n          } else {\n            this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n          }\n\n          break;\n      }\n    }\n\n    return super.toAssignableList(...arguments);\n  }\n\n  typeCastToParameter(node) {\n    node.expression.typeAnnotation = node.typeAnnotation;\n    this.resetEndLocation(node.expression, node.typeAnnotation.end, node.typeAnnotation.loc.end);\n    return node.expression;\n  }\n\n  shouldParseArrow(params) {\n    if (this.match(14)) {\n      return params.every(expr => this.isAssignable(expr, true));\n    }\n\n    return super.shouldParseArrow(params);\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(14) || super.shouldParseAsyncArrow();\n  }\n\n  canHaveLeadingDecorator() {\n    return super.canHaveLeadingDecorator() || this.isAbstractClass();\n  }\n\n  jsxParseOpeningElementAfterName(node) {\n    if (this.match(45)) {\n      const typeArguments = this.tsTryParseAndCatch(() => this.tsParseTypeArguments());\n      if (typeArguments) node.typeParameters = typeArguments;\n    }\n\n    return super.jsxParseOpeningElementAfterName(node);\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    const baseCount = super.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const firstParam = params[0];\n    const hasContextParam = firstParam && this.isThisParam(firstParam);\n    return hasContextParam ? baseCount + 1 : baseCount;\n  }\n\n  parseCatchClauseParam() {\n    const param = super.parseCatchClauseParam();\n    const type = this.tsTryParseTypeAnnotation();\n\n    if (type) {\n      param.typeAnnotation = type;\n      this.resetEndLocation(param);\n    }\n\n    return param;\n  }\n\n  tsInAmbientContext(cb) {\n    const oldIsAmbientContext = this.state.isAmbientContext;\n    this.state.isAmbientContext = true;\n\n    try {\n      return cb();\n    } finally {\n      this.state.isAmbientContext = oldIsAmbientContext;\n    }\n  }\n\n  parseClass(node) {\n    const oldInAbstractClass = this.state.inAbstractClass;\n    this.state.inAbstractClass = !!node.abstract;\n\n    try {\n      for (var _len10 = arguments.length, args = new Array(_len10 > 1 ? _len10 - 1 : 0), _key10 = 1; _key10 < _len10; _key10++) {\n        args[_key10 - 1] = arguments[_key10];\n      }\n\n      return super.parseClass(node, ...args);\n    } finally {\n      this.state.inAbstractClass = oldInAbstractClass;\n    }\n  }\n\n  tsParseAbstractDeclaration(node) {\n    if (this.match(76)) {\n      node.abstract = true;\n      return this.parseClass(node, true, false);\n    } else if (this.isContextual(121)) {\n      if (!this.hasFollowingLineBreak()) {\n        node.abstract = true;\n        this.raise(node.start, TSErrors.NonClassMethodPropertyHasAbstractModifer);\n        this.next();\n        return this.tsParseInterfaceDeclaration(node);\n      }\n    } else {\n      this.unexpected(null, 76);\n    }\n  }\n\n  parseMethod() {\n    const method = super.parseMethod(...arguments);\n\n    if (method.abstract) {\n      const hasBody = this.hasPlugin(\"estree\") ? !!method.value.body : !!method.body;\n\n      if (hasBody) {\n        const {\n          key\n        } = method;\n        this.raise(method.start, TSErrors.AbstractMethodHasImplementation, key.type === \"Identifier\" && !method.computed ? key.name : `[${this.input.slice(key.start, key.end)}]`);\n      }\n    }\n\n    return method;\n  }\n\n  tsParseTypeParameterName() {\n    const typeName = this.parseIdentifier();\n    return typeName.name;\n  }\n\n  shouldParseAsAmbientContext() {\n    return !!this.getPluginOption(\"typescript\", \"dts\");\n  }\n\n  parse() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.parse();\n  }\n\n  getExpression() {\n    if (this.shouldParseAsAmbientContext()) {\n      this.state.isAmbientContext = true;\n    }\n\n    return super.getExpression();\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (!isString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(node, false, isInTypeExport);\n      return this.finishNode(node, \"ExportSpecifier\");\n    }\n\n    node.exportKind = \"value\";\n    return super.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly);\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (!importedIsString && isMaybeTypeOnly) {\n      this.parseTypeOnlyImportExportSpecifier(specifier, true, isInTypeOnlyImport);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    specifier.importKind = \"value\";\n    return super.parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly);\n  }\n\n  parseTypeOnlyImportExportSpecifier(node, isImport, isInTypeOnlyImportExport) {\n    const leftOfAsKey = isImport ? \"imported\" : \"local\";\n    const rightOfAsKey = isImport ? \"local\" : \"exported\";\n    let leftOfAs = node[leftOfAsKey];\n    let rightOfAs;\n    let hasTypeSpecifier = false;\n    let canParseAsKeyword = true;\n    const pos = leftOfAs.start;\n\n    if (this.isContextual(89)) {\n      const firstAs = this.parseIdentifier();\n\n      if (this.isContextual(89)) {\n        const secondAs = this.parseIdentifier();\n\n        if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n          rightOfAs = this.parseIdentifier();\n          canParseAsKeyword = false;\n        } else {\n          rightOfAs = secondAs;\n          canParseAsKeyword = false;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        canParseAsKeyword = false;\n        rightOfAs = this.parseIdentifier();\n      } else {\n        hasTypeSpecifier = true;\n        leftOfAs = firstAs;\n      }\n    } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n      hasTypeSpecifier = true;\n      leftOfAs = this.parseIdentifier();\n    }\n\n    if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n      this.raise(pos, isImport ? TSErrors.TypeModifierIsUsedInTypeImports : TSErrors.TypeModifierIsUsedInTypeExports);\n    }\n\n    node[leftOfAsKey] = leftOfAs;\n    node[rightOfAsKey] = rightOfAs;\n    const kindKey = isImport ? \"importKind\" : \"exportKind\";\n    node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n    if (canParseAsKeyword && this.eatContextual(89)) {\n      node[rightOfAsKey] = isImport ? this.parseIdentifier() : this.parseModuleExportName();\n    }\n\n    if (!node[rightOfAsKey]) {\n      node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n    }\n\n    if (isImport) {\n      this.checkLVal(node[rightOfAsKey], \"import specifier\", BIND_LEXICAL);\n    }\n  }\n\n};\n\nconst PlaceHolderErrors = makeErrorTemplates({\n  ClassNameIsRequired: \"A class name is required.\"\n}, ErrorCodes.SyntaxError);\n\nvar placeholders = superClass => class extends superClass {\n  parsePlaceholder(expectedNode) {\n    if (this.match(136)) {\n      const node = this.startNode();\n      this.next();\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      node.name = super.parseIdentifier(true);\n      this.assertNoSpace(\"Unexpected space in placeholder.\");\n      this.expect(136);\n      return this.finishPlaceholder(node, expectedNode);\n    }\n  }\n\n  finishPlaceholder(node, expectedNode) {\n    const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n    node.expectedNode = expectedNode;\n    return isFinished ? node : this.finishNode(node, \"Placeholder\");\n  }\n\n  getTokenFromCode(code) {\n    if (code === 37 && this.input.charCodeAt(this.state.pos + 1) === 37) {\n      return this.finishOp(136, 2);\n    }\n\n    return super.getTokenFromCode(...arguments);\n  }\n\n  parseExprAtom() {\n    return this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments);\n  }\n\n  parseIdentifier() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseIdentifier(...arguments);\n  }\n\n  checkReservedWord(word) {\n    if (word !== undefined) super.checkReservedWord(...arguments);\n  }\n\n  parseBindingAtom() {\n    return this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments);\n  }\n\n  checkLVal(expr) {\n    if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n  }\n\n  toAssignable(node) {\n    if (node && node.type === \"Placeholder\" && node.expectedNode === \"Expression\") {\n      node.expectedNode = \"Pattern\";\n      return node;\n    }\n\n    return super.toAssignable(...arguments);\n  }\n\n  isLet(context) {\n    if (super.isLet(context)) {\n      return true;\n    }\n\n    if (!this.isContextual(95)) {\n      return false;\n    }\n\n    if (context) return false;\n    const nextToken = this.lookahead();\n\n    if (nextToken.type === 136) {\n      return true;\n    }\n\n    return false;\n  }\n\n  verifyBreakContinue(node) {\n    if (node.label && node.label.type === \"Placeholder\") return;\n    super.verifyBreakContinue(...arguments);\n  }\n\n  parseExpressionStatement(node, expr) {\n    if (expr.type !== \"Placeholder\" || expr.extra && expr.extra.parenthesized) {\n      return super.parseExpressionStatement(...arguments);\n    }\n\n    if (this.match(14)) {\n      const stmt = node;\n      stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n      this.next();\n      stmt.body = this.parseStatement(\"label\");\n      return this.finishNode(stmt, \"LabeledStatement\");\n    }\n\n    this.semicolon();\n    node.name = expr.name;\n    return this.finishPlaceholder(node, \"Statement\");\n  }\n\n  parseBlock() {\n    return this.parsePlaceholder(\"BlockStatement\") || super.parseBlock(...arguments);\n  }\n\n  parseFunctionId() {\n    return this.parsePlaceholder(\"Identifier\") || super.parseFunctionId(...arguments);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n\n    if (placeholder) {\n      if (this.match(77) || this.match(136) || this.match(5)) {\n        node.id = placeholder;\n      } else if (optionalId || !isStatement) {\n        node.id = null;\n        node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n        return this.finishNode(node, type);\n      } else {\n        this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n      }\n    } else {\n      this.parseClassId(node, isStatement, optionalId);\n    }\n\n    this.parseClassSuper(node);\n    node.body = this.parsePlaceholder(\"ClassBody\") || this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, type);\n  }\n\n  parseExport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseExport(...arguments);\n\n    if (!this.isContextual(93) && !this.match(12)) {\n      node.specifiers = [];\n      node.source = null;\n      node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    this.expectPlugin(\"exportDefaultFrom\");\n    const specifier = this.startNode();\n    specifier.exported = placeholder;\n    node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n    return super.parseExport(node);\n  }\n\n  isExportDefaultSpecifier() {\n    if (this.match(61)) {\n      const next = this.nextTokenStart();\n\n      if (this.isUnparsedContextual(next, \"from\")) {\n        if (this.input.startsWith(tokenLabelName(136), this.nextTokenStartSince(next + 4))) {\n          return true;\n        }\n      }\n    }\n\n    return super.isExportDefaultSpecifier();\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (node.specifiers && node.specifiers.length > 0) {\n      return true;\n    }\n\n    return super.maybeParseExportDefaultSpecifier(...arguments);\n  }\n\n  checkExport(node) {\n    const {\n      specifiers\n    } = node;\n\n    if (specifiers != null && specifiers.length) {\n      node.specifiers = specifiers.filter(node => node.exported.type === \"Placeholder\");\n    }\n\n    super.checkExport(node);\n    node.specifiers = specifiers;\n  }\n\n  parseImport(node) {\n    const placeholder = this.parsePlaceholder(\"Identifier\");\n    if (!placeholder) return super.parseImport(...arguments);\n    node.specifiers = [];\n\n    if (!this.isContextual(93) && !this.match(12)) {\n      node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    const specifier = this.startNodeAtNode(placeholder);\n    specifier.local = placeholder;\n    this.finishNode(specifier, \"ImportDefaultSpecifier\");\n    node.specifiers.push(specifier);\n\n    if (this.eat(12)) {\n      const hasStarImport = this.maybeParseStarImportSpecifier(node);\n      if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n    }\n\n    this.expectContextual(93);\n    node.source = this.parseImportSource();\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    return this.parsePlaceholder(\"StringLiteral\") || super.parseImportSource(...arguments);\n  }\n\n};\n\nvar v8intrinsic = superClass => class extends superClass {\n  parseV8Intrinsic() {\n    if (this.match(50)) {\n      const v8IntrinsicStart = this.state.start;\n      const node = this.startNode();\n      this.next();\n\n      if (tokenIsIdentifier(this.state.type)) {\n        const name = this.parseIdentifierName(this.state.start);\n        const identifier = this.createIdentifier(node, name);\n        identifier.type = \"V8IntrinsicIdentifier\";\n\n        if (this.match(10)) {\n          return identifier;\n        }\n      }\n\n      this.unexpected(v8IntrinsicStart);\n    }\n  }\n\n  parseExprAtom() {\n    return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n  }\n\n};\n\nfunction hasPlugin(plugins, expectedConfig) {\n  const [expectedName, expectedOptions] = typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n  const expectedKeys = Object.keys(expectedOptions);\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n\n      if (pluginName !== expectedName) {\n        return false;\n      }\n\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n  });\n}\n\nfunction getPluginOption(plugins, name, option) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nfunction validatePlugins(plugins) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\"Cannot use the decorators and decorators-legacy plugin together\");\n    }\n\n    const decoratorsBeforeExport = getPluginOption(plugins, \"decorators\", \"decoratorsBeforeExport\");\n\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" + \" whose value must be a boolean. If you are migrating from\" + \" Babylon/Babel 6 or want to use the old decorators proposal, you\" + \" should use the 'decorators-legacy' plugin instead of 'decorators'.\");\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(`\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`);\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\"recordAndTuple\", {\n      syntaxType: \"hash\"\n    }]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\"Cannot combine placeholders plugin and Hack-style pipes.\");\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\"Cannot combine v8intrinsic plugin and Hack-style pipes.\");\n      }\n\n      const topicToken = getPluginOption(plugins, \"pipelineOperator\", \"topicToken\");\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n        throw new Error(`\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`);\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error('Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.');\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\"Cannot combine importAssertions and moduleAttributes plugins.\");\n      }\n\n      const moduleAttributesVerionPluginOption = getPluginOption(plugins, \"moduleAttributes\", \"version\");\n\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\"The 'moduleAttributes' plugin requires a 'version' option,\" + \" representing the last proposal update. Currently, the\" + \" only supported value is 'may-2020'.\");\n      }\n    }\n  }\n\n  if (hasPlugin(plugins, \"recordAndTuple\") && !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"))) {\n    throw new Error(\"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" + RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"));\n  }\n\n  if (hasPlugin(plugins, \"asyncDoExpressions\") && !hasPlugin(plugins, \"doExpressions\")) {\n    const error = new Error(\"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\");\n    error.missingPlugins = \"doExpressions\";\n    throw error;\n  }\n}\n\nconst mixinPlugins = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders\n};\nconst mixinPluginNames = Object.keys(mixinPlugins);\nconst defaultOptions = {\n  sourceType: \"script\",\n  sourceFilename: undefined,\n  startColumn: 0,\n  startLine: 1,\n  allowAwaitOutsideFunction: false,\n  allowReturnOutsideFunction: false,\n  allowImportExportEverywhere: false,\n  allowSuperOutsideMethod: false,\n  allowUndeclaredExports: false,\n  plugins: [],\n  strictMode: null,\n  ranges: false,\n  tokens: false,\n  createParenthesizedExpressions: false,\n  errorRecovery: false,\n  attachComment: true\n};\n\nfunction getOptions(opts) {\n  const options = {};\n\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n\n  return options;\n}\n\nconst unwrapParenthesizedExpression = node => {\n  return node.type === \"ParenthesizedExpression\" ? unwrapParenthesizedExpression(node.expression) : node;\n};\n\nclass LValParser extends NodeUtils {\n  toAssignable(node) {\n    let isLHS = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n\n    var _node$extra, _node$extra3;\n\n    let parenthesized = undefined;\n\n    if (node.type === \"ParenthesizedExpression\" || (_node$extra = node.extra) != null && _node$extra.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n\n      if (isLHS) {\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, ErrorMessages.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n\n        for (let i = 0, length = node.properties.length, last = length - 1; i < length; i++) {\n          var _node$extra2;\n\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (isLast && prop.type === \"RestElement\" && (_node$extra2 = node.extra) != null && _node$extra2.trailingComma) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\":\n        {\n          this.checkToRestConversion(node);\n          node.type = \"RestElement\";\n          const arg = node.argument;\n          this.toAssignable(arg, isLHS);\n          break;\n        }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, (_node$extra3 = node.extra) == null ? void 0 : _node$extra3.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, ErrorMessages.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.toAssignable(parenthesized, isLHS);\n        break;\n    }\n\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(prop, isLast, isLHS) {\n    if (prop.type === \"ObjectMethod\") {\n      const error = prop.kind === \"get\" || prop.kind === \"set\" ? ErrorMessages.PatternHasAccessor : ErrorMessages.PatternHasMethod;\n      this.raise(prop.key.start, error);\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  toAssignableList(exprList, trailingCommaPos, isLHS) {\n    let end = exprList.length;\n\n    if (end) {\n      const last = exprList[end - 1];\n\n      if ((last == null ? void 0 : last.type) === \"RestElement\") {\n        --end;\n      } else if ((last == null ? void 0 : last.type) === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n\n        if (arg.type !== \"Identifier\" && arg.type !== \"MemberExpression\" && arg.type !== \"ArrayPattern\" && arg.type !== \"ObjectPattern\") {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n\n    return exprList;\n  }\n\n  isAssignable(node, isBinding) {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\":\n        {\n          const last = node.properties.length - 1;\n          return node.properties.every((prop, i) => {\n            return prop.type !== \"ObjectMethod\" && (i === last || prop.type !== \"SpreadElement\") && this.isAssignable(prop);\n          });\n        }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(element => element === null || this.isAssignable(element));\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  toReferencedList(exprList, isParenthesizedExpr) {\n    return exprList;\n  }\n\n  toReferencedListDeep(exprList, isParenthesizedExpr) {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if ((expr == null ? void 0 : expr.type) === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  parseSpread(refExpressionErrors, refNeedsArrowPos) {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(refExpressionErrors, undefined, refNeedsArrowPos);\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  parseRestBinding() {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  parseBindingAtom() {\n    switch (this.state.type) {\n      case 0:\n        {\n          const node = this.startNode();\n          this.next();\n          node.elements = this.parseBindingList(3, 93, true);\n          return this.finishNode(node, \"ArrayPattern\");\n        }\n\n      case 5:\n        return this.parseObjectLike(8, true);\n    }\n\n    return this.parseIdentifier();\n  }\n\n  parseBindingList(close, closeCharCode, allowEmpty, allowModifiers) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n      }\n\n      if (allowEmpty && this.match(12)) {\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(21)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n\n        if (this.match(26) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, ErrorMessages.UnsupportedParameterDecorator);\n        }\n\n        while (this.match(26)) {\n          decorators.push(this.parseDecorator());\n        }\n\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n\n    return elts;\n  }\n\n  parseBindingRestProperty(prop) {\n    this.next();\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(125);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  parseBindingProperty() {\n    const prop = this.startNode();\n    const {\n      type,\n      start: startPos,\n      startLoc\n    } = this.state;\n\n    if (type === 21) {\n      return this.parseBindingRestProperty(prop);\n    } else {\n      this.parsePropertyName(prop);\n    }\n\n    prop.method = false;\n    this.parseObjPropValue(prop, startPos, startLoc, false, false, true, false);\n    return prop;\n  }\n\n  parseAssignableListItem(allowModifiers, decorators) {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n\n    return elt;\n  }\n\n  parseAssignableListItemTypes(param) {\n    return param;\n  }\n\n  parseMaybeDefault(startPos, startLoc, left) {\n    var _startLoc, _startPos, _left;\n\n    startLoc = (_startLoc = startLoc) != null ? _startLoc : this.state.startLoc;\n    startPos = (_startPos = startPos) != null ? _startPos : this.state.start;\n    left = (_left = left) != null ? _left : this.parseBindingAtom();\n    if (!this.eat(29)) return left;\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  checkLVal(expr, contextDescription) {\n    let bindingType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : BIND_NONE;\n    let checkClashes = arguments.length > 3 ? arguments[3] : undefined;\n    let disallowLetBinding = arguments.length > 4 ? arguments[4] : undefined;\n    let strictModeChanged = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    switch (expr.type) {\n      case \"Identifier\":\n        {\n          const {\n            name\n          } = expr;\n\n          if (this.state.strict && (strictModeChanged ? isStrictBindReservedWord(name, this.inModule) : isStrictBindOnlyReservedWord(name))) {\n            this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.StrictEvalArguments : ErrorMessages.StrictEvalArgumentsBinding, name);\n          }\n\n          if (checkClashes) {\n            if (checkClashes.has(name)) {\n              this.raise(expr.start, ErrorMessages.ParamDupe);\n            } else {\n              checkClashes.add(name);\n            }\n          }\n\n          if (disallowLetBinding && name === \"let\") {\n            this.raise(expr.start, ErrorMessages.LetInLexicalBinding);\n          }\n\n          if (!(bindingType & BIND_NONE)) {\n            this.scope.declareName(name, bindingType, expr.start);\n          }\n\n          break;\n        }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, ErrorMessages.InvalidPropertyBindingPattern);\n        }\n\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;else if (this.isObjectMethod(prop)) continue;\n          this.checkLVal(prop, \"object destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n        }\n\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(elem, \"array destructuring pattern\", bindingType, checkClashes, disallowLetBinding);\n          }\n        }\n\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(expr.left, \"assignment pattern\", bindingType, checkClashes);\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(expr.argument, \"rest element\", bindingType, checkClashes);\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(expr.expression, \"parenthesized expression\", bindingType, checkClashes);\n        break;\n\n      default:\n        {\n          this.raise(expr.start, bindingType === BIND_NONE ? ErrorMessages.InvalidLhs : ErrorMessages.InvalidLhsBinding, contextDescription);\n        }\n    }\n  }\n\n  checkToRestConversion(node) {\n    if (node.argument.type !== \"Identifier\" && node.argument.type !== \"MemberExpression\") {\n      this.raise(node.argument.start, ErrorMessages.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close) {\n    if (this.match(12)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos) {\n    throw this.raise(pos, ErrorMessages.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos) {\n    this.raise(pos, ErrorMessages.RestTrailingComma);\n  }\n\n}\n\nconst invalidHackPipeBodies = new Map([[\"ArrowFunctionExpression\", \"arrow function\"], [\"AssignmentExpression\", \"assignment\"], [\"ConditionalExpression\", \"conditional\"], [\"YieldExpression\", \"yield\"]]);\n\nclass ExpressionParser extends LValParser {\n  checkProto(prop, isRecord, protoRef, refExpressionErrors) {\n    if (prop.type === \"SpreadElement\" || this.isObjectMethod(prop) || prop.computed || prop.shorthand) {\n      return;\n    }\n\n    const key = prop.key;\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, ErrorMessages.RecordNoProto);\n        return;\n      }\n\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, ErrorMessages.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr, potentialArrowAt) {\n    return expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt;\n  }\n\n  getExpression() {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n\n    if (!this.match(131)) {\n      this.unexpected();\n    }\n\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n\n    return expr;\n  }\n\n  parseExpression(disallowIn, refExpressionErrors) {\n    if (disallowIn) {\n      return this.disallowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n    }\n\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  parseExpressionBase(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n\n    if (this.match(12)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n\n      while (this.eat(12)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeAssignDisallowIn(refExpressionErrors, afterLeftParse) {\n    return this.disallowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  parseMaybeAssignAllowIn(refExpressionErrors, afterLeftParse) {\n    return this.allowInAnd(() => this.parseMaybeAssign(refExpressionErrors, afterLeftParse));\n  }\n\n  setOptionalParametersError(refExpressionErrors, resultError) {\n    var _resultError$pos;\n\n    refExpressionErrors.optionalParameters = (_resultError$pos = resultError == null ? void 0 : resultError.pos) != null ? _resultError$pos : this.state.start;\n  }\n\n  parseMaybeAssign(refExpressionErrors, afterLeftParse) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    if (this.isContextual(101)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n\n    const {\n      type\n    } = this.state;\n\n    if (type === 10 || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(29)) {\n        node.left = this.toAssignable(left, true);\n\n        if (refExpressionErrors.doubleProto >= startPos) {\n          refExpressionErrors.doubleProto = -1;\n        }\n\n        if (refExpressionErrors.shorthandAssign >= startPos) {\n          refExpressionErrors.shorthandAssign = -1;\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  parseMaybeConditional(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(expr, startPos, startLoc, refExpressionErrors) {\n    if (this.eat(17)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(14);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(refExpressionErrors) {\n    return this.match(130) ? this.parsePrivateName() : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  parseExprOps(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  parseExprOp(left, leftStartPos, leftStartLoc, minPrec) {\n    if (this.isPrivateName(left)) {\n      const value = this.getPrivateNameSV(left);\n      const {\n        start\n      } = left;\n\n      if (minPrec >= tokenOperatorPrecedence(54) || !this.prodParam.hasIn || !this.match(54)) {\n        this.raise(start, ErrorMessages.PrivateInExpectedIn, value);\n      }\n\n      this.classScope.usePrivateName(value, start);\n    }\n\n    const op = this.state.type;\n\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(54))) {\n      let prec = tokenOperatorPrecedence(op);\n\n      if (prec > minPrec) {\n        if (op === 37) {\n          this.expectPlugin(\"pipelineOperator\");\n\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n        const logical = op === 39 || op === 40;\n        const coalesce = op === 38;\n\n        if (coalesce) {\n          prec = tokenOperatorPrecedence(40);\n        }\n\n        this.next();\n\n        if (op === 37 && this.hasPlugin([\"pipelineOperator\", {\n          proposal: \"minimal\"\n        }])) {\n          if (this.state.type === 92 && this.prodParam.hasAwait) {\n            throw this.raise(this.state.start, ErrorMessages.UnexpectedAwaitAfterPipelineBody);\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(node, logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\");\n        const nextOp = this.state.type;\n\n        if (coalesce && (nextOp === 39 || nextOp === 40) || logical && nextOp === 38) {\n          throw this.raise(this.state.start, ErrorMessages.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n\n    return left;\n  }\n\n  parseExprOpRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    switch (op) {\n      case 37:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(101)) {\n                throw this.raise(this.state.start, ErrorMessages.PipeBodyIsTighter, this.state.value);\n              }\n\n              return this.parseSmartPipelineBodyInStyle(this.parseExprOpBaseRightExpr(op, prec), startPos, startLoc);\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  parseExprOpBaseRightExpr(op, prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, tokenIsRightAssociative(op) ? prec - 1 : prec);\n  }\n\n  parseHackPipeBody() {\n    var _body$extra;\n\n    const {\n      start\n    } = this.state;\n    const body = this.parseMaybeAssign();\n\n    if (invalidHackPipeBodies.has(body.type) && !((_body$extra = body.extra) != null && _body$extra.parenthesized)) {\n      this.raise(start, ErrorMessages.PipeUnparenthesizedBody, invalidHackPipeBodies.get(body.type));\n    }\n\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(start, ErrorMessages.PipeTopicUnused);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node) {\n    if (this.match(53)) {\n      this.raise(node.argument.start, ErrorMessages.UnexpectedTokenUnaryExponentiation);\n    }\n  }\n\n  parseMaybeUnary(refExpressionErrors, sawUnary) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(92);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n\n    const update = this.match(34);\n    const node = this.startNode();\n\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(68)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n\n      const isDelete = this.match(85);\n      this.next();\n      node.argument = this.parseMaybeUnary(null, true);\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, ErrorMessages.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, ErrorMessages.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const {\n        type\n      } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\") ? tokenCanStartExpression(type) : tokenCanStartExpression(type) && !this.match(50);\n\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, ErrorMessages.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  parseUpdate(node, update, refExpressionErrors) {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n\n    return expr;\n  }\n\n  parseExprSubscripts(refExpressionErrors) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(base, startPos, startLoc, noCalls) {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false\n    };\n\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n\n    return base;\n  }\n\n  parseSubscript(base, startPos, startLoc, noCalls, state) {\n    const {\n      type\n    } = this.state;\n\n    if (!noCalls && type === 15) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(base, startPos, startLoc, state);\n    }\n\n    let optional = false;\n\n    if (type === 18) {\n      if (noCalls && this.lookaheadCharCode() === 40) {\n        state.stop = true;\n        return base;\n      }\n\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(10)) {\n      return this.parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional);\n    } else {\n      const computed = this.eat(0);\n\n      if (computed || optional || this.eat(16)) {\n        return this.parseMember(base, startPos, startLoc, state, computed, optional);\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  parseMember(base, startPos, startLoc, state, computed, optional) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(3);\n    } else if (this.match(130)) {\n      if (base.type === \"Super\") {\n        this.raise(startPos, ErrorMessages.SuperPrivateField);\n      }\n\n      this.classScope.usePrivateName(this.state.value, this.state.start);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  parseBind(base, startPos, startLoc, noCalls, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next();\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(this.finishNode(node, \"BindExpression\"), startPos, startLoc, noCalls);\n  }\n\n  parseCoverCallAndAsyncArrowHead(base, startPos, startLoc, state, optional) {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n    this.state.maybeInArrowParameters = true;\n    this.next();\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(11);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(11, base.type === \"Import\", base.type !== \"Super\", node, refExpressionErrors);\n    }\n\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(this.startNodeAt(startPos, startLoc), node);\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  toReferencedArguments(node, isParenthesizedExpr) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  parseTaggedTemplateExpression(base, startPos, startLoc, state) {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n\n    if (state.optionalChainMember) {\n      this.raise(startPos, ErrorMessages.OptionalChainingNoTemplate);\n    }\n\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base) {\n    return base.type === \"Identifier\" && base.name === \"async\" && this.state.lastTokEnd === base.end && !this.canInsertSemicolon() && base.end - base.start === 5 && base.start === this.state.potentialArrowAt;\n  }\n\n  finishCallExpression(node, optional) {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(node.start, ErrorMessages.ImportCallArity, this.hasPlugin(\"importAssertions\") || this.hasPlugin(\"moduleAttributes\") ? \"one or two arguments\" : \"one argument\");\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, ErrorMessages.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n\n    return this.finishNode(node, optional ? \"OptionalCallExpression\" : \"CallExpression\");\n  }\n\n  parseCallExpressionArguments(close, dynamicImport, allowPlaceholder, nodeForExtra, refExpressionErrors) {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (dynamicImport && !this.hasPlugin(\"importAssertions\") && !this.hasPlugin(\"moduleAttributes\")) {\n            this.raise(this.state.lastTokStart, ErrorMessages.ImportCallArgumentTrailingComma);\n          }\n\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(false, refExpressionErrors, allowPlaceholder));\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return elts;\n  }\n\n  shouldParseAsyncArrow() {\n    return this.match(19) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(node, call) {\n    var _call$extra;\n\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(19);\n    this.parseArrowExpression(node, call.arguments, true, (_call$extra = call.extra) == null ? void 0 : _call$extra.trailingComma);\n\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n\n    return node;\n  }\n\n  parseNoCallExpr() {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  parseExprAtom(refExpressionErrors) {\n    let node;\n    const {\n      type\n    } = this.state;\n\n    switch (type) {\n      case 75:\n        return this.parseSuper();\n\n      case 79:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(16)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(10)) {\n          this.raise(this.state.lastTokStart, ErrorMessages.UnsupportedImport);\n        }\n\n        return this.finishNode(node, \"Import\");\n\n      case 74:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case 86:\n        {\n          return this.parseDo(this.startNode(), false);\n        }\n\n      case 52:\n      case 31:\n        {\n          this.readRegexp();\n          return this.parseRegExpLiteral(this.state.value);\n        }\n\n      case 126:\n        return this.parseNumericLiteral(this.state.value);\n\n      case 127:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case 128:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case 125:\n        return this.parseStringLiteral(this.state.value);\n\n      case 80:\n        return this.parseNullLiteral();\n\n      case 81:\n        return this.parseBooleanLiteral(true);\n\n      case 82:\n        return this.parseBooleanLiteral(false);\n\n      case 10:\n        {\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          return this.parseParenAndDistinguishExpression(canBeArrow);\n        }\n\n      case 2:\n      case 1:\n        {\n          return this.parseArrayLike(this.state.type === 2 ? 4 : 3, false, true);\n        }\n\n      case 0:\n        {\n          return this.parseArrayLike(3, true, false, refExpressionErrors);\n        }\n\n      case 6:\n      case 7:\n        {\n          return this.parseObjectLike(this.state.type === 6 ? 9 : 8, false, true);\n        }\n\n      case 5:\n        {\n          return this.parseObjectLike(8, false, false, refExpressionErrors);\n        }\n\n      case 64:\n        return this.parseFunctionOrFunctionSent();\n\n      case 26:\n        this.parseDecorators();\n\n      case 76:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case 73:\n        return this.parseNewOrNewTarget();\n\n      case 25:\n      case 24:\n        return this.parseTemplate(false);\n\n      case 15:\n        {\n          node = this.startNode();\n          this.next();\n          node.object = null;\n          const callee = node.callee = this.parseNoCallExpr();\n\n          if (callee.type === \"MemberExpression\") {\n            return this.finishNode(node, \"BindExpression\");\n          } else {\n            throw this.raise(callee.start, ErrorMessages.UnsupportedBind);\n          }\n        }\n\n      case 130:\n        {\n          this.raise(this.state.start, ErrorMessages.PrivateInExpectedIn, this.state.value);\n          return this.parsePrivateName();\n        }\n\n      case 33:\n        {\n          return this.parseTopicReferenceThenEqualsSign(50, \"%\");\n        }\n\n      case 32:\n        {\n          return this.parseTopicReferenceThenEqualsSign(42, \"^\");\n        }\n\n      case 42:\n      case 50:\n      case 27:\n        {\n          const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n          if (pipeProposal) {\n            return this.parseTopicReference(pipeProposal);\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      case 45:\n        {\n          const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n\n          if (isIdentifierStart(lookaheadCh) || lookaheadCh === 62) {\n            this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n            break;\n          } else {\n            throw this.unexpected();\n          }\n        }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (this.isContextual(119) && this.lookaheadCharCode() === 123 && !this.hasFollowingLineBreak()) {\n            return this.parseModuleExpression();\n          }\n\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (!containsEsc && id.name === \"async\" && !this.canInsertSemicolon()) {\n            const {\n              type\n            } = this.state;\n\n            if (type === 64) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(this.startNodeAtNode(id), undefined, true);\n            } else if (tokenIsIdentifier(type)) {\n              if (this.lookaheadCharCode() === 61) {\n                return this.parseAsyncArrowUnaryFunction(this.startNodeAtNode(id));\n              } else {\n                return id;\n              }\n            } else if (type === 86) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (canBeArrow && this.match(19) && !this.canInsertSemicolon()) {\n            this.next();\n            return this.parseArrowExpression(this.startNodeAtNode(id), [id], false);\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n\n    }\n  }\n\n  parseTopicReferenceThenEqualsSign(topicTokenType, topicTokenValue) {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc.column--;\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  parseTopicReference(pipeProposal) {\n    const node = this.startNode();\n    const start = this.state.start;\n    const tokenType = this.state.type;\n    this.next();\n    return this.finishTopicReference(node, start, pipeProposal, tokenType);\n  }\n\n  finishTopicReference(node, start, pipeProposal, tokenType) {\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n      let nodeType;\n\n      if (pipeProposal === \"smart\") {\n        nodeType = \"PipelinePrimaryTopicReference\";\n      } else {\n        nodeType = \"TopicReference\";\n      }\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        if (pipeProposal === \"smart\") {\n          this.raise(start, ErrorMessages.PrimaryTopicNotAllowed);\n        } else {\n          this.raise(start, ErrorMessages.PipeTopicUnbound);\n        }\n      }\n\n      this.registerTopicReference();\n      return this.finishNode(node, nodeType);\n    } else {\n      throw this.raise(start, ErrorMessages.PipeTopicUnconfiguredToken, tokenLabelName(tokenType));\n    }\n  }\n\n  testTopicReferenceConfiguration(pipeProposal, start, tokenType) {\n    switch (pipeProposal) {\n      case \"hack\":\n        {\n          return this.hasPlugin([\"pipelineOperator\", {\n            topicToken: tokenLabelName(tokenType)\n          }]);\n        }\n\n      case \"smart\":\n        return tokenType === 27;\n\n      default:\n        throw this.raise(start, ErrorMessages.PipeTopicRequiresHackPipes);\n    }\n  }\n\n  parseAsyncArrowUnaryFunction(node) {\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, ErrorMessages.LineTerminatorBeforeArrow);\n    }\n\n    this.expect(19);\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  parseDo(node, isAsync) {\n    this.expectPlugin(\"doExpressions\");\n\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n\n    node.async = isAsync;\n    this.next();\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    if (isAsync) {\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  parseSuper() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(10) && !this.scope.allowDirectSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.SuperNotAllowed);\n    } else if (!this.scope.allowSuper && !this.options.allowSuperOutsideMethod) {\n      this.raise(node.start, ErrorMessages.UnexpectedSuper);\n    }\n\n    if (!this.match(10) && !this.match(0) && !this.match(16)) {\n      this.raise(node.start, ErrorMessages.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName() {\n    const node = this.startNode();\n    const id = this.startNodeAt(this.state.start + 1, new Position(this.state.curLine, this.state.start + 1 - this.state.lineStart));\n    const name = this.state.value;\n    this.next();\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.prodParam.hasYield && this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"function\");\n      this.next();\n\n      if (this.match(98)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        this.unexpected();\n      }\n\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(node, meta, propertyName) {\n    node.meta = meta;\n    const containsEsc = this.state.containsEsc;\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(node.property.start, ErrorMessages.UnsupportedMetaProperty, meta.name, propertyName);\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  parseImportMetaProperty(node) {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next();\n\n    if (this.isContextual(96)) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrorMessages.ImportMetaOutsideModule);\n      }\n\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode(value, type, node) {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode(node, type);\n  }\n\n  parseLiteral(value, type) {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value) {\n    return this.parseLiteral(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value) {\n    return this.parseLiteral(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value) {\n    return this.parseLiteral(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value) {\n    return this.parseLiteral(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value) {\n    const node = this.parseLiteral(value.value, \"RegExpLiteral\");\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode(node, \"NullLiteral\");\n  }\n\n  parseParenAndDistinguishExpression(canBeArrow) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let val;\n    this.next();\n    this.expressionScope.enter(newArrowHeadScope());\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(11)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12, refExpressionErrors.optionalParameters === -1 ? null : refExpressionErrors.optionalParameters);\n\n        if (this.match(11)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(21)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(this.parseParenItem(this.parseRestBinding(), spreadNodeStartPos, spreadNodeStartLoc));\n        this.checkCommaAfterRest(41);\n        break;\n      } else {\n        exprList.push(this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem));\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(11);\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n\n    if (canBeArrow && this.shouldParseArrow(exprList) && (arrowNode = this.parseArrow(arrowNode))) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n    this.toReferencedListDeep(exprList, true);\n\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n      this.takeSurroundingComments(val, startPos, this.state.lastTokEnd);\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  shouldParseArrow(params) {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node) {\n    if (this.eat(19)) {\n      return node;\n    }\n  }\n\n  parseParenItem(node, startPos, startLoc) {\n    return node;\n  }\n\n  parseNewOrNewTarget() {\n    const node = this.startNode();\n    this.next();\n\n    if (this.match(16)) {\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, ErrorMessages.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  parseNew(node) {\n    node.callee = this.parseNoCallExpr();\n\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, ErrorMessages.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.OptionalChainingNoNew);\n    } else if (this.eat(18)) {\n      this.raise(this.state.start, ErrorMessages.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node) {\n    if (this.eat(10)) {\n      const args = this.parseExprList(11);\n      this.toReferencedList(args);\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  parseTemplateElement(isTagged) {\n    const {\n      start,\n      end,\n      value\n    } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(elemStart, createPositionWithColumnOffset(this.state.startLoc, 1));\n\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(start + 2, ErrorMessages.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    const isTail = this.match(24);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset)\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(elem, elemEnd, createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset));\n    return elem;\n  }\n\n  parseTemplate(isTagged) {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push(curElt = this.parseTemplateElement(isTagged));\n    }\n\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  parseTemplateSubstitution() {\n    return this.parseExpression();\n  }\n\n  parseObjectLike(close, isPattern, isRecord, refExpressionErrors) {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      let prop;\n\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (isRecord && !this.isObjectProperty(prop) && prop.type !== \"SpreadElement\") {\n        this.raise(prop.start, ErrorMessages.InvalidRecordProperty);\n      }\n\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n\n    return this.finishNode(node, type);\n  }\n\n  maybeAsyncOrAccessorProp(prop) {\n    return !prop.computed && prop.key.type === \"Identifier\" && (this.isLiteralPropertyName() || this.match(0) || this.match(51));\n  }\n\n  parsePropertyDefinition(refExpressionErrors) {\n    let decorators = [];\n\n    if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, ErrorMessages.UnsupportedPropertyDecorator);\n      }\n\n      while (this.match(26)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(21)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(51);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(51);\n        this.parsePropertyName(prop);\n      }\n\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n\n        if (this.match(51)) {\n          isGenerator = true;\n          this.raise(this.state.pos, ErrorMessages.AccessorIsGenerator, keyName);\n          this.next();\n        }\n\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, false, isAccessor, refExpressionErrors);\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(method) {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  getObjectOrClassMethodParams(method) {\n    return method.params;\n  }\n\n  checkGetterSetterParams(method) {\n    var _params;\n\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, ErrorMessages.BadGetterArity);\n      } else {\n        this.raise(start, ErrorMessages.BadSetterArity);\n      }\n    }\n\n    if (method.kind === \"set\" && ((_params = params[params.length - 1]) == null ? void 0 : _params.type) === \"RestElement\") {\n      this.raise(start, ErrorMessages.BadSetterRestParameter);\n    }\n  }\n\n  parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) {\n    if (isAccessor) {\n      this.parseMethod(prop, isGenerator, false, false, false, \"ObjectMethod\");\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(10)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(prop, isGenerator, isAsync, false, false, \"ObjectMethod\");\n    }\n  }\n\n  parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors) {\n    prop.shorthand = false;\n\n    if (this.eat(14)) {\n      prop.value = isPattern ? this.parseMaybeDefault(this.state.start, this.state.startLoc) : this.parseMaybeAssignAllowIn(refExpressionErrors);\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else if (this.match(29)) {\n        const shorthandAssign = this.state.start;\n\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssign === -1) {\n            refExpressionErrors.shorthandAssign = shorthandAssign;\n          }\n        } else {\n          this.raise(shorthandAssign, ErrorMessages.InvalidCoverInitializedName);\n        }\n\n        prop.value = this.parseMaybeDefault(startPos, startLoc, cloneIdentifier(prop.key));\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n\n      prop.shorthand = true;\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(prop, startPos, startLoc, isGenerator, isAsync, isPattern, isAccessor, refExpressionErrors) {\n    const node = this.parseObjectMethod(prop, isGenerator, isAsync, isPattern, isAccessor) || this.parseObjectProperty(prop, startPos, startLoc, isPattern, refExpressionErrors);\n    if (!node) this.unexpected();\n    return node;\n  }\n\n  parsePropertyName(prop) {\n    if (this.eat(0)) {\n      prop.computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(3);\n    } else {\n      const {\n        type,\n        value\n      } = this.state;\n      let key;\n\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case 126:\n            key = this.parseNumericLiteral(value);\n            break;\n\n          case 125:\n            key = this.parseStringLiteral(value);\n            break;\n\n          case 127:\n            key = this.parseBigIntLiteral(value);\n            break;\n\n          case 128:\n            key = this.parseDecimalLiteral(value);\n            break;\n\n          case 130:\n            {\n              const privateKeyPos = this.state.start + 1;\n              this.raise(privateKeyPos, ErrorMessages.UnexpectedPrivateField);\n              key = this.parsePrivateName();\n              break;\n            }\n\n          default:\n            throw this.unexpected();\n        }\n      }\n\n      prop.key = key;\n\n      if (type !== 130) {\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  initFunction(node, isAsync) {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  parseMethod(node, isGenerator, isAsync, isConstructor, allowDirectSuper, type) {\n    let inClassScope = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : false;\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor;\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_SUPER | (inClassScope ? SCOPE_CLASS : 0) | (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0));\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams(node, allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    return node;\n  }\n\n  parseArrayLike(close, canBePattern, isTuple, refExpressionErrors) {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(close, !isTuple, refExpressionErrors, node);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(node, isTuple ? \"TupleExpression\" : \"ArrayExpression\");\n  }\n\n  parseArrowExpression(node, params, isAsync, trailingCommaPos) {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n\n    if (!this.match(0) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(node, params, trailingCommaPos) {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(node, type) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  parseFunctionBody(node, allowExpression) {\n    let isMethod = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isExpression = allowExpression && !this.match(5);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(true, false, hasStrictModeDirective => {\n        const nonSimple = !this.isSimpleParamList(node.params);\n\n        if (hasStrictModeDirective && nonSimple) {\n          const errorPos = (node.kind === \"method\" || node.kind === \"constructor\") && !!node.key ? node.key.end : node.start;\n          this.raise(errorPos, ErrorMessages.IllegalLanguageModeDirective);\n        }\n\n        const strictModeChanged = !oldStrict && this.state.strict;\n        this.checkParams(node, !this.state.strict && !allowExpression && !isMethod && !nonSimple, allowExpression, strictModeChanged);\n\n        if (this.state.strict && node.id) {\n          this.checkLVal(node.id, \"function name\", BIND_OUTSIDE, undefined, undefined, strictModeChanged);\n        }\n      });\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n\n    this.expressionScope.exit();\n  }\n\n  isSimpleParamList(params) {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n\n    return true;\n  }\n\n  checkParams(node, allowDuplicates, isArrowFunction) {\n    let strictModeChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n    const checkClashes = new Set();\n\n    for (const param of node.params) {\n      this.checkLVal(param, \"function parameter list\", BIND_VAR, allowDuplicates ? null : checkClashes, undefined, strictModeChanged);\n    }\n  }\n\n  parseExprList(close, allowEmpty, refExpressionErrors, nodeForExtra) {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(nodeForExtra, \"trailingComma\", this.state.lastTokStart);\n          }\n\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n\n    return elts;\n  }\n\n  parseExprListItem(allowEmpty, refExpressionErrors, allowPlaceholder) {\n    let elt;\n\n    if (this.match(12)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, ErrorMessages.UnexpectedToken, \",\");\n      }\n\n      elt = null;\n    } else if (this.match(21)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n      elt = this.parseParenItem(this.parseSpread(refExpressionErrors), spreadNodeStartPos, spreadNodeStartLoc);\n    } else if (this.match(17)) {\n      this.expectPlugin(\"partialApplication\");\n\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, ErrorMessages.UnexpectedArgumentPlaceholder);\n      }\n\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(refExpressionErrors, this.parseParenItem);\n    }\n\n    return elt;\n  }\n\n  parseIdentifier(liberal) {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node, name) {\n    node.name = name;\n    node.loc.identifierName = name;\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos, liberal) {\n    let name;\n    const {\n      start,\n      type\n    } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      if (tokenIsKeyword) {\n        this.replaceToken(124);\n      }\n    } else {\n      this.checkReservedWord(name, start, tokenIsKeyword, false);\n    }\n\n    this.next();\n    return name;\n  }\n\n  checkReservedWord(word, startLoc, checkKeywords, isBinding) {\n    if (word.length > 10) {\n      return;\n    }\n\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, ErrorMessages.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, ErrorMessages.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(startLoc, ErrorMessages.AwaitBindingIdentifier);\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, ErrorMessages.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict ? isReservedWord : isBinding ? isStrictBindReservedWord : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, ErrorMessages.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed() {\n    if (this.prodParam.hasAwait) return true;\n\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n\n    return false;\n  }\n\n  parseAwait(startPos, startLoc) {\n    const node = this.startNodeAt(startPos, startLoc);\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.AwaitExpressionFormalParameter);\n\n    if (this.eat(51)) {\n      this.raise(node.start, ErrorMessages.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait() {\n    if (this.hasPrecedingLineBreak()) return true;\n    const {\n      type\n    } = this.state;\n    return type === 49 || type === 10 || type === 0 || tokenIsTemplate(type) || type === 129 || type === 52 || this.hasPlugin(\"v8intrinsic\") && type === 50;\n  }\n\n  parseYield() {\n    const node = this.startNode();\n    this.expressionScope.recordParameterInitializerError(node.start, ErrorMessages.YieldInParameter);\n    this.next();\n    let delegating = false;\n    let argument = null;\n\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(51);\n\n      switch (this.state.type) {\n        case 13:\n        case 131:\n        case 8:\n        case 11:\n        case 3:\n        case 9:\n        case 14:\n        case 12:\n          if (!delegating) break;\n\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  checkPipelineAtInfixOperator(left, leftStartPos) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      if (left.type === \"SequenceExpression\") {\n        this.raise(leftStartPos, ErrorMessages.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  checkHackPipeBodyEarlyErrors(startPos) {\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipeTopicUnused);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(childExpr, startPos, startLoc) {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression) {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return !expression.computed && this.isSimpleReference(expression.object);\n\n      case \"Identifier\":\n        return true;\n\n      default:\n        return false;\n    }\n  }\n\n  checkSmartPipeTopicBodyEarlyErrors(startPos) {\n    if (this.match(19)) {\n      throw this.raise(this.state.start, ErrorMessages.PipelineBodyNoArrow);\n    } else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, ErrorMessages.PipelineTopicUnused);\n    }\n  }\n\n  withTopicBindingContext(callback) {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      maxNumOfResolvableTopics: 1,\n      maxTopicIndex: null\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  withSmartMixTopicForbiddingContext(callback) {\n    if (this.hasPlugin([\"pipelineOperator\", {\n      proposal: \"smart\"\n    }])) {\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        maxNumOfResolvableTopics: 0,\n        maxTopicIndex: null\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext(callback) {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  disallowInAnd(callback) {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n\n    return callback();\n  }\n\n  registerTopicReference() {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext() {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext() {\n    return this.state.topicContext.maxTopicIndex != null && this.state.topicContext.maxTopicIndex >= 0;\n  }\n\n  parseFSharpPipelineBody(prec) {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n    const ret = this.parseExprOp(this.parseMaybeUnaryOrPrivate(), startPos, startLoc, prec);\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return ret;\n  }\n\n  parseModuleExpression() {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode();\n    this.next();\n    this.eat(5);\n    const revertScopes = this.initializeScopes(true);\n    this.enterInitialScopes();\n    const program = this.startNode();\n\n    try {\n      node.body = this.parseProgram(program, 8, \"module\");\n    } finally {\n      revertScopes();\n    }\n\n    this.eat(8);\n    return this.finishNode(node, \"ModuleExpression\");\n  }\n\n  parsePropertyNamePrefixOperator(prop) {}\n\n}\n\nconst loopLabel = {\n  kind: \"loop\"\n},\n      switchLabel = {\n  kind: \"switch\"\n};\nconst FUNC_NO_FLAGS = 0b000,\n      FUNC_STATEMENT = 0b001,\n      FUNC_HANGING_STATEMENT = 0b010,\n      FUNC_NULLABLE_ID = 0b100;\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const {\n      type\n    } = token;\n\n    if (typeof type === \"number\") {\n      {\n        if (type === 130) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(i, 1, new Token({\n            type: getExportedToken(27),\n            value: \"#\",\n            start: start,\n            end: hashEndPos,\n            startLoc: loc.start,\n            endLoc: hashEndLoc\n          }), new Token({\n            type: getExportedToken(124),\n            value: value,\n            start: hashEndPos,\n            end: end,\n            startLoc: hashEndLoc,\n            endLoc: loc.end\n          }));\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const {\n            loc,\n            start,\n            value,\n            end\n          } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n\n          if (input.charCodeAt(start) === 96) {\n            startToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          } else {\n            startToken = new Token({\n              type: getExportedToken(8),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc\n            });\n          }\n\n          let templateValue, templateElementEnd, templateElementEndLoc, endToken;\n\n          if (type === 24) {\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            endToken = new Token({\n              type: getExportedToken(22),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          } else {\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            endToken = new Token({\n              type: getExportedToken(23),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end\n            });\n          }\n\n          tokens.splice(i, 1, startToken, new Token({\n            type: getExportedToken(20),\n            value: templateValue,\n            start: backquoteEnd,\n            end: templateElementEnd,\n            startLoc: backquoteEndLoc,\n            endLoc: templateElementEndLoc\n          }), endToken);\n          i += 2;\n          continue;\n        }\n      }\n      token.type = getExportedToken(type);\n    }\n  }\n\n  return tokens;\n}\n\nclass StatementParser extends ExpressionParser {\n  parseTopLevel(file, program) {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(program) {\n    let end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 131;\n    let sourceType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : this.options.sourceType;\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n\n    if (this.inModule && !this.options.allowUndeclaredExports && this.scope.undefinedExports.size > 0) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        this.raise(pos, ErrorMessages.ModuleExportUndefined, name);\n      }\n    }\n\n    return this.finishNode(program, \"Program\");\n  }\n\n  stmtToDirective(stmt) {\n    const directive = stmt;\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = directiveLiteral.value = raw.slice(1, -1);\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n    directiveLiteral.type = \"DirectiveLiteral\";\n    return directive;\n  }\n\n  parseInterpreterDirective() {\n    if (!this.match(28)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context) {\n    if (!this.isContextual(95)) {\n      return false;\n    }\n\n    return this.isLetKeyword(context);\n  }\n\n  isLetKeyword(context) {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n\n    if (nextCh === 92 || nextCh === 91) {\n      return true;\n    }\n\n    if (context) return false;\n    if (nextCh === 123) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n\n      if (keywordRelationalOperator.test(this.input)) {\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n\n        if (!isIdentifierChar(endCh) && endCh !== 92) {\n          return false;\n        }\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  parseStatement(context, topLevel) {\n    if (this.match(26)) {\n      this.parseDecorators(true);\n    }\n\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context, topLevel) {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = 70;\n      kind = \"let\";\n    }\n\n    switch (starttype) {\n      case 56:\n        return this.parseBreakContinueStatement(node, true);\n\n      case 59:\n        return this.parseBreakContinueStatement(node, false);\n\n      case 60:\n        return this.parseDebuggerStatement(node);\n\n      case 86:\n        return this.parseDoStatement(node);\n\n      case 87:\n        return this.parseForStatement(node);\n\n      case 64:\n        if (this.lookaheadCharCode() === 46) break;\n\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, ErrorMessages.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, ErrorMessages.SloppyFunction);\n          }\n        }\n\n        return this.parseFunctionStatement(node, false, !context);\n\n      case 76:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case 65:\n        return this.parseIfStatement(node);\n\n      case 66:\n        return this.parseReturnStatement(node);\n\n      case 67:\n        return this.parseSwitchStatement(node);\n\n      case 68:\n        return this.parseThrowStatement(node);\n\n      case 69:\n        return this.parseTryStatement(node);\n\n      case 71:\n      case 70:\n        kind = kind || this.state.value;\n\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, ErrorMessages.UnexpectedLexicalDeclaration);\n        }\n\n        return this.parseVarStatement(node, kind);\n\n      case 88:\n        return this.parseWhileStatement(node);\n\n      case 72:\n        return this.parseWithStatement(node);\n\n      case 5:\n        return this.parseBlock();\n\n      case 13:\n        return this.parseEmptyStatement(node);\n\n      case 79:\n        {\n          const nextTokenCharCode = this.lookaheadCharCode();\n\n          if (nextTokenCharCode === 40 || nextTokenCharCode === 46) {\n            break;\n          }\n        }\n\n      case 78:\n        {\n          if (!this.options.allowImportExportEverywhere && !topLevel) {\n            this.raise(this.state.start, ErrorMessages.UnexpectedImportExport);\n          }\n\n          this.next();\n          let result;\n\n          if (starttype === 79) {\n            result = this.parseImport(node);\n\n            if (result.type === \"ImportDeclaration\" && (!result.importKind || result.importKind === \"value\")) {\n              this.sawUnambiguousESM = true;\n            }\n          } else {\n            result = this.parseExport(node);\n\n            if (result.type === \"ExportNamedDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportAllDeclaration\" && (!result.exportKind || result.exportKind === \"value\") || result.type === \"ExportDefaultDeclaration\") {\n              this.sawUnambiguousESM = true;\n            }\n          }\n\n          this.assertModuleNodeAllowed(node);\n          return result;\n        }\n\n      default:\n        {\n          if (this.isAsyncFunction()) {\n            if (context) {\n              this.raise(this.state.start, ErrorMessages.AsyncFunctionInSingleStatementContext);\n            }\n\n            this.next();\n            return this.parseFunctionStatement(node, true, !context);\n          }\n        }\n    }\n\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (tokenIsIdentifier(starttype) && expr.type === \"Identifier\" && this.eat(14)) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node) {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrorMessages.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node) {\n    const decorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator() {\n    return this.match(76);\n  }\n\n  parseDecorators(allowExport) {\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    while (this.match(26)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(78)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (this.hasPlugin(\"decorators\") && !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, ErrorMessages.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator() {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      this.state.decoratorStack.push([]);\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr;\n\n      if (this.eat(10)) {\n        expr = this.parseExpression();\n        this.expect(11);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(16)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr) {\n    if (this.eat(10)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(11, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(node, isBreak) {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n    return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\");\n  }\n\n  verifyBreakContinue(node, isBreak) {\n    let i;\n\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n\n    if (i === this.state.labels.length) {\n      this.raise(node.start, ErrorMessages.IllegalBreakContinue, isBreak ? \"break\" : \"continue\");\n    }\n  }\n\n  parseDebuggerStatement(node) {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression() {\n    this.expect(10);\n    const val = this.parseExpression();\n    this.expect(11);\n    return val;\n  }\n\n  parseDoStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"do\"));\n    this.state.labels.pop();\n    this.expect(88);\n    node.test = this.parseHeaderExpression();\n    this.eat(13);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  parseForStatement(node) {\n    this.next();\n    this.state.labels.push(loopLabel);\n    let awaitAt = -1;\n\n    if (this.isAwaitAllowed() && this.eatContextual(92)) {\n      awaitAt = this.state.lastTokStart;\n    }\n\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(10);\n\n    if (this.match(13)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(95);\n    const isLet = startsWithLet && this.isLetKeyword();\n\n    if (this.match(70) || this.match(71) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if ((this.match(54) || this.isContextual(97)) && init.declarations.length === 1) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n\n      return this.parseFor(node, init);\n    }\n\n    const startsWithAsync = this.isContextual(91);\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(97);\n\n    if (isForOf) {\n      if (startsWithLet) {\n        this.raise(init.start, ErrorMessages.ForOfLet);\n      } else if (awaitAt === -1 && startsWithAsync && init.type === \"Identifier\") {\n        this.raise(init.start, ErrorMessages.ForOfAsync);\n      }\n    }\n\n    if (isForOf || this.match(54)) {\n      this.toAssignable(init, true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(node, isAsync, declarationPosition) {\n    this.next();\n    return this.parseFunction(node, FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT), isAsync);\n  }\n\n  parseIfStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(62) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node) {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, ErrorMessages.IllegalReturn);\n    }\n\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node) {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = node.cases = [];\n    this.expect(5);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n    let cur;\n\n    for (let sawDefault; !this.match(8);) {\n      if (this.match(57) || this.match(61)) {\n        const isCase = this.match(57);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push(cur = this.startNode());\n        cur.consequent = [];\n        this.next();\n\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(this.state.lastTokStart, ErrorMessages.MultipleDefaultsInSwitch);\n          }\n\n          sawDefault = true;\n          cur.test = null;\n        }\n\n        this.expect(14);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next();\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node) {\n    this.next();\n\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, ErrorMessages.NewlineAfterThrow);\n    }\n\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam() {\n    const param = this.parseBindingAtom();\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n    return param;\n  }\n\n  parseTryStatement(node) {\n    this.next();\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(58)) {\n      const clause = this.startNode();\n      this.next();\n\n      if (this.match(10)) {\n        this.expect(10);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(11);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      clause.body = this.withSmartMixTopicForbiddingContext(() => this.parseBlock(false, false));\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(63) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, ErrorMessages.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(node, kind) {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node) {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"while\"));\n    this.state.labels.pop();\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node) {\n    if (this.state.strict) {\n      this.raise(this.state.start, ErrorMessages.StrictWith);\n    }\n\n    this.next();\n    node.object = this.parseHeaderExpression();\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"with\"));\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node) {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(node, maybeName, expr, context) {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, ErrorMessages.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type) ? \"loop\" : this.match(67) ? \"switch\" : null;\n\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start\n    });\n    node.body = this.parseStatement(context ? context.indexOf(\"label\") === -1 ? context + \"label\" : context : \"label\");\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(node, expr) {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  parseBlock() {\n    let allowDirectives = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    let createNewLexicalScope = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    let afterBlockParse = arguments.length > 2 ? arguments[2] : undefined;\n    const node = this.startNode();\n\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n\n    this.expect(5);\n\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n\n    this.parseBlockBody(node, allowDirectives, false, 8, afterBlockParse);\n\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt) {\n    return stmt.type === \"ExpressionStatement\" && stmt.expression.type === \"StringLiteral\" && !stmt.expression.extra.parenthesized;\n  }\n\n  parseBlockBody(node, allowDirectives, topLevel, end, afterBlockParse) {\n    const body = node.body = [];\n    const directives = node.directives = [];\n    this.parseBlockOrModuleBlockBody(body, allowDirectives ? directives : undefined, topLevel, end, afterBlockParse);\n  }\n\n  parseBlockOrModuleBlockBody(body, directives, topLevel, end, afterBlockParse) {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (!hasStrictModeDirective && directive.value.value === \"use strict\") {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n\n        parsedNonDirective = true;\n        this.state.strictErrors.clear();\n      }\n\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  parseFor(node, init) {\n    node.init = init;\n    this.semicolon(false);\n    node.test = this.match(13) ? null : this.parseExpression();\n    this.semicolon(false);\n    node.update = this.match(11) ? null : this.parseExpression();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  parseForIn(node, init, awaitAt) {\n    const isForIn = this.match(54);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (init.type === \"VariableDeclaration\" && init.declarations[0].init != null && (!isForIn || this.state.strict || init.kind !== \"var\" || init.declarations[0].id.type !== \"Identifier\")) {\n      this.raise(init.start, ErrorMessages.ForInOfLoopInitializer, isForIn ? \"for-in\" : \"for-of\");\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, ErrorMessages.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn ? this.parseExpression() : this.parseMaybeAssignAllowIn();\n    this.expect(11);\n    node.body = this.withSmartMixTopicForbiddingContext(() => this.parseStatement(\"for\"));\n    this.scope.exit();\n    this.state.labels.pop();\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  parseVar(node, isFor, kind) {\n    const declarations = node.declarations = [];\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n\n      if (this.eat(29)) {\n        decl.init = isFor ? this.parseMaybeAssignDisallowIn() : this.parseMaybeAssignAllowIn();\n      } else {\n        if (kind === \"const\" && !(this.match(54) || this.isContextual(97))) {\n          if (!isTypescript) {\n            this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Const declarations\");\n          }\n        } else if (decl.id.type !== \"Identifier\" && !(isFor && (this.match(54) || this.isContextual(97)))) {\n          this.raise(this.state.lastTokEnd, ErrorMessages.DeclarationMissingInitializer, \"Complex binding patterns\");\n        }\n\n        decl.init = null;\n      }\n\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(12)) break;\n    }\n\n    return node;\n  }\n\n  parseVarId(decl, kind) {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(decl.id, \"variable declaration\", kind === \"var\" ? BIND_VAR : BIND_LEXICAL, undefined, kind !== \"var\");\n  }\n\n  parseFunction(node) {\n    let statement = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : FUNC_NO_FLAGS;\n    let isAsync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n    this.initFunction(node, isAsync);\n\n    if (this.match(51) && isHangingStatement) {\n      this.raise(this.state.start, ErrorMessages.GeneratorInSingleStatementContext);\n    }\n\n    node.generator = this.eat(51);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, false);\n    this.withSmartMixTopicForbiddingContext(() => {\n      this.parseFunctionBodyAndFinish(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\");\n    });\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId) {\n    return requireId || tokenIsIdentifier(this.state.type) ? this.parseIdentifier() : null;\n  }\n\n  parseFunctionParams(node, allowModifiers) {\n    this.expect(10);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(11, 41, false, allowModifiers);\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node) {\n    if (!node.id) return;\n    this.scope.declareName(node.id.name, this.state.strict || node.generator || node.async ? this.scope.treatFunctionsAsVar ? BIND_VAR : BIND_LEXICAL : BIND_FUNCTION, node.id.start);\n  }\n\n  parseClass(node, isStatement, optionalId) {\n    this.next();\n    this.takeDecorators(node);\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n    return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\");\n  }\n\n  isClassProperty() {\n    return this.match(29) || this.match(13) || this.match(8);\n  }\n\n  isClassMethod() {\n    return this.match(10);\n  }\n\n  isNonstaticConstructor(method) {\n    return !method.computed && !method.static && (method.key.name === \"constructor\" || method.key.value === \"constructor\");\n  }\n\n  parseClassBody(hadSuperClass, oldStrict) {\n    this.classScope.enter();\n    const state = {\n      hadConstructor: false,\n      hadSuperClass\n    };\n    let decorators = [];\n    const classBody = this.startNode();\n    classBody.body = [];\n    this.expect(5);\n    this.withSmartMixTopicForbiddingContext(() => {\n      while (!this.match(8)) {\n        if (this.eat(13)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, ErrorMessages.DecoratorSemicolon);\n          }\n\n          continue;\n        }\n\n        if (this.match(26)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (member.kind === \"constructor\" && member.decorators && member.decorators.length > 0) {\n          this.raise(member.start, ErrorMessages.DecoratorConstructor);\n        }\n      }\n    });\n    this.state.strict = oldStrict;\n    this.next();\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, ErrorMessages.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  parseClassMemberFromModifier(classBody, member) {\n    const key = this.parseIdentifier(true);\n\n    if (this.isClassMethod()) {\n      const method = member;\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(classBody, method, false, false, false, false);\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop = member;\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(classBody, member, state) {\n    const isStatic = this.isContextual(100);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        return;\n      }\n\n      if (this.eat(5)) {\n        this.parseClassStaticBlock(classBody, member);\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(classBody, member, state, isStatic) {\n    const publicMethod = member;\n    const privateMethod = member;\n    const publicProp = member;\n    const privateProp = member;\n    const method = publicMethod;\n    const publicMember = publicMethod;\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(51)) {\n      method.kind = \"method\";\n      const isPrivateName = this.match(130);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(classBody, publicMethod, true, false, false, false);\n      return;\n    }\n\n    const isContextual = tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(130);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, ErrorMessages.DuplicateConstructor);\n        }\n\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, ErrorMessages.OverrideOnConstructor);\n        }\n\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(classBody, publicMethod, false, false, isConstructor, allowsDirectSuper);\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (isContextual && key.name === \"async\" && !this.isLineTerminator()) {\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(51);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      const isPrivate = this.match(130);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, isGenerator, true);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, isGenerator, true, false, false);\n      }\n    } else if (isContextual && (key.name === \"get\" || key.name === \"set\") && !(this.match(51) && this.isLineTerminator())) {\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      const isPrivate = this.match(130);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, ErrorMessages.ConstructorIsAccessor);\n        }\n\n        this.pushClassMethod(classBody, publicMethod, false, false, false, false);\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  parseClassElementName(member) {\n    const {\n      type,\n      value,\n      start\n    } = this.state;\n\n    if ((type === 124 || type === 125) && member.static && value === \"prototype\") {\n      this.raise(start, ErrorMessages.StaticPrototype);\n    }\n\n    if (type === 130) {\n      if (value === \"constructor\") {\n        this.raise(start, ErrorMessages.ConstructorClassPrivateField);\n      }\n\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(classBody, member) {\n    var _member$decorators;\n\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    this.prodParam.enter(PARAM);\n    const body = member.body = [];\n    this.parseBlockOrModuleBlockBody(body, undefined, false, 8);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode(member, \"StaticBlock\"));\n\n    if ((_member$decorators = member.decorators) != null && _member$decorators.length) {\n      this.raise(member.start, ErrorMessages.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody, prop) {\n    if (!prop.computed && (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")) {\n      this.raise(prop.key.start, ErrorMessages.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(classBody, prop) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), CLASS_ELEMENT_OTHER, node.key.start);\n  }\n\n  pushClassMethod(classBody, method, isGenerator, isAsync, isConstructor, allowsDirectSuper) {\n    classBody.body.push(this.parseMethod(method, isGenerator, isAsync, isConstructor, allowsDirectSuper, \"ClassMethod\", true));\n  }\n\n  pushClassPrivateMethod(classBody, method, isGenerator, isAsync) {\n    const node = this.parseMethod(method, isGenerator, isAsync, false, false, \"ClassPrivateMethod\", true);\n    classBody.body.push(node);\n    const kind = node.kind === \"get\" ? node.static ? CLASS_ELEMENT_STATIC_GETTER : CLASS_ELEMENT_INSTANCE_GETTER : node.kind === \"set\" ? node.static ? CLASS_ELEMENT_STATIC_SETTER : CLASS_ELEMENT_INSTANCE_SETTER : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(node, kind) {\n    this.classScope.declarePrivateName(this.getPrivateNameSV(node.key), kind, node.key.start);\n  }\n\n  parsePostMemberNameModifiers(methodOrProp) {}\n\n  parseClassPrivateProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  parseClassProperty(node) {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  parseInitializer(node) {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(29) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(node, isStatement, optionalId) {\n    let bindingType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : BIND_CLASS;\n\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, ErrorMessages.MissingClassName);\n      }\n    }\n  }\n\n  parseClassSuper(node) {\n    node.superClass = this.eat(77) ? this.parseExprSubscripts() : null;\n  }\n\n  parseExport(node) {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(12);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace = hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace = parseAfterDefault && (!hasNamespace || this.eat(12));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers || hasNamespace && parseAfterNamespace && !hasSpecifiers) {\n      throw this.unexpected(null, 5);\n    }\n\n    let hasDeclaration;\n\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(61)) {\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, 5);\n  }\n\n  eatExportStar(node) {\n    return this.eat(51);\n  }\n\n  maybeParseExportDefaultSpecifier(node) {\n    if (this.isExportDefaultSpecifier()) {\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node) {\n    if (this.isContextual(89)) {\n      if (!node.specifiers) node.specifiers = [];\n      const specifier = this.startNodeAt(this.state.lastTokStart, this.state.lastTokStartLoc);\n      this.next();\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(this.finishNode(specifier, \"ExportNamespaceSpecifier\"));\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node) {\n    if (this.match(5)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n      node.source = null;\n      node.declaration = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseExportDeclaration(node) {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n\n    return false;\n  }\n\n  isAsyncFunction() {\n    if (!this.isContextual(91)) return false;\n    const next = this.nextTokenStart();\n    return !lineBreak.test(this.input.slice(this.state.pos, next)) && this.isUnparsedContextual(next, \"function\");\n  }\n\n  parseExportDefaultExpression() {\n    const expr = this.startNode();\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(64) || isAsync) {\n      this.next();\n\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(expr, FUNC_STATEMENT | FUNC_NULLABLE_ID, isAsync);\n    } else if (this.match(76)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(26)) {\n      if (this.hasPlugin(\"decorators\") && this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n        this.raise(this.state.start, ErrorMessages.DecoratorBeforeExport);\n      }\n\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(71) || this.match(70) || this.isLet()) {\n      throw this.raise(this.state.start, ErrorMessages.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  parseExportDeclaration(node) {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier() {\n    const {\n      type\n    } = this.state;\n\n    if (tokenIsIdentifier(type)) {\n      if (type === 91 && !this.state.containsEsc || type === 95) {\n        return false;\n      }\n\n      if ((type === 122 || type === 121) && !this.state.containsEsc) {\n        const {\n          type: nextType\n        } = this.lookahead();\n\n        if (tokenIsIdentifier(nextType) && nextType !== 93 || nextType === 5) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(61)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n\n    if (this.input.charCodeAt(next) === 44 || tokenIsIdentifier(this.state.type) && hasFrom) {\n      return true;\n    }\n\n    if (this.match(61) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(this.nextTokenStartSince(next + 4));\n      return nextAfterFrom === 34 || nextAfterFrom === 39;\n    }\n\n    return false;\n  }\n\n  parseExportFrom(node, expect) {\n    if (this.eatContextual(93)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration() {\n    const {\n      type\n    } = this.state;\n\n    if (type === 26) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, ErrorMessages.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return type === 70 || type === 71 || type === 64 || type === 76 || this.isLet() || this.isAsyncFunction();\n  }\n\n  checkExport(node, checkNames, isDefault, isFrom) {\n    if (checkNames) {\n      if (isDefault) {\n        this.checkDuplicateExports(node, \"default\");\n\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          var _declaration$extra;\n\n          const declaration = node.declaration;\n\n          if (declaration.type === \"Identifier\" && declaration.name === \"from\" && declaration.end - declaration.start === 4 && !((_declaration$extra = declaration.extra) != null && _declaration$extra.parenthesized)) {\n            this.raise(declaration.start, ErrorMessages.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        for (const specifier of node.specifiers) {\n          const {\n            exported\n          } = specifier;\n          const exportedName = exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n\n          if (!isFrom && specifier.local) {\n            const {\n              local\n            } = specifier;\n\n            if (local.type !== \"Identifier\") {\n              this.raise(specifier.start, ErrorMessages.ExportBindingIsString, local.value, exportedName);\n            } else {\n              this.checkReservedWord(local.name, local.start, true, false);\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        if (node.declaration.type === \"FunctionDeclaration\" || node.declaration.type === \"ClassDeclaration\") {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators = this.state.decoratorStack[this.state.decoratorStack.length - 1];\n\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, ErrorMessages.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node) {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(node, name) {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(node.start, name === \"default\" ? ErrorMessages.DuplicateDefaultExport : ErrorMessages.DuplicateExport, name);\n    }\n\n    this.exportedIdentifiers.add(name);\n  }\n\n  parseExportSpecifiers(isInTypeExport) {\n    const nodes = [];\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const isMaybeTypeOnly = this.isContextual(122);\n      const isString = this.match(125);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(this.parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly));\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(node, isString, isInTypeExport, isMaybeTypeOnly) {\n    if (this.eatContextual(89)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n\n    return this.finishNode(node, \"ExportSpecifier\");\n  }\n\n  parseModuleExportName() {\n    if (this.match(125)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n\n      if (surrogate) {\n        this.raise(result.start, ErrorMessages.ModuleExportNameHasLoneSurrogate, surrogate[0].charCodeAt(0).toString(16));\n      }\n\n      return result;\n    }\n\n    return this.parseIdentifier(true);\n  }\n\n  parseImport(node) {\n    node.specifiers = [];\n\n    if (!this.match(125)) {\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      const parseNext = !hasDefault || this.eat(12);\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(93);\n    }\n\n    node.source = this.parseImportSource();\n    const assertions = this.maybeParseImportAssertions();\n\n    if (assertions) {\n      node.assertions = assertions;\n    } else {\n      const attributes = this.maybeParseModuleAttributes();\n\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource() {\n    if (!this.match(125)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  shouldParseDefaultImport(node) {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(node, specifier, type, contextDescription) {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  parseAssertEntries() {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(8)) {\n        break;\n      }\n\n      const node = this.startNode();\n      const keyName = this.state.value;\n\n      if (attrNames.has(keyName)) {\n        this.raise(this.state.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, keyName);\n      }\n\n      attrNames.add(keyName);\n\n      if (this.match(125)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n\n      this.expect(14);\n\n      if (!this.match(125)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseModuleAttributes() {\n    if (this.match(72) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n\n    const attrs = [];\n    const attributes = new Set();\n\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributeDifferentFromType, node.key.name);\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(node.key.start, ErrorMessages.ModuleAttributesWithDuplicateKeys, node.key.name);\n      }\n\n      attributes.add(node.key.name);\n      this.expect(14);\n\n      if (!this.match(125)) {\n        throw this.unexpected(this.state.start, ErrorMessages.ModuleAttributeInvalidValue);\n      }\n\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(12));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    if (this.isContextual(90) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n\n    this.eat(5);\n    const attrs = this.parseAssertEntries();\n    this.eat(8);\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node) {\n    if (this.shouldParseDefaultImport(node)) {\n      this.parseImportSpecifierLocal(node, this.startNode(), \"ImportDefaultSpecifier\", \"default import specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node) {\n    if (this.match(51)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(89);\n      this.parseImportSpecifierLocal(node, specifier, \"ImportNamespaceSpecifier\", \"import namespace specifier\");\n      return true;\n    }\n\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node) {\n    let first = true;\n    this.expect(5);\n\n    while (!this.eat(8)) {\n      if (first) {\n        first = false;\n      } else {\n        if (this.eat(14)) {\n          throw this.raise(this.state.start, ErrorMessages.DestructureNamedImport);\n        }\n\n        this.expect(12);\n        if (this.eat(8)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(125);\n      const isMaybeTypeOnly = this.isContextual(122);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(specifier, importedIsString, node.importKind === \"type\" || node.importKind === \"typeof\", isMaybeTypeOnly);\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  parseImportSpecifier(specifier, importedIsString, isInTypeOnlyImport, isMaybeTypeOnly) {\n    if (this.eatContextual(89)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const {\n        imported\n      } = specifier;\n\n      if (importedIsString) {\n        throw this.raise(specifier.start, ErrorMessages.ImportBindingIsString, imported.value);\n      }\n\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  isThisParam(param) {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n\n}\n\nclass Parser extends StatementParser {\n  constructor(options, input) {\n    options = getOptions(options);\n    super(options, input);\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  getScopeHandler() {\n    return ScopeHandler;\n  }\n\n  parse() {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n\n}\n\nfunction pluginsMap(plugins) {\n  const pluginMap = new Map();\n\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n\n  return pluginMap;\n}\n\nfunction parse(input, options) {\n  var _options;\n\n  if (((_options = options) == null ? void 0 : _options.sourceType) === \"unambiguous\") {\n    options = Object.assign({}, options);\n\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch (_unused) {}\n      } else {\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch (_unused2) {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nfunction parseExpression(input, options) {\n  const parser = getParser(options, input);\n\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n\n  return tokenTypes;\n}\n\nconst tokTypes = generateExportedTokenTypes(tt);\n\nfunction getParser(options, input) {\n  let cls = Parser;\n\n  if (options != null && options.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache = {};\n\nfunction getParserClass(pluginsFromOptions) {\n  const pluginList = mixinPluginNames.filter(name => hasPlugin(pluginsFromOptions, name));\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n\n  if (!cls) {\n    cls = Parser;\n\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n\n    parserClassCache[key] = cls;\n  }\n\n  return cls;\n}\n\nexports.parse = parse;\nexports.parseExpression = parseExpression;\nexports.tokTypes = tokTypes;","map":{"version":3,"sources":["C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\util\\whitespace.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\util\\location.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\parser\\base.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\parser\\comments.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\parser\\error-codes.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\parser\\error-message.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\parser\\error.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\plugins\\estree.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\tokenizer\\context.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\tokenizer\\types.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\babel-helper-validator-identifier\\src\\identifier.ts","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\babel-helper-validator-identifier\\src\\keyword.ts","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\util\\identifier.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\util\\scopeflags.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\util\\scope.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\plugins\\flow\\scope.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\tokenizer\\state.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\tokenizer\\index.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\util\\class-scope.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\util\\expression-scope.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\util\\production-parameter.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\parser\\util.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\parser\\node.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\plugins\\flow\\index.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\plugins\\jsx\\xhtml.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\plugins\\jsx\\index.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\plugins\\typescript\\scope.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\plugins\\typescript\\index.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\plugins\\placeholders.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\plugins\\v8intrinsic.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\plugin-utils.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\options.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\parser\\lval.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\parser\\expression.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\parser\\statement.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\parser\\index.js","C:\\Users\\rahma\\Desktop\\Projects\\Python\\website\\personal-website\\frontend\\app\\node_modules\\@babel\\parser\\src\\index.js"],"names":["lineBreak","lineBreakG","skipWhiteSpace","skipWhiteSpaceInLine","skipWhiteSpaceToLineBreak","line","column","constructor","start","end","filename","identifierName","lineStart","match","offset","hasPlugin","actualOptions","Object","pluginOptions","getPluginOption","node","lastElement","i","elements","commentWS","setInnerComments","setTrailingComments","addComment","comment","processComment","commentStack","commentStackLength","lastCommentWS","nodeStart","commentEnd","finalizeComment","comments","setLeadingComments","containingNode","commentStart","adjustInnerComments","finalizeRemainingComments","resetPreviousNodeTrailingComments","length","takeSurroundingComments","ErrorCodes","SyntaxError","SourceTypeModuleError","ErrorMessages","makeErrorTemplates","AccessorIsGenerator","ArgumentsInClass","AsyncFunctionInSingleStatementContext","AwaitBindingIdentifier","AwaitBindingIdentifierInStaticBlock","AwaitExpressionFormalParameter","AwaitNotInAsyncContext","AwaitNotInAsyncFunction","BadGetterArity","BadSetterArity","BadSetterRestParameter","ConstructorClassField","ConstructorClassPrivateField","ConstructorIsAccessor","ConstructorIsAsync","ConstructorIsGenerator","DeclarationMissingInitializer","DecoratorBeforeExport","DecoratorConstructor","DecoratorExportClass","DecoratorSemicolon","DecoratorStaticBlock","DeletePrivateField","DestructureNamedImport","DuplicateConstructor","DuplicateDefaultExport","DuplicateExport","DuplicateProto","DuplicateRegExpFlags","ElementAfterRest","EscapedCharNotAnIdentifier","ExportBindingIsString","ExportDefaultFromAsIdentifier","ForInOfLoopInitializer","ForOfAsync","ForOfLet","GeneratorInSingleStatementContext","IllegalBreakContinue","IllegalLanguageModeDirective","IllegalReturn","ImportBindingIsString","ImportCallArgumentTrailingComma","ImportCallArity","ImportCallNotNewExpression","ImportCallSpreadArgument","InvalidBigIntLiteral","InvalidCodePoint","InvalidCoverInitializedName","InvalidDecimal","InvalidDigit","InvalidEscapeSequence","InvalidEscapeSequenceTemplate","InvalidEscapedReservedWord","InvalidIdentifier","InvalidLhs","InvalidLhsBinding","InvalidNumber","InvalidOrMissingExponent","InvalidOrUnexpectedToken","InvalidParenthesizedAssignment","InvalidPrivateFieldResolution","InvalidPropertyBindingPattern","InvalidRecordProperty","InvalidRestAssignmentPattern","LabelRedeclaration","LetInLexicalBinding","LineTerminatorBeforeArrow","MalformedRegExpFlags","MissingClassName","MissingEqInAssignment","MissingSemicolon","MissingUnicodeEscape","MixingCoalesceWithLogical","ModuleAttributeDifferentFromType","ModuleAttributeInvalidValue","ModuleAttributesWithDuplicateKeys","ModuleExportNameHasLoneSurrogate","ModuleExportUndefined","MultipleDefaultsInSwitch","NewlineAfterThrow","NoCatchOrFinally","NumberIdentifier","NumericSeparatorInEscapeSequence","ObsoleteAwaitStar","OptionalChainingNoNew","OptionalChainingNoTemplate","OverrideOnConstructor","ParamDupe","PatternHasAccessor","PatternHasMethod","PipeBodyIsTighter","PipeTopicRequiresHackPipes","PipeTopicUnbound","PipeTopicUnconfiguredToken","PipeTopicUnused","PipeUnparenthesizedBody","PipelineBodyNoArrow","PipelineBodySequenceExpression","PipelineHeadSequenceExpression","PipelineTopicUnused","PrimaryTopicNotAllowed","PrimaryTopicRequiresSmartPipeline","PrivateInExpectedIn","PrivateNameRedeclaration","RecordExpressionBarIncorrectEndSyntaxType","RecordExpressionBarIncorrectStartSyntaxType","RecordExpressionHashIncorrectStartSyntaxType","RecordNoProto","RestTrailingComma","SloppyFunction","StaticPrototype","StrictDelete","StrictEvalArguments","StrictEvalArgumentsBinding","StrictFunction","StrictNumericEscape","StrictOctalLiteral","StrictWith","SuperNotAllowed","SuperPrivateField","TrailingDecorator","TupleExpressionBarIncorrectEndSyntaxType","TupleExpressionBarIncorrectStartSyntaxType","TupleExpressionHashIncorrectStartSyntaxType","UnexpectedArgumentPlaceholder","UnexpectedAwaitAfterPipelineBody","UnexpectedDigitAfterHash","UnexpectedImportExport","UnexpectedKeyword","UnexpectedLeadingDecorator","UnexpectedLexicalDeclaration","UnexpectedNewTarget","UnexpectedNumericSeparator","UnexpectedPrivateField","UnexpectedReservedWord","UnexpectedSuper","UnexpectedToken","UnexpectedTokenUnaryExponentiation","UnsupportedBind","UnsupportedDecoratorExport","UnsupportedDefaultExport","UnsupportedImport","UnsupportedMetaProperty","UnsupportedParameterDecorator","UnsupportedPropertyDecorator","UnsupportedSuper","UnterminatedComment","UnterminatedRegExp","UnterminatedString","UnterminatedTemplate","VarRedeclaration","YieldBindingIdentifier","YieldInParameter","ZeroDigitNumericSeparator","SourceTypeModuleErrorMessages","ImportMetaOutsideModule","ImportOutsideModule","syntaxPlugin","reasonCode","templates","keepReasonCodeCompat","template","messages","getLocationForPosition","pos","loc","getLineInfo","raise","raiseOverwrite","message","params","errors","error","raiseWithData","errorTemplate","_raise","err","superClass","parseRegExpLiteral","flags","regex","parseBigIntLiteral","bigInt","BigInt","String","parseDecimalLiteral","decimal","estreeParseLiteral","parseStringLiteral","parseNumericLiteral","parseNullLiteral","parseBooleanLiteral","directiveToStmt","directiveLiteral","directive","stmt","expression","initFunction","checkDeclaration","getObjectOrClassMethodParams","method","isValidDirective","parseBlockBody","directiveStatements","d","pushClassMethod","classBody","parsePrivateName","convertPrivateNameToPrivateIdentifier","name","isPrivateName","getPrivateNameSV","parseLiteral","parseFunctionBody","isMethod","parseMethod","inClassScope","funcNode","type","parseClassProperty","propertyNode","parseClassPrivateProperty","parseObjectMethod","parseObjectProperty","isAssignable","toAssignable","isLHS","toAssignableObjectExpressionProp","prop","Errors","finishCallExpression","toReferencedArguments","parseExport","parseSubscript","state","chain","hasPropertyAsPrivateName","isOptionalChain","isObjectProperty","isObjectMethod","types","brace","j_oTag","j_cTag","j_expr","beforeExpr","startsExpr","isLoop","isAssign","prefix","postfix","label","keyword","rightAssociative","binop","conf","keywords","options","token","createToken","tokenTypeCounter","tokenTypes","tokenLabels","tokenBinops","tokenBeforeExprs","tokenStartsExprs","tokenPrefixes","tt","bracketL","bracketHashL","bracketBarL","bracketR","bracketBarR","braceL","braceBarL","braceHashL","braceR","braceBarR","parenL","parenR","comma","semi","colon","doubleColon","dot","question","questionDot","arrow","ellipsis","backQuote","dollarBraceL","templateTail","templateNonTail","at","hash","interpreterDirective","eq","assign","slashAssign","xorAssign","moduloAssign","incDec","bang","tilde","pipeline","createBinop","nullishCoalescing","logicalOR","logicalAND","bitwiseOR","bitwiseXOR","bitwiseAND","equality","lt","gt","relational","bitShift","plusMin","modulo","star","slash","exponent","_in","createKeyword","_instanceof","_break","_case","_catch","_continue","_debugger","_default","_else","_finally","_function","_if","_return","_switch","_throw","_try","_var","_const","_with","_new","_this","_super","_class","_extends","_export","_import","_null","_true","_false","_typeof","_void","_delete","_do","_for","_while","_as","createKeywordLike","_assert","_async","_await","_from","_get","_let","_meta","_of","_sent","_set","_static","_yield","_asserts","_checks","_exports","_global","_implements","_intrinsic","_infer","_is","_mixins","_proto","_require","_keyof","_readonly","_unique","_abstract","_declare","_enum","_module","_namespace","_interface","_type","_opaque","string","num","bigint","regexp","privateName","eof","jsxName","jsxText","jsxTagStart","jsxTagEnd","placeholder","context","tc","nonASCIIidentifierStartChars","nonASCIIidentifierChars","nonASCIIidentifierStart","nonASCIIidentifier","astralIdentifierStartCodes","astralIdentifierCodes","set","code","isInAstralSet","reservedWords","strict","strictBind","reservedWordsStrictSet","reservedWordsStrictBindSet","inModule","word","isReservedWord","isStrictReservedWord","isStrictBindOnlyReservedWord","current","next","reservedWordLikeSet","SCOPE_OTHER","SCOPE_PROGRAM","SCOPE_FUNCTION","SCOPE_ARROW","SCOPE_SIMPLE_CATCH","SCOPE_SUPER","SCOPE_DIRECT_SUPER","SCOPE_CLASS","SCOPE_STATIC_BLOCK","SCOPE_TS_MODULE","SCOPE_VAR","BIND_KIND_VALUE","BIND_KIND_TYPE","BIND_SCOPE_VAR","BIND_SCOPE_LEXICAL","BIND_SCOPE_FUNCTION","BIND_FLAGS_NONE","BIND_FLAGS_CLASS","BIND_FLAGS_TS_ENUM","BIND_FLAGS_TS_CONST_ENUM","BIND_FLAGS_TS_EXPORT_ONLY","BIND_FLAGS_FLOW_DECLARE_FN","BIND_CLASS","BIND_LEXICAL","BIND_VAR","BIND_FUNCTION","BIND_TS_INTERFACE","BIND_TS_TYPE","BIND_TS_ENUM","BIND_TS_AMBIENT","BIND_NONE","BIND_OUTSIDE","BIND_TS_CONST_ENUM","BIND_TS_NAMESPACE","BIND_FLOW_DECLARE_FN","CLASS_ELEMENT_FLAG_STATIC","CLASS_ELEMENT_KIND_GETTER","CLASS_ELEMENT_KIND_SETTER","CLASS_ELEMENT_KIND_ACCESSOR","CLASS_ELEMENT_STATIC_GETTER","CLASS_ELEMENT_STATIC_SETTER","CLASS_ELEMENT_INSTANCE_GETTER","CLASS_ELEMENT_INSTANCE_SETTER","CLASS_ELEMENT_OTHER","var","lexical","functions","scopeStack","undefinedExports","undefinedPrivateNames","inFunction","allowSuper","allowDirectSuper","inClass","inClassAndNotInNonArrowFunction","inStaticBlock","inNonArrowFunction","treatFunctionsAsVar","createScope","enter","exit","treatFunctionsAsVarInScope","scope","declareName","bindingType","maybeExportDefined","checkRedeclarationInScope","isRedeclaredInScope","checkLocalExport","topLevelScope","id","currentScope","currentVarScopeFlags","currentThisScopeFlags","init","startColumn","strictMode","sourceType","maxNumOfResolvableTopics","maxTopicIndex","ct","curPosition","clone","keys","key","val","Array","VALID_REGEX_FLAGS","forbiddenNumericSeparatorSiblings","decBinOct","hex","allowedNumericSeparatorSiblings","isLookahead","tokens","input","pushToken","eat","createLookaheadState","value","lastTokEnd","inType","lookahead","old","curr","nextTokenStart","nextTokenStartSince","lookaheadCharCode","codePointAtPos","cp","trail","setStrict","curContext","nextToken","skipBlockComment","startLoc","skipLineComment","ch","isNewLine","skipSpace","spaceStart","loop","isWhitespace","CommentWhitespace","leadingNode","trailingNode","finishToken","prevType","replaceToken","readToken_numberSign","nextPos","isIdentifierStart","readToken_dot","readToken_slash","readToken_interpreter","readToken_mult_modulo","width","readToken_pipe_amp","readToken_caret","readToken_plus_min","readToken_lt","readToken_gt","size","readToken_eq_excl","readToken_question","next2","getTokenFromCode","finishOp","str","readRegexp","escaped","content","mods","char","isIdentifierChar","pattern","readInt","allowNumSeparator","forbiddenSiblings","radix","allowedSiblings","invalid","total","e","len","prev","Number","readRadixNumber","isBigInt","readNumber","isFloat","isDecimal","hasExponent","isOctal","hasLeadingZero","integer","underscorePos","parseInt","parseFloat","readCodePoint","codePos","readString","out","chunkStart","readTemplateContinuation","readTemplateToken","containsInvalid","recordStrictModeErrors","readEscapedChar","throwOnInvalid","octalStr","octal","readHexChar","n","readWord1","firstCode","escStart","identifierCheck","esc","readWord","keywordTypes","tokenLabelName","checkKeywordEscapes","tokenIsKeyword","updateContext","stack","oldClassScope","declarePrivateName","redefined","privateNames","elementType","accessor","loneAccessors","oldStatic","newStatic","oldKind","newKind","usePrivateName","classScope","kExpression","kMaybeArrowParameterDeclaration","kMaybeAsyncArrowParameterDeclaration","kParameterDeclaration","canBeArrowParameterDeclaration","isCertainlyParameterDeclaration","recordDeclarationError","clearDeclarationError","iterateErrors","recordParameterInitializerError","recordParenthesizedIdentifierError","recordAsyncArrowParametersError","validateAsPattern","PARAM","PARAM_YIELD","PARAM_AWAIT","PARAM_RETURN","PARAM_IN","currentFlags","hasAwait","hasYield","hasReturn","hasIn","isAsync","isGenerator","addExtra","extra","isContextual","isUnparsedContextual","nameEnd","nameStart","nextCh","isLookaheadContextual","eatContextual","expectContextual","canInsertSemicolon","hasPrecedingLineBreak","hasFollowingLineBreak","isLineTerminator","semicolon","allowAsi","expect","assertNoSpace","unexpected","messageOrType","isTokenType","getPluginNamesFromConfigs","c","expectPlugin","missingPlugin","JSON","expectOnePlugin","pluginConfigs","tryParse","oldState","abortSignal","fn","failState","thrown","aborted","checkExpressionErrors","optionalParameters","hasErrors","shorthandAssign","doubleProto","isLiteralPropertyName","tokenIsLiteralPropertyName","initializeScopes","oldLabels","oldExportedIdentifiers","oldInModule","oldScope","ScopeHandler","oldProdParam","oldExpressionScope","enterInitialScopes","paramFlags","parser","NodePrototype","Node","newNode","cloneIdentifier","cloned","clonePlaceholder","startNode","startNodeAt","startNodeAtNode","finishNode","finishNodeAt","resetStartLocation","resetEndLocation","endLoc","resetStartLocationFromNode","locationNode","reservedTypes","FlowErrors","AmbiguousConditionalArrow","AmbiguousDeclareModuleKind","AssignReservedType","DeclareClassElement","DeclareClassFieldInitializer","DuplicateDeclareModuleExports","EnumBooleanMemberNotInitialized","EnumDuplicateMemberName","EnumInconsistentMemberValues","EnumInvalidExplicitType","EnumInvalidExplicitTypeUnknownSupplied","EnumInvalidMemberInitializerPrimaryType","EnumInvalidMemberInitializerSymbolType","EnumInvalidMemberInitializerUnknownType","EnumInvalidMemberName","EnumNumberMemberNotInitialized","EnumStringMemberInconsistentlyInitailized","GetterMayNotHaveThisParam","ImportTypeShorthandOnlyInPureImport","InexactInsideExact","InexactInsideNonObject","InexactVariance","InvalidNonTypeImportInDeclareModule","MissingTypeParamDefault","NestedDeclareModule","NestedFlowComment","PatternIsOptional","SetterMayNotHaveThisParam","SpreadVariance","ThisParamAnnotationRequired","ThisParamBannedInConstructor","ThisParamMayNotBeOptional","ThisParamMustBeFirst","ThisParamNoDefault","TypeBeforeInitializer","TypeCastInPattern","UnexpectedExplicitInexactInObject","UnexpectedReservedType","UnexpectedReservedUnderscore","UnexpectedSpaceBetweenModuloChecks","UnexpectedSpreadType","UnexpectedSubtractionOperand","UnexpectedTokenAfterTypeParameter","UnexpectedTypeParameterBeforeAsyncArrowFunction","UnsupportedDeclareExportKind","UnsupportedStatementInDeclareModule","UnterminatedFlowComment","bodyElement","tokenIsKeywordOrIdentifier","exportSuggestions","const","let","interface","list1","list2","list","test","FLOW_PRAGMA_REGEX","getScopeHandler","shouldParseTypes","shouldParseEnums","matches","flowParseTypeInitialiser","oldInType","tok","flowParsePredicate","moduloPos","flowParseTypeAndPredicateInitialiser","predicate","flowParseDeclareClass","flowParseDeclareFunction","typeNode","typeContainer","tmp","flowParseDeclare","flowParseDeclareVariable","flowParseDeclareModule","bodyNode","body","kind","hasModuleExport","isEsModuleType","flowParseDeclareExportDeclaration","suggestion","flowParseDeclareModuleExports","flowParseDeclareTypeAlias","flowParseDeclareOpaqueType","flowParseDeclareInterface","flowParseInterfaceish","isClass","allowStatic","allowExact","allowSpread","allowProto","allowInexact","flowParseInterfaceExtends","flowParseInterface","checkNotUnderscore","checkReservedType","declaration","flowParseRestrictedIdentifier","flowParseTypeAlias","flowParseOpaqueType","flowParseTypeParameter","requireDefault","variance","ident","flowParseTypeParameterDeclaration","defaultRequired","typeParameter","flowParseTypeParameterInstantiation","oldNoAnonFunctionType","flowParseTypeParameterInstantiationCallOrNew","flowParseInterfaceType","flowParseObjectPropertyKey","flowParseObjectTypeIndexer","flowParseObjectTypeInternalSlot","flowParseObjectTypeMethodish","flowParseObjectTypeCallProperty","valueNode","flowParseObjectType","inexact","endDelim","exact","isStatic","protoStart","inexactStart","propOrInexact","flowParseObjectTypeProperty","isInexactToken","optional","flowCheckGetterSetterParams","paramCount","property","flowObjectTypeSemicolon","flowParseQualifiedTypeIdentifier","startPos","node2","flowParseGenericType","flowParseTypeofType","flowParseTupleType","flowParseFunctionTypeParam","typeAnnotation","lh","isThis","reinterpretTypeAsFunctionTypeParam","flowParseFunctionTypeParams","rest","flowIdentToTypeAnnotation","flowParsePrimaryType","isGroupedType","tokenIsIdentifier","flowParsePostfixType","seenOptionalIndexedAccess","flowParsePrefixType","flowParseAnonFunctionWithoutParens","param","flowParseIntersectionType","flowParseUnionType","flowParseType","flowParseTypeOrImplicitInstantiation","flowParseTypeAnnotation","flowParseTypeAnnotatableIdentifier","allowPrimitiveOverride","typeCastToParameter","flowParseVariance","parseFunctionBodyAndFinish","parseStatement","parseExpressionStatement","expr","shouldParseExportDeclaration","tokenIsFlowInterfaceOrTypeOrOpaque","isExportDefaultSpecifier","parseExportDefaultExpression","parseConditional","originalNoArrowAt","failed","noArrowAt","valid","tryParseConditionalConsequent","consequent","getArrowLikeExpressions","arrows","partition","finishArrowValidation","forwardNoArrowParamsConversionAt","result","parse","parseParenItem","typeCastNode","assertModuleNodeAllowed","decl","parseExportDeclaration","declarationNode","eatExportStar","maybeParseExportNamespaceSpecifier","hasNamespace","parseClassId","parseClassMember","member","isIterator","readIterator","fullWord","isIteratorStart","toAssignableList","exprList","toReferencedList","parseArrayLike","canBePattern","checkLVal","isClassMethod","isClassProperty","isNonstaticConstructor","pushClassPrivateMethod","parseClassSuper","implemented","checkGetterSetterParams","parsePropertyNamePrefixOperator","parseObjPropValue","typeParameters","parseAssignableListItemTypes","parseMaybeDefault","shouldParseDefaultImport","hasTypeImportKind","isMaybeDefaultImport","parseImportSpecifierLocal","specifier","maybeParseDefaultImportSpecifier","parseImportSpecifier","firstIdent","specifierTypeKind","isBinding","as_ident","specifierIsTypeImport","isInTypeOnlyImport","parseBindingAtom","parseFunctionParams","parseVarId","parseAsyncArrowFromCallExpression","shouldParseAsyncArrow","parseMaybeAssign","jsx","currentContext","abort","arrowExpression","parseArrow","shouldParseArrow","setArrowFunctionParameters","checkParams","isArrowFunction","parseParenAndDistinguishExpression","canBeArrow","parseSubscripts","base","subscriptState","parseNewArguments","targs","parseAsyncArrowWithTypeParameters","parseTopLevel","fileNode","skipFlowComment","shiftToFirstNonWhiteSpace","ch2","ch3","hasFlowCommentCompletion","flowEnumErrorBooleanMemberNotInitialized","memberName","flowEnumErrorInvalidMemberName","flowEnumErrorDuplicateMemberName","flowEnumErrorInconsistentMemberValues","enumName","flowEnumErrorInvalidExplicitType","suppliedType","flowEnumErrorInvalidMemberInitializer","flowEnumErrorNumberMemberNotInitialized","flowEnumErrorStringMemberInconsistentlyInitailized","flowEnumMemberInit","endOfInit","literal","flowEnumMemberRaw","flowEnumCheckExplicitTypeMismatch","explicitType","flowEnumMembers","seenNames","members","booleanMembers","numberMembers","stringMembers","defaultedMembers","hasUnknownMembers","memberNode","flowEnumStringMembers","initializedMembers","flowEnumParseExplicitType","flowEnumBody","nameLoc","empty","boolsLen","numsLen","strsLen","defaultedLen","flowParseEnumDeclaration","isLookaheadToken_lt","afterNext","maybeUnwrapTypeCastExpression","entities","quot","amp","apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","AElig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","OElig","oelig","Scaron","scaron","Yuml","fnof","circ","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","bull","hellip","permil","prime","Prime","lsaquo","rsaquo","oline","frasl","euro","image","weierp","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams","HEX_NUMBER","DECIMAL_NUMBER","JsxErrors","AttributeIsEmpty","MissingClosingTagElement","MissingClosingTagFragment","UnexpectedSequenceExpression","UnsupportedJsxValue","UnterminatedJsxContent","UnwrappedAdjacentJSXElements","object","getQualifiedJSXName","jsxReadToken","jsxReadNewLine","normalizeCRLF","jsxReadString","jsxReadEntity","count","entity","XHTMLEntities","jsxReadWord","jsxParseIdentifier","jsxParseNamespacedName","jsxParseElementName","jsxParseAttributeValue","jsxParseEmptyExpression","jsxParseSpreadChild","jsxParseExpressionContainer","jsxParseAttribute","jsxParseOpeningElementAt","jsxParseOpeningElementAfterName","attributes","jsxParseClosingElementAt","jsxParseElementAt","children","openingElement","closingElement","contents","isFragment","jsxParseElement","setContext","parseExprAtom","tokenComesBeforeExpression","isConst","wasConst","x","TSErrors","AbstractMethodHasImplementation","AbstractPropertyHasInitializer","AccesorCannotDeclareThisParameter","AccesorCannotHaveTypeParameters","ClassMethodHasDeclare","ClassMethodHasReadonly","ConstructorHasTypeParameters","DeclareAccessor","DeclareClassFieldHasInitializer","DeclareFunctionHasImplementation","DuplicateAccessibilityModifier","DuplicateModifier","EmptyHeritageClauseType","EmptyTypeArguments","EmptyTypeParameters","ExpectedAmbientAfterExportDeclare","ImportAliasHasImportType","IncompatibleModifiers","IndexSignatureHasAbstract","IndexSignatureHasAccessibility","IndexSignatureHasDeclare","IndexSignatureHasOverride","IndexSignatureHasStatic","InvalidModifierOnTypeMember","InvalidModifiersOrder","InvalidTupleMemberLabel","MissingInterfaceName","MixedLabeledAndUnlabeledElements","NonAbstractClassHasAbstractMethod","NonClassMethodPropertyHasAbstractModifer","OptionalTypeBeforeRequired","OverrideNotInSubClass","PrivateElementHasAbstract","PrivateElementHasAccessibility","ReadonlyForMethodSignature","ReservedArrowTypeParam","ReservedTypeAssertion","SetAccesorCannotHaveOptionalParameter","SetAccesorCannotHaveRestParameter","SetAccesorCannotHaveReturnType","StaticBlockCannotHaveModifier","TypeAnnotationAfterAssign","TypeImportCannotSpecifyDefaultAndNamed","TypeModifierIsUsedInTypeExports","TypeModifierIsUsedInTypeImports","UnexpectedParameterModifier","UnexpectedReadonly","UnexpectedTypeAnnotation","UnexpectedTypeCastInParameter","UnsupportedImportTypeArgument","UnsupportedParameterPropertyKind","UnsupportedSignatureParameterKind","modifier","tsIsIdentifier","tsTokenCanFollowModifier","tsNextTokenCanFollowModifier","tsParseModifier","allowedModifiers","stopOnStartOfClassStaticBlock","tsParseModifiers","enforceOrder","modified","incompatible","disallowedModifiers","tsIsAccessModifier","tsIsListTerminator","tsParseList","parseElement","tsParseDelimitedList","nonNull","tsParseDelimitedListWorker","trailingCommaPos","element","refTrailingCommaPos","tsParseBracketedList","tsParseImportType","tsParseEntityName","tsParseTypeReference","tsParseThisTypePredicate","tsParseThisTypeNode","tsParseTypeQuery","tsParseTypeParameter","tsTryParseTypeParameters","tsParseTypeParameters","tsTryNextParseConstantContext","tsFillSignature","returnTokenRequired","returnToken","signature","tsParseBindingListForSignature","tsParseTypeMemberSemicolon","tsParseSignatureMember","tsIsUnambiguouslyIndexSignature","tsTryParseIndexSignature","tsParsePropertyOrMethodSignature","nodeAny","firstParameter","tsParseTypeMember","idx","tsParseTypeLiteral","tsParseObjectTypeMembers","tsIsStartOfMappedType","tsParseMappedTypeParameter","tsParseMappedType","tsParseTupleType","seenOptionalElement","labeledElements","elementNode","isLabeled","tsParseTupleElementType","labeled","labeledNode","optionalTypeNode","restNode","tsParseParenthesizedType","tsParseFunctionOrConstructorType","tsParseLiteralTypeNode","tsParseTemplateLiteralType","parseTemplateSubstitution","tsParseThisTypeOrThisTypePredicate","thisKeyword","tsParseNonArrayType","nodeType","keywordTypeFromName","tsParseArrayTypeOrHigher","tsParseTypeOperator","operator","tsCheckTypeAnnotationForReadOnly","tsParseInferType","tsParseTypeOperatorOrHigher","isTypeOperator","tokenIsTSTypeOperator","tsParseUnionOrIntersectionType","hasLeadingOperator","parseConstituentType","tsParseIntersectionTypeOrHigher","tsParseUnionTypeOrHigher","tsIsStartOfFunctionType","tsSkipParameterStart","braceStackCounter","tsIsUnambiguouslyStartOfFunctionType","tsParseTypeOrTypePredicateAnnotation","t","asserts","thisTypePredicate","typePredicateVariable","tsTryParseTypeOrTypePredicateAnnotation","tsTryParseTypeAnnotation","tsTryParseType","tsParseTypePredicatePrefix","tsParseTypePredicateAsserts","containsEsc","tsParseTypeAnnotation","eatColon","tsParseType","assert","isAbstractConstructorSignature","tsParseNonConditionalType","tsParseTypeAssertion","tsParseHeritageClause","originalStart","delimitedList","tsParseExpressionWithTypeArguments","tsParseInterfaceDeclaration","tsParseTypeAliasDeclaration","tsInNoContext","oldContext","cb","tsInType","tsEatThenParseType","tsExpectThenParseType","tsNextThenParseType","tsDoThenParseType","tsParseEnumMember","tsParseEnumDeclaration","tsParseModuleBlock","tsParseModuleOrNamespaceDeclaration","nested","inner","tsParseAmbientExternalModuleDeclaration","tsParseImportEqualsDeclaration","isExport","moduleReference","tsIsExternalModuleReference","tsParseModuleReference","tsParseExternalModuleReference","tsLookAhead","res","f","tsTryParseAndCatch","tsTryParse","tsTryParseDeclare","starttype","nany","tsTryParseExportDeclaration","tsParseExpressionStatement","mod","tsParseDeclaration","tsCheckLineTerminator","tsTryParseGenericAsyncArrowFunction","oldMaybeInArrowParameters","tsParseTypeArguments","tsIsDeclarationStart","tokenIsTSDeclarationStart","parseAssignableListItem","readonly","override","allowModifiers","accessibility","left","elt","pp","decorators","bodilessType","registerFunctionStatementId","tsCheckForInvalidTypeCasts","items","nonNullExpression","isOptionalCall","asyncArrowFn","typeArguments","missingParenErrorPos","tokenIsTemplate","args","parseExprOp","tokenOperatorPrecedence","checkReservedWord","checkDuplicateExports","parseImport","ahead","importNode","isAbstractClass","cls","interfaceNode","parseStatementContent","parseAccessModifier","tsHasSomeModifiers","tsIsStartOfStaticBlocks","modifiers","callParseClassMemberWithIsStatic","parseClassMemberWithIsStatic","parsePostMemberNameModifiers","methodOrProp","isDeclare","parseClassPropertyAnnotation","declareClassPrivateMethodInScope","typeCast","reportReservedArrowTypeParam","parseMaybeUnary","returnType","toAssignableParenthesizedExpression","contextDescription","parseMaybeDecoratorArguments","call","checkCommaAfterRest","reScan_lt_gt","canHaveLeadingDecorator","getGetterSetterExpectedParamCount","baseCount","firstParam","hasContextParam","parseCatchClauseParam","tsInAmbientContext","oldIsAmbientContext","parseClass","oldInAbstractClass","tsParseAbstractDeclaration","hasBody","tsParseTypeParameterName","typeName","shouldParseAsAmbientContext","getExpression","parseExportSpecifier","parseTypeOnlyImportExportSpecifier","leftOfAsKey","isImport","rightOfAsKey","leftOfAs","hasTypeSpecifier","canParseAsKeyword","firstAs","secondAs","rightOfAs","kindKey","PlaceHolderErrors","ClassNameIsRequired","parsePlaceholder","finishPlaceholder","isFinished","parseIdentifier","isLet","verifyBreakContinue","parseBlock","parseFunctionId","isStatement","oldStrict","optionalId","maybeParseExportDefaultSpecifier","checkExport","specifiers","hasStarImport","parseImportSource","parseV8Intrinsic","v8IntrinsicStart","identifier","expectedKeys","expectedOptionsIsEmpty","p","pluginName","expectedOptions","plugin","PIPELINE_PROPOSALS","TOPIC_TOKENS","RECORD_AND_TUPLE_SYNTAX_TYPES","decoratorsBeforeExport","proposal","proposalList","tupleSyntaxIsHash","syntaxType","topicToken","tokenList","moduleAttributesVerionPluginOption","mixinPlugins","placeholders","mixinPluginNames","defaultOptions","sourceFilename","startLine","allowAwaitOutsideFunction","allowReturnOutsideFunction","allowImportExportEverywhere","allowSuperOutsideMethod","allowUndeclaredExports","plugins","ranges","createParenthesizedExpressions","errorRecovery","attachComment","opts","unwrapParenthesizedExpression","parenthesized","last","isLast","arg","toReferencedListDeep","parseSpread","parseRestBinding","parseBindingList","elts","first","allowEmpty","parseBindingRestProperty","parseBindingProperty","strictModeChanged","isStrictBindReservedWord","checkClashes","disallowLetBinding","checkToRestConversion","raiseRestNotLast","raiseTrailingCommaAfterRest","invalidHackPipeBodies","checkProto","protoRef","refExpressionErrors","shouldExitDescending","parseExpression","parseExpressionBase","parseMaybeAssignDisallowIn","parseMaybeAssignAllowIn","setOptionalParametersError","resultError","afterLeftParse","ownExpressionErrors","tokenIsAssignment","parseMaybeConditional","potentialArrowAt","parseMaybeUnaryOrPrivate","parseExprOps","minPrec","op","tokenIsOperator","prec","logical","coalesce","nextOp","parseExprOpRightExpr","parseExprOpBaseRightExpr","tokenIsRightAssociative","parseHackPipeBody","checkExponentialAfterUnary","isAwait","update","tokenIsPrefix","isDelete","tokenCanStartExpression","parseUpdate","tokenIsPostfix","parseExprSubscripts","optionalChainMember","maybeAsyncArrow","stop","noCalls","computed","parseMember","parseBind","parseCoverCallAndAsyncArrowHead","newAsyncArrowScope","parseTaggedTemplateExpression","atPossibleAsyncArrow","parseCallExpressionArguments","oldInFSharpPipelineDirectBody","dynamicImport","parseNoCallExpr","callee","pipeProposal","lookaheadCh","parseTopicReferenceThenEqualsSign","parseTopicReference","tokenType","finishTopicReference","testTopicReferenceConfiguration","parseAsyncArrowUnaryFunction","functionFlags","parseDo","parseSuper","parseFunctionOrFunctionSent","meta","parseMetaProperty","parseImportMetaProperty","SourceTypeModuleErrors","parseLiteralAtNode","newArrowHeadScope","innerStartPos","innerStartLoc","optionalCommaStart","spreadNodeStartPos","spreadNodeStartLoc","spreadStart","innerEndPos","innerEndLoc","arrowNode","parenExpression","parseNewOrNewTarget","metaProp","parseNew","parseTemplateElement","elemStart","elem","createPositionWithColumnOffset","isTail","endOffset","elemEnd","raw","cooked","parseTemplate","curElt","parseObjectLike","propHash","isRecord","maybeAsyncOrAccessorProp","parsePropertyDefinition","isAccessor","keyName","isPattern","parsePropertyName","privateKeyPos","isTuple","parseArrowExpression","isExpression","allowExpression","newExpressionScope","hasStrictModeDirective","nonSimple","errorPos","isSimpleParamList","allowDuplicates","parseExprList","parseExprListItem","createIdentifier","parseIdentifierName","tokenKeywordOrIdentifierIsKeyword","canBeReservedWord","checkKeywords","isKeyword","reservedTest","isAwaitAllowed","parseAwait","isAmbiguousAwait","parseYield","delegating","argument","checkPipelineAtInfixOperator","checkHackPipeBodyEarlyErrors","parseSmartPipelineBodyInStyle","isSimpleReference","checkSmartPipeTopicBodyEarlyErrors","withTopicBindingContext","outerContextTopicState","callback","withSmartMixTopicForbiddingContext","withSoloAwaitPermittingContext","outerContextSoloAwaitState","allowInAnd","prodParamToSet","disallowInAnd","prodParamToClear","registerTopicReference","topicReferenceIsAllowedInCurrentContext","topicReferenceWasUsedInCurrentContext","parseFSharpPipelineBody","ret","parseModuleExpression","revertScopes","program","loopLabel","switchLabel","FUNC_NO_FLAGS","FUNC_STATEMENT","FUNC_HANGING_STATEMENT","FUNC_NULLABLE_ID","loneSurrogate","keywordRelationalOperator","hashEndPos","hashEndLoc","getExportedToken","backquoteEnd","backquoteEndLoc","startToken","templateElementEnd","templateElementEndLoc","templateValue","endToken","file","babel7CompatTokens","parseProgram","stmtToDirective","expressionValue","parseInterpreterDirective","isLetKeyword","endCh","nextTokenCharCode","maybeName","takeDecorators","parseDecorators","currentContextDecorators","decorator","parseDecorator","parseBreakContinueStatement","isBreak","lab","parseDebuggerStatement","parseHeaderExpression","parseDoStatement","parseForStatement","awaitAt","startsWithLet","startsWithAsync","isForOf","description","parseFunctionStatement","declarationPosition","parseIfStatement","parseReturnStatement","parseSwitchStatement","cases","isCase","cur","sawDefault","parseThrowStatement","simple","parseTryStatement","clause","parseVarStatement","parseWhileStatement","parseWithStatement","parseEmptyStatement","parseLabeledStatement","tokenIsLoop","statementStart","allowDirectives","createNewLexicalScope","directives","parseBlockOrModuleBlockBody","parsedNonDirective","afterBlockParse","parseFor","parseForIn","isForIn","parseVar","declarations","isTypescript","isFor","parseFunction","statement","isHangingStatement","requireId","newParameterDeclarationScope","parseClassBody","hadConstructor","hadSuperClass","parseClassMemberFromModifier","publicMethod","privateMethod","publicProp","privateProp","publicMember","isPrivate","maybeQuestionTokenStart","isConstructor","allowsDirectSuper","parseClassElementName","parseClassStaticBlock","pushClassProperty","pushClassPrivateProperty","parseInitializer","hasDefault","parseAfterDefault","hasStar","parseAfterNamespace","isFromRequired","hasSpecifiers","hasDeclaration","maybeParseExportNamedSpecifiers","isTypeExport","maybeParseExportDeclaration","isAsyncFunction","nextType","hasFrom","nextAfterFrom","parseExportFrom","assertions","exported","exportedName","local","parseExportSpecifiers","nodes","isMaybeTypeOnly","isString","cloneStringLiteral","parseModuleExportName","surrogate","parseNext","parseAssertEntries","attrs","attrNames","maybeParseModuleAttributes","maybeParseImportAssertions","maybeParseStarImportSpecifier","parseNamedImportSpecifiers","importedIsString","importSpecifier","imported","isThisParam","getOptions","pluginsMap","pluginMap","getParser","ast","internalTokenTypes","tokTypes","generateExportedTokenTypes","validatePlugins","getParserClass","parserClassCache","pluginList"],"mappings":";;;;;AAMO,MAAMA,SAAS,GAAf,wBAAA;AACA,MAAMC,UAAU,GAAG,IAAA,MAAA,CAAWD,SAAS,CAApB,MAAA,EAAnB,GAAmB,CAAnB;;AAGA,SAAA,SAAA,CAAA,IAAA,EAA0C;AAC/C,UAAA,IAAA;AACE,SAAA,EAAA;AACA,SAAA,EAAA;AACA,SAAA,IAAA;AACA,SAAA,IAAA;AACE,aAAA,IAAA;;AAEF;AACE,aAAA,KAAA;AARJ;AAUD;;AAEM,MAAME,cAAc,GAApB,+BAAA;AAEA,MAAMC,oBAAoB,GAA1B,gDAAA;AAOA,MAAMC,yBAAyB,GAAG,IAAA,MAAA,CAIvC,SAGED,oBAAoB,CAHtB,MAAA,GAAA,OAAA,GAOE,2CAXqC,MAAA,EAAlC,GAAkC,CAAlC;;AAgBA,SAAA,YAAA,CAAA,IAAA,EAA6C;AAClD,UAAA,IAAA;AACE,SAAA,MAAA;AACA,SAAA,MAAA;AACA,SAAA,MAAA;AACA,SAAA,EAAA;AACA,SAAA,GAAA;AACA,SAAA,IAAA;AACA,SAAA,MAAA;AACA,SAAA,MAAA;AACA,SAAA,MAAA;AACA,SAAA,MAAA;AACA,SAAA,MAAA;AACA,SAAA,MAAA;AACA,SAAA,MAAA;AACA,SAAA,MAAA;AACA,SAAA,MAAA;AACA,SAAA,MAAA;AACA,SAAA,MAAA;AACA,SAAA,MAAA;AACA,SAAA,MAAA;AACA,SAAA,MAAA;AACA,SAAA,MAAA;AACE,aAAA,IAAA;;AAEF;AACE,aAAA,KAAA;AAzBJ;AA2BD;;ACjEM,MAAA,QAAA,CAAe;AAIpBI,EAAAA,WAAW,CAAA,IAAA,EAAA,GAAA,EAA4B;AAAA,SAHvCF,IAGuC,GAAA,KAAA,CAAA;AAAA,SAFvCC,MAEuC,GAAA,KAAA,CAAA;AACrC,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,MAAA,GAAA,GAAA;AACD;;AAPmB;;AAUf,MAAA,cAAA,CAAqB;AAM1BC,EAAAA,WAAW,CAAA,KAAA,EAAA,GAAA,EAAkC;AAAA,SAL7CC,KAK6C,GAAA,KAAA,CAAA;AAAA,SAJ7CC,GAI6C,GAAA,KAAA,CAAA;AAAA,SAH7CC,QAG6C,GAAA,KAAA,CAAA;AAAA,SAF7CC,cAE6C,GAAA,KAAA,CAAA;AAC3C,SAAA,KAAA,GAAA,KAAA;AAEA,SAAA,GAAA,GAAA,GAAA;AACD;;AAVyB;;AAmBrB,SAAA,WAAA,CAAA,KAAA,EAAA,MAAA,EAA8D;AACnE,MAAIN,IAAI,GAAR,CAAA;AACA,MAAIO,SAAS,GAAb,CAAA;AACA,MAAA,KAAA;AACAX,EAAAA,UAAU,CAAVA,SAAAA,GAAAA,CAAAA;;AACA,SAAO,CAACY,KAAK,GAAGZ,UAAU,CAAVA,IAAAA,CAAT,KAASA,CAAT,KAAoCY,KAAK,CAALA,KAAAA,GAA3C,MAAA,EAAiE;AAC/DR,IAAAA,IAAI;AACJO,IAAAA,SAAS,GAAGX,UAAU,CAAtBW,SAAAA;AACD;;AAED,SAAO,IAAA,QAAA,CAAA,IAAA,EAAmBE,MAAM,GAAhC,SAAO,CAAP;AACD;;AAaM,SAAA,8BAAA,CAAA,QAAA,EAAA,YAAA,EAGL;AACA,QAAM;AAAA,IAAA,IAAA;AAAQR,IAAAA;AAAR,MAAN,QAAA;AACA,SAAO,IAAA,QAAA,CAAA,IAAA,EAAmBA,MAAM,GAAhC,YAAO,CAAP;AACD;;AC5Dc,MAAA,UAAA,CAAiB;AAAA,EAAA,WAAA,GAAA;AAAA,SAAA,iBAAA,GAAA,KAAA;AAAA,SAAA,2BAAA,GAAA,KAAA;AAAA;;AA2B9BS,EAAAA,SAAS,CAAA,YAAA,EAAsC;AAC7C,QAAI,OAAA,YAAA,KAAJ,QAAA,EAAsC;AACpC,aAAO,KAAA,OAAA,CAAA,GAAA,CAAP,YAAO,CAAP;AADF,KAAA,MAEO;AACL,YAAM,CAAA,UAAA,EAAA,aAAA,IAAN,YAAA;;AACA,UAAI,CAAC,KAAA,SAAA,CAAL,UAAK,CAAL,EAAiC;AAC/B,eAAA,KAAA;AACD;;AACD,YAAMC,aAAa,GAAG,KAAA,OAAA,CAAA,GAAA,CAAtB,UAAsB,CAAtB;;AACA,WAAK,MAAL,GAAA,IAAkBC,MAAM,CAANA,IAAAA,CAAlB,aAAkBA,CAAlB,EAA8C;AAC5C,YAAI,CAAA,aAAa,IAAb,IAAA,GAAA,KAAA,CAAA,GAAA,aAAa,CAAb,GAAa,CAAb,MAAyBC,aAAa,CAA1C,GAA0C,CAA1C,EAAiD;AAC/C,iBAAA,KAAA;AACD;AACF;;AACD,aAAA,IAAA;AACD;AACF;;AAEDC,EAAAA,eAAe,CAAA,MAAA,EAAA,IAAA,EAA+B;AAAA,QAAA,iBAAA;;AAC5C,WAAA,CAAA,iBAAA,GAAO,KAAA,OAAA,CAAA,GAAA,CAAP,MAAO,CAAP,KAAA,IAAA,GAAA,KAAA,CAAA,GAAO,iBAAA,CAAP,IAAO,CAAP;AACD;;AA/C6B;;AC2BhC,SAAA,mBAAA,CAAA,IAAA,EAAA,QAAA,EAAmE;AACjE,MAAIC,IAAI,CAAJA,gBAAAA,KAAJ,SAAA,EAAyC;AACvCA,IAAAA,IAAI,CAAJA,gBAAAA,GAAAA,QAAAA;AADF,GAAA,MAEO;AACLA,IAAAA,IAAI,CAAJA,gBAAAA,CAAAA,OAAAA,CAA8B,GAA9BA,QAAAA;AACD;AACF;;AAUD,SAAA,kBAAA,CAAA,IAAA,EAAA,QAAA,EAAkE;AAChE,MAAIA,IAAI,CAAJA,eAAAA,KAAJ,SAAA,EAAwC;AACtCA,IAAAA,IAAI,CAAJA,eAAAA,GAAAA,QAAAA;AADF,GAAA,MAEO;AACLA,IAAAA,IAAI,CAAJA,eAAAA,CAAAA,OAAAA,CAA6B,GAA7BA,QAAAA;AACD;AACF;;AAUM,SAAA,gBAAA,CAAA,IAAA,EAAA,QAAA,EAAgE;AACrE,MAAIA,IAAI,CAAJA,aAAAA,KAAJ,SAAA,EAAsC;AACpCA,IAAAA,IAAI,CAAJA,aAAAA,GAAAA,QAAAA;AADF,GAAA,MAEO;AACLA,IAAAA,IAAI,CAAJA,aAAAA,CAAAA,OAAAA,CAA2B,GAA3BA,QAAAA;AACD;AACF;;AAWD,SAAA,mBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,SAAA,EAIE;AACA,MAAIC,WAAW,GAAf,IAAA;AACA,MAAIC,CAAC,GAAGC,QAAQ,CAAhB,MAAA;;AACA,SAAOF,WAAW,KAAXA,IAAAA,IAAwBC,CAAC,GAAhC,CAAA,EAAsC;AACpCD,IAAAA,WAAW,GAAGE,QAAQ,CAAC,EAAvBF,CAAsB,CAAtBA;AACD;;AACD,MAAIA,WAAW,KAAXA,IAAAA,IAAwBA,WAAW,CAAXA,KAAAA,GAAoBG,SAAS,CAAzD,KAAA,EAAiE;AAC/DC,IAAAA,gBAAgB,CAAA,IAAA,EAAOD,SAAS,CAAhCC,QAAgB,CAAhBA;AADF,GAAA,MAEO;AACLC,IAAAA,mBAAmB,CAAA,WAAA,EAAcF,SAAS,CAA1CE,QAAmB,CAAnBA;AACD;AACF;;AAGc,MAAA,cAAA,SAAA,UAAA,CAAwC;AACrDC,EAAAA,UAAU,CAAA,OAAA,EAAyB;AACjC,QAAI,KAAJ,QAAA,EAAmBC,OAAO,CAAPA,GAAAA,CAAAA,QAAAA,GAAuB,KAAvBA,QAAAA;AACnB,SAAA,KAAA,CAAA,QAAA,CAAA,IAAA,CAAA,OAAA;AACD;;AAUDC,EAAAA,cAAc,CAAA,IAAA,EAAmB;AAC/B,UAAM;AAAEC,MAAAA;AAAF,QAAmB,KAAzB,KAAA;AACA,UAAMC,kBAAkB,GAAGD,YAAY,CAAvC,MAAA;AACA,QAAIC,kBAAkB,KAAtB,CAAA,EAA8B;AAC9B,QAAIT,CAAC,GAAGS,kBAAkB,GAA1B,CAAA;AACA,UAAMC,aAAa,GAAGF,YAAY,CAAlC,CAAkC,CAAlC;;AAEA,QAAIE,aAAa,CAAbA,KAAAA,KAAwBZ,IAAI,CAAhC,GAAA,EAAsC;AACpCY,MAAAA,aAAa,CAAbA,WAAAA,GAAAA,IAAAA;AACAV,MAAAA,CAAC;AACF;;AAED,UAAM;AAAEd,MAAAA,KAAK,EAAEyB;AAAT,QAAN,IAAA;;AAEA,WAAOX,CAAC,IAAR,CAAA,EAAeA,CAAf,EAAA,EAAoB;AAClB,YAAME,SAAS,GAAGM,YAAY,CAA9B,CAA8B,CAA9B;AACA,YAAMI,UAAU,GAAGV,SAAS,CAA5B,GAAA;;AACA,UAAIU,UAAU,GAAd,SAAA,EAA4B;AAO1BV,QAAAA,SAAS,CAATA,cAAAA,GAAAA,IAAAA;AACA,aAAA,eAAA,CAAA,SAAA;AACAM,QAAAA,YAAY,CAAZA,MAAAA,CAAAA,CAAAA,EAAAA,CAAAA;AATF,OAAA,MAUO;AACL,YAAII,UAAU,KAAd,SAAA,EAA8B;AAC5BV,UAAAA,SAAS,CAATA,YAAAA,GAAAA,IAAAA;AACD;;AAED;AACD;AACF;AACF;;AAQDW,EAAAA,eAAe,CAAA,SAAA,EAA+B;AAC5C,UAAM;AAAEC,MAAAA;AAAF,QAAN,SAAA;;AACA,QAAIZ,SAAS,CAATA,WAAAA,KAAAA,IAAAA,IAAkCA,SAAS,CAATA,YAAAA,KAAtC,IAAA,EAAuE;AACrE,UAAIA,SAAS,CAATA,WAAAA,KAAJ,IAAA,EAAoC;AAClCE,QAAAA,mBAAmB,CAACF,SAAS,CAAV,WAAA,EAAnBE,QAAmB,CAAnBA;AACD;;AACD,UAAIF,SAAS,CAATA,YAAAA,KAAJ,IAAA,EAAqC;AACnCa,QAAAA,kBAAkB,CAACb,SAAS,CAAV,YAAA,EAAlBa,QAAkB,CAAlBA;AACD;AANH,KAAA,MAOO;AAEL,YAAM;AAAEC,QAAAA,cAAc,EAAhB,IAAA;AAAwB9B,QAAAA,KAAK,EAAE+B;AAA/B,UAAN,SAAA;;AACA,UAAI,KAAA,KAAA,CAAA,UAAA,CAAsBA,YAAY,GAAlC,CAAA,MAAJ,EAAA,EAAiE;AAI/D,gBAAQnB,IAAI,CAAZ,IAAA;AACE,eAAA,kBAAA;AACA,eAAA,eAAA;AACA,eAAA,kBAAA;AACEoB,YAAAA,mBAAmB,CAAA,IAAA,EAAOpB,IAAI,CAAX,UAAA,EAAnBoB,SAAmB,CAAnBA;AACA;;AACF,eAAA,gBAAA;AACA,eAAA,wBAAA;AACEA,YAAAA,mBAAmB,CAAA,IAAA,EAAOpB,IAAI,CAAX,SAAA,EAAnBoB,SAAmB,CAAnBA;AACA;;AACF,eAAA,qBAAA;AACA,eAAA,oBAAA;AACA,eAAA,yBAAA;AACA,eAAA,cAAA;AACA,eAAA,aAAA;AACA,eAAA,oBAAA;AACEA,YAAAA,mBAAmB,CAAA,IAAA,EAAOpB,IAAI,CAAX,MAAA,EAAnBoB,SAAmB,CAAnBA;AACA;;AACF,eAAA,iBAAA;AACA,eAAA,cAAA;AACA,eAAA,iBAAA;AACEA,YAAAA,mBAAmB,CAAA,IAAA,EAAOpB,IAAI,CAAX,QAAA,EAAnBoB,SAAmB,CAAnBA;AACA;;AACF,eAAA,wBAAA;AACA,eAAA,mBAAA;AACEA,YAAAA,mBAAmB,CAAA,IAAA,EAAOpB,IAAI,CAAX,UAAA,EAAnBoB,SAAmB,CAAnBA;AACA;;AACF;AAAS;AACPf,cAAAA,gBAAgB,CAAA,IAAA,EAAhBA,QAAgB,CAAhBA;AACD;AA7BH;AAJF,OAAA,MAmCO;AACLA,QAAAA,gBAAgB,CAAA,IAAA,EAAhBA,QAAgB,CAAhBA;AACD;AACF;AACF;;AAUDgB,EAAAA,yBAAyB,GAAG;AAC1B,UAAM;AAAEX,MAAAA;AAAF,QAAmB,KAAzB,KAAA;;AACA,SAAK,IAAIR,CAAC,GAAGQ,YAAY,CAAZA,MAAAA,GAAb,CAAA,EAAsCR,CAAC,IAAvC,CAAA,EAA8CA,CAA9C,EAAA,EAAmD;AACjD,WAAA,eAAA,CAAqBQ,YAAY,CAAjC,CAAiC,CAAjC;AACD;;AACD,SAAA,KAAA,CAAA,YAAA,GAAA,EAAA;AACD;;AAoBDY,EAAAA,iCAAiC,CAAA,IAAA,EAAa;AAC5C,UAAM;AAAEZ,MAAAA;AAAF,QAAmB,KAAzB,KAAA;AACA,UAAM;AAAEa,MAAAA;AAAF,QAAN,YAAA;AACA,QAAIA,MAAM,KAAV,CAAA,EAAkB;AAClB,UAAMnB,SAAS,GAAGM,YAAY,CAACa,MAAM,GAArC,CAA8B,CAA9B;;AACA,QAAInB,SAAS,CAATA,WAAAA,KAAJ,IAAA,EAAoC;AAClCA,MAAAA,SAAS,CAATA,WAAAA,GAAAA,IAAAA;AACD;AACF;;AAaDoB,EAAAA,uBAAuB,CAAA,IAAA,EAAA,KAAA,EAAA,GAAA,EAAyC;AAC9D,UAAM;AAAEd,MAAAA;AAAF,QAAmB,KAAzB,KAAA;AACA,UAAMC,kBAAkB,GAAGD,YAAY,CAAvC,MAAA;AACA,QAAIC,kBAAkB,KAAtB,CAAA,EAA8B;AAC9B,QAAIT,CAAC,GAAGS,kBAAkB,GAA1B,CAAA;;AAEA,WAAOT,CAAC,IAAR,CAAA,EAAeA,CAAf,EAAA,EAAoB;AAClB,YAAME,SAAS,GAAGM,YAAY,CAA9B,CAA8B,CAA9B;AACA,YAAMI,UAAU,GAAGV,SAAS,CAA5B,GAAA;AACA,YAAMe,YAAY,GAAGf,SAAS,CAA9B,KAAA;;AAEA,UAAIe,YAAY,KAAhB,GAAA,EAA0B;AACxBf,QAAAA,SAAS,CAATA,WAAAA,GAAAA,IAAAA;AADF,OAAA,MAEO,IAAIU,UAAU,KAAd,KAAA,EAA0B;AAC/BV,QAAAA,SAAS,CAATA,YAAAA,GAAAA,IAAAA;AADK,OAAA,MAEA,IAAIU,UAAU,GAAd,KAAA,EAAwB;AAC7B;AACD;AACF;AACF;;AAxLoD;;ACtGhD,MAAMW,UAAU,GAAG,MAAM,CAAN,MAAA,CAAc;AACtCC,EAAAA,WAAW,EAD2B,2BAAA;AAEtCC,EAAAA,qBAAqB,EAAE;AAFe,CAAd,CAAnB;ACSA,MAAMC,aAAa,GAAGC,kBAAkB,CAC7C;AACEC,EAAAA,mBAAmB,EADrB,gCAAA;AAEEC,EAAAA,gBAAgB,EAFlB,6DAAA;AAIEC,EAAAA,qCAAqC,EAJvC,0EAAA;AAMEC,EAAAA,sBAAsB,EANxB,6DAAA;AAQEC,EAAAA,mCAAmC,EARrC,0DAAA;AAUEC,EAAAA,8BAA8B,EAVhC,sDAAA;AAYEC,EAAAA,sBAAsB,EAZxB,kFAAA;AAcEC,EAAAA,uBAAuB,EAdzB,iDAAA;AAeEC,EAAAA,cAAc,EAfhB,sDAAA;AAgBEC,EAAAA,cAAc,EAhBhB,yDAAA;AAiBEC,EAAAA,sBAAsB,EAjBxB,iEAAA;AAmBEC,EAAAA,qBAAqB,EAnBvB,mDAAA;AAoBEC,EAAAA,4BAA4B,EApB9B,4DAAA;AAsBEC,EAAAA,qBAAqB,EAtBvB,2CAAA;AAuBEC,EAAAA,kBAAkB,EAvBpB,yCAAA;AAwBEC,EAAAA,sBAAsB,EAxBxB,mCAAA;AAyBEC,EAAAA,6BAA6B,EAzB/B,uCAAA;AA0BEC,EAAAA,qBAAqB,EA1BvB,mKAAA;AA4BEC,EAAAA,oBAAoB,EA5BtB,iFAAA;AA8BEC,EAAAA,oBAAoB,EA9BtB,kHAAA;AAgCEC,EAAAA,kBAAkB,EAhCpB,iDAAA;AAiCEC,EAAAA,oBAAoB,EAjCtB,+CAAA;AAkCEC,EAAAA,kBAAkB,EAlCpB,0CAAA;AAmCEC,EAAAA,sBAAsB,EAnCxB,oGAAA;AAqCEC,EAAAA,oBAAoB,EArCtB,0CAAA;AAsCEC,EAAAA,sBAAsB,EAtCxB,6CAAA;AAuCEC,EAAAA,eAAe,EAvCjB,sEAAA;AAyCEC,EAAAA,cAAc,EAzChB,qCAAA;AA0CEC,EAAAA,oBAAoB,EA1CtB,oCAAA;AA2CEC,EAAAA,gBAAgB,EA3ClB,oCAAA;AA4CEC,EAAAA,0BAA0B,EA5C5B,yBAAA;AA6CEC,EAAAA,qBAAqB,EA7CvB,sIAAA;AA+CEC,EAAAA,6BAA6B,EA/C/B,gEAAA;AAiDEC,EAAAA,sBAAsB,EAjDxB,6DAAA;AAmDEC,EAAAA,UAAU,EAnDZ,yDAAA;AAoDEC,EAAAA,QAAQ,EApDV,+DAAA;AAqDEC,EAAAA,iCAAiC,EArDnC,qEAAA;AAuDEC,EAAAA,oBAAoB,EAvDtB,iBAAA;AAwDEC,EAAAA,4BAA4B,EAxD9B,4EAAA;AA0DEC,EAAAA,aAAa,EA1Df,+BAAA;AA2DEC,EAAAA,qBAAqB,EA3DvB,mGAAA;AA6DEC,EAAAA,+BAA+B,EA7DjC,4DAAA;AA+DEC,EAAAA,eAAe,EA/DjB,iCAAA;AAgEEC,EAAAA,0BAA0B,EAhE5B,kCAAA;AAiEEC,EAAAA,wBAAwB,EAjE1B,qCAAA;AAkEEC,EAAAA,oBAAoB,EAlEtB,wBAAA;AAmEEC,EAAAA,gBAAgB,EAnElB,2BAAA;AAoEEC,EAAAA,2BAA2B,EApE7B,yCAAA;AAqEEC,EAAAA,cAAc,EArEhB,kBAAA;AAsEEC,EAAAA,YAAY,EAtEd,8BAAA;AAuEEC,EAAAA,qBAAqB,EAvEvB,gCAAA;AAwEEC,EAAAA,6BAA6B,EAxE/B,sCAAA;AAyEEC,EAAAA,0BAA0B,EAzE5B,gCAAA;AA0EEC,EAAAA,iBAAiB,EA1EnB,wBAAA;AA2EEC,EAAAA,UAAU,EA3EZ,+BAAA;AA4EEC,EAAAA,iBAAiB,EA5EnB,uCAAA;AA6EEC,EAAAA,aAAa,EA7Ef,iBAAA;AA8EEC,EAAAA,wBAAwB,EA9E1B,gEAAA;AAgFEC,EAAAA,wBAAwB,EAhF1B,4BAAA;AAiFEC,EAAAA,8BAA8B,EAjFhC,2CAAA;AAkFEC,EAAAA,6BAA6B,EAlF/B,kCAAA;AAmFEC,EAAAA,6BAA6B,EAnF/B,4BAAA;AAoFEC,EAAAA,qBAAqB,EApFvB,wEAAA;AAsFEC,EAAAA,4BAA4B,EAtF9B,mCAAA;AAuFEC,EAAAA,kBAAkB,EAvFpB,iCAAA;AAwFEC,EAAAA,mBAAmB,EAxFrB,6EAAA;AA0FEC,EAAAA,yBAAyB,EA1F3B,uCAAA;AA2FEC,EAAAA,oBAAoB,EA3FtB,kCAAA;AA4FEC,EAAAA,gBAAgB,EA5FlB,2BAAA;AA6FEC,EAAAA,qBAAqB,EA7FvB,6DAAA;AA+FEC,EAAAA,gBAAgB,EA/FlB,oBAAA;AAgGEC,EAAAA,oBAAoB,EAhGtB,4CAAA;AAiGEC,EAAAA,yBAAyB,EAjG3B,qFAAA;AAmGEC,EAAAA,gCAAgC,EAnGlC,+CAAA;AAqGEC,EAAAA,2BAA2B,EArG7B,8DAAA;AAuGEC,EAAAA,iCAAiC,EAvGnC,yDAAA;AAyGEC,EAAAA,gCAAgC,EAzGlC,gEAAA;AA2GEC,EAAAA,qBAAqB,EA3GvB,6BAAA;AA4GEC,EAAAA,wBAAwB,EA5G1B,2BAAA;AA6GEC,EAAAA,iBAAiB,EA7GnB,8BAAA;AA8GEC,EAAAA,gBAAgB,EA9GlB,kCAAA;AA+GEC,EAAAA,gBAAgB,EA/GlB,mCAAA;AAgHEC,EAAAA,gCAAgC,EAhHlC,6FAAA;AAkHEC,EAAAA,iBAAiB,EAlHnB,yFAAA;AAoHEC,EAAAA,qBAAqB,EApHvB,0DAAA;AAsHEC,EAAAA,0BAA0B,EAtH5B,4DAAA;AAwHEC,EAAAA,qBAAqB,EAxHvB,iEAAA;AA0HEC,EAAAA,SAAS,EA1HX,sBAAA;AA2HEC,EAAAA,kBAAkB,EA3HpB,gDAAA;AA4HEC,EAAAA,gBAAgB,EA5HlB,uCAAA;AA8HEC,EAAAA,iBAAiB,EA9HnB,iJAAA;AAgIEC,EAAAA,0BAA0B,EAhI5B,iHAAA;AAkIEC,EAAAA,gBAAgB,EAlIlB,4DAAA;AAoIEC,EAAAA,0BAA0B,EApI5B,kKAAA;AAsIEC,EAAAA,eAAe,EAtIjB,yGAAA;AAwIEC,EAAAA,uBAAuB,EAxIzB,iGAAA;AA+IEC,EAAAA,mBAAmB,EA/IrB,mGAAA;AAiJEC,EAAAA,8BAA8B,EAjJhC,iEAAA;AAmJEC,EAAAA,8BAA8B,EAnJhC,oEAAA;AAqJEC,EAAAA,mBAAmB,EArJrB,8DAAA;AAuJEC,EAAAA,sBAAsB,EAvJxB,sEAAA;AAyJEC,EAAAA,iCAAiC,EAzJnC,iHAAA;AA4JEC,EAAAA,mBAAmB,EA5JrB,wGAAA;AA8JEC,EAAAA,wBAAwB,EA9J1B,6BAAA;AA+JEC,EAAAA,yCAAyC,EA/J3C,mIAAA;AAiKEC,EAAAA,2CAA2C,EAjK7C,qIAAA;AAmKEC,EAAAA,4CAA4C,EAnK9C,sIAAA;AAqKEC,EAAAA,aAAa,EArKf,mDAAA;AAsKEC,EAAAA,iBAAiB,EAtKnB,+CAAA;AAuKEC,EAAAA,cAAc,EAvKhB,0HAAA;AAyKEC,EAAAA,eAAe,EAzKjB,uDAAA;AA0KEC,EAAAA,YAAY,EA1Kd,yCAAA;AA2KEC,EAAAA,mBAAmB,EA3KrB,mCAAA;AA4KEC,EAAAA,0BAA0B,EA5K5B,8BAAA;AA6KEC,EAAAA,cAAc,EA7KhB,qFAAA;AA+KEC,EAAAA,mBAAmB,EA/KrB,wDAAA;AAiLEC,EAAAA,kBAAkB,EAjLpB,uDAAA;AAkLEC,EAAAA,UAAU,EAlLZ,wBAAA;AAmLEC,EAAAA,eAAe,EAnLjB,mJAAA;AAqLEC,EAAAA,iBAAiB,EArLnB,4CAAA;AAsLEC,EAAAA,iBAAiB,EAtLnB,iDAAA;AAuLEC,EAAAA,wCAAwC,EAvL1C,kIAAA;AAyLEC,EAAAA,0CAA0C,EAzL5C,oIAAA;AA2LEC,EAAAA,2CAA2C,EA3L7C,qIAAA;AA6LEC,EAAAA,6BAA6B,EA7L/B,kCAAA;AA8LEC,EAAAA,gCAAgC,EA9LlC,0FAAA;AAgMEC,EAAAA,wBAAwB,EAhM1B,oCAAA;AAiMEC,EAAAA,sBAAsB,EAjMxB,yDAAA;AAmMEC,EAAAA,iBAAiB,EAnMnB,0BAAA;AAoMEC,EAAAA,0BAA0B,EApM5B,6DAAA;AAsMEC,EAAAA,4BAA4B,EAtM9B,kEAAA;AAwMEC,EAAAA,mBAAmB,EAxMrB,iEAAA;AA0MEC,EAAAA,0BAA0B,EA1M5B,yDAAA;AA4MEC,EAAAA,sBAAsB,EA5MxB,0BAAA;AA6MEC,EAAAA,sBAAsB,EA7MxB,gCAAA;AA8MEC,EAAAA,eAAe,EA9MjB,wDAAA;AA+MEC,EAAAA,eAAe,EA/MjB,wBAAA;AAgNEC,EAAAA,kCAAkC,EAhNpC,kFAAA;AAkNEC,EAAAA,eAAe,EAlNjB,iDAAA;AAmNEC,EAAAA,0BAA0B,EAnN5B,qDAAA;AAqNEC,EAAAA,wBAAwB,EArN1B,6EAAA;AAuNEC,EAAAA,iBAAiB,EAvNnB,2DAAA;AAyNEC,EAAAA,uBAAuB,EAzNzB,+CAAA;AA0NEC,EAAAA,6BAA6B,EA1N/B,mDAAA;AA4NEC,EAAAA,4BAA4B,EA5N9B,kEAAA;AA8NEC,EAAAA,gBAAgB,EA9NlB,uHAAA;AAgOEC,EAAAA,mBAAmB,EAhOrB,uBAAA;AAiOEC,EAAAA,kBAAkB,EAjOpB,kCAAA;AAkOEC,EAAAA,kBAAkB,EAlOpB,+BAAA;AAmOEC,EAAAA,oBAAoB,EAnOtB,wBAAA;AAoOEC,EAAAA,gBAAgB,EApOlB,4CAAA;AAqOEC,EAAAA,sBAAsB,EArOxB,uDAAA;AAuOEC,EAAAA,gBAAgB,EAvOlB,uDAAA;AAwOEC,EAAAA,yBAAyB,EACvB;AAzOJ,CAD6C,EA4OlC9J,UAAU,CA5OhB,WAAwC,CAAxC;AA+OA,MAAM+J,6BAA6B,GAAG3J,kBAAkB,CAC7D;AACE4J,EAAAA,uBAAuB,EADzB,yDAAA;AAEEC,EAAAA,mBAAmB,EAAG;AAFxB,CAD6D,EAKlDjK,UAAU,CALhB,qBAAwD,CAAxD;;AC1NP,SAAA,oBAAA,CAAA,UAAA,EAAA,YAAA,EAA8E;AACzC;AAEjC,QAAIkK,YAAY,KAAZA,MAAAA,IAA2BC,UAAU,KAAzC,mBAAA,EAAmE;AACjE,aAAA,wBAAA;AACD;AACF;AACD,SAAA,UAAA;AACD;;AAEM,SAAA,kBAAA,CAAA,QAAA,EAAA,IAAA,EAAA,YAAA,EAMW;AAChB,QAAMC,SAAyB,GAA/B,EAAA;AACAhM,EAAAA,MAAM,CAANA,IAAAA,CAAAA,QAAAA,EAAAA,OAAAA,CAA8B+L,UAAU,IAAI;AAC1CC,IAAAA,SAAS,CAATA,UAAS,CAATA,GAAwB,MAAM,CAAN,MAAA,CAAc;AAAA,MAAA,IAAA;AAEpCD,MAAAA,UAAU,EAAEE,oBAAoB,CAAA,UAAA,EAFI,YAEJ,CAFI;AAGpCC,MAAAA,QAAQ,EAAEC,QAAQ,CAAA,UAAA;AAHkB,KAAd,CAAxBH;AADFhM,GAAAA;AAOA,SAAOA,MAAM,CAANA,MAAAA,CAAP,SAAOA,CAAP;AACD;;AAUc,MAAA,WAAA,SAAA,cAAA,CAAyC;AAMtDoM,EAAAA,sBAAsB,CAAA,GAAA,EAAwB;AAC5C,QAAA,GAAA;AACA,QAAIC,GAAG,KAAK,KAAA,KAAA,CAAZ,KAAA,EAA8BC,GAAG,GAAG,KAAA,KAAA,CAApC,QAA8BA,CAA9B,KACK,IAAID,GAAG,KAAK,KAAA,KAAA,CAAZ,YAAA,EAAqCC,GAAG,GAAG,KAAA,KAAA,CAA3C,eAAqCA,CAArC,KACA,IAAID,GAAG,KAAK,KAAA,KAAA,CAAZ,GAAA,EAA4BC,GAAG,GAAG,KAAA,KAAA,CAAlC,MAA4BA,CAA5B,KACA,IAAID,GAAG,KAAK,KAAA,KAAA,CAAZ,UAAA,EAAmCC,GAAG,GAAG,KAAA,KAAA,CAAzC,aAAmCA,CAAnC,KACAA,GAAG,GAAGC,WAAW,CAAC,KAAD,KAAA,EAAjBD,GAAiB,CAAjBA;AAEL,WAAA,GAAA;AACD;;AAEDE,EAAAA,KAAK,CAAA,GAAA,QAIY;AAAA,QAFf;AAAA,MAAA,IAAA;AAAA,MAAA,UAAA;AAAoBN,MAAAA;AAApB,KAEe;;AAAA,sCAJZ,MAIY;AAJZ,MAAA,MAIY;AAAA;;AACf,WAAO,KAAA,aAAA,CAAA,GAAA,EAAwB;AAAA,MAAA,IAAA;AAAQH,MAAAA;AAAR,KAAxB,EAAA,QAAA,EAAwD,GAA/D,MAAO,CAAP;AACD;;AAcDU,EAAAA,cAAc,CAAA,GAAA,SAIG;AAAA,QAFf;AAAA,MAAA,IAAA;AAAQP,MAAAA;AAAR,KAEe;;AAAA,uCAJH,MAIG;AAJH,MAAA,MAIG;AAAA;;AACf,UAAMI,GAAG,GAAG,KAAA,sBAAA,CAAZ,GAAY,CAAZ;AACA,UAAMI,OAAO,GACXR,QAAQ,CAARA,OAAAA,CAAAA,SAAAA,EAA4B,CAAA,CAAA,EAAA,CAAA,KAAkBS,MAAM,CAApDT,CAAoD,CAApDA,IACC,KAAII,GAAG,CAAClN,IAAK,IAAGkN,GAAG,CAACjN,MAFvB,GAAA;;AAGA,QAAI,KAAA,OAAA,CAAJ,aAAA,EAAgC;AAC9B,YAAMuN,MAAM,GAAG,KAAA,KAAA,CAAf,MAAA;;AACA,WAAK,IAAIvM,CAAC,GAAGuM,MAAM,CAANA,MAAAA,GAAb,CAAA,EAAgCvM,CAAC,IAAjC,CAAA,EAAwCA,CAAxC,EAAA,EAA6C;AAC3C,cAAMwM,KAAK,GAAGD,MAAM,CAApB,CAAoB,CAApB;;AACA,YAAIC,KAAK,CAALA,GAAAA,KAAJ,GAAA,EAAuB;AACrB,iBAAO,MAAM,CAAN,MAAA,CAAA,KAAA,EAAqB;AAAEH,YAAAA;AAAF,WAArB,CAAP;AADF,SAAA,MAEO,IAAIG,KAAK,CAALA,GAAAA,GAAJ,GAAA,EAAqB;AAC1B;AACD;AACF;AACF;;AACD,WAAO,KAAA,MAAA,CAAY;AAAA,MAAA,IAAA;AAAA,MAAA,GAAA;AAAaR,MAAAA;AAAb,KAAZ,EAAP,OAAO,CAAP;AACD;;AAEDS,EAAAA,aAAa,CAAA,GAAA,EAAA,IAAA,EAAA,aAAA,EAQI;AAAA,uCARJ,MAQI;AARJ,MAAA,MAQI;AAAA;;AACf,UAAMR,GAAG,GAAG,KAAA,sBAAA,CAAZ,GAAY,CAAZ;AACA,UAAMI,OAAO,GACXK,aAAa,CAAbA,OAAAA,CAAAA,SAAAA,EAAiC,CAAA,CAAA,EAAA,CAAA,KAAkBJ,MAAM,CAAzDI,CAAyD,CAAzDA,IACC,KAAIT,GAAG,CAAClN,IAAK,IAAGkN,GAAG,CAACjN,MAFvB,GAAA;AAGA,WAAO,KAAA,MAAA,CAAY,MAAM,CAAN,MAAA,CAAe;AAAA,MAAA,GAAA;AAAOgN,MAAAA;AAAP,KAAf,EAAZ,IAAY,CAAZ,EAAP,OAAO,CAAP;AACD;;AAEDW,EAAAA,MAAM,CAAA,YAAA,EAAA,OAAA,EAA6D;AAEjE,UAAMC,GAA+B,GAAG,IAAA,WAAA,CAAxC,OAAwC,CAAxC;AACAjN,IAAAA,MAAM,CAANA,MAAAA,CAAAA,GAAAA,EAAAA,YAAAA;;AACA,QAAI,KAAA,OAAA,CAAJ,aAAA,EAAgC;AAC9B,UAAI,CAAC,KAAL,WAAA,EAAuB,KAAA,KAAA,CAAA,MAAA,CAAA,IAAA,CAAA,GAAA;AACvB,aAAA,GAAA;AAFF,KAAA,MAGO;AACL,YAAA,GAAA;AACD;AACF;;AAtFqD;;AC3DxD,IAAA,MAAA,GAAgBkN,UAAD,IACb,cAAA,UAAA,CAAyB;AACvBC,EAAAA,kBAAkB,QAA6B;AAAA,QAA5B;AAAA,MAAA,OAAA;AAAWC,MAAAA;AAAX,KAA4B;AAC7C,QAAIC,KAAK,GAAT,IAAA;;AACA,QAAI;AACFA,MAAAA,KAAK,GAAG,IAAA,MAAA,CAAA,OAAA,EAARA,KAAQ,CAARA;AADF,KAAA,CAEE,OAAA,CAAA,EAAU,CAAA;;AAIZ,UAAMlN,IAAI,GAAG,KAAA,kBAAA,CAAb,KAAa,CAAb;AACAA,IAAAA,IAAI,CAAJA,KAAAA,GAAa;AAAA,MAAA,OAAA;AAAWiN,MAAAA;AAAX,KAAbjN;AAEA,WAAA,IAAA;AACD;;AAEDmN,EAAAA,kBAAkB,CAAA,KAAA,EAAqB;AAErC,QAAA,MAAA;;AACA,QAAI;AAEFC,MAAAA,MAAM,GAAGC,MAAM,CAAfD,KAAe,CAAfA;AAFF,KAAA,CAGE,OAAA,OAAA,EAAM;AACNA,MAAAA,MAAM,GAANA,IAAAA;AACD;;AACD,UAAMpN,IAAI,GAAG,KAAA,kBAAA,CAAb,MAAa,CAAb;AACAA,IAAAA,IAAI,CAAJA,MAAAA,GAAcsN,MAAM,CAACtN,IAAI,CAAJA,KAAAA,IAArBA,KAAoB,CAApBA;AAEA,WAAA,IAAA;AACD;;AAEDuN,EAAAA,mBAAmB,CAAA,KAAA,EAAqB;AAGtC,UAAMC,OAAO,GAAb,IAAA;AACA,UAAMxN,IAAI,GAAG,KAAA,kBAAA,CAAb,OAAa,CAAb;AACAA,IAAAA,IAAI,CAAJA,OAAAA,GAAesN,MAAM,CAACtN,IAAI,CAAJA,KAAAA,IAAtBA,KAAqB,CAArBA;AAEA,WAAA,IAAA;AACD;;AAEDyN,EAAAA,kBAAkB,CAAA,KAAA,EAAwB;AACxC,WAAO,KAAA,YAAA,CAAA,KAAA,EAAP,SAAO,CAAP;AACD;;AAEDC,EAAAA,kBAAkB,CAAA,KAAA,EAAqB;AACrC,WAAO,KAAA,kBAAA,CAAP,KAAO,CAAP;AACD;;AAEDC,EAAAA,mBAAmB,CAAA,KAAA,EAAkB;AACnC,WAAO,KAAA,kBAAA,CAAP,KAAO,CAAP;AACD;;AAEDC,EAAAA,gBAAgB,GAAW;AACzB,WAAO,KAAA,kBAAA,CAAP,IAAO,CAAP;AACD;;AAEDC,EAAAA,mBAAmB,CAAA,KAAA,EAAmC;AACpD,WAAO,KAAA,kBAAA,CAAP,KAAO,CAAP;AACD;;AAEDC,EAAAA,eAAe,CAAA,SAAA,EAAgD;AAC7D,UAAMC,gBAAgB,GAAGC,SAAS,CAAlC,KAAA;AAEA,UAAMC,IAAI,GAAG,KAAA,WAAA,CAAiBD,SAAS,CAA1B,KAAA,EAAkCA,SAAS,CAATA,GAAAA,CAA/C,KAAa,CAAb;AACA,UAAME,UAAU,GAAG,KAAA,WAAA,CACjBH,gBAAgB,CADC,KAAA,EAEjBA,gBAAgB,CAAhBA,GAAAA,CAFF,KAAmB,CAAnB;AAKAG,IAAAA,UAAU,CAAVA,KAAAA,GAAmBH,gBAAgB,CAAhBA,KAAAA,CAAnBG,eAAAA;AACAA,IAAAA,UAAU,CAAVA,GAAAA,GAAiBH,gBAAgB,CAAhBA,KAAAA,CAAjBG,GAAAA;AAEAD,IAAAA,IAAI,CAAJA,UAAAA,GAAkB,KAAA,YAAA,CAAA,UAAA,EAAA,SAAA,EAGhBF,gBAAgB,CAHA,GAAA,EAIhBA,gBAAgB,CAAhBA,GAAAA,CAJFE,GAAkB,CAAlBA;AAMAA,IAAAA,IAAI,CAAJA,SAAAA,GAAiBF,gBAAgB,CAAhBA,KAAAA,CAAAA,GAAAA,CAAAA,KAAAA,CAAAA,CAAAA,EAAoC,CAArDE,CAAiBF,CAAjBE;AAEA,WAAO,KAAA,YAAA,CAAA,IAAA,EAAA,qBAAA,EAGLD,SAAS,CAHJ,GAAA,EAILA,SAAS,CAATA,GAAAA,CAJF,GAAO,CAAP;AAMD;;AAMDG,EAAAA,YAAY,CAAA,IAAA,EAAA,OAAA,EAGJ;AACN,UAAA,YAAA,CAAA,IAAA,EAAA,OAAA;AACAnO,IAAAA,IAAI,CAAJA,UAAAA,GAAAA,KAAAA;AACD;;AAEDoO,EAAAA,gBAAgB,CAAA,IAAA,EAA2C;AACzD,QAAIpO,IAAI,IAAJA,IAAAA,IAAgB,KAAA,gBAAA,CAApB,IAAoB,CAApB,EAAiD;AAC/C,WAAA,gBAAA,CAAwBA,IAAF,CAAtB,KAAA;AADF,KAAA,MAEO;AACL,YAAA,gBAAA,CAAA,IAAA;AACD;AACF;;AAEDqO,EAAAA,4BAA4B,CAAA,MAAA,EAAyC;AACnE,WAASC,MAAF,CAAA,KAAEA,CAAT,MAAA;AAED;;AAEDC,EAAAA,gBAAgB,CAAA,IAAA,EAA6B;AAAA,QAAA,qBAAA;;AAC3C,WACEN,IAAI,CAAJA,IAAAA,KAAAA,qBAAAA,IACAA,IAAI,CAAJA,UAAAA,CAAAA,IAAAA,KADAA,SAAAA,IAEA,OAAOA,IAAI,CAAJA,UAAAA,CAAP,KAAA,KAFAA,QAAAA,IAGA,EAAA,CAAA,qBAAA,GAACA,IAAI,CAAJA,UAAAA,CAAD,KAAA,KAAA,IAAA,IAACA,qBAAAA,CAJH,aAIE,CAJF;AAMD;;AAEDO,EAAAA,cAAc,CAAA,IAAA,EAGN;AAAA,uCAHM,IAGN;AAHM,MAAA,IAGN;AAAA;;AACN,UAAA,cAAA,CAAA,IAAA,EAA2B,GAA3B,IAAA;AAEA,UAAMC,mBAAmB,GAAGzO,IAAI,CAAJA,UAAAA,CAAAA,GAAAA,CAAoB0O,CAAC,IAC/C,KAAA,eAAA,CADF,CACE,CAD0B1O,CAA5B;AAGAA,IAAAA,IAAI,CAAJA,IAAAA,GAAYyO,mBAAmB,CAAnBA,MAAAA,CAA2BzO,IAAI,CAA3CA,IAAYyO,CAAZzO;AAEA,WAAOA,IAAI,CAAX,UAAA;AACD;;AAED2O,EAAAA,eAAe,CAAA,SAAA,EAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAAA,aAAA,EAAA,iBAAA,EAOP;AACN,SAAA,WAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAAA,aAAA,EAAA,iBAAA,EAAA,aAAA,EAAA,IAAA;;AASA,QAAIL,MAAM,CAAV,cAAA,EAA2B;AAEzBA,MAAAA,MAAM,CAANA,KAAAA,CAAAA,cAAAA,GAA8BA,MAAM,CAApCA,cAAAA;AACA,aAAOA,MAAM,CAAb,cAAA;AACD;;AACDM,IAAAA,SAAS,CAATA,IAAAA,CAAAA,IAAAA,CAAAA,MAAAA;AACD;;AAEDC,EAAAA,gBAAgB,GAAQ;AACtB,UAAM7O,IAAI,GAAG,MAAb,gBAAa,EAAb;AACmC;AACjC,UAAI,CAAC,KAAA,eAAA,CAAA,QAAA,EAAL,eAAK,CAAL,EAAsD;AACpD,eAAA,IAAA;AACD;AACF;AACD,WAAO,KAAA,qCAAA,CAAP,IAAO,CAAP;AACD;;AAED8O,EAAAA,qCAAqC,CAAA,IAAA,EAER;AAC3B,UAAMC,IAAI,GAAG,MAAA,gBAAA,CAAb,IAAa,CAAb;AACA/O,IAAAA,IAAI,GAAJA,IAAAA;AACA,WAAOA,IAAI,CAAX,EAAA;AACAA,IAAAA,IAAI,CAAJA,IAAAA,GAAAA,IAAAA;AACAA,IAAAA,IAAI,CAAJA,IAAAA,GAAAA,mBAAAA;AACA,WAAA,IAAA;AACD;;AAEDgP,EAAAA,aAAa,CAAA,IAAA,EAAwB;AACA;AACjC,UAAI,CAAC,KAAA,eAAA,CAAA,QAAA,EAAL,eAAK,CAAL,EAAsD;AACpD,eAAO,MAAA,aAAA,CAAP,IAAO,CAAP;AACD;AACF;AACD,WAAOhP,IAAI,CAAJA,IAAAA,KAAP,mBAAA;AACD;;AAEDiP,EAAAA,gBAAgB,CAAA,IAAA,EAAuB;AACF;AACjC,UAAI,CAAC,KAAA,eAAA,CAAA,QAAA,EAAL,eAAK,CAAL,EAAsD;AACpD,eAAO,MAAA,gBAAA,CAAP,IAAO,CAAP;AACD;AACF;AACD,WAAOjP,IAAI,CAAX,IAAA;AACD;;AAEDkP,EAAAA,YAAY,CAAA,KAAA,EAAA,IAAA,EAA0D;AACpE,UAAMlP,IAAI,GAAG,MAAA,YAAA,CAAA,KAAA,EAAb,IAAa,CAAb;AACAA,IAAAA,IAAI,CAAJA,GAAAA,GAAWA,IAAI,CAAJA,KAAAA,CAAXA,GAAAA;AACA,WAAOA,IAAI,CAAX,KAAA;AAEA,WAAA,IAAA;AACD;;AAEDmP,EAAAA,iBAAiB,CAAA,IAAA,EAAA,eAAA,EAIT;AAAA,QADNC,QACM,uEAJS,KAIT;AACN,UAAA,iBAAA,CAAA,IAAA,EAAA,eAAA,EAAA,QAAA;AACApP,IAAAA,IAAI,CAAJA,UAAAA,GAAkBA,IAAI,CAAJA,IAAAA,CAAAA,IAAAA,KAAlBA,gBAAAA;AACD;;AAEDqP,EAAAA,WAAW,CAAA,IAAA,EAAA,WAAA,EAAA,OAAA,EAAA,aAAA,EAAA,gBAAA,EAAA,IAAA,EAQN;AAAA,QADHC,YACG,uEARM,KAQN;AACH,QAAIC,QAAQ,GAAG,KAAf,SAAe,EAAf;AACAA,IAAAA,QAAQ,CAARA,IAAAA,GAAgBvP,IAAI,CAApBuP,IAAAA;AACAA,IAAAA,QAAQ,GAAG,MAAA,WAAA,CAAA,QAAA,EAAA,WAAA,EAAA,OAAA,EAAA,aAAA,EAAA,gBAAA,EAAA,IAAA,EAAXA,YAAW,CAAXA;AASAA,IAAAA,QAAQ,CAARA,IAAAA,GAAAA,oBAAAA;AACA,WAAOA,QAAQ,CAAf,IAAA;AAEAvP,IAAAA,IAAI,CAAJA,KAAAA,GAAAA,QAAAA;;AACA,QAAIwP,IAAI,KAAR,oBAAA,EAAmC;AAEjCxP,MAAAA,IAAI,CAAJA,QAAAA,GAAAA,KAAAA;AACD;;AACDwP,IAAAA,IAAI,GAAJA,kBAAAA;AACA,WAAO,KAAA,UAAA,CAAA,IAAA,EAAP,IAAO,CAAP;AACD;;AAEDC,EAAAA,kBAAkB,GAAkC;AAClD,UAAMC,YAAY,GAAI,MAAA,kBAAA,CAAtB,YAAsB,CAAtB;AACmC;AACjC,UAAI,CAAC,KAAA,eAAA,CAAA,QAAA,EAAL,eAAK,CAAL,EAAsD;AACpD,eAAA,YAAA;AACD;AACF;AACDA,IAAAA,YAAY,CAAZA,IAAAA,GAAAA,oBAAAA;AACA,WAAA,YAAA;AACD;;AAEDC,EAAAA,yBAAyB,GAAyC;AAChE,UAAMD,YAAY,GAAI,MAAA,yBAAA,CAAtB,YAAsB,CAAtB;AACmC;AACjC,UAAI,CAAC,KAAA,eAAA,CAAA,QAAA,EAAL,eAAK,CAAL,EAAsD;AACpD,eAAA,YAAA;AACD;AACF;AACDA,IAAAA,YAAY,CAAZA,IAAAA,GAAAA,oBAAAA;AACAA,IAAAA,YAAY,CAAZA,QAAAA,GAAAA,KAAAA;AACA,WAAA,YAAA;AACD;;AAEDE,EAAAA,iBAAiB,CAAA,IAAA,EAAA,WAAA,EAAA,OAAA,EAAA,SAAA,EAAA,UAAA,EAME;AACjB,UAAM5P,IAAsB,GAAI,MAAA,iBAAA,CAAA,IAAA,EAAA,WAAA,EAAA,OAAA,EAAA,SAAA,EAAhC,UAAgC,CAAhC;;AAQA,QAAA,IAAA,EAAU;AACRA,MAAAA,IAAI,CAAJA,IAAAA,GAAAA,UAAAA;AACA,UAAMA,IAAF,CAAA,IAAEA,KAAN,QAAA,EAAoDA,IAAI,CAAJA,IAAAA,GAAAA,MAAAA;AACpDA,MAAAA,IAAI,CAAJA,SAAAA,GAAAA,KAAAA;AACD;;AAED,WAAA,IAAA;AACD;;AAED6P,EAAAA,mBAAmB,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAA,mBAAA,EAME;AACnB,UAAM7P,IAAsB,GAAI,MAAA,mBAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,SAAA,EAAhC,mBAAgC,CAAhC;;AAQA,QAAA,IAAA,EAAU;AACRA,MAAAA,IAAI,CAAJA,IAAAA,GAAAA,MAAAA;AACAA,MAAAA,IAAI,CAAJA,IAAAA,GAAAA,UAAAA;AACD;;AAED,WAAA,IAAA;AACD;;AAED8P,EAAAA,YAAY,CAAA,IAAA,EAAA,SAAA,EAA6C;AACvD,QAAI9P,IAAI,IAAJA,IAAAA,IAAgB,KAAA,gBAAA,CAApB,IAAoB,CAApB,EAAiD;AAC/C,aAAO,KAAA,YAAA,CAAkBA,IAAI,CAAtB,KAAA,EAAP,SAAO,CAAP;AACD;;AACD,WAAO,MAAA,YAAA,CAAA,IAAA,EAAP,SAAO,CAAP;AACD;;AAED+P,EAAAA,YAAY,CAAA,IAAA,EAA+C;AAAA,QAAhCC,KAAgC,uEAA/C,KAA+C;;AACzD,QAAIhQ,IAAI,IAAJA,IAAAA,IAAgB,KAAA,gBAAA,CAApB,IAAoB,CAApB,EAAiD;AAC/C,WAAA,YAAA,CAAkBA,IAAI,CAAtB,KAAA,EAAA,KAAA;AAEA,aAAA,IAAA;AACD;;AAED,WAAO,MAAA,YAAA,CAAA,IAAA,EAAP,KAAO,CAAP;AACD;;AAEDiQ,EAAAA,gCAAgC,CAAA,IAAA,EAAwB;AACtD,QAAIC,IAAI,CAAJA,IAAAA,KAAAA,KAAAA,IAAuBA,IAAI,CAAJA,IAAAA,KAA3B,KAAA,EAAgD;AAC9C,WAAA,KAAA,CAAWA,IAAI,CAAJA,GAAAA,CAAX,KAAA,EAA2BC,aAAM,CAAjC,kBAAA;AADF,KAAA,MAEO,IAAID,IAAI,CAAR,MAAA,EAAiB;AACtB,WAAA,KAAA,CAAWA,IAAI,CAAJA,GAAAA,CAAX,KAAA,EAA2BC,aAAM,CAAjC,gBAAA;AADK,KAAA,MAEA;AAAA,yCALuB,IAKvB;AALuB,QAAA,IAKvB;AAAA;;AACL,YAAA,gCAAA,CAAA,IAAA,EAA6C,GAA7C,IAAA;AACD;AACF;;AAEDC,EAAAA,oBAAoB,CAAA,IAAA,EAAA,QAAA,EAGJ;AACd,UAAA,oBAAA,CAAA,IAAA,EAAA,QAAA;;AAEA,QAAIpQ,IAAI,CAAJA,MAAAA,CAAAA,IAAAA,KAAJ,QAAA,EAAmC;AAC/BA,MAAAA,IAAF,CAAA,IAAEA,GAAF,kBAAEA;AACAA,MAAAA,IAAF,CAAA,MAAEA,GAAkDA,IAAI,CAAJA,SAAAA,CAApD,CAAoDA,CAAlDA;;AACF,UAAI,KAAA,SAAA,CAAJ,kBAAI,CAAJ,EAAwC;AAAA,YAAA,gBAAA;;AACpCA,QAAAA,IAAF,CAAA,UAAEA,GAAF,CAAA,gBAAA,GACEA,IAAI,CAAJA,SAAAA,CADF,CACEA,CADF,KAAA,IAAA,GAAA,gBAAA,GAAA,IAAEA;AAEH;;AAED,aAAOA,IAAI,CAAX,SAAA;AAEA,aAAOA,IAAI,CAAX,MAAA;AACD;;AAED,WAAA,IAAA;AACD;;AAEDqQ,EAAAA,qBAAqB,CAAA,IAAA,EAMnB;AAEA,QAAIrQ,IAAI,CAAJA,IAAAA,KAAJ,kBAAA,EAAsC;AACpC;AACD;;AAED,UAAA,qBAAA,CAAA,IAAA;AACD;;AAEDsQ,EAAAA,WAAW,CAAA,IAAA,EAAe;AACxB,UAAA,WAAA,CAAA,IAAA;;AAEA,YAAQtQ,IAAI,CAAZ,IAAA;AACE,WAAA,sBAAA;AACEA,QAAAA,IAAI,CAAJA,QAAAA,GAAAA,IAAAA;AACA;;AAEF,WAAA,wBAAA;AACE,YACEA,IAAI,CAAJA,UAAAA,CAAAA,MAAAA,KAAAA,CAAAA,IACAA,IAAI,CAAJA,UAAAA,CAAAA,CAAAA,EAAAA,IAAAA,KAFF,0BAAA,EAGE;AACAA,UAAAA,IAAI,CAAJA,IAAAA,GAAAA,sBAAAA;AACAA,UAAAA,IAAI,CAAJA,QAAAA,GAAgBA,IAAI,CAAJA,UAAAA,CAAAA,CAAAA,EAAhBA,QAAAA;AACA,iBAAOA,IAAI,CAAX,UAAA;AACD;;AAED;AAfJ;;AAkBA,WAAA,IAAA;AACD;;AAEDuQ,EAAAA,cAAc,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,OAAA,EAAA,KAAA,EAMZ;AACA,UAAMvQ,IAAI,GAAG,MAAA,cAAA,CAAA,IAAA,EAAA,QAAA,EAAA,QAAA,EAAA,OAAA,EAAb,KAAa,CAAb;;AAQA,QAAIwQ,KAAK,CAAT,mBAAA,EAA+B;AAE7B,UACExQ,IAAI,CAAJA,IAAAA,KAAAA,0BAAAA,IACAA,IAAI,CAAJA,IAAAA,KAFF,wBAAA,EAGE;AACAA,QAAAA,IAAI,CAAJA,IAAAA,GAAYA,IAAI,CAAJA,IAAAA,CAAAA,SAAAA,CAAZA,CAAYA,CAAZA;AACD;;AACD,UAAIwQ,KAAK,CAAT,IAAA,EAAgB;AACd,cAAMC,KAAK,GAAG,KAAA,eAAA,CAAd,IAAc,CAAd;AACAA,QAAAA,KAAK,CAALA,UAAAA,GAAAA,IAAAA;AACA,eAAO,KAAA,UAAA,CAAA,KAAA,EAAP,iBAAO,CAAP;AACD;AAZH,KAAA,MAaO,IACLzQ,IAAI,CAAJA,IAAAA,KAAAA,kBAAAA,IACAA,IAAI,CAAJA,IAAAA,KAFK,gBAAA,EAGL;AACAA,MAAAA,IAAI,CAAJA,QAAAA,GAAAA,KAAAA;AACD;;AAED,WAAA,IAAA;AACD;;AAED0Q,EAAAA,wBAAwB,CAAA,IAAA,EAAwB;AAC9C,QAAI1Q,IAAI,CAAJA,IAAAA,KAAJ,iBAAA,EAAqC;AACnCA,MAAAA,IAAI,GAAGA,IAAI,CAAXA,UAAAA;AACD;;AACD,WAAO,MAAA,wBAAA,CAAP,IAAO,CAAP;AACD;;AAED2Q,EAAAA,eAAe,CAAA,IAAA,EAAwB;AACrC,WAAO3Q,IAAI,CAAJA,IAAAA,KAAP,iBAAA;AACD;;AAED4Q,EAAAA,gBAAgB,CAAA,IAAA,EAAwB;AACtC,WAAO5Q,IAAI,CAAJA,IAAAA,KAAAA,UAAAA,IAA4BA,IAAI,CAAJA,IAAAA,KAA5BA,MAAAA,IAAoD,CAACA,IAAI,CAAhE,MAAA;AACD;;AAED6Q,EAAAA,cAAc,CAAA,IAAA,EAAwB;AACpC,WAAO7Q,IAAI,CAAJA,MAAAA,IAAeA,IAAI,CAAJA,IAAAA,KAAfA,KAAAA,IAAsCA,IAAI,CAAJA,IAAAA,KAA7C,KAAA;AACD;;AA9csB,CAD3B;;ACJO,MAAA,UAAA,CAAiB;AACtBb,EAAAA,WAAW,CAAA,KAAA,EAAA,aAAA,EAAyC;AAAA,SAAA,KAAA,GAAA,KAAA,CAAA;AAAA,SAAA,aAAA,GAAA,KAAA,CAAA;AAClD,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,aAAA,GAAqB,CAAC,CAAtB,aAAA;AACD;;AAJqB;;AAUxB,MAAM2R,KAEL,GAAG;AACFC,EAAAA,KAAK,EAAE,IAAA,UAAA,CADL,GACK,CADL;AAEFC,EAAAA,MAAM,EAAE,IAAA,UAAA,CAFN,MAEM,CAFN;AAGFC,EAAAA,MAAM,EAAE,IAAA,UAAA,CAHN,OAGM,CAHN;AAIFC,EAAAA,MAAM,EAAE,IAAA,UAAA,CAAA,gBAAA,EAAA,IAAA;AAJN,CAFJ;AASmC;AACjCJ,EAAAA,KAAK,CAALA,QAAAA,GAAiB,IAAA,UAAA,CAAA,GAAA,EAAjBA,IAAiB,CAAjBA;AACD;ACFD,MAAMK,UAAU,GAAhB,IAAA;AACA,MAAMC,UAAU,GAAhB,IAAA;AACA,MAAMC,MAAM,GAAZ,IAAA;AACA,MAAMC,QAAQ,GAAd,IAAA;AACA,MAAMC,MAAM,GAAZ,IAAA;AACA,MAAMC,OAAO,GAAb,IAAA;;AAoBO,MAAA,iBAAA,CAAwB;AAc7BrS,EAAAA,WAAW,CAAA,KAAA,EAAyC;AAAA,QAAzB0S,IAAyB,uEAAzC,EAAyC;AAAA,SAbpDJ,KAaoD,GAAA,KAAA,CAAA;AAAA,SAZpDC,OAYoD,GAAA,KAAA,CAAA;AAAA,SAXpDP,UAWoD,GAAA,KAAA,CAAA;AAAA,SAVpDC,UAUoD,GAAA,KAAA,CAAA;AAAA,SATpDO,gBASoD,GAAA,KAAA,CAAA;AAAA,SARpDN,MAQoD,GAAA,KAAA,CAAA;AAAA,SAPpDC,QAOoD,GAAA,KAAA,CAAA;AAAA,SANpDC,MAMoD,GAAA,KAAA,CAAA;AAAA,SALpDC,OAKoD,GAAA,KAAA,CAAA;AAAA,SAJpDI,KAIoD,GAAA,KAAA,CAAA;AAClD,SAAA,KAAA,GAAA,KAAA;AACA,SAAA,OAAA,GAAeC,IAAI,CAAnB,OAAA;AACA,SAAA,UAAA,GAAkB,CAAC,CAACA,IAAI,CAAxB,UAAA;AACA,SAAA,UAAA,GAAkB,CAAC,CAACA,IAAI,CAAxB,UAAA;AACA,SAAA,gBAAA,GAAwB,CAAC,CAACA,IAAI,CAA9B,gBAAA;AACA,SAAA,MAAA,GAAc,CAAC,CAACA,IAAI,CAApB,MAAA;AACA,SAAA,QAAA,GAAgB,CAAC,CAACA,IAAI,CAAtB,QAAA;AACA,SAAA,MAAA,GAAc,CAAC,CAACA,IAAI,CAApB,MAAA;AACA,SAAA,OAAA,GAAe,CAAC,CAACA,IAAI,CAArB,OAAA;AACA,SAAA,KAAA,GAAaA,IAAI,CAAJA,KAAAA,IAAAA,IAAAA,GAAqBA,IAAI,CAAzBA,KAAAA,GAAb,IAAA;AACmC;AACjC,WAAA,aAAA,GAAA,IAAA;AACD;AACF;;AA5B4B;;AAgCxB,MAAMC,UAAQ,GAAG,IAAjB,GAAiB,EAAjB;;AAEP,SAAA,aAAA,CAAA,IAAA,EAA4E;AAAA,MAAvCC,OAAuC,uEAA5E,EAA4E;AAC1EA,EAAAA,OAAO,CAAPA,OAAAA,GAAAA,IAAAA;AACA,QAAMC,KAAK,GAAGC,WAAW,CAAA,IAAA,EAAzB,OAAyB,CAAzB;AACAH,EAAAA,UAAQ,CAARA,GAAAA,CAAAA,IAAAA,EAAAA,KAAAA;AACA,SAAA,KAAA;AACD;;AAED,SAAA,WAAA,CAAA,IAAA,EAAA,KAAA,EAAkD;AAChD,SAAOG,WAAW,CAAA,IAAA,EAAO;AAAA,IAAA,UAAA;AAAcL,IAAAA;AAAd,GAAP,CAAlB;AACD;;AAED,IAAIM,gBAAgB,GAAG,CAAvB,CAAA;AACO,MAAMC,UAA+B,GAArC,EAAA;AACP,MAAMC,WAAqB,GAA3B,EAAA;AACA,MAAMC,WAAqB,GAA3B,EAAA;AACA,MAAMC,gBAA2B,GAAjC,EAAA;AACA,MAAMC,gBAA2B,GAAjC,EAAA;AACA,MAAMC,aAAwB,GAA9B,EAAA;;AAEA,SAAA,WAAA,CAAA,IAAA,EAA0E;AAAA,MAAvCT,OAAuC,uEAA1E,EAA0E;;AAAA,MAAA,cAAA,EAAA,mBAAA,EAAA,mBAAA,EAAA,eAAA;;AACxE,IAAA,gBAAA;AACAK,EAAAA,WAAW,CAAXA,IAAAA,CAAAA,IAAAA;AACAC,EAAAA,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,cAAAA,GAAiBN,OAAO,CAAxBM,KAAAA,KAAAA,IAAAA,GAAAA,cAAAA,GAAkC,CAAlCA,CAAAA;AACAC,EAAAA,gBAAgB,CAAhBA,IAAAA,CAAAA,CAAAA,mBAAAA,GAAsBP,OAAO,CAA7BO,UAAAA,KAAAA,IAAAA,GAAAA,mBAAAA,GAAAA,KAAAA;AACAC,EAAAA,gBAAgB,CAAhBA,IAAAA,CAAAA,CAAAA,mBAAAA,GAAsBR,OAAO,CAA7BQ,UAAAA,KAAAA,IAAAA,GAAAA,mBAAAA,GAAAA,KAAAA;AACAC,EAAAA,aAAa,CAAbA,IAAAA,CAAAA,CAAAA,eAAAA,GAAmBT,OAAO,CAA1BS,MAAAA,KAAAA,IAAAA,GAAAA,eAAAA,GAAAA,KAAAA;AACAL,EAAAA,UAAU,CAAVA,IAAAA,CAAgB,IAAA,iBAAA,CAAA,IAAA,EAAhBA,OAAgB,CAAhBA;AAEA,SAAA,gBAAA;AACD;;AAED,SAAA,iBAAA,CAAA,IAAA,EAGa;AAAA,MADXJ,OACW,uEAHb,EAGa;;AAAA,MAAA,eAAA,EAAA,oBAAA,EAAA,oBAAA,EAAA,gBAAA;;AACX,IAAA,gBAAA;AACAD,EAAAA,UAAQ,CAARA,GAAAA,CAAAA,IAAAA,EAAAA,gBAAAA;AACAM,EAAAA,WAAW,CAAXA,IAAAA,CAAAA,IAAAA;AACAC,EAAAA,WAAW,CAAXA,IAAAA,CAAAA,CAAAA,eAAAA,GAAiBN,OAAO,CAAxBM,KAAAA,KAAAA,IAAAA,GAAAA,eAAAA,GAAkC,CAAlCA,CAAAA;AACAC,EAAAA,gBAAgB,CAAhBA,IAAAA,CAAAA,CAAAA,oBAAAA,GAAsBP,OAAO,CAA7BO,UAAAA,KAAAA,IAAAA,GAAAA,oBAAAA,GAAAA,KAAAA;AACAC,EAAAA,gBAAgB,CAAhBA,IAAAA,CAAAA,CAAAA,oBAAAA,GAAsBR,OAAO,CAA7BQ,UAAAA,KAAAA,IAAAA,GAAAA,oBAAAA,GAAAA,KAAAA;AACAC,EAAAA,aAAa,CAAbA,IAAAA,CAAAA,CAAAA,gBAAAA,GAAmBT,OAAO,CAA1BS,MAAAA,KAAAA,IAAAA,GAAAA,gBAAAA,GAAAA,KAAAA;AAEAL,EAAAA,UAAU,CAAVA,IAAAA,CAAgB,IAAA,iBAAA,CAAA,MAAA,EAAhBA,OAAgB,CAAhBA;AAEA,SAAA,gBAAA;AACD;;AAKM,MAAMM,EAAiC,GAAG;AAE/CC,EAAAA,QAAQ,EAAET,WAAW,CAAA,GAAA,EAAM;AAAA,IAAA,UAAA;AAAcb,IAAAA;AAAd,GAAN,CAF0B;AAG/CuB,EAAAA,YAAY,EAAEV,WAAW,CAAA,IAAA,EAAO;AAAA,IAAA,UAAA;AAAcb,IAAAA;AAAd,GAAP,CAHsB;AAI/CwB,EAAAA,WAAW,EAAEX,WAAW,CAAA,IAAA,EAAO;AAAA,IAAA,UAAA;AAAcb,IAAAA;AAAd,GAAP,CAJuB;AAK/CyB,EAAAA,QAAQ,EAAEZ,WAAW,CAL0B,GAK1B,CAL0B;AAM/Ca,EAAAA,WAAW,EAAEb,WAAW,CANuB,IAMvB,CANuB;AAO/Cc,EAAAA,MAAM,EAAEd,WAAW,CAAA,GAAA,EAAM;AAAA,IAAA,UAAA;AAAcb,IAAAA;AAAd,GAAN,CAP4B;AAQ/C4B,EAAAA,SAAS,EAAEf,WAAW,CAAA,IAAA,EAAO;AAAA,IAAA,UAAA;AAAcb,IAAAA;AAAd,GAAP,CARyB;AAS/C6B,EAAAA,UAAU,EAAEhB,WAAW,CAAA,IAAA,EAAO;AAAA,IAAA,UAAA;AAAcb,IAAAA;AAAd,GAAP,CATwB;AAU/C8B,EAAAA,MAAM,EAAEjB,WAAW,CAAA,GAAA,EAAM;AAAEd,IAAAA;AAAF,GAAN,CAV4B;AAW/CgC,EAAAA,SAAS,EAAElB,WAAW,CAXyB,IAWzB,CAXyB;AAY/CmB,EAAAA,MAAM,EAAEnB,WAAW,CAAA,GAAA,EAAM;AAAA,IAAA,UAAA;AAAcb,IAAAA;AAAd,GAAN,CAZ4B;AAa/CiC,EAAAA,MAAM,EAAEpB,WAAW,CAb4B,GAa5B,CAb4B;AAc/CqB,EAAAA,KAAK,EAAErB,WAAW,CAAA,GAAA,EAAM;AAAEd,IAAAA;AAAF,GAAN,CAd6B;AAe/CoC,EAAAA,IAAI,EAAEtB,WAAW,CAAA,GAAA,EAAM;AAAEd,IAAAA;AAAF,GAAN,CAf8B;AAgB/CqC,EAAAA,KAAK,EAAEvB,WAAW,CAAA,GAAA,EAAM;AAAEd,IAAAA;AAAF,GAAN,CAhB6B;AAiB/CsC,EAAAA,WAAW,EAAExB,WAAW,CAAA,IAAA,EAAO;AAAEd,IAAAA;AAAF,GAAP,CAjBuB;AAkB/CuC,EAAAA,GAAG,EAAEzB,WAAW,CAlB+B,GAkB/B,CAlB+B;AAmB/C0B,EAAAA,QAAQ,EAAE1B,WAAW,CAAA,GAAA,EAAM;AAAEd,IAAAA;AAAF,GAAN,CAnB0B;AAoB/CyC,EAAAA,WAAW,EAAE3B,WAAW,CApBuB,IAoBvB,CApBuB;AAqB/C4B,EAAAA,KAAK,EAAE5B,WAAW,CAAA,IAAA,EAAO;AAAEd,IAAAA;AAAF,GAAP,CArB6B;AAsB/CpF,EAAAA,QAAQ,EAAEkG,WAAW,CAtB0B,UAsB1B,CAtB0B;AAuB/C6B,EAAAA,QAAQ,EAAE7B,WAAW,CAAA,KAAA,EAAQ;AAAEd,IAAAA;AAAF,GAAR,CAvB0B;AAwB/C4C,EAAAA,SAAS,EAAE9B,WAAW,CAAA,GAAA,EAAM;AAAEb,IAAAA;AAAF,GAAN,CAxByB;AAyB/C4C,EAAAA,YAAY,EAAE/B,WAAW,CAAA,IAAA,EAAO;AAAA,IAAA,UAAA;AAAcb,IAAAA;AAAd,GAAP,CAzBsB;AA2B/C6C,EAAAA,YAAY,EAAEhC,WAAW,CAAA,MAAA,EAAS;AAAEb,IAAAA;AAAF,GAAT,CA3BsB;AA4B/C8C,EAAAA,eAAe,EAAEjC,WAAW,CAAA,OAAA,EAAU;AAAA,IAAA,UAAA;AAAcb,IAAAA;AAAd,GAAV,CA5BmB;AA8B/C+C,EAAAA,EAAE,EAAElC,WAAW,CA9BgC,GA8BhC,CA9BgC;AA+B/CmC,EAAAA,IAAI,EAAEnC,WAAW,CAAA,GAAA,EAAM;AAAEb,IAAAA;AAAF,GAAN,CA/B8B;AAkC/CiD,EAAAA,oBAAoB,EAAEpC,WAAW,CAlCc,OAkCd,CAlCc;AAmD/CqC,EAAAA,EAAE,EAAErC,WAAW,CAAA,GAAA,EAAM;AAAA,IAAA,UAAA;AAAcX,IAAAA;AAAd,GAAN,CAnDgC;AAoD/CiD,EAAAA,MAAM,EAAEtC,WAAW,CAAA,IAAA,EAAO;AAAA,IAAA,UAAA;AAAcX,IAAAA;AAAd,GAAP,CApD4B;AAqD/CkD,EAAAA,WAAW,EAAEvC,WAAW,CAAA,IAAA,EAAO;AAAA,IAAA,UAAA;AAAcX,IAAAA;AAAd,GAAP,CArDuB;AAwD/CmD,EAAAA,SAAS,EAAExC,WAAW,CAAA,IAAA,EAAO;AAAA,IAAA,UAAA;AAAcX,IAAAA;AAAd,GAAP,CAxDyB;AAyD/CoD,EAAAA,YAAY,EAAEzC,WAAW,CAAA,IAAA,EAAO;AAAA,IAAA,UAAA;AAAcX,IAAAA;AAAd,GAAP,CAzDsB;AA4D/CqD,EAAAA,MAAM,EAAE1C,WAAW,CAAA,OAAA,EAAU;AAAA,IAAA,MAAA;AAAA,IAAA,OAAA;AAAmBb,IAAAA;AAAnB,GAAV,CA5D4B;AA6D/CwD,EAAAA,IAAI,EAAE3C,WAAW,CAAA,GAAA,EAAM;AAAA,IAAA,UAAA;AAAA,IAAA,MAAA;AAAsBb,IAAAA;AAAtB,GAAN,CA7D8B;AA8D/CyD,EAAAA,KAAK,EAAE5C,WAAW,CAAA,GAAA,EAAM;AAAA,IAAA,UAAA;AAAA,IAAA,MAAA;AAAsBb,IAAAA;AAAtB,GAAN,CA9D6B;AAgE/C0D,EAAAA,QAAQ,EAAEC,WAAW,CAAA,IAAA,EAhE0B,CAgE1B,CAhE0B;AAiE/CC,EAAAA,iBAAiB,EAAED,WAAW,CAAA,IAAA,EAjEiB,CAiEjB,CAjEiB;AAkE/CE,EAAAA,SAAS,EAAEF,WAAW,CAAA,IAAA,EAlEyB,CAkEzB,CAlEyB;AAmE/CG,EAAAA,UAAU,EAAEH,WAAW,CAAA,IAAA,EAnEwB,CAmExB,CAnEwB;AAoE/CI,EAAAA,SAAS,EAAEJ,WAAW,CAAA,GAAA,EApEyB,CAoEzB,CApEyB;AAqE/CK,EAAAA,UAAU,EAAEL,WAAW,CAAA,GAAA,EArEwB,CAqExB,CArEwB;AAsE/CM,EAAAA,UAAU,EAAEN,WAAW,CAAA,GAAA,EAtEwB,CAsExB,CAtEwB;AAuE/CO,EAAAA,QAAQ,EAAEP,WAAW,CAAA,eAAA,EAvE0B,CAuE1B,CAvE0B;AAwE/CQ,EAAAA,EAAE,EAAER,WAAW,CAAA,WAAA,EAxEgC,CAwEhC,CAxEgC;AAyE/CS,EAAAA,EAAE,EAAET,WAAW,CAAA,WAAA,EAzEgC,CAyEhC,CAzEgC;AA0E/CU,EAAAA,UAAU,EAAEV,WAAW,CAAA,WAAA,EA1EwB,CA0ExB,CA1EwB;AA2E/CW,EAAAA,QAAQ,EAAEX,WAAW,CAAA,WAAA,EA3E0B,CA2E1B,CA3E0B;AA4E/CY,EAAAA,OAAO,EAAE1D,WAAW,CAAA,KAAA,EAAQ;AAAA,IAAA,UAAA;AAAcL,IAAAA,KAAK,EAAnB,CAAA;AAAA,IAAA,MAAA;AAAgCR,IAAAA;AAAhC,GAAR,CA5E2B;AA8E/CwE,EAAAA,MAAM,EAAE3D,WAAW,CAAA,GAAA,EAAM;AAAEL,IAAAA,KAAK,EAAP,EAAA;AAAaR,IAAAA;AAAb,GAAN,CA9E4B;AAgF/CyE,EAAAA,IAAI,EAAE5D,WAAW,CAAA,GAAA,EAAM;AAAEL,IAAAA,KAAK,EAAE;AAAT,GAAN,CAhF8B;AAiF/CkE,EAAAA,KAAK,EAAEf,WAAW,CAAA,GAAA,EAjF6B,EAiF7B,CAjF6B;AAkF/CgB,EAAAA,QAAQ,EAAE9D,WAAW,CAAA,IAAA,EAAO;AAAA,IAAA,UAAA;AAE1BL,IAAAA,KAAK,EAFqB,EAAA;AAG1BD,IAAAA,gBAAgB,EAAE;AAHQ,GAAP,CAlF0B;AA6F/CqE,EAAAA,GAAG,EAAEC,aAAa,CAAA,IAAA,EAAO;AAAA,IAAA,UAAA;AAAcrE,IAAAA,KAAK,EAAE;AAArB,GAAP,CA7F6B;AA8F/CsE,EAAAA,WAAW,EAAED,aAAa,CAAA,YAAA,EAAe;AAAA,IAAA,UAAA;AAAcrE,IAAAA,KAAK,EAAE;AAArB,GAAf,CA9FqB;AAgG/CuE,EAAAA,MAAM,EAAEF,aAAa,CAhG0B,OAgG1B,CAhG0B;AAiG/CG,EAAAA,KAAK,EAAEH,aAAa,CAAA,MAAA,EAAS;AAAE9E,IAAAA;AAAF,GAAT,CAjG2B;AAkG/CkF,EAAAA,MAAM,EAAEJ,aAAa,CAlG0B,OAkG1B,CAlG0B;AAmG/CK,EAAAA,SAAS,EAAEL,aAAa,CAnGuB,UAmGvB,CAnGuB;AAoG/CM,EAAAA,SAAS,EAAEN,aAAa,CApGuB,UAoGvB,CApGuB;AAqG/CO,EAAAA,QAAQ,EAAEP,aAAa,CAAA,SAAA,EAAY;AAAE9E,IAAAA;AAAF,GAAZ,CArGwB;AAsG/CsF,EAAAA,KAAK,EAAER,aAAa,CAAA,MAAA,EAAS;AAAE9E,IAAAA;AAAF,GAAT,CAtG2B;AAuG/CuF,EAAAA,QAAQ,EAAET,aAAa,CAvGwB,SAuGxB,CAvGwB;AAwG/CU,EAAAA,SAAS,EAAEV,aAAa,CAAA,UAAA,EAAa;AAAE7E,IAAAA;AAAF,GAAb,CAxGuB;AAyG/CwF,EAAAA,GAAG,EAAEX,aAAa,CAzG6B,IAyG7B,CAzG6B;AA0G/CY,EAAAA,OAAO,EAAEZ,aAAa,CAAA,QAAA,EAAW;AAAE9E,IAAAA;AAAF,GAAX,CA1GyB;AA2G/C2F,EAAAA,OAAO,EAAEb,aAAa,CA3GyB,QA2GzB,CA3GyB;AA4G/Cc,EAAAA,MAAM,EAAEd,aAAa,CAAA,OAAA,EAAU;AAAA,IAAA,UAAA;AAAA,IAAA,MAAA;AAAsB7E,IAAAA;AAAtB,GAAV,CA5G0B;AA6G/C4F,EAAAA,IAAI,EAAEf,aAAa,CA7G4B,KA6G5B,CA7G4B;AA8G/CgB,EAAAA,IAAI,EAAEhB,aAAa,CA9G4B,KA8G5B,CA9G4B;AA+G/CiB,EAAAA,MAAM,EAAEjB,aAAa,CA/G0B,OA+G1B,CA/G0B;AAgH/CkB,EAAAA,KAAK,EAAElB,aAAa,CAhH2B,MAgH3B,CAhH2B;AAiH/CmB,EAAAA,IAAI,EAAEnB,aAAa,CAAA,KAAA,EAAQ;AAAA,IAAA,UAAA;AAAc7E,IAAAA;AAAd,GAAR,CAjH4B;AAkH/CiG,EAAAA,KAAK,EAAEpB,aAAa,CAAA,MAAA,EAAS;AAAE7E,IAAAA;AAAF,GAAT,CAlH2B;AAmH/CkG,EAAAA,MAAM,EAAErB,aAAa,CAAA,OAAA,EAAU;AAAE7E,IAAAA;AAAF,GAAV,CAnH0B;AAoH/CmG,EAAAA,MAAM,EAAEtB,aAAa,CAAA,OAAA,EAAU;AAAE7E,IAAAA;AAAF,GAAV,CApH0B;AAqH/CoG,EAAAA,QAAQ,EAAEvB,aAAa,CAAA,SAAA,EAAY;AAAE9E,IAAAA;AAAF,GAAZ,CArHwB;AAsH/CsG,EAAAA,OAAO,EAAExB,aAAa,CAtHyB,QAsHzB,CAtHyB;AAuH/CyB,EAAAA,OAAO,EAAEzB,aAAa,CAAA,QAAA,EAAW;AAAE7E,IAAAA;AAAF,GAAX,CAvHyB;AAwH/CuG,EAAAA,KAAK,EAAE1B,aAAa,CAAA,MAAA,EAAS;AAAE7E,IAAAA;AAAF,GAAT,CAxH2B;AAyH/CwG,EAAAA,KAAK,EAAE3B,aAAa,CAAA,MAAA,EAAS;AAAE7E,IAAAA;AAAF,GAAT,CAzH2B;AA0H/CyG,EAAAA,MAAM,EAAE5B,aAAa,CAAA,OAAA,EAAU;AAAE7E,IAAAA;AAAF,GAAV,CA1H0B;AA2H/C0G,EAAAA,OAAO,EAAE7B,aAAa,CAAA,QAAA,EAAW;AAAA,IAAA,UAAA;AAAA,IAAA,MAAA;AAAsB7E,IAAAA;AAAtB,GAAX,CA3HyB;AA4H/C2G,EAAAA,KAAK,EAAE9B,aAAa,CAAA,MAAA,EAAS;AAAA,IAAA,UAAA;AAAA,IAAA,MAAA;AAAsB7E,IAAAA;AAAtB,GAAT,CA5H2B;AA6H/C4G,EAAAA,OAAO,EAAE/B,aAAa,CAAA,QAAA,EAAW;AAAA,IAAA,UAAA;AAAA,IAAA,MAAA;AAAsB7E,IAAAA;AAAtB,GAAX,CA7HyB;AA+H/C6G,EAAAA,GAAG,EAAEhC,aAAa,CAAA,IAAA,EAAO;AAAA,IAAA,MAAA;AAAU9E,IAAAA;AAAV,GAAP,CA/H6B;AAgI/C+G,EAAAA,IAAI,EAAEjC,aAAa,CAAA,KAAA,EAAQ;AAAE5E,IAAAA;AAAF,GAAR,CAhI4B;AAiI/C8G,EAAAA,MAAM,EAAElC,aAAa,CAAA,OAAA,EAAU;AAAE5E,IAAAA;AAAF,GAAV,CAjI0B;AAuI/C+G,EAAAA,GAAG,EAAEC,iBAAiB,CAAA,IAAA,EAAO;AAAEjH,IAAAA;AAAF,GAAP,CAvIyB;AAwI/CkH,EAAAA,OAAO,EAAED,iBAAiB,CAAA,QAAA,EAAW;AAAEjH,IAAAA;AAAF,GAAX,CAxIqB;AAyI/CmH,EAAAA,MAAM,EAAEF,iBAAiB,CAAA,OAAA,EAAU;AAAEjH,IAAAA;AAAF,GAAV,CAzIsB;AA0I/CoH,EAAAA,MAAM,EAAEH,iBAAiB,CAAA,OAAA,EAAU;AAAEjH,IAAAA;AAAF,GAAV,CA1IsB;AA2I/CqH,EAAAA,KAAK,EAAEJ,iBAAiB,CAAA,MAAA,EAAS;AAAEjH,IAAAA;AAAF,GAAT,CA3IuB;AA4I/CsH,EAAAA,IAAI,EAAEL,iBAAiB,CAAA,KAAA,EAAQ;AAAEjH,IAAAA;AAAF,GAAR,CA5IwB;AA6I/CuH,EAAAA,IAAI,EAAEN,iBAAiB,CAAA,KAAA,EAAQ;AAAEjH,IAAAA;AAAF,GAAR,CA7IwB;AA8I/CwH,EAAAA,KAAK,EAAEP,iBAAiB,CAAA,MAAA,EAAS;AAAEjH,IAAAA;AAAF,GAAT,CA9IuB;AA+I/CyH,EAAAA,GAAG,EAAER,iBAAiB,CAAA,IAAA,EAAO;AAAEjH,IAAAA;AAAF,GAAP,CA/IyB;AAgJ/C0H,EAAAA,KAAK,EAAET,iBAAiB,CAAA,MAAA,EAAS;AAAEjH,IAAAA;AAAF,GAAT,CAhJuB;AAiJ/C2H,EAAAA,IAAI,EAAEV,iBAAiB,CAAA,KAAA,EAAQ;AAAEjH,IAAAA;AAAF,GAAR,CAjJwB;AAkJ/C4H,EAAAA,OAAO,EAAEX,iBAAiB,CAAA,QAAA,EAAW;AAAEjH,IAAAA;AAAF,GAAX,CAlJqB;AAmJ/C6H,EAAAA,MAAM,EAAEZ,iBAAiB,CAAA,OAAA,EAAU;AAAEjH,IAAAA;AAAF,GAAV,CAnJsB;AAsJ/C8H,EAAAA,QAAQ,EAAEb,iBAAiB,CAAA,SAAA,EAAY;AAAEjH,IAAAA;AAAF,GAAZ,CAtJoB;AAuJ/C+H,EAAAA,OAAO,EAAEd,iBAAiB,CAAA,QAAA,EAAW;AAAEjH,IAAAA;AAAF,GAAX,CAvJqB;AAwJ/CgI,EAAAA,QAAQ,EAAEf,iBAAiB,CAAA,SAAA,EAAY;AAAEjH,IAAAA;AAAF,GAAZ,CAxJoB;AAyJ/CiI,EAAAA,OAAO,EAAEhB,iBAAiB,CAAA,QAAA,EAAW;AAAEjH,IAAAA;AAAF,GAAX,CAzJqB;AA0J/CkI,EAAAA,WAAW,EAAEjB,iBAAiB,CAAA,YAAA,EAAe;AAAEjH,IAAAA;AAAF,GAAf,CA1JiB;AA2J/CmI,EAAAA,UAAU,EAAElB,iBAAiB,CAAA,WAAA,EAAc;AAAEjH,IAAAA;AAAF,GAAd,CA3JkB;AA4J/CoI,EAAAA,MAAM,EAAEnB,iBAAiB,CAAA,OAAA,EAAU;AAAEjH,IAAAA;AAAF,GAAV,CA5JsB;AA6J/CqI,EAAAA,GAAG,EAAEpB,iBAAiB,CAAA,IAAA,EAAO;AAAEjH,IAAAA;AAAF,GAAP,CA7JyB;AA8J/CsI,EAAAA,OAAO,EAAErB,iBAAiB,CAAA,QAAA,EAAW;AAAEjH,IAAAA;AAAF,GAAX,CA9JqB;AA+J/CuI,EAAAA,MAAM,EAAEtB,iBAAiB,CAAA,OAAA,EAAU;AAAEjH,IAAAA;AAAF,GAAV,CA/JsB;AAgK/CwI,EAAAA,QAAQ,EAAEvB,iBAAiB,CAAA,SAAA,EAAY;AAAEjH,IAAAA;AAAF,GAAZ,CAhKoB;AAkK/CyI,EAAAA,MAAM,EAAExB,iBAAiB,CAAA,OAAA,EAAU;AAAEjH,IAAAA;AAAF,GAAV,CAlKsB;AAmK/C0I,EAAAA,SAAS,EAAEzB,iBAAiB,CAAA,UAAA,EAAa;AAAEjH,IAAAA;AAAF,GAAb,CAnKmB;AAoK/C2I,EAAAA,OAAO,EAAE1B,iBAAiB,CAAA,QAAA,EAAW;AAAEjH,IAAAA;AAAF,GAAX,CApKqB;AAuK/C4I,EAAAA,SAAS,EAAE3B,iBAAiB,CAAA,UAAA,EAAa;AAAEjH,IAAAA;AAAF,GAAb,CAvKmB;AAwK/C6I,EAAAA,QAAQ,EAAE5B,iBAAiB,CAAA,SAAA,EAAY;AAAEjH,IAAAA;AAAF,GAAZ,CAxKoB;AAyK/C8I,EAAAA,KAAK,EAAE7B,iBAAiB,CAAA,MAAA,EAAS;AAAEjH,IAAAA;AAAF,GAAT,CAzKuB;AA0K/C+I,EAAAA,OAAO,EAAE9B,iBAAiB,CAAA,QAAA,EAAW;AAAEjH,IAAAA;AAAF,GAAX,CA1KqB;AA2K/CgJ,EAAAA,UAAU,EAAE/B,iBAAiB,CAAA,WAAA,EAAc;AAAEjH,IAAAA;AAAF,GAAd,CA3KkB;AA6K/CiJ,EAAAA,UAAU,EAAEhC,iBAAiB,CAAA,WAAA,EAAc;AAAEjH,IAAAA;AAAF,GAAd,CA7KkB;AA8K/CkJ,EAAAA,KAAK,EAAEjC,iBAAiB,CAAA,MAAA,EAAS;AAAEjH,IAAAA;AAAF,GAAT,CA9KuB;AAgL/CmJ,EAAAA,OAAO,EAAElC,iBAAiB,CAAA,QAAA,EAAW;AAAEjH,IAAAA;AAAF,GAAX,CAhLqB;AAkL/CrC,EAAAA,IAAI,EAAEkD,WAAW,CAAA,MAAA,EAAS;AAAEb,IAAAA;AAAF,GAAT,CAlL8B;AAqL/CoJ,EAAAA,MAAM,EAAEvI,WAAW,CAAA,QAAA,EAAW;AAAEb,IAAAA;AAAF,GAAX,CArL4B;AAsL/CqJ,EAAAA,GAAG,EAAExI,WAAW,CAAA,KAAA,EAAQ;AAAEb,IAAAA;AAAF,GAAR,CAtL+B;AAuL/CsJ,EAAAA,MAAM,EAAEzI,WAAW,CAAA,QAAA,EAAW;AAAEb,IAAAA;AAAF,GAAX,CAvL4B;AAwL/C5D,EAAAA,OAAO,EAAEyE,WAAW,CAAA,SAAA,EAAY;AAAEb,IAAAA;AAAF,GAAZ,CAxL2B;AA0L/CuJ,EAAAA,MAAM,EAAE1I,WAAW,CAAA,QAAA,EAAW;AAAEb,IAAAA;AAAF,GAAX,CA1L4B;AA2L/CwJ,EAAAA,WAAW,EAAE3I,WAAW,CAAA,OAAA,EAAU;AAAEb,IAAAA;AAAF,GAAV,CA3LuB;AA4L/CyJ,EAAAA,GAAG,EAAE5I,WAAW,CA5L+B,KA4L/B,CA5L+B;AA+L/C6I,EAAAA,OAAO,EAAE7I,WAAW,CA/L2B,SA+L3B,CA/L2B;AAgM/C8I,EAAAA,OAAO,EAAE9I,WAAW,CAAA,SAAA,EAAY;AAAEd,IAAAA,UAAU,EAAE;AAAd,GAAZ,CAhM2B;AAiM/C6J,EAAAA,WAAW,EAAE/I,WAAW,CAAA,aAAA,EAAgB;AAAEb,IAAAA,UAAU,EAAE;AAAd,GAAhB,CAjMuB;AAkM/C6J,EAAAA,SAAS,EAAEhJ,WAAW,CAlMyB,WAkMzB,CAlMyB;AAqM/CiJ,EAAAA,WAAW,EAAEjJ,WAAW,CAAA,IAAA,EAAO;AAAEb,IAAAA,UAAU,EAAE;AAAd,GAAP;AArMuB,CAA1C;;AAwMA,SAAA,iBAAA,CAAA,KAAA,EAAsD;AAC3D,SAAOY,KAAK,IAALA,EAAAA,IAAmBA,KAAK,IAA/B,GAAA;AACD;;AAEM,SAAA,iCAAA,CAAA,KAAA,EAAsE;AAG3E,SAAOA,KAAK,IAAZ,EAAA;AACD;;AAEM,SAAA,0BAAA,CAAA,KAAA,EAA+D;AACpE,SAAOA,KAAK,IAALA,EAAAA,IAAmBA,KAAK,IAA/B,GAAA;AACD;;AAEM,SAAA,0BAAA,CAAA,KAAA,EAA+D;AACpE,SAAOA,KAAK,IAALA,EAAAA,IAAmBA,KAAK,IAA/B,GAAA;AACD;;AAEM,SAAA,0BAAA,CAAA,KAAA,EAA+D;AACpE,SAAOM,gBAAgB,CAAvB,KAAuB,CAAvB;AACD;;AAEM,SAAA,uBAAA,CAAA,KAAA,EAA4D;AACjE,SAAOC,gBAAgB,CAAvB,KAAuB,CAAvB;AACD;;AAEM,SAAA,iBAAA,CAAA,KAAA,EAAsD;AAC3D,SAAOP,KAAK,IAALA,EAAAA,IAAkBA,KAAK,IAA9B,EAAA;AACD;;AAEM,SAAA,kCAAA,CAAA,KAAA,EAAuE;AAC5E,SAAOA,KAAK,IAALA,GAAAA,IAA0BA,KAAK,IAAtC,GAAA;AACD;;AAEM,SAAA,WAAA,CAAA,KAAA,EAAgD;AACrD,SAAOA,KAAK,IAALA,EAAAA,IAAmBA,KAAK,IAA/B,EAAA;AACD;;AAEM,SAAA,cAAA,CAAA,KAAA,EAAmD;AACxD,SAAOA,KAAK,IAALA,EAAAA,IAAmBA,KAAK,IAA/B,EAAA;AACD;;AAEM,SAAA,eAAA,CAAA,KAAA,EAAoD;AACzD,SAAOA,KAAK,IAALA,EAAAA,IAAwBA,KAAK,IAApC,EAAA;AACD;;AAEM,SAAA,cAAA,CAAA,KAAA,EAAmD;AACxD,SAAOA,KAAK,KAAZ,EAAA;AACD;;AAEM,SAAA,aAAA,CAAA,KAAA,EAAkD;AACvD,SAAOQ,aAAa,CAApB,KAAoB,CAApB;AACD;;AAEM,SAAA,qBAAA,CAAA,KAAA,EAA0D;AAC/D,SAAOR,KAAK,IAALA,GAAAA,IAAsBA,KAAK,IAAlC,GAAA;AACD;;AAEM,SAAA,yBAAA,CAAA,KAAA,EAA8D;AACnE,SAAOA,KAAK,IAALA,GAAAA,IAAyBA,KAAK,IAArC,GAAA;AACD;;AAEM,SAAA,cAAA,CAAA,KAAA,EAAkD;AACvD,SAAOI,WAAW,CAAlB,KAAkB,CAAlB;AACD;;AAEM,SAAA,uBAAA,CAAA,KAAA,EAA2D;AAChE,SAAOC,WAAW,CAAlB,KAAkB,CAAlB;AACD;;AAEM,SAAA,uBAAA,CAAA,KAAA,EAA4D;AACjE,SAAOL,KAAK,KAAZ,EAAA;AACD;;AAEM,SAAA,eAAA,CAAA,KAAA,EAAoD;AACzD,SAAOA,KAAK,IAALA,EAAAA,IAA4BA,KAAK,IAAxC,EAAA;AACD;;AAEM,SAAA,gBAAA,CAAA,KAAA,EAA+D;AACpE,SAAOG,UAAU,CAAjB,KAAiB,CAAjB;AACD;;AAEM,SAAA,WAAA,CAAA,GAAA,EAAwC;AAC7C,SAAO,OAAA,GAAA,KAAP,QAAA;AACD;;AAEkC;AACjCA,EAAAA,UAAU,CAAVA,CAAU,CAAVA,CAAAA,aAAAA,GAAsCgJ,OAAO,IAAI;AAC/CA,IAAAA,OAAO,CAAPA,GAAAA;AADFhJ,GAAAA;;AAIAA,EAAAA,UAAU,CAAVA,CAAU,CAAVA,CAAAA,aAAAA,GACEA,UAAU,CAAVA,CAAU,CAAVA,CAAAA,aAAAA,GACAA,UAAU,CAAVA,EAAU,CAAVA,CAAAA,aAAAA,GACEgJ,OAAO,IAAI;AACTA,IAAAA,OAAO,CAAPA,IAAAA,CAAaC,KAAE,CAAfD,KAAAA;AAJNhJ,GAAAA;;AAOAA,EAAAA,UAAU,CAAVA,EAAU,CAAVA,CAAAA,aAAAA,GAAyCgJ,OAAO,IAAI;AAClD,QAAIA,OAAO,CAACA,OAAO,CAAPA,MAAAA,GAARA,CAAO,CAAPA,KAAgCC,KAAE,CAAtC,QAAA,EAAiD;AAC/CD,MAAAA,OAAO,CAAPA,GAAAA;AADF,KAAA,MAEO;AACLA,MAAAA,OAAO,CAAPA,IAAAA,CAAaC,KAAE,CAAfD,QAAAA;AACD;AALHhJ,GAAAA;;AAQAA,EAAAA,UAAU,CAAVA,GAAU,CAAVA,CAAAA,aAAAA,GAA2CgJ,OAAO,IAAI;AACpDA,IAAAA,OAAO,CAAPA,IAAAA,CAAaC,KAAE,CAAfD,MAAAA,EAAwBC,KAAE,CAA1BD,MAAAA;AADFhJ,GAAAA;AAGD;AChbD,IAAIkJ,4BAA4B,GAAhC,8qIAAA;AAEA,IAAIC,uBAAuB,GAA3B,6jFAAA;AAEA,MAAMC,uBAAuB,GAAG,IAAA,MAAA,CAC9B,MAAA,4BAAA,GADF,GAAgC,CAAhC;AAGA,MAAMC,kBAAkB,GAAG,IAAA,MAAA,CACzB,MAAA,4BAAA,GAAA,uBAAA,GADF,GAA2B,CAA3B;AAIAH,4BAA4B,GAAGC,uBAAuB,GAAtnC,IAAmC,CAAnC;AAEA,MAAMC,qBAAqB,GAAG,CAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,IAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA,EAAA,EAAA,EAAA,GAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,GAAA,EAAA,CAAA,EAAA,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","sourcesContent":["// @flow\n\nimport * as charCodes from \"charcodes\";\n\n// Matches a whole line break (where CRLF is considered a single\n// line break). Used to count lines.\nexport const lineBreak = /\\r\\n?|[\\n\\u2028\\u2029]/;\nexport const lineBreakG = new RegExp(lineBreak.source, \"g\");\n\n// https://tc39.github.io/ecma262/#sec-line-terminators\nexport function isNewLine(code: number): boolean {\n  switch (code) {\n    case charCodes.lineFeed:\n    case charCodes.carriageReturn:\n    case charCodes.lineSeparator:\n    case charCodes.paragraphSeparator:\n      return true;\n\n    default:\n      return false;\n  }\n}\n\nexport const skipWhiteSpace = /(?:\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/g;\n\nexport const skipWhiteSpaceInLine =\n  /(?:[^\\S\\n\\r\\u2028\\u2029]|\\/\\/.*|\\/\\*.*?\\*\\/)*/y;\n\n// Skip whitespace and single-line comments, including /* no newline here */.\n// After this RegExp matches, its lastIndex points to a line terminator, or\n// the start of multi-line comment (which is effectively a line terminator),\n// or the end of string.\nexport const skipWhiteSpaceToLineBreak = new RegExp(\n  // Unfortunately JS doesn't support Perl's atomic /(?>pattern)/ or\n  // possessive quantifiers, so we use a trick to prevent backtracking\n  // when the look-ahead for line terminator fails.\n  \"(?=(\" +\n    // Capture the whitespace and comments that should be skipped inside\n    // a look-ahead assertion, and then re-match the group as a unit.\n    skipWhiteSpaceInLine.source +\n    \"))\\\\1\" +\n    // Look-ahead for either line terminator, start of multi-line comment,\n    // or end of string.\n    /(?=[\\n\\r\\u2028\\u2029]|\\/\\*(?!.*?\\*\\/)|$)/.source,\n  \"y\", // sticky\n);\n\n// https://tc39.github.io/ecma262/#sec-white-space\nexport function isWhitespace(code: number): boolean {\n  switch (code) {\n    case 0x0009: // CHARACTER TABULATION\n    case 0x000b: // LINE TABULATION\n    case 0x000c: // FORM FEED\n    case charCodes.space:\n    case charCodes.nonBreakingSpace:\n    case charCodes.oghamSpaceMark:\n    case 0x2000: // EN QUAD\n    case 0x2001: // EM QUAD\n    case 0x2002: // EN SPACE\n    case 0x2003: // EM SPACE\n    case 0x2004: // THREE-PER-EM SPACE\n    case 0x2005: // FOUR-PER-EM SPACE\n    case 0x2006: // SIX-PER-EM SPACE\n    case 0x2007: // FIGURE SPACE\n    case 0x2008: // PUNCTUATION SPACE\n    case 0x2009: // THIN SPACE\n    case 0x200a: // HAIR SPACE\n    case 0x202f: // NARROW NO-BREAK SPACE\n    case 0x205f: // MEDIUM MATHEMATICAL SPACE\n    case 0x3000: // IDEOGRAPHIC SPACE\n    case 0xfeff: // ZERO WIDTH NO-BREAK SPACE\n      return true;\n\n    default:\n      return false;\n  }\n}\n","// @flow\n\nimport { lineBreakG } from \"./whitespace\";\n\nexport type Pos = {\n  start: number,\n};\n\n// These are used when `options.locations` is on, for the\n// `startLoc` and `endLoc` properties.\n\nexport class Position {\n  line: number;\n  column: number;\n\n  constructor(line: number, col: number) {\n    this.line = line;\n    this.column = col;\n  }\n}\n\nexport class SourceLocation {\n  start: Position;\n  end: Position;\n  filename: string;\n  identifierName: ?string;\n\n  constructor(start: Position, end?: Position) {\n    this.start = start;\n    // $FlowIgnore (may start as null, but initialized later)\n    this.end = end;\n  }\n}\n\n// The `getLineInfo` function is mostly useful when the\n// `locations` option is off (for performance reasons) and you\n// want to find the line/column position for a given character\n// offset. `input` should be the code string that the offset refers\n// into.\n\nexport function getLineInfo(input: string, offset: number): Position {\n  let line = 1;\n  let lineStart = 0;\n  let match;\n  lineBreakG.lastIndex = 0;\n  while ((match = lineBreakG.exec(input)) && match.index < offset) {\n    line++;\n    lineStart = lineBreakG.lastIndex;\n  }\n\n  return new Position(line, offset - lineStart);\n}\n\n/**\n * creates a new position with a non-zero column offset from the given position.\n * This function should be only be used when we create AST node out of the token\n * boundaries, such as TemplateElement ends before tt.templateNonTail. This\n * function does not skip whitespaces.\n *\n * @export\n * @param {Position} position\n * @param {number} columnOffset\n * @returns {Position}\n */\nexport function createPositionWithColumnOffset(\n  position: Position,\n  columnOffset: number,\n) {\n  const { line, column } = position;\n  return new Position(line, column + columnOffset);\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type State from \"../tokenizer/state\";\nimport type { PluginsMap } from \"./index\";\nimport type ScopeHandler from \"../util/scope\";\nimport type ExpressionScopeHandler from \"../util/expression-scope\";\nimport type ClassScopeHandler from \"../util/class-scope\";\nimport type ProductionParameterHandler from \"../util/production-parameter\";\n\nexport default class BaseParser {\n  // Properties set by constructor in index.js\n  declare options: Options;\n  declare inModule: boolean;\n  declare scope: ScopeHandler<*>;\n  declare classScope: ClassScopeHandler;\n  declare prodParam: ProductionParameterHandler;\n  declare expressionScope: ExpressionScopeHandler;\n  declare plugins: PluginsMap;\n  declare filename: ?string;\n  // Names of exports store. `default` is stored as a name for both\n  // `export default foo;` and `export { foo as default };`.\n  declare exportedIdentifiers: Set<string>;\n  sawUnambiguousESM: boolean = false;\n  ambiguousScriptDifferentAst: boolean = false;\n\n  // Initialized by Tokenizer\n  declare state: State;\n  // input and length are not in state as they are constant and we do\n  // not want to ever copy them, which happens if state gets cloned\n  declare input: string;\n  declare length: number;\n\n  // This method accepts either a string (plugin name) or an array pair\n  // (plugin name and options object). If an options object is given,\n  // then each value is non-recursively checked for identity with that\n  // plugin’s actual option value.\n  hasPlugin(pluginConfig: PluginConfig): boolean {\n    if (typeof pluginConfig === \"string\") {\n      return this.plugins.has(pluginConfig);\n    } else {\n      const [pluginName, pluginOptions] = pluginConfig;\n      if (!this.hasPlugin(pluginName)) {\n        return false;\n      }\n      const actualOptions = this.plugins.get(pluginName);\n      for (const key of Object.keys(pluginOptions)) {\n        if (actualOptions?.[key] !== pluginOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n\n  getPluginOption(plugin: string, name: string) {\n    return this.plugins.get(plugin)?.[name];\n  }\n}\n\nexport type PluginConfig = string | [string, { [string]: any }];\n","// @flow\n\n/*:: declare var invariant; */\n\nimport BaseParser from \"./base\";\nimport type { Comment, Node } from \"../types\";\nimport * as charCodes from \"charcodes\";\n\n/**\n * A whitespace token containing comments\n * @typedef CommentWhitespace\n * @type {object}\n * @property {number} start - the start of the whitespace token.\n * @property {number} end - the end of the whitespace token.\n * @property {Array<Comment>} comments - the containing comments\n * @property {Node | null} leadingNode - the immediately preceding AST node of the whitespace token\n * @property {Node | null} trailingNode - the immediately following AST node of the whitespace token\n * @property {Node | null} containingNode - the innermost AST node containing the whitespace\n *                                         with minimal size (|end - start|)\n */\nexport type CommentWhitespace = {\n  start: number,\n  end: number,\n  comments: Array<Comment>,\n  leadingNode: Node | null,\n  trailingNode: Node | null,\n  containingNode: Node | null,\n};\n\n/**\n * Merge comments with node's trailingComments or assign comments to be\n * trailingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setTrailingComments(node: Node, comments: Array<Comment>) {\n  if (node.trailingComments === undefined) {\n    node.trailingComments = comments;\n  } else {\n    node.trailingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's leadingComments or assign comments to be\n * leadingComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nfunction setLeadingComments(node: Node, comments: Array<Comment>) {\n  if (node.leadingComments === undefined) {\n    node.leadingComments = comments;\n  } else {\n    node.leadingComments.unshift(...comments);\n  }\n}\n\n/**\n * Merge comments with node's innerComments or assign comments to be\n * innerComments. New comments will be placed before old comments\n * because the commentStack is enumerated reversely.\n *\n * @param {Node} node\n * @param {Array<Comment>} comments\n */\nexport function setInnerComments(node: Node, comments: Array<Comment>) {\n  if (node.innerComments === undefined) {\n    node.innerComments = comments;\n  } else {\n    node.innerComments.unshift(...comments);\n  }\n}\n\n/**\n * Given node and elements array, if elements has non-null element,\n * merge comments to its trailingComments, otherwise merge comments\n * to node's innerComments\n *\n * @param {Node} node\n * @param {Array<Node>} elements\n * @param {Array<Comment>} comments\n */\nfunction adjustInnerComments(\n  node: Node,\n  elements: Array<Node>,\n  commentWS: CommentWhitespace,\n) {\n  let lastElement = null;\n  let i = elements.length;\n  while (lastElement === null && i > 0) {\n    lastElement = elements[--i];\n  }\n  if (lastElement === null || lastElement.start > commentWS.start) {\n    setInnerComments(node, commentWS.comments);\n  } else {\n    setTrailingComments(lastElement, commentWS.comments);\n  }\n}\n\n/** @class CommentsParser */\nexport default class CommentsParser extends BaseParser {\n  addComment(comment: Comment): void {\n    if (this.filename) comment.loc.filename = this.filename;\n    this.state.comments.push(comment);\n  }\n\n  /**\n   * Given a newly created AST node _n_, attach _n_ to a comment whitespace _w_ if applicable\n   * {@see {@link CommentWhitespace}}\n   *\n   * @param {Node} node\n   * @returns {void}\n   * @memberof CommentsParser\n   */\n  processComment(node: Node): void {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n    const lastCommentWS = commentStack[i];\n\n    if (lastCommentWS.start === node.end) {\n      lastCommentWS.leadingNode = node;\n      i--;\n    }\n\n    const { start: nodeStart } = node;\n    // invariant: for all 0 <= j <= i, let c = commentStack[j], c must satisfy c.end < node.end\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      if (commentEnd > nodeStart) {\n        // by definition of commentWhiteSpace, this implies commentWS.start > nodeStart\n        // so node can be a containingNode candidate. At this time we can finalize the comment\n        // whitespace, because\n        // 1) its leadingNode or trailingNode, if exists, will not change\n        // 2) its containingNode have been assigned and will not change because it is the\n        //    innermost minimal-sized AST node\n        commentWS.containingNode = node;\n        this.finalizeComment(commentWS);\n        commentStack.splice(i, 1);\n      } else {\n        if (commentEnd === nodeStart) {\n          commentWS.trailingNode = node;\n        }\n        // stop the loop when commentEnd <= nodeStart\n        break;\n      }\n    }\n  }\n\n  /**\n   * Assign the comments of comment whitespaces to related AST nodes.\n   * Also adjust innerComments following trailing comma.\n   *\n   * @memberof CommentsParser\n   */\n  finalizeComment(commentWS: CommentWhitespace) {\n    const { comments } = commentWS;\n    if (commentWS.leadingNode !== null || commentWS.trailingNode !== null) {\n      if (commentWS.leadingNode !== null) {\n        setTrailingComments(commentWS.leadingNode, comments);\n      }\n      if (commentWS.trailingNode !== null) {\n        setLeadingComments(commentWS.trailingNode, comments);\n      }\n    } else {\n      /*:: invariant(commentWS.containingNode !== null) */\n      const { containingNode: node, start: commentStart } = commentWS;\n      if (this.input.charCodeAt(commentStart - 1) === charCodes.comma) {\n        // If a commentWhitespace follows a comma and the containingNode allows\n        // list structures with trailing comma, merge it to the trailingComment\n        // of the last non-null list element\n        switch (node.type) {\n          case \"ObjectExpression\":\n          case \"ObjectPattern\":\n          case \"RecordExpression\":\n            adjustInnerComments(node, node.properties, commentWS);\n            break;\n          case \"CallExpression\":\n          case \"OptionalCallExpression\":\n            adjustInnerComments(node, node.arguments, commentWS);\n            break;\n          case \"FunctionDeclaration\":\n          case \"FunctionExpression\":\n          case \"ArrowFunctionExpression\":\n          case \"ObjectMethod\":\n          case \"ClassMethod\":\n          case \"ClassPrivateMethod\":\n            adjustInnerComments(node, node.params, commentWS);\n            break;\n          case \"ArrayExpression\":\n          case \"ArrayPattern\":\n          case \"TupleExpression\":\n            adjustInnerComments(node, node.elements, commentWS);\n            break;\n          case \"ExportNamedDeclaration\":\n          case \"ImportDeclaration\":\n            adjustInnerComments(node, node.specifiers, commentWS);\n            break;\n          default: {\n            setInnerComments(node, comments);\n          }\n        }\n      } else {\n        setInnerComments(node, comments);\n      }\n    }\n  }\n\n  /**\n   * Drains remaning commentStack and applies finalizeComment\n   * to each comment whitespace. Used only in parseExpression\n   * where the top level AST node is _not_ Program\n   * {@see {@link CommentsParser#finalizeComment}}\n   *\n   * @memberof CommentsParser\n   */\n  finalizeRemainingComments() {\n    const { commentStack } = this.state;\n    for (let i = commentStack.length - 1; i >= 0; i--) {\n      this.finalizeComment(commentStack[i]);\n    }\n    this.state.commentStack = [];\n  }\n\n  /**\n   * Reset previous node trailing comments. Used in object / class\n   * property parsing. We parse `async`, `static`, `set` and `get`\n   * as an identifier but may reinterepret it into an async/static/accessor\n   * method later. In this case the identifier is not part of the AST and we\n   * should sync the knowledge to commentStacks\n   *\n   * For example, when parsing */\n  // async /* 1 */ function f() {}\n  /*\n   * the comment whitespace \"* 1 *\" has leading node Identifier(async). When\n   * we see the function token, we create a Function node and mark \"* 1 *\" as\n   * inner comments. So \"* 1 *\" should be detached from the Identifier node.\n   *\n   * @param {N.Node} node the last finished AST node _before_ current token\n   * @returns\n   * @memberof CommentsParser\n   */\n  resetPreviousNodeTrailingComments(node: Node) {\n    const { commentStack } = this.state;\n    const { length } = commentStack;\n    if (length === 0) return;\n    const commentWS = commentStack[length - 1];\n    if (commentWS.leadingNode === node) {\n      commentWS.leadingNode = null;\n    }\n  }\n\n  /**\n   * Attach a node to the comment whitespaces right before/after\n   * the given range.\n   *\n   * This is used to properly attach comments around parenthesized\n   * expressions as leading/trailing comments of the inner expression.\n   *\n   * @param {Node} node\n   * @param {number} start\n   * @param {number} end\n   */\n  takeSurroundingComments(node: Node, start: number, end: number) {\n    const { commentStack } = this.state;\n    const commentStackLength = commentStack.length;\n    if (commentStackLength === 0) return;\n    let i = commentStackLength - 1;\n\n    for (; i >= 0; i--) {\n      const commentWS = commentStack[i];\n      const commentEnd = commentWS.end;\n      const commentStart = commentWS.start;\n\n      if (commentStart === end) {\n        commentWS.leadingNode = node;\n      } else if (commentEnd === start) {\n        commentWS.trailingNode = node;\n      } else if (commentEnd < start) {\n        break;\n      }\n    }\n  }\n}\n","// @flow\n\nexport const ErrorCodes = Object.freeze({\n  SyntaxError: \"BABEL_PARSER_SYNTAX_ERROR\",\n  SourceTypeModuleError: \"BABEL_PARSER_SOURCETYPE_MODULE_REQUIRED\",\n});\n\nexport type ErrorCode = $Values<typeof ErrorCodes>;\n","// @flow\n\nimport { makeErrorTemplates, ErrorCodes } from \"./error\";\n\n/* eslint sort-keys: \"error\" */\n\n/**\n * @module parser/error-message\n */\n\n// The Errors key follows https://cs.chromium.org/chromium/src/v8/src/common/message-template.h unless it does not exist\nexport const ErrorMessages = makeErrorTemplates(\n  {\n    AccessorIsGenerator: \"A %0ter cannot be a generator.\",\n    ArgumentsInClass:\n      \"'arguments' is only allowed in functions and class methods.\",\n    AsyncFunctionInSingleStatementContext:\n      \"Async functions can only be declared at the top level or inside a block.\",\n    AwaitBindingIdentifier:\n      \"Can not use 'await' as identifier inside an async function.\",\n    AwaitBindingIdentifierInStaticBlock:\n      \"Can not use 'await' as identifier inside a static block.\",\n    AwaitExpressionFormalParameter:\n      \"'await' is not allowed in async function parameters.\",\n    AwaitNotInAsyncContext:\n      \"'await' is only allowed within async functions and at the top levels of modules.\",\n    AwaitNotInAsyncFunction: \"'await' is only allowed within async functions.\",\n    BadGetterArity: \"A 'get' accesor must not have any formal parameters.\",\n    BadSetterArity: \"A 'set' accesor must have exactly one formal parameter.\",\n    BadSetterRestParameter:\n      \"A 'set' accesor function argument must not be a rest parameter.\",\n    ConstructorClassField: \"Classes may not have a field named 'constructor'.\",\n    ConstructorClassPrivateField:\n      \"Classes may not have a private field named '#constructor'.\",\n    ConstructorIsAccessor: \"Class constructor may not be an accessor.\",\n    ConstructorIsAsync: \"Constructor can't be an async function.\",\n    ConstructorIsGenerator: \"Constructor can't be a generator.\",\n    DeclarationMissingInitializer: \"'%0' require an initialization value.\",\n    DecoratorBeforeExport:\n      \"Decorators must be placed *before* the 'export' keyword. You can set the 'decoratorsBeforeExport' option to false to use the 'export @decorator class {}' syntax.\",\n    DecoratorConstructor:\n      \"Decorators can't be used with a constructor. Did you mean '@dec class { ... }'?\",\n    DecoratorExportClass:\n      \"Using the export keyword between a decorator and a class is not allowed. Please use `export @dec class` instead.\",\n    DecoratorSemicolon: \"Decorators must not be followed by a semicolon.\",\n    DecoratorStaticBlock: \"Decorators can't be used with a static block.\",\n    DeletePrivateField: \"Deleting a private field is not allowed.\",\n    DestructureNamedImport:\n      \"ES2015 named imports do not destructure. Use another statement for destructuring after the import.\",\n    DuplicateConstructor: \"Duplicate constructor in the same class.\",\n    DuplicateDefaultExport: \"Only one default export allowed per module.\",\n    DuplicateExport:\n      \"`%0` has already been exported. Exported identifiers must be unique.\",\n    DuplicateProto: \"Redefinition of __proto__ property.\",\n    DuplicateRegExpFlags: \"Duplicate regular expression flag.\",\n    ElementAfterRest: \"Rest element must be last element.\",\n    EscapedCharNotAnIdentifier: \"Invalid Unicode escape.\",\n    ExportBindingIsString:\n      \"A string literal cannot be used as an exported binding without `from`.\\n- Did you mean `export { '%0' as '%1' } from 'some-module'`?\",\n    ExportDefaultFromAsIdentifier:\n      \"'from' is not allowed as an identifier after 'export default'.\",\n    ForInOfLoopInitializer:\n      \"'%0' loop variable declaration may not have an initializer.\",\n    ForOfAsync: \"The left-hand side of a for-of loop may not be 'async'.\",\n    ForOfLet: \"The left-hand side of a for-of loop may not start with 'let'.\",\n    GeneratorInSingleStatementContext:\n      \"Generators can only be declared at the top level or inside a block.\",\n    IllegalBreakContinue: \"Unsyntactic %0.\",\n    IllegalLanguageModeDirective:\n      \"Illegal 'use strict' directive in function with non-simple parameter list.\",\n    IllegalReturn: \"'return' outside of function.\",\n    ImportBindingIsString:\n      'A string literal cannot be used as an imported binding.\\n- Did you mean `import { \"%0\" as foo }`?',\n    ImportCallArgumentTrailingComma:\n      \"Trailing comma is disallowed inside import(...) arguments.\",\n    ImportCallArity: \"`import()` requires exactly %0.\",\n    ImportCallNotNewExpression: \"Cannot use new with import(...).\",\n    ImportCallSpreadArgument: \"`...` is not allowed in `import()`.\",\n    InvalidBigIntLiteral: \"Invalid BigIntLiteral.\",\n    InvalidCodePoint: \"Code point out of bounds.\",\n    InvalidCoverInitializedName: \"Invalid shorthand property initializer.\",\n    InvalidDecimal: \"Invalid decimal.\",\n    InvalidDigit: \"Expected number in radix %0.\",\n    InvalidEscapeSequence: \"Bad character escape sequence.\",\n    InvalidEscapeSequenceTemplate: \"Invalid escape sequence in template.\",\n    InvalidEscapedReservedWord: \"Escape sequence in keyword %0.\",\n    InvalidIdentifier: \"Invalid identifier %0.\",\n    InvalidLhs: \"Invalid left-hand side in %0.\",\n    InvalidLhsBinding: \"Binding invalid left-hand side in %0.\",\n    InvalidNumber: \"Invalid number.\",\n    InvalidOrMissingExponent:\n      \"Floating-point numbers require a valid exponent after the 'e'.\",\n    InvalidOrUnexpectedToken: \"Unexpected character '%0'.\",\n    InvalidParenthesizedAssignment: \"Invalid parenthesized assignment pattern.\",\n    InvalidPrivateFieldResolution: \"Private name #%0 is not defined.\",\n    InvalidPropertyBindingPattern: \"Binding member expression.\",\n    InvalidRecordProperty:\n      \"Only properties and spread elements are allowed in record definitions.\",\n    InvalidRestAssignmentPattern: \"Invalid rest operator's argument.\",\n    LabelRedeclaration: \"Label '%0' is already declared.\",\n    LetInLexicalBinding:\n      \"'let' is not allowed to be used as a name in 'let' or 'const' declarations.\",\n    LineTerminatorBeforeArrow: \"No line break is allowed before '=>'.\",\n    MalformedRegExpFlags: \"Invalid regular expression flag.\",\n    MissingClassName: \"A class name is required.\",\n    MissingEqInAssignment:\n      \"Only '=' operator can be used for specifying default value.\",\n    MissingSemicolon: \"Missing semicolon.\",\n    MissingUnicodeEscape: \"Expecting Unicode escape sequence \\\\uXXXX.\",\n    MixingCoalesceWithLogical:\n      \"Nullish coalescing operator(??) requires parens when mixing with logical operators.\",\n    ModuleAttributeDifferentFromType:\n      \"The only accepted module attribute is `type`.\",\n    ModuleAttributeInvalidValue:\n      \"Only string literals are allowed as module attribute values.\",\n    ModuleAttributesWithDuplicateKeys:\n      'Duplicate key \"%0\" is not allowed in module attributes.',\n    ModuleExportNameHasLoneSurrogate:\n      \"An export name cannot include a lone surrogate, found '\\\\u%0'.\",\n    ModuleExportUndefined: \"Export '%0' is not defined.\",\n    MultipleDefaultsInSwitch: \"Multiple default clauses.\",\n    NewlineAfterThrow: \"Illegal newline after throw.\",\n    NoCatchOrFinally: \"Missing catch or finally clause.\",\n    NumberIdentifier: \"Identifier directly after number.\",\n    NumericSeparatorInEscapeSequence:\n      \"Numeric separators are not allowed inside unicode escape sequences or hex escape sequences.\",\n    ObsoleteAwaitStar:\n      \"'await*' has been removed from the async functions proposal. Use Promise.all() instead.\",\n    OptionalChainingNoNew:\n      \"Constructors in/after an Optional Chain are not allowed.\",\n    OptionalChainingNoTemplate:\n      \"Tagged Template Literals are not allowed in optionalChain.\",\n    OverrideOnConstructor:\n      \"'override' modifier cannot appear on a constructor declaration.\",\n    ParamDupe: \"Argument name clash.\",\n    PatternHasAccessor: \"Object pattern can't contain getter or setter.\",\n    PatternHasMethod: \"Object pattern can't contain methods.\",\n    // This error is only used by the smart-mix proposal\n    PipeBodyIsTighter:\n      \"Unexpected %0 after pipeline body; any %0 expression acting as Hack-style pipe body must be parenthesized due to its loose operator precedence.\",\n    PipeTopicRequiresHackPipes:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n    PipeTopicUnbound:\n      \"Topic reference is unbound; it must be inside a pipe body.\",\n    PipeTopicUnconfiguredToken:\n      'Invalid topic token %0. In order to use %0 as a topic reference, the pipelineOperator plugin must be configured with { \"proposal\": \"hack\", \"topicToken\": \"%0\" }.',\n    PipeTopicUnused:\n      \"Hack-style pipe body does not contain a topic reference; Hack-style pipes must use topic at least once.\",\n    PipeUnparenthesizedBody:\n      \"Hack-style pipe body cannot be an unparenthesized %0 expression; please wrap it in parentheses.\",\n\n    // Messages whose codes start with “Pipeline” or “PrimaryTopic”\n    // are retained for backwards compatibility\n    // with the deprecated smart-mix pipe operator proposal plugin.\n    // They are subject to removal in a future major version.\n    PipelineBodyNoArrow:\n      'Unexpected arrow \"=>\" after pipeline body; arrow function in pipeline body must be parenthesized.',\n    PipelineBodySequenceExpression:\n      \"Pipeline body may not be a comma-separated sequence expression.\",\n    PipelineHeadSequenceExpression:\n      \"Pipeline head should not be a comma-separated sequence expression.\",\n    PipelineTopicUnused:\n      \"Pipeline is in topic style but does not use topic reference.\",\n    PrimaryTopicNotAllowed:\n      \"Topic reference was used in a lexical context without topic binding.\",\n    PrimaryTopicRequiresSmartPipeline:\n      'Topic reference is used, but the pipelineOperator plugin was not passed a \"proposal\": \"hack\" or \"smart\" option.',\n\n    PrivateInExpectedIn:\n      \"Private names are only allowed in property accesses (`obj.#%0`) or in `in` expressions (`#%0 in obj`).\",\n    PrivateNameRedeclaration: \"Duplicate private name #%0.\",\n    RecordExpressionBarIncorrectEndSyntaxType:\n      \"Record expressions ending with '|}' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionBarIncorrectStartSyntaxType:\n      \"Record expressions starting with '{|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    RecordExpressionHashIncorrectStartSyntaxType:\n      \"Record expressions starting with '#{' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    RecordNoProto: \"'__proto__' is not allowed in Record expressions.\",\n    RestTrailingComma: \"Unexpected trailing comma after rest element.\",\n    SloppyFunction:\n      \"In non-strict mode code, functions can only be declared at top level, inside a block, or as the body of an if statement.\",\n    StaticPrototype: \"Classes may not have static property named prototype.\",\n    StrictDelete: \"Deleting local variable in strict mode.\",\n    StrictEvalArguments: \"Assigning to '%0' in strict mode.\",\n    StrictEvalArgumentsBinding: \"Binding '%0' in strict mode.\",\n    StrictFunction:\n      \"In strict mode code, functions can only be declared at top level or inside a block.\",\n    StrictNumericEscape:\n      \"The only valid numeric escape in strict mode is '\\\\0'.\",\n    StrictOctalLiteral: \"Legacy octal literals are not allowed in strict mode.\",\n    StrictWith: \"'with' in strict mode.\",\n    SuperNotAllowed:\n      \"`super()` is only valid inside a class constructor of a subclass. Maybe a typo in the method name ('constructor') or not extending another class?\",\n    SuperPrivateField: \"Private fields can't be accessed on super.\",\n    TrailingDecorator: \"Decorators must be attached to a class element.\",\n    TupleExpressionBarIncorrectEndSyntaxType:\n      \"Tuple expressions ending with '|]' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionBarIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '[|' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'bar'.\",\n    TupleExpressionHashIncorrectStartSyntaxType:\n      \"Tuple expressions starting with '#[' are only allowed when the 'syntaxType' option of the 'recordAndTuple' plugin is set to 'hash'.\",\n    UnexpectedArgumentPlaceholder: \"Unexpected argument placeholder.\",\n    UnexpectedAwaitAfterPipelineBody:\n      'Unexpected \"await\" after pipeline body; await must have parentheses in minimal proposal.',\n    UnexpectedDigitAfterHash: \"Unexpected digit after hash token.\",\n    UnexpectedImportExport:\n      \"'import' and 'export' may only appear at the top level.\",\n    UnexpectedKeyword: \"Unexpected keyword '%0'.\",\n    UnexpectedLeadingDecorator:\n      \"Leading decorators must be attached to a class declaration.\",\n    UnexpectedLexicalDeclaration:\n      \"Lexical declaration cannot appear in a single-statement context.\",\n    UnexpectedNewTarget:\n      \"`new.target` can only be used in functions or class properties.\",\n    UnexpectedNumericSeparator:\n      \"A numeric separator is only allowed between two digits.\",\n    UnexpectedPrivateField: \"Unexpected private name.\",\n    UnexpectedReservedWord: \"Unexpected reserved word '%0'.\",\n    UnexpectedSuper: \"'super' is only allowed in object methods and classes.\",\n    UnexpectedToken: \"Unexpected token '%0'.\",\n    UnexpectedTokenUnaryExponentiation:\n      \"Illegal expression. Wrap left hand side or entire exponentiation in parentheses.\",\n    UnsupportedBind: \"Binding should be performed on object property.\",\n    UnsupportedDecoratorExport:\n      \"A decorated export must export a class declaration.\",\n    UnsupportedDefaultExport:\n      \"Only expressions, functions or classes are allowed as the `default` export.\",\n    UnsupportedImport:\n      \"`import` can only be used in `import()` or `import.meta`.\",\n    UnsupportedMetaProperty: \"The only valid meta property for %0 is %0.%1.\",\n    UnsupportedParameterDecorator:\n      \"Decorators cannot be used to decorate parameters.\",\n    UnsupportedPropertyDecorator:\n      \"Decorators cannot be used to decorate object literal properties.\",\n    UnsupportedSuper:\n      \"'super' can only be used with function calls (i.e. super()) or in property accesses (i.e. super.prop or super[prop]).\",\n    UnterminatedComment: \"Unterminated comment.\",\n    UnterminatedRegExp: \"Unterminated regular expression.\",\n    UnterminatedString: \"Unterminated string constant.\",\n    UnterminatedTemplate: \"Unterminated template.\",\n    VarRedeclaration: \"Identifier '%0' has already been declared.\",\n    YieldBindingIdentifier:\n      \"Can not use 'yield' as identifier inside a generator.\",\n    YieldInParameter: \"Yield expression is not allowed in formal parameters.\",\n    ZeroDigitNumericSeparator:\n      \"Numeric separator can not be used after leading 0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport const SourceTypeModuleErrorMessages = makeErrorTemplates(\n  {\n    ImportMetaOutsideModule: `import.meta may appear only with 'sourceType: \"module\"'`,\n    ImportOutsideModule: `'import' and 'export' may appear only with 'sourceType: \"module\"'`,\n  },\n  /* code */ ErrorCodes.SourceTypeModuleError,\n);\n","// @flow\n/* eslint sort-keys: \"error\" */\nimport { getLineInfo, type Position } from \"../util/location\";\nimport CommentsParser from \"./comments\";\nimport { type ErrorCode, ErrorCodes } from \"./error-codes\";\n\n// This function is used to raise exceptions on parse errors. It\n// takes an offset integer (into the current `input`) to indicate\n// the location of the error, attaches the position to the end\n// of the error message, and then raises a `SyntaxError` with that\n// message.\n\ntype ErrorContext = {\n  pos: number,\n  loc: Position,\n  missingPlugin?: Array<string>,\n  code?: string,\n  reasonCode?: String,\n};\nexport type ParsingError = SyntaxError & ErrorContext;\n\nexport type ErrorTemplate = {\n  code: ErrorCode,\n  template: string,\n  reasonCode: string,\n};\nexport type ErrorTemplates = {\n  [key: string]: ErrorTemplate,\n};\n\ntype SyntaxPlugin = \"flow\" | \"typescript\" | \"jsx\" | typeof undefined;\n\nfunction keepReasonCodeCompat(reasonCode: string, syntaxPlugin: SyntaxPlugin) {\n  if (!process.env.BABEL_8_BREAKING) {\n    // For consistency in TypeScript and Flow error codes\n    if (syntaxPlugin === \"flow\" && reasonCode === \"PatternIsOptional\") {\n      return \"OptionalBindingPattern\";\n    }\n  }\n  return reasonCode;\n}\n\nexport function makeErrorTemplates(\n  messages: {\n    [key: string]: string,\n  },\n  code: ErrorCode,\n  syntaxPlugin?: SyntaxPlugin,\n): ErrorTemplates {\n  const templates: ErrorTemplates = {};\n  Object.keys(messages).forEach(reasonCode => {\n    templates[reasonCode] = Object.freeze({\n      code,\n      reasonCode: keepReasonCodeCompat(reasonCode, syntaxPlugin),\n      template: messages[reasonCode],\n    });\n  });\n  return Object.freeze(templates);\n}\n\nexport { ErrorCodes };\nexport {\n  ErrorMessages as Errors,\n  SourceTypeModuleErrorMessages as SourceTypeModuleErrors,\n} from \"./error-message\";\n\nexport type raiseFunction = (number, ErrorTemplate, ...any) => void;\n\nexport default class ParserError extends CommentsParser {\n  // Forward-declaration: defined in tokenizer/index.js\n  /*::\n  +isLookahead: boolean;\n  */\n\n  getLocationForPosition(pos: number): Position {\n    let loc;\n    if (pos === this.state.start) loc = this.state.startLoc;\n    else if (pos === this.state.lastTokStart) loc = this.state.lastTokStartLoc;\n    else if (pos === this.state.end) loc = this.state.endLoc;\n    else if (pos === this.state.lastTokEnd) loc = this.state.lastTokEndLoc;\n    else loc = getLineInfo(this.input, pos);\n\n    return loc;\n  }\n\n  raise(\n    pos: number,\n    { code, reasonCode, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    return this.raiseWithData(pos, { code, reasonCode }, template, ...params);\n  }\n\n  /**\n   * Raise a parsing error on given position pos. If errorRecovery is true,\n   * it will first search current errors and overwrite the error thrown on the exact\n   * position before with the new error message. If errorRecovery is false, it\n   * fallbacks to `raise`.\n   *\n   * @param {number} pos\n   * @param {string} errorTemplate\n   * @param {...any} params\n   * @returns {(Error | empty)}\n   * @memberof ParserError\n   */\n  raiseOverwrite(\n    pos: number,\n    { code, template }: ErrorTemplate,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      template.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    if (this.options.errorRecovery) {\n      const errors = this.state.errors;\n      for (let i = errors.length - 1; i >= 0; i--) {\n        const error = errors[i];\n        if (error.pos === pos) {\n          return Object.assign(error, { message });\n        } else if (error.pos < pos) {\n          break;\n        }\n      }\n    }\n    return this._raise({ code, loc, pos }, message);\n  }\n\n  raiseWithData(\n    pos: number,\n    data?: {\n      missingPlugin?: Array<string>,\n      code?: string,\n    },\n    errorTemplate: string,\n    ...params: any\n  ): Error | empty {\n    const loc = this.getLocationForPosition(pos);\n    const message =\n      errorTemplate.replace(/%(\\d+)/g, (_, i: number) => params[i]) +\n      ` (${loc.line}:${loc.column})`;\n    return this._raise(Object.assign(({ loc, pos }: Object), data), message);\n  }\n\n  _raise(errorContext: ErrorContext, message: string): Error | empty {\n    // $FlowIgnore\n    const err: SyntaxError & ErrorContext = new SyntaxError(message);\n    Object.assign(err, errorContext);\n    if (this.options.errorRecovery) {\n      if (!this.isLookahead) this.state.errors.push(err);\n      return err;\n    } else {\n      throw err;\n    }\n  }\n}\n","// @flow\n\nimport { type TokenType } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport type { ExpressionErrors } from \"../parser/util\";\nimport * as N from \"../types\";\nimport type { Position } from \"../util/location\";\nimport { Errors } from \"../parser/error\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseRegExpLiteral({ pattern, flags }): N.Node {\n      let regex = null;\n      try {\n        regex = new RegExp(pattern, flags);\n      } catch (e) {\n        // In environments that don't support these flags value will\n        // be null as the regex can't be represented natively.\n      }\n      const node = this.estreeParseLiteral<N.EstreeRegExpLiteral>(regex);\n      node.regex = { pattern, flags };\n\n      return node;\n    }\n\n    parseBigIntLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/es2020.md#bigintliteral\n      let bigInt;\n      try {\n        // $FlowIgnore\n        bigInt = BigInt(value);\n      } catch {\n        bigInt = null;\n      }\n      const node = this.estreeParseLiteral<N.EstreeBigIntLiteral>(bigInt);\n      node.bigint = String(node.value || value);\n\n      return node;\n    }\n\n    parseDecimalLiteral(value: any): N.Node {\n      // https://github.com/estree/estree/blob/master/experimental/decimal.md\n      // todo: use BigDecimal when node supports it.\n      const decimal = null;\n      const node = this.estreeParseLiteral(decimal);\n      node.decimal = String(node.value || value);\n\n      return node;\n    }\n\n    estreeParseLiteral<T: N.Node>(value: any) {\n      return this.parseLiteral<T>(value, \"Literal\");\n    }\n\n    parseStringLiteral(value: any): N.Node {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNumericLiteral(value: any): any {\n      return this.estreeParseLiteral(value);\n    }\n\n    parseNullLiteral(): N.Node {\n      return this.estreeParseLiteral(null);\n    }\n\n    parseBooleanLiteral(value: boolean): N.BooleanLiteral {\n      return this.estreeParseLiteral(value);\n    }\n\n    directiveToStmt(directive: N.Directive): N.ExpressionStatement {\n      const directiveLiteral = directive.value;\n\n      const stmt = this.startNodeAt(directive.start, directive.loc.start);\n      const expression = this.startNodeAt(\n        directiveLiteral.start,\n        directiveLiteral.loc.start,\n      );\n\n      expression.value = directiveLiteral.extra.expressionValue;\n      expression.raw = directiveLiteral.extra.raw;\n\n      stmt.expression = this.finishNodeAt(\n        expression,\n        \"Literal\",\n        directiveLiteral.end,\n        directiveLiteral.loc.end,\n      );\n      stmt.directive = directiveLiteral.extra.raw.slice(1, -1);\n\n      return this.finishNodeAt(\n        stmt,\n        \"ExpressionStatement\",\n        directive.end,\n        directive.loc.end,\n      );\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    initFunction(\n      node: N.BodilessFunctionOrMethodBase,\n      isAsync: ?boolean,\n    ): void {\n      super.initFunction(node, isAsync);\n      node.expression = false;\n    }\n\n    checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n      if (node != null && this.isObjectProperty(node)) {\n        this.checkDeclaration(((node: any): N.EstreeProperty).value);\n      } else {\n        super.checkDeclaration(node);\n      }\n    }\n\n    getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n      return ((method: any): N.EstreeProperty | N.EstreeMethodDefinition).value\n        .params;\n    }\n\n    isValidDirective(stmt: N.Statement): boolean {\n      return (\n        stmt.type === \"ExpressionStatement\" &&\n        stmt.expression.type === \"Literal\" &&\n        typeof stmt.expression.value === \"string\" &&\n        !stmt.expression.extra?.parenthesized\n      );\n    }\n\n    parseBlockBody(\n      node: N.BlockStatementLike,\n      ...args: [?boolean, boolean, TokenType, void | (boolean => void)]\n    ): void {\n      super.parseBlockBody(node, ...args);\n\n      const directiveStatements = node.directives.map(d =>\n        this.directiveToStmt(d),\n      );\n      node.body = directiveStatements.concat(node.body);\n      // $FlowIgnore - directives isn't optional in the type definition\n      delete node.directives;\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      );\n      if (method.typeParameters) {\n        // $FlowIgnore\n        method.value.typeParameters = method.typeParameters;\n        delete method.typeParameters;\n      }\n      classBody.body.push(method);\n    }\n\n    parsePrivateName(): any {\n      const node = super.parsePrivateName();\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return node;\n        }\n      }\n      return this.convertPrivateNameToPrivateIdentifier(node);\n    }\n\n    convertPrivateNameToPrivateIdentifier(\n      node: N.PrivateName,\n    ): N.EstreePrivateIdentifier {\n      const name = super.getPrivateNameSV(node);\n      node = (node: any);\n      delete node.id;\n      node.name = name;\n      node.type = \"PrivateIdentifier\";\n      return node;\n    }\n\n    isPrivateName(node: N.Node): boolean {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.isPrivateName(node);\n        }\n      }\n      return node.type === \"PrivateIdentifier\";\n    }\n\n    getPrivateNameSV(node: N.Node): string {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return super.getPrivateNameSV(node);\n        }\n      }\n      return node.name;\n    }\n\n    parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n      const node = super.parseLiteral<T>(value, type);\n      node.raw = node.extra.raw;\n      delete node.extra;\n\n      return node;\n    }\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpression: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      super.parseFunctionBody(node, allowExpression, isMethod);\n      node.expression = node.body.type !== \"BlockStatement\";\n    }\n\n    parseMethod<T: N.MethodLike>(\n      node: T,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowDirectSuper: boolean,\n      type: string,\n      inClassScope: boolean = false,\n    ): T {\n      let funcNode = this.startNode();\n      funcNode.kind = node.kind; // provide kind, so super method correctly sets state\n      funcNode = super.parseMethod(\n        funcNode,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowDirectSuper,\n        type,\n        inClassScope,\n      );\n      funcNode.type = \"FunctionExpression\";\n      delete funcNode.kind;\n      // $FlowIgnore\n      node.value = funcNode;\n      if (type === \"ClassPrivateMethod\") {\n        // $FlowIgnore\n        node.computed = false;\n      }\n      type = \"MethodDefinition\";\n      return this.finishNode(node, type);\n    }\n\n    parseClassProperty(...args: [N.ClassProperty]): any {\n      const propertyNode = (super.parseClassProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseClassPrivateProperty(...args: [N.ClassPrivateProperty]): any {\n      const propertyNode = (super.parseClassPrivateProperty(...args): any);\n      if (!process.env.BABEL_8_BREAKING) {\n        if (!this.getPluginOption(\"estree\", \"classFeatures\")) {\n          return (propertyNode: N.EstreePropertyDefinition);\n        }\n      }\n      propertyNode.type = \"PropertyDefinition\";\n      propertyNode.computed = false;\n      return (propertyNode: N.EstreePropertyDefinition);\n    }\n\n    parseObjectMethod(\n      prop: N.ObjectMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n    ): ?N.ObjectMethod {\n      const node: N.EstreeProperty = (super.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ): any);\n\n      if (node) {\n        node.type = \"Property\";\n        if (((node: any): N.ClassMethod).kind === \"method\") node.kind = \"init\";\n        node.shorthand = false;\n      }\n\n      return (node: any);\n    }\n\n    parseObjectProperty(\n      prop: N.ObjectProperty,\n      startPos: ?number,\n      startLoc: ?Position,\n      isPattern: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): ?N.ObjectProperty {\n      const node: N.EstreeProperty = (super.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      ): any);\n\n      if (node) {\n        node.kind = \"init\";\n        node.type = \"Property\";\n      }\n\n      return (node: any);\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node != null && this.isObjectProperty(node)) {\n        return this.isAssignable(node.value, isBinding);\n      }\n      return super.isAssignable(node, isBinding);\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node != null && this.isObjectProperty(node)) {\n        this.toAssignable(node.value, isLHS);\n\n        return node;\n      }\n\n      return super.toAssignable(node, isLHS);\n    }\n\n    toAssignableObjectExpressionProp(prop: N.Node, ...args) {\n      if (prop.kind === \"get\" || prop.kind === \"set\") {\n        this.raise(prop.key.start, Errors.PatternHasAccessor);\n      } else if (prop.method) {\n        this.raise(prop.key.start, Errors.PatternHasMethod);\n      } else {\n        super.toAssignableObjectExpressionProp(prop, ...args);\n      }\n    }\n\n    finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n      node: T,\n      optional: boolean,\n    ): N.Expression {\n      super.finishCallExpression(node, optional);\n\n      if (node.callee.type === \"Import\") {\n        ((node: N.Node): N.EstreeImportExpression).type = \"ImportExpression\";\n        ((node: N.Node): N.EstreeImportExpression).source = node.arguments[0];\n        if (this.hasPlugin(\"importAssertions\")) {\n          ((node: N.Node): N.EstreeImportExpression).attributes =\n            node.arguments[1] ?? null;\n        }\n        // $FlowIgnore - arguments isn't optional in the type definition\n        delete node.arguments;\n        // $FlowIgnore - callee isn't optional in the type definition\n        delete node.callee;\n      }\n\n      return node;\n    }\n\n    toReferencedArguments(\n      node:\n        | N.CallExpression\n        | N.OptionalCallExpression\n        | N.EstreeImportExpression,\n      /* isParenthesizedExpr?: boolean, */\n    ) {\n      // ImportExpressions do not have an arguments array.\n      if (node.type === \"ImportExpression\") {\n        return;\n      }\n\n      super.toReferencedArguments(node);\n    }\n\n    parseExport(node: N.Node) {\n      super.parseExport(node);\n\n      switch (node.type) {\n        case \"ExportAllDeclaration\":\n          node.exported = null;\n          break;\n\n        case \"ExportNamedDeclaration\":\n          if (\n            node.specifiers.length === 1 &&\n            node.specifiers[0].type === \"ExportNamespaceSpecifier\"\n          ) {\n            node.type = \"ExportAllDeclaration\";\n            node.exported = node.specifiers[0].exported;\n            delete node.specifiers;\n          }\n\n          break;\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ) {\n      const node = super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        state,\n      );\n\n      if (state.optionalChainMember) {\n        // https://github.com/estree/estree/blob/master/es2020.md#chainexpression\n        if (\n          node.type === \"OptionalMemberExpression\" ||\n          node.type === \"OptionalCallExpression\"\n        ) {\n          node.type = node.type.substring(8); // strip Optional prefix\n        }\n        if (state.stop) {\n          const chain = this.startNodeAtNode(node);\n          chain.expression = node;\n          return this.finishNode(chain, \"ChainExpression\");\n        }\n      } else if (\n        node.type === \"MemberExpression\" ||\n        node.type === \"CallExpression\"\n      ) {\n        node.optional = false;\n      }\n\n      return node;\n    }\n\n    hasPropertyAsPrivateName(node: N.Node): boolean {\n      if (node.type === \"ChainExpression\") {\n        node = node.expression;\n      }\n      return super.hasPropertyAsPrivateName(node);\n    }\n\n    isOptionalChain(node: N.Node): boolean {\n      return node.type === \"ChainExpression\";\n    }\n\n    isObjectProperty(node: N.Node): boolean {\n      return node.type === \"Property\" && node.kind === \"init\" && !node.method;\n    }\n\n    isObjectMethod(node: N.Node): boolean {\n      return node.method || node.kind === \"get\" || node.kind === \"set\";\n    }\n  };\n","// @flow\n\n// The token context is used in JSX plugin to track\n// jsx tag / jsx text / normal JavaScript expression\n\nexport class TokContext {\n  constructor(token: string, preserveSpace?: boolean) {\n    this.token = token;\n    this.preserveSpace = !!preserveSpace;\n  }\n\n  token: string;\n  preserveSpace: boolean;\n}\n\nconst types: {\n  [key: string]: TokContext,\n} = {\n  brace: new TokContext(\"{\"), // normal JavaScript expression\n  j_oTag: new TokContext(\"<tag\"), // JSX openning tag\n  j_cTag: new TokContext(\"</tag\"), // JSX closing tag\n  j_expr: new TokContext(\"<tag>...</tag>\", true), // JSX expressions\n};\n\nif (!process.env.BABEL_8_BREAKING) {\n  types.template = new TokContext(\"`\", true);\n}\n\nexport { types };\n","// @flow\nimport { types as tc, type TokContext } from \"./context\";\n// ## Token types\n\n// The assignment of fine-grained, information-carrying type objects\n// allows the tokenizer to store the information it has about a\n// token in a way that is very cheap for the parser to look up.\n\n// All token type variables start with an underscore, to make them\n// easy to recognize.\n\n// The `beforeExpr` property is used to disambiguate between 1) binary\n// expression (<) and JSX Tag start (<name>); 2) object literal and JSX\n// texts. It is set on the `updateContext` function in the JSX plugin.\n\n// The `startsExpr` property is used to determine whether an expression\n// may be the “argument” subexpression of a `yield` expression or\n// `yield` statement. It is set on all token types that may be at the\n// start of a subexpression.\n\n// `isLoop` marks a keyword as starting a loop, which is important\n// to know when parsing a label, in order to allow or disallow\n// continue jumps to that label.\n\nconst beforeExpr = true;\nconst startsExpr = true;\nconst isLoop = true;\nconst isAssign = true;\nconst prefix = true;\nconst postfix = true;\n\ntype TokenOptions = {\n  keyword?: string,\n  beforeExpr?: boolean,\n  startsExpr?: boolean,\n  rightAssociative?: boolean,\n  isLoop?: boolean,\n  isAssign?: boolean,\n  prefix?: boolean,\n  postfix?: boolean,\n  binop?: ?number,\n};\n\n// Internally the tokenizer stores token as a number\nexport opaque type TokenType = number;\n\n// The `ExportedTokenType` is exported via `tokTypes` and accessible\n// when `tokens: true` is enabled. Unlike internal token type, it provides\n// metadata of the tokens.\nexport class ExportedTokenType {\n  label: string;\n  keyword: ?string;\n  beforeExpr: boolean;\n  startsExpr: boolean;\n  rightAssociative: boolean;\n  isLoop: boolean;\n  isAssign: boolean;\n  prefix: boolean;\n  postfix: boolean;\n  binop: ?number;\n  // todo(Babel 8): remove updateContext from exposed token layout\n  declare updateContext: ?(context: Array<TokContext>) => void;\n\n  constructor(label: string, conf: TokenOptions = {}) {\n    this.label = label;\n    this.keyword = conf.keyword;\n    this.beforeExpr = !!conf.beforeExpr;\n    this.startsExpr = !!conf.startsExpr;\n    this.rightAssociative = !!conf.rightAssociative;\n    this.isLoop = !!conf.isLoop;\n    this.isAssign = !!conf.isAssign;\n    this.prefix = !!conf.prefix;\n    this.postfix = !!conf.postfix;\n    this.binop = conf.binop != null ? conf.binop : null;\n    if (!process.env.BABEL_8_BREAKING) {\n      this.updateContext = null;\n    }\n  }\n}\n\n// A map from keyword/keyword-like string value to the token type\nexport const keywords = new Map<string, TokenType>();\n\nfunction createKeyword(name: string, options: TokenOptions = {}): TokenType {\n  options.keyword = name;\n  const token = createToken(name, options);\n  keywords.set(name, token);\n  return token;\n}\n\nfunction createBinop(name: string, binop: number) {\n  return createToken(name, { beforeExpr, binop });\n}\n\nlet tokenTypeCounter = -1;\nexport const tokenTypes: ExportedTokenType[] = [];\nconst tokenLabels: string[] = [];\nconst tokenBinops: number[] = [];\nconst tokenBeforeExprs: boolean[] = [];\nconst tokenStartsExprs: boolean[] = [];\nconst tokenPrefixes: boolean[] = [];\n\nfunction createToken(name: string, options: TokenOptions = {}): TokenType {\n  ++tokenTypeCounter;\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  tokenTypes.push(new ExportedTokenType(name, options));\n\n  return tokenTypeCounter;\n}\n\nfunction createKeywordLike(\n  name: string,\n  options: TokenOptions = {},\n): TokenType {\n  ++tokenTypeCounter;\n  keywords.set(name, tokenTypeCounter);\n  tokenLabels.push(name);\n  tokenBinops.push(options.binop ?? -1);\n  tokenBeforeExprs.push(options.beforeExpr ?? false);\n  tokenStartsExprs.push(options.startsExpr ?? false);\n  tokenPrefixes.push(options.prefix ?? false);\n  // In the exported token type, we set the label as \"name\" for backward compatibility with Babel 7\n  tokenTypes.push(new ExportedTokenType(\"name\", options));\n\n  return tokenTypeCounter;\n}\n\n// For performance the token type helpers depend on the following declarations order.\n// When adding new token types, please also check if the token helpers need update.\n\nexport const tt: { [name: string]: TokenType } = {\n  // Punctuation token types.\n  bracketL: createToken(\"[\", { beforeExpr, startsExpr }),\n  bracketHashL: createToken(\"#[\", { beforeExpr, startsExpr }),\n  bracketBarL: createToken(\"[|\", { beforeExpr, startsExpr }),\n  bracketR: createToken(\"]\"),\n  bracketBarR: createToken(\"|]\"),\n  braceL: createToken(\"{\", { beforeExpr, startsExpr }),\n  braceBarL: createToken(\"{|\", { beforeExpr, startsExpr }),\n  braceHashL: createToken(\"#{\", { beforeExpr, startsExpr }),\n  braceR: createToken(\"}\", { beforeExpr }),\n  braceBarR: createToken(\"|}\"),\n  parenL: createToken(\"(\", { beforeExpr, startsExpr }),\n  parenR: createToken(\")\"),\n  comma: createToken(\",\", { beforeExpr }),\n  semi: createToken(\";\", { beforeExpr }),\n  colon: createToken(\":\", { beforeExpr }),\n  doubleColon: createToken(\"::\", { beforeExpr }),\n  dot: createToken(\".\"),\n  question: createToken(\"?\", { beforeExpr }),\n  questionDot: createToken(\"?.\"),\n  arrow: createToken(\"=>\", { beforeExpr }),\n  template: createToken(\"template\"),\n  ellipsis: createToken(\"...\", { beforeExpr }),\n  backQuote: createToken(\"`\", { startsExpr }),\n  dollarBraceL: createToken(\"${\", { beforeExpr, startsExpr }),\n  // start: isTemplate\n  templateTail: createToken(\"...`\", { startsExpr }),\n  templateNonTail: createToken(\"...${\", { beforeExpr, startsExpr }),\n  // end: isTemplate\n  at: createToken(\"@\"),\n  hash: createToken(\"#\", { startsExpr }),\n\n  // Special hashbang token.\n  interpreterDirective: createToken(\"#!...\"),\n\n  // Operators. These carry several kinds of properties to help the\n  // parser use them properly (the presence of these properties is\n  // what categorizes them as operators).\n  //\n  // `binop`, when present, specifies that this operator is a binary\n  // operator, and will refer to its precedence.\n  //\n  // `prefix` and `postfix` mark the operator as a prefix or postfix\n  // unary operator.\n  //\n  // `isAssign` marks all of `=`, `+=`, `-=` etcetera, which act as\n  // binary operators with a very low precedence, that should result\n  // in AssignmentExpression nodes.\n\n  // start: isAssign\n  eq: createToken(\"=\", { beforeExpr, isAssign }),\n  assign: createToken(\"_=\", { beforeExpr, isAssign }),\n  slashAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // These are only needed to support % and ^ as a Hack-pipe topic token. When the\n  // proposal settles on a token, the others can be merged with tt.assign.\n  xorAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  moduloAssign: createToken(\"_=\", { beforeExpr, isAssign }),\n  // end: isAssign\n\n  incDec: createToken(\"++/--\", { prefix, postfix, startsExpr }),\n  bang: createToken(\"!\", { beforeExpr, prefix, startsExpr }),\n  tilde: createToken(\"~\", { beforeExpr, prefix, startsExpr }),\n  // start: isBinop\n  pipeline: createBinop(\"|>\", 0),\n  nullishCoalescing: createBinop(\"??\", 1),\n  logicalOR: createBinop(\"||\", 1),\n  logicalAND: createBinop(\"&&\", 2),\n  bitwiseOR: createBinop(\"|\", 3),\n  bitwiseXOR: createBinop(\"^\", 4),\n  bitwiseAND: createBinop(\"&\", 5),\n  equality: createBinop(\"==/!=/===/!==\", 6),\n  lt: createBinop(\"</>/<=/>=\", 7),\n  gt: createBinop(\"</>/<=/>=\", 7),\n  relational: createBinop(\"</>/<=/>=\", 7),\n  bitShift: createBinop(\"<</>>/>>>\", 8),\n  plusMin: createToken(\"+/-\", { beforeExpr, binop: 9, prefix, startsExpr }),\n  // startsExpr: required by v8intrinsic plugin\n  modulo: createToken(\"%\", { binop: 10, startsExpr }),\n  // unset `beforeExpr` as it can be `function *`\n  star: createToken(\"*\", { binop: 10 }),\n  slash: createBinop(\"/\", 10),\n  exponent: createToken(\"**\", {\n    beforeExpr,\n    binop: 11,\n    rightAssociative: true,\n  }),\n\n  // Keywords\n  // Don't forget to update packages/babel-helper-validator-identifier/src/keyword.js\n  // when new keywords are added\n  // start: isLiteralPropertyName\n  // start: isKeyword\n  _in: createKeyword(\"in\", { beforeExpr, binop: 7 }),\n  _instanceof: createKeyword(\"instanceof\", { beforeExpr, binop: 7 }),\n  // end: isBinop\n  _break: createKeyword(\"break\"),\n  _case: createKeyword(\"case\", { beforeExpr }),\n  _catch: createKeyword(\"catch\"),\n  _continue: createKeyword(\"continue\"),\n  _debugger: createKeyword(\"debugger\"),\n  _default: createKeyword(\"default\", { beforeExpr }),\n  _else: createKeyword(\"else\", { beforeExpr }),\n  _finally: createKeyword(\"finally\"),\n  _function: createKeyword(\"function\", { startsExpr }),\n  _if: createKeyword(\"if\"),\n  _return: createKeyword(\"return\", { beforeExpr }),\n  _switch: createKeyword(\"switch\"),\n  _throw: createKeyword(\"throw\", { beforeExpr, prefix, startsExpr }),\n  _try: createKeyword(\"try\"),\n  _var: createKeyword(\"var\"),\n  _const: createKeyword(\"const\"),\n  _with: createKeyword(\"with\"),\n  _new: createKeyword(\"new\", { beforeExpr, startsExpr }),\n  _this: createKeyword(\"this\", { startsExpr }),\n  _super: createKeyword(\"super\", { startsExpr }),\n  _class: createKeyword(\"class\", { startsExpr }),\n  _extends: createKeyword(\"extends\", { beforeExpr }),\n  _export: createKeyword(\"export\"),\n  _import: createKeyword(\"import\", { startsExpr }),\n  _null: createKeyword(\"null\", { startsExpr }),\n  _true: createKeyword(\"true\", { startsExpr }),\n  _false: createKeyword(\"false\", { startsExpr }),\n  _typeof: createKeyword(\"typeof\", { beforeExpr, prefix, startsExpr }),\n  _void: createKeyword(\"void\", { beforeExpr, prefix, startsExpr }),\n  _delete: createKeyword(\"delete\", { beforeExpr, prefix, startsExpr }),\n  // start: isLoop\n  _do: createKeyword(\"do\", { isLoop, beforeExpr }),\n  _for: createKeyword(\"for\", { isLoop }),\n  _while: createKeyword(\"while\", { isLoop }),\n  // end: isLoop\n  // end: isKeyword\n\n  // Primary literals\n  // start: isIdentifier\n  _as: createKeywordLike(\"as\", { startsExpr }),\n  _assert: createKeywordLike(\"assert\", { startsExpr }),\n  _async: createKeywordLike(\"async\", { startsExpr }),\n  _await: createKeywordLike(\"await\", { startsExpr }),\n  _from: createKeywordLike(\"from\", { startsExpr }),\n  _get: createKeywordLike(\"get\", { startsExpr }),\n  _let: createKeywordLike(\"let\", { startsExpr }),\n  _meta: createKeywordLike(\"meta\", { startsExpr }),\n  _of: createKeywordLike(\"of\", { startsExpr }),\n  _sent: createKeywordLike(\"sent\", { startsExpr }),\n  _set: createKeywordLike(\"set\", { startsExpr }),\n  _static: createKeywordLike(\"static\", { startsExpr }),\n  _yield: createKeywordLike(\"yield\", { startsExpr }),\n\n  // Flow and TypeScript Keywordlike\n  _asserts: createKeywordLike(\"asserts\", { startsExpr }),\n  _checks: createKeywordLike(\"checks\", { startsExpr }),\n  _exports: createKeywordLike(\"exports\", { startsExpr }),\n  _global: createKeywordLike(\"global\", { startsExpr }),\n  _implements: createKeywordLike(\"implements\", { startsExpr }),\n  _intrinsic: createKeywordLike(\"intrinsic\", { startsExpr }),\n  _infer: createKeywordLike(\"infer\", { startsExpr }),\n  _is: createKeywordLike(\"is\", { startsExpr }),\n  _mixins: createKeywordLike(\"mixins\", { startsExpr }),\n  _proto: createKeywordLike(\"proto\", { startsExpr }),\n  _require: createKeywordLike(\"require\", { startsExpr }),\n  // start: isTSTypeOperator\n  _keyof: createKeywordLike(\"keyof\", { startsExpr }),\n  _readonly: createKeywordLike(\"readonly\", { startsExpr }),\n  _unique: createKeywordLike(\"unique\", { startsExpr }),\n  // end: isTSTypeOperator\n  // start: isTSDeclarationStart\n  _abstract: createKeywordLike(\"abstract\", { startsExpr }),\n  _declare: createKeywordLike(\"declare\", { startsExpr }),\n  _enum: createKeywordLike(\"enum\", { startsExpr }),\n  _module: createKeywordLike(\"module\", { startsExpr }),\n  _namespace: createKeywordLike(\"namespace\", { startsExpr }),\n  // start: isFlowInterfaceOrTypeOrOpaque\n  _interface: createKeywordLike(\"interface\", { startsExpr }),\n  _type: createKeywordLike(\"type\", { startsExpr }),\n  // end: isTSDeclarationStart\n  _opaque: createKeywordLike(\"opaque\", { startsExpr }),\n  // end: isFlowInterfaceOrTypeOrOpaque\n  name: createToken(\"name\", { startsExpr }),\n  // end: isIdentifier\n\n  string: createToken(\"string\", { startsExpr }),\n  num: createToken(\"num\", { startsExpr }),\n  bigint: createToken(\"bigint\", { startsExpr }),\n  decimal: createToken(\"decimal\", { startsExpr }),\n  // end: isLiteralPropertyName\n  regexp: createToken(\"regexp\", { startsExpr }),\n  privateName: createToken(\"#name\", { startsExpr }),\n  eof: createToken(\"eof\"),\n\n  // jsx plugin\n  jsxName: createToken(\"jsxName\"),\n  jsxText: createToken(\"jsxText\", { beforeExpr: true }),\n  jsxTagStart: createToken(\"jsxTagStart\", { startsExpr: true }),\n  jsxTagEnd: createToken(\"jsxTagEnd\"),\n\n  // placeholder plugin\n  placeholder: createToken(\"%%\", { startsExpr: true }),\n};\n\nexport function tokenIsIdentifier(token: TokenType): boolean {\n  return token >= tt._as && token <= tt.name;\n}\n\nexport function tokenKeywordOrIdentifierIsKeyword(token: TokenType): boolean {\n  // we can remove the token >= tt._in check when we\n  // know a token is either keyword or identifier\n  return token <= tt._while;\n}\n\nexport function tokenIsKeywordOrIdentifier(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.name;\n}\n\nexport function tokenIsLiteralPropertyName(token: TokenType): boolean {\n  return token >= tt._in && token <= tt.decimal;\n}\n\nexport function tokenComesBeforeExpression(token: TokenType): boolean {\n  return tokenBeforeExprs[token];\n}\n\nexport function tokenCanStartExpression(token: TokenType): boolean {\n  return tokenStartsExprs[token];\n}\n\nexport function tokenIsAssignment(token: TokenType): boolean {\n  return token >= tt.eq && token <= tt.moduloAssign;\n}\n\nexport function tokenIsFlowInterfaceOrTypeOrOpaque(token: TokenType): boolean {\n  return token >= tt._interface && token <= tt._opaque;\n}\n\nexport function tokenIsLoop(token: TokenType): boolean {\n  return token >= tt._do && token <= tt._while;\n}\n\nexport function tokenIsKeyword(token: TokenType): boolean {\n  return token >= tt._in && token <= tt._while;\n}\n\nexport function tokenIsOperator(token: TokenType): boolean {\n  return token >= tt.pipeline && token <= tt._instanceof;\n}\n\nexport function tokenIsPostfix(token: TokenType): boolean {\n  return token === tt.incDec;\n}\n\nexport function tokenIsPrefix(token: TokenType): boolean {\n  return tokenPrefixes[token];\n}\n\nexport function tokenIsTSTypeOperator(token: TokenType): boolean {\n  return token >= tt._keyof && token <= tt._unique;\n}\n\nexport function tokenIsTSDeclarationStart(token: TokenType): boolean {\n  return token >= tt._abstract && token <= tt._type;\n}\n\nexport function tokenLabelName(token: TokenType): string {\n  return tokenLabels[token];\n}\n\nexport function tokenOperatorPrecedence(token: TokenType): number {\n  return tokenBinops[token];\n}\n\nexport function tokenIsRightAssociative(token: TokenType): boolean {\n  return token === tt.exponent;\n}\n\nexport function tokenIsTemplate(token: TokenType): boolean {\n  return token >= tt.templateTail && token <= tt.templateNonTail;\n}\n\nexport function getExportedToken(token: TokenType): ExportedTokenType {\n  return tokenTypes[token];\n}\n\nexport function isTokenType(obj: any): boolean {\n  return typeof obj === \"number\";\n}\n\nif (!process.env.BABEL_8_BREAKING) {\n  tokenTypes[tt.braceR].updateContext = context => {\n    context.pop();\n  };\n\n  tokenTypes[tt.braceL].updateContext =\n    tokenTypes[tt.braceHashL].updateContext =\n    tokenTypes[tt.dollarBraceL].updateContext =\n      context => {\n        context.push(tc.brace);\n      };\n\n  tokenTypes[tt.backQuote].updateContext = context => {\n    if (context[context.length - 1] === tc.template) {\n      context.pop();\n    } else {\n      context.push(tc.template);\n    }\n  };\n\n  tokenTypes[tt.jsxTagStart].updateContext = context => {\n    context.push(tc.j_expr, tc.j_oTag);\n  };\n}\n","import * as charCodes from \"charcodes\";\n\n// ## Character categories\n\n// Big ugly regular expressions that match characters in the\n// whitespace, identifier, and identifier-start categories. These\n// are only applied when a character is found to actually have a\n// code point between 0x80 and 0xffff.\n// Generated by `scripts/generate-identifier-regex.js`.\n\n/* prettier-ignore */\nlet nonASCIIidentifierStartChars = \"\\xaa\\xb5\\xba\\xc0-\\xd6\\xd8-\\xf6\\xf8-\\u02c1\\u02c6-\\u02d1\\u02e0-\\u02e4\\u02ec\\u02ee\\u0370-\\u0374\\u0376\\u0377\\u037a-\\u037d\\u037f\\u0386\\u0388-\\u038a\\u038c\\u038e-\\u03a1\\u03a3-\\u03f5\\u03f7-\\u0481\\u048a-\\u052f\\u0531-\\u0556\\u0559\\u0560-\\u0588\\u05d0-\\u05ea\\u05ef-\\u05f2\\u0620-\\u064a\\u066e\\u066f\\u0671-\\u06d3\\u06d5\\u06e5\\u06e6\\u06ee\\u06ef\\u06fa-\\u06fc\\u06ff\\u0710\\u0712-\\u072f\\u074d-\\u07a5\\u07b1\\u07ca-\\u07ea\\u07f4\\u07f5\\u07fa\\u0800-\\u0815\\u081a\\u0824\\u0828\\u0840-\\u0858\\u0860-\\u086a\\u0870-\\u0887\\u0889-\\u088e\\u08a0-\\u08c9\\u0904-\\u0939\\u093d\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098c\\u098f\\u0990\\u0993-\\u09a8\\u09aa-\\u09b0\\u09b2\\u09b6-\\u09b9\\u09bd\\u09ce\\u09dc\\u09dd\\u09df-\\u09e1\\u09f0\\u09f1\\u09fc\\u0a05-\\u0a0a\\u0a0f\\u0a10\\u0a13-\\u0a28\\u0a2a-\\u0a30\\u0a32\\u0a33\\u0a35\\u0a36\\u0a38\\u0a39\\u0a59-\\u0a5c\\u0a5e\\u0a72-\\u0a74\\u0a85-\\u0a8d\\u0a8f-\\u0a91\\u0a93-\\u0aa8\\u0aaa-\\u0ab0\\u0ab2\\u0ab3\\u0ab5-\\u0ab9\\u0abd\\u0ad0\\u0ae0\\u0ae1\\u0af9\\u0b05-\\u0b0c\\u0b0f\\u0b10\\u0b13-\\u0b28\\u0b2a-\\u0b30\\u0b32\\u0b33\\u0b35-\\u0b39\\u0b3d\\u0b5c\\u0b5d\\u0b5f-\\u0b61\\u0b71\\u0b83\\u0b85-\\u0b8a\\u0b8e-\\u0b90\\u0b92-\\u0b95\\u0b99\\u0b9a\\u0b9c\\u0b9e\\u0b9f\\u0ba3\\u0ba4\\u0ba8-\\u0baa\\u0bae-\\u0bb9\\u0bd0\\u0c05-\\u0c0c\\u0c0e-\\u0c10\\u0c12-\\u0c28\\u0c2a-\\u0c39\\u0c3d\\u0c58-\\u0c5a\\u0c5d\\u0c60\\u0c61\\u0c80\\u0c85-\\u0c8c\\u0c8e-\\u0c90\\u0c92-\\u0ca8\\u0caa-\\u0cb3\\u0cb5-\\u0cb9\\u0cbd\\u0cdd\\u0cde\\u0ce0\\u0ce1\\u0cf1\\u0cf2\\u0d04-\\u0d0c\\u0d0e-\\u0d10\\u0d12-\\u0d3a\\u0d3d\\u0d4e\\u0d54-\\u0d56\\u0d5f-\\u0d61\\u0d7a-\\u0d7f\\u0d85-\\u0d96\\u0d9a-\\u0db1\\u0db3-\\u0dbb\\u0dbd\\u0dc0-\\u0dc6\\u0e01-\\u0e30\\u0e32\\u0e33\\u0e40-\\u0e46\\u0e81\\u0e82\\u0e84\\u0e86-\\u0e8a\\u0e8c-\\u0ea3\\u0ea5\\u0ea7-\\u0eb0\\u0eb2\\u0eb3\\u0ebd\\u0ec0-\\u0ec4\\u0ec6\\u0edc-\\u0edf\\u0f00\\u0f40-\\u0f47\\u0f49-\\u0f6c\\u0f88-\\u0f8c\\u1000-\\u102a\\u103f\\u1050-\\u1055\\u105a-\\u105d\\u1061\\u1065\\u1066\\u106e-\\u1070\\u1075-\\u1081\\u108e\\u10a0-\\u10c5\\u10c7\\u10cd\\u10d0-\\u10fa\\u10fc-\\u1248\\u124a-\\u124d\\u1250-\\u1256\\u1258\\u125a-\\u125d\\u1260-\\u1288\\u128a-\\u128d\\u1290-\\u12b0\\u12b2-\\u12b5\\u12b8-\\u12be\\u12c0\\u12c2-\\u12c5\\u12c8-\\u12d6\\u12d8-\\u1310\\u1312-\\u1315\\u1318-\\u135a\\u1380-\\u138f\\u13a0-\\u13f5\\u13f8-\\u13fd\\u1401-\\u166c\\u166f-\\u167f\\u1681-\\u169a\\u16a0-\\u16ea\\u16ee-\\u16f8\\u1700-\\u1711\\u171f-\\u1731\\u1740-\\u1751\\u1760-\\u176c\\u176e-\\u1770\\u1780-\\u17b3\\u17d7\\u17dc\\u1820-\\u1878\\u1880-\\u18a8\\u18aa\\u18b0-\\u18f5\\u1900-\\u191e\\u1950-\\u196d\\u1970-\\u1974\\u1980-\\u19ab\\u19b0-\\u19c9\\u1a00-\\u1a16\\u1a20-\\u1a54\\u1aa7\\u1b05-\\u1b33\\u1b45-\\u1b4c\\u1b83-\\u1ba0\\u1bae\\u1baf\\u1bba-\\u1be5\\u1c00-\\u1c23\\u1c4d-\\u1c4f\\u1c5a-\\u1c7d\\u1c80-\\u1c88\\u1c90-\\u1cba\\u1cbd-\\u1cbf\\u1ce9-\\u1cec\\u1cee-\\u1cf3\\u1cf5\\u1cf6\\u1cfa\\u1d00-\\u1dbf\\u1e00-\\u1f15\\u1f18-\\u1f1d\\u1f20-\\u1f45\\u1f48-\\u1f4d\\u1f50-\\u1f57\\u1f59\\u1f5b\\u1f5d\\u1f5f-\\u1f7d\\u1f80-\\u1fb4\\u1fb6-\\u1fbc\\u1fbe\\u1fc2-\\u1fc4\\u1fc6-\\u1fcc\\u1fd0-\\u1fd3\\u1fd6-\\u1fdb\\u1fe0-\\u1fec\\u1ff2-\\u1ff4\\u1ff6-\\u1ffc\\u2071\\u207f\\u2090-\\u209c\\u2102\\u2107\\u210a-\\u2113\\u2115\\u2118-\\u211d\\u2124\\u2126\\u2128\\u212a-\\u2139\\u213c-\\u213f\\u2145-\\u2149\\u214e\\u2160-\\u2188\\u2c00-\\u2ce4\\u2ceb-\\u2cee\\u2cf2\\u2cf3\\u2d00-\\u2d25\\u2d27\\u2d2d\\u2d30-\\u2d67\\u2d6f\\u2d80-\\u2d96\\u2da0-\\u2da6\\u2da8-\\u2dae\\u2db0-\\u2db6\\u2db8-\\u2dbe\\u2dc0-\\u2dc6\\u2dc8-\\u2dce\\u2dd0-\\u2dd6\\u2dd8-\\u2dde\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303c\\u3041-\\u3096\\u309b-\\u309f\\u30a1-\\u30fa\\u30fc-\\u30ff\\u3105-\\u312f\\u3131-\\u318e\\u31a0-\\u31bf\\u31f0-\\u31ff\\u3400-\\u4dbf\\u4e00-\\ua48c\\ua4d0-\\ua4fd\\ua500-\\ua60c\\ua610-\\ua61f\\ua62a\\ua62b\\ua640-\\ua66e\\ua67f-\\ua69d\\ua6a0-\\ua6ef\\ua717-\\ua71f\\ua722-\\ua788\\ua78b-\\ua7ca\\ua7d0\\ua7d1\\ua7d3\\ua7d5-\\ua7d9\\ua7f2-\\ua801\\ua803-\\ua805\\ua807-\\ua80a\\ua80c-\\ua822\\ua840-\\ua873\\ua882-\\ua8b3\\ua8f2-\\ua8f7\\ua8fb\\ua8fd\\ua8fe\\ua90a-\\ua925\\ua930-\\ua946\\ua960-\\ua97c\\ua984-\\ua9b2\\ua9cf\\ua9e0-\\ua9e4\\ua9e6-\\ua9ef\\ua9fa-\\ua9fe\\uaa00-\\uaa28\\uaa40-\\uaa42\\uaa44-\\uaa4b\\uaa60-\\uaa76\\uaa7a\\uaa7e-\\uaaaf\\uaab1\\uaab5\\uaab6\\uaab9-\\uaabd\\uaac0\\uaac2\\uaadb-\\uaadd\\uaae0-\\uaaea\\uaaf2-\\uaaf4\\uab01-\\uab06\\uab09-\\uab0e\\uab11-\\uab16\\uab20-\\uab26\\uab28-\\uab2e\\uab30-\\uab5a\\uab5c-\\uab69\\uab70-\\uabe2\\uac00-\\ud7a3\\ud7b0-\\ud7c6\\ud7cb-\\ud7fb\\uf900-\\ufa6d\\ufa70-\\ufad9\\ufb00-\\ufb06\\ufb13-\\ufb17\\ufb1d\\ufb1f-\\ufb28\\ufb2a-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40\\ufb41\\ufb43\\ufb44\\ufb46-\\ufbb1\\ufbd3-\\ufd3d\\ufd50-\\ufd8f\\ufd92-\\ufdc7\\ufdf0-\\ufdfb\\ufe70-\\ufe74\\ufe76-\\ufefc\\uff21-\\uff3a\\uff41-\\uff5a\\uff66-\\uffbe\\uffc2-\\uffc7\\uffca-\\uffcf\\uffd2-\\uffd7\\uffda-\\uffdc\";\n/* prettier-ignore */\nlet nonASCIIidentifierChars = \"\\u200c\\u200d\\xb7\\u0300-\\u036f\\u0387\\u0483-\\u0487\\u0591-\\u05bd\\u05bf\\u05c1\\u05c2\\u05c4\\u05c5\\u05c7\\u0610-\\u061a\\u064b-\\u0669\\u0670\\u06d6-\\u06dc\\u06df-\\u06e4\\u06e7\\u06e8\\u06ea-\\u06ed\\u06f0-\\u06f9\\u0711\\u0730-\\u074a\\u07a6-\\u07b0\\u07c0-\\u07c9\\u07eb-\\u07f3\\u07fd\\u0816-\\u0819\\u081b-\\u0823\\u0825-\\u0827\\u0829-\\u082d\\u0859-\\u085b\\u0898-\\u089f\\u08ca-\\u08e1\\u08e3-\\u0903\\u093a-\\u093c\\u093e-\\u094f\\u0951-\\u0957\\u0962\\u0963\\u0966-\\u096f\\u0981-\\u0983\\u09bc\\u09be-\\u09c4\\u09c7\\u09c8\\u09cb-\\u09cd\\u09d7\\u09e2\\u09e3\\u09e6-\\u09ef\\u09fe\\u0a01-\\u0a03\\u0a3c\\u0a3e-\\u0a42\\u0a47\\u0a48\\u0a4b-\\u0a4d\\u0a51\\u0a66-\\u0a71\\u0a75\\u0a81-\\u0a83\\u0abc\\u0abe-\\u0ac5\\u0ac7-\\u0ac9\\u0acb-\\u0acd\\u0ae2\\u0ae3\\u0ae6-\\u0aef\\u0afa-\\u0aff\\u0b01-\\u0b03\\u0b3c\\u0b3e-\\u0b44\\u0b47\\u0b48\\u0b4b-\\u0b4d\\u0b55-\\u0b57\\u0b62\\u0b63\\u0b66-\\u0b6f\\u0b82\\u0bbe-\\u0bc2\\u0bc6-\\u0bc8\\u0bca-\\u0bcd\\u0bd7\\u0be6-\\u0bef\\u0c00-\\u0c04\\u0c3c\\u0c3e-\\u0c44\\u0c46-\\u0c48\\u0c4a-\\u0c4d\\u0c55\\u0c56\\u0c62\\u0c63\\u0c66-\\u0c6f\\u0c81-\\u0c83\\u0cbc\\u0cbe-\\u0cc4\\u0cc6-\\u0cc8\\u0cca-\\u0ccd\\u0cd5\\u0cd6\\u0ce2\\u0ce3\\u0ce6-\\u0cef\\u0d00-\\u0d03\\u0d3b\\u0d3c\\u0d3e-\\u0d44\\u0d46-\\u0d48\\u0d4a-\\u0d4d\\u0d57\\u0d62\\u0d63\\u0d66-\\u0d6f\\u0d81-\\u0d83\\u0dca\\u0dcf-\\u0dd4\\u0dd6\\u0dd8-\\u0ddf\\u0de6-\\u0def\\u0df2\\u0df3\\u0e31\\u0e34-\\u0e3a\\u0e47-\\u0e4e\\u0e50-\\u0e59\\u0eb1\\u0eb4-\\u0ebc\\u0ec8-\\u0ecd\\u0ed0-\\u0ed9\\u0f18\\u0f19\\u0f20-\\u0f29\\u0f35\\u0f37\\u0f39\\u0f3e\\u0f3f\\u0f71-\\u0f84\\u0f86\\u0f87\\u0f8d-\\u0f97\\u0f99-\\u0fbc\\u0fc6\\u102b-\\u103e\\u1040-\\u1049\\u1056-\\u1059\\u105e-\\u1060\\u1062-\\u1064\\u1067-\\u106d\\u1071-\\u1074\\u1082-\\u108d\\u108f-\\u109d\\u135d-\\u135f\\u1369-\\u1371\\u1712-\\u1715\\u1732-\\u1734\\u1752\\u1753\\u1772\\u1773\\u17b4-\\u17d3\\u17dd\\u17e0-\\u17e9\\u180b-\\u180d\\u180f-\\u1819\\u18a9\\u1920-\\u192b\\u1930-\\u193b\\u1946-\\u194f\\u19d0-\\u19da\\u1a17-\\u1a1b\\u1a55-\\u1a5e\\u1a60-\\u1a7c\\u1a7f-\\u1a89\\u1a90-\\u1a99\\u1ab0-\\u1abd\\u1abf-\\u1ace\\u1b00-\\u1b04\\u1b34-\\u1b44\\u1b50-\\u1b59\\u1b6b-\\u1b73\\u1b80-\\u1b82\\u1ba1-\\u1bad\\u1bb0-\\u1bb9\\u1be6-\\u1bf3\\u1c24-\\u1c37\\u1c40-\\u1c49\\u1c50-\\u1c59\\u1cd0-\\u1cd2\\u1cd4-\\u1ce8\\u1ced\\u1cf4\\u1cf7-\\u1cf9\\u1dc0-\\u1dff\\u203f\\u2040\\u2054\\u20d0-\\u20dc\\u20e1\\u20e5-\\u20f0\\u2cef-\\u2cf1\\u2d7f\\u2de0-\\u2dff\\u302a-\\u302f\\u3099\\u309a\\ua620-\\ua629\\ua66f\\ua674-\\ua67d\\ua69e\\ua69f\\ua6f0\\ua6f1\\ua802\\ua806\\ua80b\\ua823-\\ua827\\ua82c\\ua880\\ua881\\ua8b4-\\ua8c5\\ua8d0-\\ua8d9\\ua8e0-\\ua8f1\\ua8ff-\\ua909\\ua926-\\ua92d\\ua947-\\ua953\\ua980-\\ua983\\ua9b3-\\ua9c0\\ua9d0-\\ua9d9\\ua9e5\\ua9f0-\\ua9f9\\uaa29-\\uaa36\\uaa43\\uaa4c\\uaa4d\\uaa50-\\uaa59\\uaa7b-\\uaa7d\\uaab0\\uaab2-\\uaab4\\uaab7\\uaab8\\uaabe\\uaabf\\uaac1\\uaaeb-\\uaaef\\uaaf5\\uaaf6\\uabe3-\\uabea\\uabec\\uabed\\uabf0-\\uabf9\\ufb1e\\ufe00-\\ufe0f\\ufe20-\\ufe2f\\ufe33\\ufe34\\ufe4d-\\ufe4f\\uff10-\\uff19\\uff3f\";\n\nconst nonASCIIidentifierStart = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + \"]\",\n);\nconst nonASCIIidentifier = new RegExp(\n  \"[\" + nonASCIIidentifierStartChars + nonASCIIidentifierChars + \"]\",\n);\n\nnonASCIIidentifierStartChars = nonASCIIidentifierChars = null;\n\n// These are a run-length and offset-encoded representation of the\n// >0xffff code points that are a valid part of identifiers. The\n// offset starts at 0x10000, and each pair of numbers represents an\n// offset to the next range, and then a size of the range. They were\n// generated by `scripts/generate-identifier-regex.js`.\n/* prettier-ignore */\nconst astralIdentifierStartCodes = [0,11,2,25,2,18,2,1,2,14,3,13,35,122,70,52,268,28,4,48,48,31,14,29,6,37,11,29,3,35,5,7,2,4,43,157,19,35,5,35,5,39,9,51,13,10,2,14,2,6,2,1,2,10,2,14,2,6,2,1,68,310,10,21,11,7,25,5,2,41,2,8,70,5,3,0,2,43,2,1,4,0,3,22,11,22,10,30,66,18,2,1,11,21,11,25,71,55,7,1,65,0,16,3,2,2,2,28,43,28,4,28,36,7,2,27,28,53,11,21,11,18,14,17,111,72,56,50,14,50,14,35,349,41,7,1,79,28,11,0,9,21,43,17,47,20,28,22,13,52,58,1,3,0,14,44,33,24,27,35,30,0,3,0,9,34,4,0,13,47,15,3,22,0,2,0,36,17,2,24,85,6,2,0,2,3,2,14,2,9,8,46,39,7,3,1,3,21,2,6,2,1,2,4,4,0,19,0,13,4,159,52,19,3,21,2,31,47,21,1,2,0,185,46,42,3,37,47,21,0,60,42,14,0,72,26,38,6,186,43,117,63,32,7,3,0,3,7,2,1,2,23,16,0,2,0,95,7,3,38,17,0,2,0,29,0,11,39,8,0,22,0,12,45,20,0,19,72,264,8,2,36,18,0,50,29,113,6,2,1,2,37,22,0,26,5,2,1,2,31,15,0,328,18,190,0,80,921,103,110,18,195,2637,96,16,1070,4050,582,8634,568,8,30,18,78,18,29,19,47,17,3,32,20,6,18,689,63,129,74,6,0,67,12,65,1,2,0,29,6135,9,1237,43,8,8936,3,2,6,2,1,2,290,46,2,18,3,9,395,2309,106,6,12,4,8,8,9,5991,84,2,70,2,1,3,0,3,1,3,3,2,11,2,0,2,6,2,64,2,3,3,7,2,6,2,27,2,3,2,4,2,0,4,6,2,339,3,24,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,30,2,24,2,7,1845,30,482,44,11,6,17,0,322,29,19,43,1269,6,2,3,2,1,2,14,2,196,60,67,8,0,1205,3,2,26,2,1,2,0,3,0,2,9,2,3,2,0,2,0,7,0,5,0,2,0,2,0,2,2,2,1,2,0,3,0,2,0,2,0,2,0,2,0,2,1,2,0,3,3,2,6,2,3,2,3,2,0,2,9,2,16,6,2,2,4,2,16,4421,42719,33,4152,8,221,3,5761,15,7472,3104,541,1507,4938];\n/* prettier-ignore */\nconst astralIdentifierCodes = [509,0,227,0,150,4,294,9,1368,2,2,1,6,3,41,2,5,0,166,1,574,3,9,9,370,1,154,10,50,3,123,2,54,14,32,10,3,1,11,3,46,10,8,0,46,9,7,2,37,13,2,9,6,1,45,0,13,2,49,13,9,3,2,11,83,11,7,0,161,11,6,9,7,3,56,1,2,6,3,1,3,2,10,0,11,1,3,6,4,4,193,17,10,9,5,0,82,19,13,9,214,6,3,8,28,1,83,16,16,9,82,12,9,9,84,14,5,9,243,14,166,9,71,5,2,1,3,3,2,0,2,1,13,9,120,6,3,6,4,0,29,9,41,6,2,3,9,0,10,10,47,15,406,7,2,7,17,9,57,21,2,13,123,5,4,0,2,1,2,6,2,0,9,9,49,4,2,1,2,4,9,9,330,3,19306,9,87,9,39,4,60,6,26,9,1014,0,2,54,8,3,82,0,12,1,19628,1,4706,45,3,22,543,4,4,5,9,7,3,6,31,3,149,2,1418,49,513,54,5,49,9,0,15,0,23,4,2,14,1361,6,2,16,3,6,2,1,2,4,262,6,10,9,357,0,62,13,1495,6,110,6,6,9,4759,9,787719,239];\n\n// This has a complexity linear to the value of the code. The\n// assumption is that looking up astral identifier characters is\n// rare.\nfunction isInAstralSet(code: number, set: readonly number[]): boolean {\n  let pos = 0x10000;\n  for (let i = 0, length = set.length; i < length; i += 2) {\n    pos += set[i];\n    if (pos > code) return false;\n\n    pos += set[i + 1];\n    if (pos >= code) return true;\n  }\n  return false;\n}\n\n// Test whether a given character code starts an identifier.\n\nexport function isIdentifierStart(code: number): boolean {\n  if (code < charCodes.uppercaseA) return code === charCodes.dollarSign;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return (\n      code >= 0xaa && nonASCIIidentifierStart.test(String.fromCharCode(code))\n    );\n  }\n  return isInAstralSet(code, astralIdentifierStartCodes);\n}\n\n// Test whether a given character is part of an identifier.\n\nexport function isIdentifierChar(code: number): boolean {\n  if (code < charCodes.digit0) return code === charCodes.dollarSign;\n  if (code < charCodes.colon) return true;\n  if (code < charCodes.uppercaseA) return false;\n  if (code <= charCodes.uppercaseZ) return true;\n  if (code < charCodes.lowercaseA) return code === charCodes.underscore;\n  if (code <= charCodes.lowercaseZ) return true;\n  if (code <= 0xffff) {\n    return code >= 0xaa && nonASCIIidentifier.test(String.fromCharCode(code));\n  }\n  return (\n    isInAstralSet(code, astralIdentifierStartCodes) ||\n    isInAstralSet(code, astralIdentifierCodes)\n  );\n}\n\n// Test whether a given string is a valid identifier name\n\nexport function isIdentifierName(name: string): boolean {\n  let isFirst = true;\n  for (let i = 0; i < name.length; i++) {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `name` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = name.charCodeAt(i);\n    if ((cp & 0xfc00) === 0xd800 && i + 1 < name.length) {\n      const trail = name.charCodeAt(++i);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    if (isFirst) {\n      isFirst = false;\n      if (!isIdentifierStart(cp)) {\n        return false;\n      }\n    } else if (!isIdentifierChar(cp)) {\n      return false;\n    }\n  }\n  return !isFirst;\n}\n","const reservedWords = {\n  keyword: [\n    \"break\",\n    \"case\",\n    \"catch\",\n    \"continue\",\n    \"debugger\",\n    \"default\",\n    \"do\",\n    \"else\",\n    \"finally\",\n    \"for\",\n    \"function\",\n    \"if\",\n    \"return\",\n    \"switch\",\n    \"throw\",\n    \"try\",\n    \"var\",\n    \"const\",\n    \"while\",\n    \"with\",\n    \"new\",\n    \"this\",\n    \"super\",\n    \"class\",\n    \"extends\",\n    \"export\",\n    \"import\",\n    \"null\",\n    \"true\",\n    \"false\",\n    \"in\",\n    \"instanceof\",\n    \"typeof\",\n    \"void\",\n    \"delete\",\n  ],\n  strict: [\n    \"implements\",\n    \"interface\",\n    \"let\",\n    \"package\",\n    \"private\",\n    \"protected\",\n    \"public\",\n    \"static\",\n    \"yield\",\n  ],\n  strictBind: [\"eval\", \"arguments\"],\n};\nconst keywords = new Set(reservedWords.keyword);\nconst reservedWordsStrictSet = new Set(reservedWords.strict);\nconst reservedWordsStrictBindSet = new Set(reservedWords.strictBind);\n\n/**\n * Checks if word is a reserved word in non-strict mode\n */\nexport function isReservedWord(word: string, inModule: boolean): boolean {\n  return (inModule && word === \"await\") || word === \"enum\";\n}\n\n/**\n * Checks if word is a reserved word in non-binding strict mode\n *\n * Includes non-strict reserved words\n */\nexport function isStrictReservedWord(word: string, inModule: boolean): boolean {\n  return isReservedWord(word, inModule) || reservedWordsStrictSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode, but it is allowed as\n * a normal identifier.\n */\nexport function isStrictBindOnlyReservedWord(word: string): boolean {\n  return reservedWordsStrictBindSet.has(word);\n}\n\n/**\n * Checks if word is a reserved word in binding strict mode\n *\n * Includes non-strict reserved words and non-binding strict reserved words\n */\nexport function isStrictBindReservedWord(\n  word: string,\n  inModule: boolean,\n): boolean {\n  return (\n    isStrictReservedWord(word, inModule) || isStrictBindOnlyReservedWord(word)\n  );\n}\n\nexport function isKeyword(word: string): boolean {\n  return keywords.has(word);\n}\n","/* eslint max-len: 0 */\n\n// @flow\n\nimport * as charCodes from \"charcodes\";\n\nexport {\n  isIdentifierStart,\n  isIdentifierChar,\n  isReservedWord,\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n  isStrictReservedWord,\n  isKeyword,\n} from \"@babel/helper-validator-identifier\";\n\nexport const keywordRelationalOperator = /^in(stanceof)?$/;\n\n// Test whether a current state character code and next character code is @\n\nexport function isIteratorStart(current: number, next: number): boolean {\n  return current === charCodes.atSign && next === charCodes.atSign;\n}\n\n// This is the comprehensive set of JavaScript reserved words\n// If a word is in this set, it could be a reserved word,\n// depending on sourceType/strictMode/binding info. In other words\n// if a word is not in this set, it is not a reserved word under\n// any circumstance.\nconst reservedWordLikeSet = new Set([\n  \"break\",\n  \"case\",\n  \"catch\",\n  \"continue\",\n  \"debugger\",\n  \"default\",\n  \"do\",\n  \"else\",\n  \"finally\",\n  \"for\",\n  \"function\",\n  \"if\",\n  \"return\",\n  \"switch\",\n  \"throw\",\n  \"try\",\n  \"var\",\n  \"const\",\n  \"while\",\n  \"with\",\n  \"new\",\n  \"this\",\n  \"super\",\n  \"class\",\n  \"extends\",\n  \"export\",\n  \"import\",\n  \"null\",\n  \"true\",\n  \"false\",\n  \"in\",\n  \"instanceof\",\n  \"typeof\",\n  \"void\",\n  \"delete\",\n  // strict\n  \"implements\",\n  \"interface\",\n  \"let\",\n  \"package\",\n  \"private\",\n  \"protected\",\n  \"public\",\n  \"static\",\n  \"yield\",\n  // strictBind\n  \"eval\",\n  \"arguments\",\n  // reservedWorkLike\n  \"enum\",\n  \"await\",\n]);\n\nexport function canBeReservedWord(word: string): boolean {\n  return reservedWordLikeSet.has(word);\n}\n","// @flow\n\n// Each scope gets a bitset that may contain these flags\n// prettier-ignore\nexport const SCOPE_OTHER        = 0b000000000,\n             SCOPE_PROGRAM      = 0b000000001,\n             SCOPE_FUNCTION     = 0b000000010,\n             SCOPE_ARROW        = 0b000000100,\n             SCOPE_SIMPLE_CATCH = 0b000001000,\n             SCOPE_SUPER        = 0b000010000,\n             SCOPE_DIRECT_SUPER = 0b000100000,\n             SCOPE_CLASS        = 0b001000000,\n             SCOPE_STATIC_BLOCK = 0b010000000,\n             SCOPE_TS_MODULE    = 0b100000000,\n             SCOPE_VAR = SCOPE_PROGRAM | SCOPE_FUNCTION | SCOPE_TS_MODULE;\n\nexport type ScopeFlags =\n  | typeof SCOPE_OTHER\n  | typeof SCOPE_PROGRAM\n  | typeof SCOPE_FUNCTION\n  | typeof SCOPE_VAR\n  | typeof SCOPE_ARROW\n  | typeof SCOPE_SIMPLE_CATCH\n  | typeof SCOPE_SUPER\n  | typeof SCOPE_DIRECT_SUPER\n  | typeof SCOPE_CLASS\n  | typeof SCOPE_STATIC_BLOCK;\n\n// These flags are meant to be _only_ used inside the Scope class (or subclasses).\n// prettier-ignore\nexport const BIND_KIND_VALUE            = 0b000000_0000_01,\n             BIND_KIND_TYPE             = 0b000000_0000_10,\n             // Used in checkLVal and declareName to determine the type of a binding\n             BIND_SCOPE_VAR             = 0b000000_0001_00, // Var-style binding\n             BIND_SCOPE_LEXICAL         = 0b000000_0010_00, // Let- or const-style binding\n             BIND_SCOPE_FUNCTION        = 0b000000_0100_00, // Function declaration\n             BIND_SCOPE_OUTSIDE         = 0b000000_1000_00, // Special case for function names as\n                                                   // bound inside the function\n             // Misc flags\n             BIND_FLAGS_NONE            = 0b000001_0000_00,\n             BIND_FLAGS_CLASS           = 0b000010_0000_00,\n             BIND_FLAGS_TS_ENUM         = 0b000100_0000_00,\n             BIND_FLAGS_TS_CONST_ENUM   = 0b001000_0000_00,\n             BIND_FLAGS_TS_EXPORT_ONLY  = 0b010000_0000_00,\n             BIND_FLAGS_FLOW_DECLARE_FN = 0b100000_0000_00;\n\n// These flags are meant to be _only_ used by Scope consumers\n// prettier-ignore\n/*                              =    is value?    |    is type?    |      scope          |    misc flags    */\nexport const BIND_CLASS         = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_CLASS  ,\n             BIND_LEXICAL       = BIND_KIND_VALUE | 0              | BIND_SCOPE_LEXICAL  | 0                 ,\n             BIND_VAR           = BIND_KIND_VALUE | 0              | BIND_SCOPE_VAR      | 0                 ,\n             BIND_FUNCTION      = BIND_KIND_VALUE | 0              | BIND_SCOPE_FUNCTION | 0                 ,\n             BIND_TS_INTERFACE  = 0               | BIND_KIND_TYPE | 0                   | BIND_FLAGS_CLASS  ,\n             BIND_TS_TYPE       = 0               | BIND_KIND_TYPE | 0                   | 0                 ,\n             BIND_TS_ENUM       = BIND_KIND_VALUE | BIND_KIND_TYPE | BIND_SCOPE_LEXICAL  | BIND_FLAGS_TS_ENUM,\n             BIND_TS_AMBIENT    = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n             // These bindings don't introduce anything in the scope. They are used for assignments and\n             // function expressions IDs.\n             BIND_NONE          = 0               | 0              | 0                   | BIND_FLAGS_NONE   ,\n             BIND_OUTSIDE       = BIND_KIND_VALUE | 0              | 0                   | BIND_FLAGS_NONE   ,\n\n             BIND_TS_CONST_ENUM = BIND_TS_ENUM | BIND_FLAGS_TS_CONST_ENUM,\n             BIND_TS_NAMESPACE  = 0               | 0              | 0            | BIND_FLAGS_TS_EXPORT_ONLY,\n\n             BIND_FLOW_DECLARE_FN = BIND_FLAGS_FLOW_DECLARE_FN;\n\nexport type BindingTypes =\n  | typeof BIND_NONE\n  | typeof BIND_OUTSIDE\n  | typeof BIND_VAR\n  | typeof BIND_LEXICAL\n  | typeof BIND_CLASS\n  | typeof BIND_FUNCTION\n  | typeof BIND_TS_INTERFACE\n  | typeof BIND_TS_TYPE\n  | typeof BIND_TS_ENUM\n  | typeof BIND_TS_AMBIENT\n  | typeof BIND_TS_NAMESPACE;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_FLAG_STATIC = 0b1_00,\n             CLASS_ELEMENT_KIND_GETTER = 0b0_10,\n             CLASS_ELEMENT_KIND_SETTER = 0b0_01,\n             CLASS_ELEMENT_KIND_ACCESSOR = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_KIND_SETTER;\n\n// prettier-ignore\nexport const CLASS_ELEMENT_STATIC_GETTER   = CLASS_ELEMENT_KIND_GETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_STATIC_SETTER   = CLASS_ELEMENT_KIND_SETTER | CLASS_ELEMENT_FLAG_STATIC,\n             CLASS_ELEMENT_INSTANCE_GETTER = CLASS_ELEMENT_KIND_GETTER,\n             CLASS_ELEMENT_INSTANCE_SETTER = CLASS_ELEMENT_KIND_SETTER,\n             CLASS_ELEMENT_OTHER           = 0;\n\nexport type ClassElementTypes =\n  | typeof CLASS_ELEMENT_STATIC_GETTER\n  | typeof CLASS_ELEMENT_STATIC_SETTER\n  | typeof CLASS_ELEMENT_INSTANCE_GETTER\n  | typeof CLASS_ELEMENT_INSTANCE_SETTER\n  | typeof CLASS_ELEMENT_OTHER;\n","// @flow\nimport {\n  SCOPE_ARROW,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_SUPER,\n  SCOPE_PROGRAM,\n  SCOPE_VAR,\n  SCOPE_CLASS,\n  SCOPE_STATIC_BLOCK,\n  BIND_SCOPE_FUNCTION,\n  BIND_SCOPE_VAR,\n  BIND_SCOPE_LEXICAL,\n  BIND_KIND_VALUE,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"./scopeflags\";\nimport * as N from \"../types\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\n// Start an AST node, attaching a start offset.\nexport class Scope {\n  declare flags: ScopeFlags;\n  // A set of var-declared names in the current lexical scope\n  var: Set<string> = new Set();\n  // A set of lexically-declared names in the current lexical scope\n  lexical: Set<string> = new Set();\n  // A set of lexically-declared FunctionDeclaration names in the current lexical scope\n  functions: Set<string> = new Set();\n\n  constructor(flags: ScopeFlags) {\n    this.flags = flags;\n  }\n}\n\n// The functions in this module keep track of declared variables in the\n// current scope in order to detect duplicate variable names.\nexport default class ScopeHandler<IScope: Scope = Scope> {\n  scopeStack: Array<IScope> = [];\n  declare raise: raiseFunction;\n  declare inModule: boolean;\n  undefinedExports: Map<string, number> = new Map();\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction, inModule: boolean) {\n    this.raise = raise;\n    this.inModule = inModule;\n  }\n\n  get inFunction() {\n    return (this.currentVarScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get allowSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_SUPER) > 0;\n  }\n  get allowDirectSuper() {\n    return (this.currentThisScopeFlags() & SCOPE_DIRECT_SUPER) > 0;\n  }\n  get inClass() {\n    return (this.currentThisScopeFlags() & SCOPE_CLASS) > 0;\n  }\n  get inClassAndNotInNonArrowFunction() {\n    const flags = this.currentThisScopeFlags();\n    return (flags & SCOPE_CLASS) > 0 && (flags & SCOPE_FUNCTION) === 0;\n  }\n  get inStaticBlock() {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_STATIC_BLOCK) {\n        return true;\n      }\n      if (flags & (SCOPE_VAR | SCOPE_CLASS)) {\n        // function body, module body, class property initializers\n        return false;\n      }\n    }\n  }\n  get inNonArrowFunction() {\n    return (this.currentThisScopeFlags() & SCOPE_FUNCTION) > 0;\n  }\n  get treatFunctionsAsVar() {\n    return this.treatFunctionsAsVarInScope(this.currentScope());\n  }\n\n  createScope(flags: ScopeFlags): Scope {\n    return new Scope(flags);\n  }\n  // This method will be overwritten by subclasses\n  /*:: +createScope: (flags: ScopeFlags) => IScope; */\n\n  enter(flags: ScopeFlags) {\n    this.scopeStack.push(this.createScope(flags));\n  }\n\n  exit() {\n    this.scopeStack.pop();\n  }\n\n  // The spec says:\n  // > At the top level of a function, or script, function declarations are\n  // > treated like var declarations rather than like lexical declarations.\n  treatFunctionsAsVarInScope(scope: IScope): boolean {\n    return !!(\n      scope.flags & SCOPE_FUNCTION ||\n      (!this.inModule && scope.flags & SCOPE_PROGRAM)\n    );\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    let scope = this.currentScope();\n    if (bindingType & BIND_SCOPE_LEXICAL || bindingType & BIND_SCOPE_FUNCTION) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n\n      if (bindingType & BIND_SCOPE_FUNCTION) {\n        scope.functions.add(name);\n      } else {\n        scope.lexical.add(name);\n      }\n\n      if (bindingType & BIND_SCOPE_LEXICAL) {\n        this.maybeExportDefined(scope, name);\n      }\n    } else if (bindingType & BIND_SCOPE_VAR) {\n      for (let i = this.scopeStack.length - 1; i >= 0; --i) {\n        scope = this.scopeStack[i];\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        scope.var.add(name);\n        this.maybeExportDefined(scope, name);\n\n        if (scope.flags & SCOPE_VAR) break;\n      }\n    }\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  maybeExportDefined(scope: IScope, name: string) {\n    if (this.inModule && scope.flags & SCOPE_PROGRAM) {\n      this.undefinedExports.delete(name);\n    }\n  }\n\n  checkRedeclarationInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n    pos: number,\n  ) {\n    if (this.isRedeclaredInScope(scope, name, bindingType)) {\n      this.raise(pos, Errors.VarRedeclaration, name);\n    }\n  }\n\n  isRedeclaredInScope(\n    scope: IScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (!(bindingType & BIND_KIND_VALUE)) return false;\n\n    if (bindingType & BIND_SCOPE_LEXICAL) {\n      return (\n        scope.lexical.has(name) ||\n        scope.functions.has(name) ||\n        scope.var.has(name)\n      );\n    }\n\n    if (bindingType & BIND_SCOPE_FUNCTION) {\n      return (\n        scope.lexical.has(name) ||\n        (!this.treatFunctionsAsVarInScope(scope) && scope.var.has(name))\n      );\n    }\n\n    return (\n      (scope.lexical.has(name) &&\n        !(\n          scope.flags & SCOPE_SIMPLE_CATCH &&\n          scope.lexical.values().next().value === name\n        )) ||\n      (!this.treatFunctionsAsVarInScope(scope) && scope.functions.has(name))\n    );\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const { name } = id;\n    const topLevelScope = this.scopeStack[0];\n    if (\n      !topLevelScope.lexical.has(name) &&\n      !topLevelScope.var.has(name) &&\n      // In strict mode, scope.functions will always be empty.\n      // Modules are strict by default, but the `scriptMode` option\n      // can overwrite this behavior.\n      !topLevelScope.functions.has(name)\n    ) {\n      this.undefinedExports.set(name, id.start);\n    }\n  }\n\n  currentScope(): IScope {\n    return this.scopeStack[this.scopeStack.length - 1];\n  }\n\n  // $FlowIgnore\n  currentVarScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & SCOPE_VAR) {\n        return flags;\n      }\n    }\n  }\n\n  // Could be useful for `arguments`, `this`, `new.target`, `super()`, `super.property`, and `super[property]`.\n  // $FlowIgnore\n  currentThisScopeFlags(): ScopeFlags {\n    for (let i = this.scopeStack.length - 1; ; i--) {\n      const { flags } = this.scopeStack[i];\n      if (flags & (SCOPE_VAR | SCOPE_CLASS) && !(flags & SCOPE_ARROW)) {\n        return flags;\n      }\n    }\n  }\n}\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_FLAGS_FLOW_DECLARE_FN,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\n// Reference implementation: https://github.com/facebook/flow/blob/23aeb2a2ef6eb4241ce178fde5d8f17c5f747fb5/src/typing/env.ml#L536-L584\nclass FlowScope extends Scope {\n  // declare function foo(): type;\n  declareFunctions: Set<string> = new Set();\n}\n\nexport default class FlowScopeHandler extends ScopeHandler<FlowScope> {\n  createScope(flags: ScopeFlags): FlowScope {\n    return new FlowScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      this.checkRedeclarationInScope(scope, name, bindingType, pos);\n      this.maybeExportDefined(scope, name);\n      scope.declareFunctions.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n  }\n\n  isRedeclaredInScope(\n    scope: FlowScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (super.isRedeclaredInScope(...arguments)) return true;\n\n    if (bindingType & BIND_FLAGS_FLOW_DECLARE_FN) {\n      return (\n        !scope.declareFunctions.has(name) &&\n        (scope.lexical.has(name) || scope.functions.has(name))\n      );\n    }\n\n    return false;\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    if (!this.scopeStack[0].declareFunctions.has(id.name)) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport type { CommentWhitespace } from \"../parser/comments\";\nimport { Position } from \"../util/location\";\n\nimport { types as ct, type TokContext } from \"./context\";\nimport { tt, type TokenType } from \"./types\";\nimport type { ParsingError, ErrorTemplate } from \"../parser/error\";\n\ntype TopicContextState = {\n  // When a topic binding has been currently established,\n  // then this is 1. Otherwise, it is 0. This is forwards compatible\n  // with a future plugin for multiple lexical topics.\n  maxNumOfResolvableTopics: number,\n\n  // When a topic binding has been currently established, and if that binding\n  // has been used as a topic reference `#`, then this is 0. Otherwise, it is\n  // `null`. This is forwards compatible with a future plugin for multiple\n  // lexical topics.\n  maxTopicIndex: null | 0,\n};\n\nexport default class State {\n  strict: boolean;\n  curLine: number;\n  lineStart: number;\n\n  // And, if locations are used, the {line, column} object\n  // corresponding to those offsets\n  startLoc: Position;\n  endLoc: Position;\n\n  init({ strictMode, sourceType, startLine, startColumn }: Options): void {\n    this.strict =\n      strictMode === false\n        ? false\n        : strictMode === true\n        ? true\n        : sourceType === \"module\";\n\n    this.curLine = startLine;\n    this.lineStart = -startColumn;\n    this.startLoc = this.endLoc = new Position(startLine, startColumn);\n  }\n\n  errors: ParsingError[] = [];\n\n  // Used to signify the start of a potential arrow function\n  potentialArrowAt: number = -1;\n\n  // Used to signify the start of an expression which looks like a\n  // typed arrow function, but it isn't\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowAt: number[] = [];\n\n  // Used to signify the start of an expression whose params, if it looks like\n  // an arrow function, shouldn't be converted to assignable nodes.\n  // This is used to defer the validation of typed arrow functions inside\n  // conditional expressions.\n  // e.g. a ? (b) : c => d\n  //          ^\n  noArrowParamsConversionAt: number[] = [];\n\n  // Flags to track\n  maybeInArrowParameters: boolean = false;\n  inType: boolean = false;\n  noAnonFunctionType: boolean = false;\n  hasFlowComment: boolean = false;\n  isAmbientContext: boolean = false;\n  inAbstractClass: boolean = false;\n\n  // For the Hack-style pipelines plugin\n  topicContext: TopicContextState = {\n    maxNumOfResolvableTopics: 0,\n    maxTopicIndex: null,\n  };\n\n  // For the F#-style pipelines plugin\n  soloAwait: boolean = false;\n  inFSharpPipelineDirectBody: boolean = false;\n\n  // Labels in scope.\n  labels: Array<{\n    kind: ?(\"loop\" | \"switch\"),\n    name?: ?string,\n    statementStart?: number,\n  }> = [];\n\n  // Leading decorators. Last element of the stack represents the decorators in current context.\n  // Supports nesting of decorators, e.g. @foo(@bar class inner {}) class outer {}\n  // where @foo belongs to the outer class and @bar to the inner\n  decoratorStack: Array<Array<N.Decorator>> = [[]];\n\n  // Comment store for Program.comments\n  comments: Array<N.Comment> = [];\n\n  // Comment attachment store\n  commentStack: Array<CommentWhitespace> = [];\n\n  // The current position of the tokenizer in the input.\n  pos: number = 0;\n\n  // Properties of the current token:\n  // Its type\n  type: TokenType = tt.eof;\n\n  // For tokens that include more information than their type, the value\n  value: any = null;\n\n  // Its start and end offset\n  start: number = 0;\n  end: number = 0;\n\n  // Position information for the previous token\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokEndLoc: Position = null;\n  // $FlowIgnore this is initialized when generating the second token.\n  lastTokStartLoc: Position = null;\n  lastTokStart: number = 0;\n  lastTokEnd: number = 0;\n\n  // The context stack is used to track whether the apostrophe \"`\" starts\n  // or ends a string template\n  context: Array<TokContext> = [ct.brace];\n  // Used to track whether a JSX element is allowed to form\n  canStartJSXElement: boolean = true;\n\n  // Used to signal to callers of `readWord1` whether the word\n  // contained any escape sequences. This is needed because words with\n  // escape sequences must not be interpreted as keywords.\n  containsEsc: boolean = false;\n\n  // This property is used to track the following errors\n  // - StrictNumericEscape\n  // - StrictOctalLiteral\n  //\n  // in a literal that occurs prior to/immediately after a \"use strict\" directive.\n\n  // todo(JLHwung): set strictErrors to null and avoid recording string errors\n  // after a non-directive is parsed\n  strictErrors: Map<number, ErrorTemplate> = new Map();\n\n  // Tokens length in token store\n  tokensLength: number = 0;\n\n  curPosition(): Position {\n    return new Position(this.curLine, this.pos - this.lineStart);\n  }\n\n  clone(skipArrays?: boolean): State {\n    const state = new State();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // $FlowIgnore\n      let val = this[key];\n\n      if (!skipArrays && Array.isArray(val)) {\n        val = val.slice();\n      }\n\n      // $FlowIgnore\n      state[key] = val;\n    }\n\n    return state;\n  }\n}\n\nexport type LookaheadState = {\n  pos: number,\n  value: any,\n  type: TokenType,\n  start: number,\n  end: number,\n  /* Used only in readToken_mult_modulo */\n  inType: boolean,\n};\n","// @flow\n\n/*:: declare var invariant; */\n\nimport type { Options } from \"../options\";\nimport * as N from \"../types\";\nimport * as charCodes from \"charcodes\";\nimport { isIdentifierStart, isIdentifierChar } from \"../util/identifier\";\nimport {\n  tokenIsKeyword,\n  tokenLabelName,\n  tt,\n  keywords as keywordTypes,\n  type TokenType,\n} from \"./types\";\nimport { type TokContext } from \"./context\";\nimport ParserErrors, { Errors, type ErrorTemplate } from \"../parser/error\";\nimport { SourceLocation } from \"../util/location\";\nimport {\n  lineBreakG,\n  isNewLine,\n  isWhitespace,\n  skipWhiteSpace,\n} from \"../util/whitespace\";\nimport State from \"./state\";\nimport type { LookaheadState } from \"./state\";\n\nconst VALID_REGEX_FLAGS = new Set([\n  charCodes.lowercaseG,\n  charCodes.lowercaseM,\n  charCodes.lowercaseS,\n  charCodes.lowercaseI,\n  charCodes.lowercaseY,\n  charCodes.lowercaseU,\n  charCodes.lowercaseD,\n]);\n\n// The following character codes are forbidden from being\n// an immediate sibling of NumericLiteralSeparator _\n\nconst forbiddenNumericSeparatorSiblings = {\n  decBinOct: [\n    charCodes.dot,\n    charCodes.uppercaseB,\n    charCodes.uppercaseE,\n    charCodes.uppercaseO,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseB,\n    charCodes.lowercaseE,\n    charCodes.lowercaseO,\n  ],\n  hex: [\n    charCodes.dot,\n    charCodes.uppercaseX,\n    charCodes.underscore, // multiple separators are not allowed\n    charCodes.lowercaseX,\n  ],\n};\n\nconst allowedNumericSeparatorSiblings = {};\nallowedNumericSeparatorSiblings.bin = [\n  // 0 - 1\n  charCodes.digit0,\n  charCodes.digit1,\n];\nallowedNumericSeparatorSiblings.oct = [\n  // 0 - 7\n  ...allowedNumericSeparatorSiblings.bin,\n\n  charCodes.digit2,\n  charCodes.digit3,\n  charCodes.digit4,\n  charCodes.digit5,\n  charCodes.digit6,\n  charCodes.digit7,\n];\nallowedNumericSeparatorSiblings.dec = [\n  // 0 - 9\n  ...allowedNumericSeparatorSiblings.oct,\n\n  charCodes.digit8,\n  charCodes.digit9,\n];\n\nallowedNumericSeparatorSiblings.hex = [\n  // 0 - 9, A - F, a - f,\n  ...allowedNumericSeparatorSiblings.dec,\n\n  charCodes.uppercaseA,\n  charCodes.uppercaseB,\n  charCodes.uppercaseC,\n  charCodes.uppercaseD,\n  charCodes.uppercaseE,\n  charCodes.uppercaseF,\n\n  charCodes.lowercaseA,\n  charCodes.lowercaseB,\n  charCodes.lowercaseC,\n  charCodes.lowercaseD,\n  charCodes.lowercaseE,\n  charCodes.lowercaseF,\n];\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(state: State) {\n    this.type = state.type;\n    this.value = state.value;\n    this.start = state.start;\n    this.end = state.end;\n    this.loc = new SourceLocation(state.startLoc, state.endLoc);\n  }\n\n  declare type: TokenType;\n  declare value: any;\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n}\n\n// ## Tokenizer\n\nexport default class Tokenizer extends ParserErrors {\n  // Forward-declarations\n  // parser/util.js\n  /*::\n  +hasPrecedingLineBreak: () => boolean;\n  +unexpected: (pos?: ?number, messageOrType?: ErrorTemplate | TokenType) => empty;\n  +expectPlugin: (name: string, pos?: ?number) => true;\n  */\n\n  isLookahead: boolean;\n\n  // Token store.\n  tokens: Array<Token | N.Comment> = [];\n\n  constructor(options: Options, input: string) {\n    super();\n    this.state = new State();\n    this.state.init(options);\n    this.input = input;\n    this.length = input.length;\n    this.isLookahead = false;\n  }\n\n  pushToken(token: Token | N.Comment) {\n    // Pop out invalid tokens trapped by try-catch parsing.\n    // Those parsing branches are mainly created by typescript and flow plugins.\n    this.tokens.length = this.state.tokensLength;\n    this.tokens.push(token);\n    ++this.state.tokensLength;\n  }\n\n  // Move to the next token\n\n  next(): void {\n    this.checkKeywordEscapes();\n    if (this.options.tokens) {\n      this.pushToken(new Token(this.state));\n    }\n\n    this.state.lastTokEnd = this.state.end;\n    this.state.lastTokStart = this.state.start;\n    this.state.lastTokEndLoc = this.state.endLoc;\n    this.state.lastTokStartLoc = this.state.startLoc;\n    this.nextToken();\n  }\n\n  // TODO\n\n  eat(type: TokenType): boolean {\n    if (this.match(type)) {\n      this.next();\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  /**\n   * Whether current token matches given type\n   *\n   * @param {TokenType} type\n   * @returns {boolean}\n   * @memberof Tokenizer\n   */\n  match(type: TokenType): boolean {\n    return this.state.type === type;\n  }\n\n  /**\n   * Create a LookaheadState from current parser state\n   *\n   * @param {State} state\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  createLookaheadState(state: State): LookaheadState {\n    return {\n      pos: state.pos,\n      value: null,\n      type: state.type,\n      start: state.start,\n      end: state.end,\n      lastTokEnd: state.end,\n      context: [this.curContext()],\n      inType: state.inType,\n    };\n  }\n\n  /**\n   * lookahead peeks the next token, skipping changes to token context and\n   * comment stack. For performance it returns a limited LookaheadState\n   * instead of full parser state.\n   *\n   * The { column, line } Loc info is not included in lookahead since such usage\n   * is rare. Although it may return other location properties e.g. `curLine` and\n   * `lineStart`, these properties are not listed in the LookaheadState interface\n   * and thus the returned value is _NOT_ reliable.\n   *\n   * The tokenizer should make best efforts to avoid using any parser state\n   * other than those defined in LookaheadState\n   *\n   * @returns {LookaheadState}\n   * @memberof Tokenizer\n   */\n  lookahead(): LookaheadState {\n    const old = this.state;\n    // For performance we use a simpified tokenizer state structure\n    // $FlowIgnore\n    this.state = this.createLookaheadState(old);\n\n    this.isLookahead = true;\n    this.nextToken();\n    this.isLookahead = false;\n\n    const curr = this.state;\n    this.state = old;\n    return curr;\n  }\n\n  nextTokenStart(): number {\n    return this.nextTokenStartSince(this.state.pos);\n  }\n\n  nextTokenStartSince(pos: number): number {\n    skipWhiteSpace.lastIndex = pos;\n    return skipWhiteSpace.test(this.input) ? skipWhiteSpace.lastIndex : pos;\n  }\n\n  lookaheadCharCode(): number {\n    return this.input.charCodeAt(this.nextTokenStart());\n  }\n\n  codePointAtPos(pos: number): number {\n    // The implementation is based on\n    // https://source.chromium.org/chromium/chromium/src/+/master:v8/src/builtins/builtins-string-gen.cc;l=1455;drc=221e331b49dfefadbc6fa40b0c68e6f97606d0b3;bpv=0;bpt=1\n    // We reimplement `codePointAt` because `codePointAt` is a V8 builtin which is not inlined by TurboFan (as of M91)\n    // since `input` is mostly ASCII, an inlined `charCodeAt` wins here\n    let cp = this.input.charCodeAt(pos);\n    if ((cp & 0xfc00) === 0xd800 && ++pos < this.input.length) {\n      const trail = this.input.charCodeAt(pos);\n      if ((trail & 0xfc00) === 0xdc00) {\n        cp = 0x10000 + ((cp & 0x3ff) << 10) + (trail & 0x3ff);\n      }\n    }\n    return cp;\n  }\n\n  // Toggle strict mode. Re-reads the next number or string to please\n  // pedantic tests (`\"use strict\"; 010;` should fail).\n\n  setStrict(strict: boolean): void {\n    this.state.strict = strict;\n    if (strict) {\n      // Throw an error for any string decimal escape found before/immediately\n      // after a \"use strict\" directive. Strict mode will be set at parse\n      // time for any literals that occur after the next node of the strict\n      // directive.\n      this.state.strictErrors.forEach((message, pos) =>\n        /* eslint-disable @babel/development-internal/dry-error-messages */\n        this.raise(pos, message),\n      );\n      this.state.strictErrors.clear();\n    }\n  }\n\n  curContext(): TokContext {\n    return this.state.context[this.state.context.length - 1];\n  }\n\n  // Read a single token, updating the parser object's token-related\n  // properties.\n\n  nextToken(): void {\n    this.skipSpace();\n    this.state.start = this.state.pos;\n    if (!this.isLookahead) this.state.startLoc = this.state.curPosition();\n    if (this.state.pos >= this.length) {\n      this.finishToken(tt.eof);\n      return;\n    }\n\n    this.getTokenFromCode(this.codePointAtPos(this.state.pos));\n  }\n\n  skipBlockComment(): N.CommentBlock | void {\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    const start = this.state.pos;\n    const end = this.input.indexOf(\"*/\", start + 2);\n    if (end === -1) throw this.raise(start, Errors.UnterminatedComment);\n\n    this.state.pos = end + 2;\n    lineBreakG.lastIndex = start + 2;\n    while (lineBreakG.test(this.input) && lineBreakG.lastIndex <= end) {\n      ++this.state.curLine;\n      this.state.lineStart = lineBreakG.lastIndex;\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const comment = {\n      type: \"CommentBlock\",\n      value: this.input.slice(start + 2, end),\n      start,\n      end: end + 2,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  skipLineComment(startSkip: number): N.CommentLine | void {\n    const start = this.state.pos;\n    let startLoc;\n    if (!this.isLookahead) startLoc = this.state.curPosition();\n    let ch = this.input.charCodeAt((this.state.pos += startSkip));\n    if (this.state.pos < this.length) {\n      while (!isNewLine(ch) && ++this.state.pos < this.length) {\n        ch = this.input.charCodeAt(this.state.pos);\n      }\n    }\n\n    // If we are doing a lookahead right now we need to advance the position (above code)\n    // but we do not want to push the comment to the state.\n    if (this.isLookahead) return;\n    /*:: invariant(startLoc) */\n\n    const end = this.state.pos;\n    const value = this.input.slice(start + startSkip, end);\n\n    const comment = {\n      type: \"CommentLine\",\n      value,\n      start,\n      end,\n      loc: new SourceLocation(startLoc, this.state.curPosition()),\n    };\n    if (this.options.tokens) this.pushToken(comment);\n    return comment;\n  }\n\n  // Called at the start of the parse and after every token. Skips\n  // whitespace and comments, and.\n\n  skipSpace(): void {\n    const spaceStart = this.state.pos;\n    const comments = [];\n    loop: while (this.state.pos < this.length) {\n      const ch = this.input.charCodeAt(this.state.pos);\n      switch (ch) {\n        case charCodes.space:\n        case charCodes.nonBreakingSpace:\n        case charCodes.tab:\n          ++this.state.pos;\n          break;\n        case charCodes.carriageReturn:\n          if (\n            this.input.charCodeAt(this.state.pos + 1) === charCodes.lineFeed\n          ) {\n            ++this.state.pos;\n          }\n        // fall through\n        case charCodes.lineFeed:\n        case charCodes.lineSeparator:\n        case charCodes.paragraphSeparator:\n          ++this.state.pos;\n          ++this.state.curLine;\n          this.state.lineStart = this.state.pos;\n          break;\n\n        case charCodes.slash:\n          switch (this.input.charCodeAt(this.state.pos + 1)) {\n            case charCodes.asterisk: {\n              const comment = this.skipBlockComment();\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            case charCodes.slash: {\n              const comment = this.skipLineComment(2);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n              break;\n            }\n\n            default:\n              break loop;\n          }\n          break;\n\n        default:\n          if (isWhitespace(ch)) {\n            ++this.state.pos;\n          } else if (ch === charCodes.dash && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.dash &&\n              this.input.charCodeAt(pos + 2) === charCodes.greaterThan &&\n              (spaceStart === 0 || this.state.lineStart > spaceStart)\n            ) {\n              // A `-->` line comment\n              const comment = this.skipLineComment(3);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else if (ch === charCodes.lessThan && !this.inModule) {\n            const pos = this.state.pos;\n            if (\n              this.input.charCodeAt(pos + 1) === charCodes.exclamationMark &&\n              this.input.charCodeAt(pos + 2) === charCodes.dash &&\n              this.input.charCodeAt(pos + 3) === charCodes.dash\n            ) {\n              // `<!--`, an XML-style comment that should be interpreted as a line comment\n              const comment = this.skipLineComment(4);\n              if (comment !== undefined) {\n                this.addComment(comment);\n                if (this.options.attachComment) comments.push(comment);\n              }\n            } else {\n              break loop;\n            }\n          } else {\n            break loop;\n          }\n      }\n    }\n\n    if (comments.length > 0) {\n      const end = this.state.pos;\n      const CommentWhitespace = {\n        start: spaceStart,\n        end,\n        comments,\n        leadingNode: null,\n        trailingNode: null,\n        containingNode: null,\n      };\n      this.state.commentStack.push(CommentWhitespace);\n    }\n  }\n\n  // Called at the end of every token. Sets `end`, `val`, and\n  // maintains `context` and `canStartJSXElement`, and skips the space after\n  // the token, so that the next one's `start` will point at the\n  // right position.\n\n  finishToken(type: TokenType, val: any): void {\n    this.state.end = this.state.pos;\n    const prevType = this.state.type;\n    this.state.type = type;\n    this.state.value = val;\n\n    if (!this.isLookahead) {\n      this.state.endLoc = this.state.curPosition();\n      this.updateContext(prevType);\n    }\n  }\n\n  replaceToken(type: TokenType): void {\n    this.state.type = type;\n    // the prevType of updateContext is required\n    // only when the new type is tt.slash/tt.jsxTagEnd\n    // $FlowIgnore\n    this.updateContext();\n  }\n\n  // ### Token reading\n\n  // This is the function that is called to fetch the next token. It\n  // is somewhat obscure, because it works in character codes rather\n  // than characters, and because operator parsing has been inlined\n  // into it.\n  //\n  // All in the name of speed.\n\n  // number sign is \"#\"\n  readToken_numberSign(): void {\n    if (this.state.pos === 0 && this.readToken_interpreter()) {\n      return;\n    }\n\n    const nextPos = this.state.pos + 1;\n    const next = this.codePointAtPos(nextPos);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      throw this.raise(this.state.pos, Errors.UnexpectedDigitAfterHash);\n    }\n\n    if (\n      next === charCodes.leftCurlyBrace ||\n      (next === charCodes.leftSquareBracket && this.hasPlugin(\"recordAndTuple\"))\n    ) {\n      // When we see `#{`, it is likely to be a hash record.\n      // However we don't yell at `#[` since users may intend to use \"computed private fields\",\n      // which is not allowed in the spec. Throwing expecting recordAndTuple is\n      // misleading\n      this.expectPlugin(\"recordAndTuple\");\n      if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"hash\") {\n        throw this.raise(\n          this.state.pos,\n          next === charCodes.leftCurlyBrace\n            ? Errors.RecordExpressionHashIncorrectStartSyntaxType\n            : Errors.TupleExpressionHashIncorrectStartSyntaxType,\n        );\n      }\n\n      this.state.pos += 2;\n      if (next === charCodes.leftCurlyBrace) {\n        // #{\n        this.finishToken(tt.braceHashL);\n      } else {\n        // #[\n        this.finishToken(tt.bracketHashL);\n      }\n    } else if (isIdentifierStart(next)) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1(next));\n    } else if (next === charCodes.backslash) {\n      ++this.state.pos;\n      this.finishToken(tt.privateName, this.readWord1());\n    } else {\n      this.finishOp(tt.hash, 1);\n    }\n  }\n\n  readToken_dot(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next >= charCodes.digit0 && next <= charCodes.digit9) {\n      this.readNumber(true);\n      return;\n    }\n\n    if (\n      next === charCodes.dot &&\n      this.input.charCodeAt(this.state.pos + 2) === charCodes.dot\n    ) {\n      this.state.pos += 3;\n      this.finishToken(tt.ellipsis);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.dot);\n    }\n  }\n\n  readToken_slash(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.slashAssign, 2);\n    } else {\n      this.finishOp(tt.slash, 1);\n    }\n  }\n\n  readToken_interpreter(): boolean {\n    if (this.state.pos !== 0 || this.length < 2) return false;\n\n    let ch = this.input.charCodeAt(this.state.pos + 1);\n    if (ch !== charCodes.exclamationMark) return false;\n\n    const start = this.state.pos;\n    this.state.pos += 1;\n\n    while (!isNewLine(ch) && ++this.state.pos < this.length) {\n      ch = this.input.charCodeAt(this.state.pos);\n    }\n\n    const value = this.input.slice(start + 2, this.state.pos);\n\n    this.finishToken(tt.interpreterDirective, value);\n\n    return true;\n  }\n\n  readToken_mult_modulo(code: number): void {\n    // '%' or '*'\n    let type = code === charCodes.asterisk ? tt.star : tt.modulo;\n    let width = 1;\n    let next = this.input.charCodeAt(this.state.pos + 1);\n\n    // Exponentiation operator '**'\n    if (code === charCodes.asterisk && next === charCodes.asterisk) {\n      width++;\n      next = this.input.charCodeAt(this.state.pos + 2);\n      type = tt.exponent;\n    }\n\n    // '%=' or '*='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      width++;\n      // `tt.moduloAssign` is only needed to support % as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      type = code === charCodes.percentSign ? tt.moduloAssign : tt.assign;\n    }\n\n    this.finishOp(type, width);\n  }\n\n  readToken_pipe_amp(code: number): void {\n    // '||' '&&' '||=' '&&='\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      if (this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n      } else {\n        this.finishOp(\n          code === charCodes.verticalBar ? tt.logicalOR : tt.logicalAND,\n          2,\n        );\n      }\n      return;\n    }\n\n    if (code === charCodes.verticalBar) {\n      // '|>'\n      if (next === charCodes.greaterThan) {\n        this.finishOp(tt.pipeline, 2);\n        return;\n      }\n      // '|}'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.RecordExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.braceBarR);\n        return;\n      }\n\n      // '|]'\n      if (\n        this.hasPlugin(\"recordAndTuple\") &&\n        next === charCodes.rightSquareBracket\n      ) {\n        if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n          throw this.raise(\n            this.state.pos,\n            Errors.TupleExpressionBarIncorrectEndSyntaxType,\n          );\n        }\n        this.state.pos += 2;\n        this.finishToken(tt.bracketBarR);\n        return;\n      }\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n      return;\n    }\n\n    this.finishOp(\n      code === charCodes.verticalBar ? tt.bitwiseOR : tt.bitwiseAND,\n      1,\n    );\n  }\n\n  readToken_caret(): void {\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    // '^='\n    if (next === charCodes.equalsTo && !this.state.inType) {\n      // `tt.xorAssign` is only needed to support ^ as a Hack-pipe topic token.\n      // If the proposal ends up choosing a different token,\n      // it can be merged with tt.assign.\n      this.finishOp(tt.xorAssign, 2);\n    }\n    // '^'\n    else {\n      this.finishOp(tt.bitwiseXOR, 1);\n    }\n  }\n\n  readToken_plus_min(code: number): void {\n    // '+-'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n\n    if (next === code) {\n      this.finishOp(tt.incDec, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      this.finishOp(tt.assign, 2);\n    } else {\n      this.finishOp(tt.plusMin, 1);\n    }\n  }\n\n  readToken_lt(): void {\n    // '<'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.lessThan) {\n      if (this.input.charCodeAt(pos + 2) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, 3);\n        return;\n      }\n      this.finishOp(tt.bitShift, 2);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.lt, 1);\n  }\n\n  readToken_gt(): void {\n    // '>'\n    const { pos } = this.state;\n    const next = this.input.charCodeAt(pos + 1);\n\n    if (next === charCodes.greaterThan) {\n      const size =\n        this.input.charCodeAt(pos + 2) === charCodes.greaterThan ? 3 : 2;\n      if (this.input.charCodeAt(pos + size) === charCodes.equalsTo) {\n        this.finishOp(tt.assign, size + 1);\n        return;\n      }\n      this.finishOp(tt.bitShift, size);\n      return;\n    }\n\n    if (next === charCodes.equalsTo) {\n      // <= | >=\n      this.finishOp(tt.relational, 2);\n      return;\n    }\n\n    this.finishOp(tt.gt, 1);\n  }\n\n  readToken_eq_excl(code: number): void {\n    // '=!'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    if (next === charCodes.equalsTo) {\n      this.finishOp(\n        tt.equality,\n        this.input.charCodeAt(this.state.pos + 2) === charCodes.equalsTo\n          ? 3\n          : 2,\n      );\n      return;\n    }\n    if (code === charCodes.equalsTo && next === charCodes.greaterThan) {\n      // '=>'\n      this.state.pos += 2;\n      this.finishToken(tt.arrow);\n      return;\n    }\n    this.finishOp(code === charCodes.equalsTo ? tt.eq : tt.bang, 1);\n  }\n\n  readToken_question(): void {\n    // '?'\n    const next = this.input.charCodeAt(this.state.pos + 1);\n    const next2 = this.input.charCodeAt(this.state.pos + 2);\n    if (next === charCodes.questionMark) {\n      if (next2 === charCodes.equalsTo) {\n        // '??='\n        this.finishOp(tt.assign, 3);\n      } else {\n        // '??'\n        this.finishOp(tt.nullishCoalescing, 2);\n      }\n    } else if (\n      next === charCodes.dot &&\n      !(next2 >= charCodes.digit0 && next2 <= charCodes.digit9)\n    ) {\n      // '.' not followed by a number\n      this.state.pos += 2;\n      this.finishToken(tt.questionDot);\n    } else {\n      ++this.state.pos;\n      this.finishToken(tt.question);\n    }\n  }\n\n  getTokenFromCode(code: number): void {\n    switch (code) {\n      // The interpretation of a dot depends on whether it is followed\n      // by a digit or another two dots.\n\n      case charCodes.dot:\n        this.readToken_dot();\n        return;\n\n      // Punctuation tokens.\n      case charCodes.leftParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenL);\n        return;\n      case charCodes.rightParenthesis:\n        ++this.state.pos;\n        this.finishToken(tt.parenR);\n        return;\n      case charCodes.semicolon:\n        ++this.state.pos;\n        this.finishToken(tt.semi);\n        return;\n      case charCodes.comma:\n        ++this.state.pos;\n        this.finishToken(tt.comma);\n        return;\n      case charCodes.leftSquareBracket:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.TupleExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // [|\n          this.state.pos += 2;\n          this.finishToken(tt.bracketBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.bracketL);\n        }\n        return;\n      case charCodes.rightSquareBracket:\n        ++this.state.pos;\n        this.finishToken(tt.bracketR);\n        return;\n      case charCodes.leftCurlyBrace:\n        if (\n          this.hasPlugin(\"recordAndTuple\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.verticalBar\n        ) {\n          if (this.getPluginOption(\"recordAndTuple\", \"syntaxType\") !== \"bar\") {\n            throw this.raise(\n              this.state.pos,\n              Errors.RecordExpressionBarIncorrectStartSyntaxType,\n            );\n          }\n\n          // {|\n          this.state.pos += 2;\n          this.finishToken(tt.braceBarL);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.braceL);\n        }\n        return;\n      case charCodes.rightCurlyBrace:\n        ++this.state.pos;\n        this.finishToken(tt.braceR);\n        return;\n\n      case charCodes.colon:\n        if (\n          this.hasPlugin(\"functionBind\") &&\n          this.input.charCodeAt(this.state.pos + 1) === charCodes.colon\n        ) {\n          this.finishOp(tt.doubleColon, 2);\n        } else {\n          ++this.state.pos;\n          this.finishToken(tt.colon);\n        }\n        return;\n\n      case charCodes.questionMark:\n        this.readToken_question();\n        return;\n\n      case charCodes.graveAccent:\n        this.readTemplateToken();\n        return;\n\n      case charCodes.digit0: {\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        // '0x', '0X' - hex number\n        if (next === charCodes.lowercaseX || next === charCodes.uppercaseX) {\n          this.readRadixNumber(16);\n          return;\n        }\n        // '0o', '0O' - octal number\n        if (next === charCodes.lowercaseO || next === charCodes.uppercaseO) {\n          this.readRadixNumber(8);\n          return;\n        }\n        // '0b', '0B' - binary number\n        if (next === charCodes.lowercaseB || next === charCodes.uppercaseB) {\n          this.readRadixNumber(2);\n          return;\n        }\n      }\n      // Anything else beginning with a digit is an integer, octal\n      // number, or float. (fall through)\n      case charCodes.digit1:\n      case charCodes.digit2:\n      case charCodes.digit3:\n      case charCodes.digit4:\n      case charCodes.digit5:\n      case charCodes.digit6:\n      case charCodes.digit7:\n      case charCodes.digit8:\n      case charCodes.digit9:\n        this.readNumber(false);\n        return;\n\n      // Quotes produce strings.\n      case charCodes.quotationMark:\n      case charCodes.apostrophe:\n        this.readString(code);\n        return;\n\n      // Operators are parsed inline in tiny state machines. '=' (charCodes.equalsTo) is\n      // often referred to. `finishOp` simply skips the amount of\n      // characters it is given as second argument, and returns a token\n      // of the type given by its first argument.\n\n      case charCodes.slash:\n        this.readToken_slash();\n        return;\n\n      case charCodes.percentSign:\n      case charCodes.asterisk:\n        this.readToken_mult_modulo(code);\n        return;\n\n      case charCodes.verticalBar:\n      case charCodes.ampersand:\n        this.readToken_pipe_amp(code);\n        return;\n\n      case charCodes.caret:\n        this.readToken_caret();\n        return;\n\n      case charCodes.plusSign:\n      case charCodes.dash:\n        this.readToken_plus_min(code);\n        return;\n\n      case charCodes.lessThan:\n        this.readToken_lt();\n        return;\n\n      case charCodes.greaterThan:\n        this.readToken_gt();\n        return;\n\n      case charCodes.equalsTo:\n      case charCodes.exclamationMark:\n        this.readToken_eq_excl(code);\n        return;\n\n      case charCodes.tilde:\n        this.finishOp(tt.tilde, 1);\n        return;\n\n      case charCodes.atSign:\n        ++this.state.pos;\n        this.finishToken(tt.at);\n        return;\n\n      case charCodes.numberSign:\n        this.readToken_numberSign();\n        return;\n\n      case charCodes.backslash:\n        this.readWord();\n        return;\n\n      default:\n        if (isIdentifierStart(code)) {\n          this.readWord(code);\n          return;\n        }\n    }\n\n    throw this.raise(\n      this.state.pos,\n      Errors.InvalidOrUnexpectedToken,\n      String.fromCodePoint(code),\n    );\n  }\n\n  finishOp(type: TokenType, size: number): void {\n    const str = this.input.slice(this.state.pos, this.state.pos + size);\n    this.state.pos += size;\n    this.finishToken(type, str);\n  }\n\n  readRegexp(): void {\n    const start = this.state.start + 1;\n    let escaped, inClass;\n    let { pos } = this.state;\n    for (; ; ++pos) {\n      if (pos >= this.length) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      const ch = this.input.charCodeAt(pos);\n      if (isNewLine(ch)) {\n        throw this.raise(start, Errors.UnterminatedRegExp);\n      }\n      if (escaped) {\n        escaped = false;\n      } else {\n        if (ch === charCodes.leftSquareBracket) {\n          inClass = true;\n        } else if (ch === charCodes.rightSquareBracket && inClass) {\n          inClass = false;\n        } else if (ch === charCodes.slash && !inClass) {\n          break;\n        }\n        escaped = ch === charCodes.backslash;\n      }\n    }\n    const content = this.input.slice(start, pos);\n    ++pos;\n\n    let mods = \"\";\n\n    while (pos < this.length) {\n      const cp = this.codePointAtPos(pos);\n      // It doesn't matter if cp > 0xffff, the loop will either throw or break because we check on cp\n      const char = String.fromCharCode(cp);\n\n      if (VALID_REGEX_FLAGS.has(cp)) {\n        if (mods.includes(char)) {\n          this.raise(pos + 1, Errors.DuplicateRegExpFlags);\n        }\n      } else if (isIdentifierChar(cp) || cp === charCodes.backslash) {\n        this.raise(pos + 1, Errors.MalformedRegExpFlags);\n      } else {\n        break;\n      }\n\n      ++pos;\n      mods += char;\n    }\n    this.state.pos = pos;\n\n    this.finishToken(tt.regexp, {\n      pattern: content,\n      flags: mods,\n    });\n  }\n\n  // Read an integer in the given radix. Return null if zero digits\n  // were read, the integer value otherwise. When `len` is given, this\n  // will return `null` unless the integer has exactly `len` digits.\n  // When `forceLen` is `true`, it means that we already know that in case\n  // of a malformed number we have to skip `len` characters anyway, instead\n  // of bailing out early. For example, in \"\\u{123Z}\" we want to read up to }\n  // anyway, while in \"\\u00Z\" we will stop at Z instead of consuming four\n  // characters (and thus the closing quote).\n\n  readInt(\n    radix: number,\n    len?: number,\n    forceLen?: boolean,\n    allowNumSeparator: boolean = true,\n  ): number | null {\n    const start = this.state.pos;\n    const forbiddenSiblings =\n      radix === 16\n        ? forbiddenNumericSeparatorSiblings.hex\n        : forbiddenNumericSeparatorSiblings.decBinOct;\n    const allowedSiblings =\n      radix === 16\n        ? allowedNumericSeparatorSiblings.hex\n        : radix === 10\n        ? allowedNumericSeparatorSiblings.dec\n        : radix === 8\n        ? allowedNumericSeparatorSiblings.oct\n        : allowedNumericSeparatorSiblings.bin;\n\n    let invalid = false;\n    let total = 0;\n\n    for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n      const code = this.input.charCodeAt(this.state.pos);\n      let val;\n\n      if (code === charCodes.underscore) {\n        const prev = this.input.charCodeAt(this.state.pos - 1);\n        const next = this.input.charCodeAt(this.state.pos + 1);\n        if (allowedSiblings.indexOf(next) === -1) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        } else if (\n          forbiddenSiblings.indexOf(prev) > -1 ||\n          forbiddenSiblings.indexOf(next) > -1 ||\n          Number.isNaN(next)\n        ) {\n          this.raise(this.state.pos, Errors.UnexpectedNumericSeparator);\n        }\n\n        if (!allowNumSeparator) {\n          this.raise(this.state.pos, Errors.NumericSeparatorInEscapeSequence);\n        }\n\n        // Ignore this _ character\n        ++this.state.pos;\n        continue;\n      }\n\n      if (code >= charCodes.lowercaseA) {\n        val = code - charCodes.lowercaseA + charCodes.lineFeed;\n      } else if (code >= charCodes.uppercaseA) {\n        val = code - charCodes.uppercaseA + charCodes.lineFeed;\n      } else if (charCodes.isDigit(code)) {\n        val = code - charCodes.digit0; // 0-9\n      } else {\n        val = Infinity;\n      }\n      if (val >= radix) {\n        // If we are in \"errorRecovery\" mode and we found a digit which is too big,\n        // don't break the loop.\n\n        if (this.options.errorRecovery && val <= 9) {\n          val = 0;\n          this.raise(this.state.start + i + 2, Errors.InvalidDigit, radix);\n        } else if (forceLen) {\n          val = 0;\n          invalid = true;\n        } else {\n          break;\n        }\n      }\n      ++this.state.pos;\n      total = total * radix + val;\n    }\n    if (\n      this.state.pos === start ||\n      (len != null && this.state.pos - start !== len) ||\n      invalid\n    ) {\n      return null;\n    }\n\n    return total;\n  }\n\n  readRadixNumber(radix: number): void {\n    const start = this.state.pos;\n    let isBigInt = false;\n\n    this.state.pos += 2; // 0x\n    const val = this.readInt(radix);\n    if (val == null) {\n      this.raise(this.state.start + 2, Errors.InvalidDigit, radix);\n    }\n    const next = this.input.charCodeAt(this.state.pos);\n\n    if (next === charCodes.lowercaseN) {\n      ++this.state.pos;\n      isBigInt = true;\n    } else if (next === charCodes.lowercaseM) {\n      throw this.raise(start, Errors.InvalidDecimal);\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    if (isBigInt) {\n      const str = this.input.slice(start, this.state.pos).replace(/[_n]/g, \"\");\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    this.finishToken(tt.num, val);\n  }\n\n  // Read an integer, octal integer, or floating-point number.\n\n  readNumber(startsWithDot: boolean): void {\n    const start = this.state.pos;\n    let isFloat = false;\n    let isBigInt = false;\n    let isDecimal = false;\n    let hasExponent = false;\n    let isOctal = false;\n\n    if (!startsWithDot && this.readInt(10) === null) {\n      this.raise(start, Errors.InvalidNumber);\n    }\n    const hasLeadingZero =\n      this.state.pos - start >= 2 &&\n      this.input.charCodeAt(start) === charCodes.digit0;\n\n    if (hasLeadingZero) {\n      const integer = this.input.slice(start, this.state.pos);\n      this.recordStrictModeErrors(start, Errors.StrictOctalLiteral);\n      if (!this.state.strict) {\n        // disallow numeric separators in non octal decimals and legacy octal likes\n        const underscorePos = integer.indexOf(\"_\");\n        if (underscorePos > 0) {\n          this.raise(underscorePos + start, Errors.ZeroDigitNumericSeparator);\n        }\n      }\n      isOctal = hasLeadingZero && !/[89]/.test(integer);\n    }\n\n    let next = this.input.charCodeAt(this.state.pos);\n    if (next === charCodes.dot && !isOctal) {\n      ++this.state.pos;\n      this.readInt(10);\n      isFloat = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (\n      (next === charCodes.uppercaseE || next === charCodes.lowercaseE) &&\n      !isOctal\n    ) {\n      next = this.input.charCodeAt(++this.state.pos);\n      if (next === charCodes.plusSign || next === charCodes.dash) {\n        ++this.state.pos;\n      }\n      if (this.readInt(10) === null) {\n        this.raise(start, Errors.InvalidOrMissingExponent);\n      }\n      isFloat = true;\n      hasExponent = true;\n      next = this.input.charCodeAt(this.state.pos);\n    }\n\n    if (next === charCodes.lowercaseN) {\n      // disallow floats, legacy octal syntax and non octal decimals\n      // new style octal (\"0o\") is handled in this.readRadixNumber\n      if (isFloat || hasLeadingZero) {\n        this.raise(start, Errors.InvalidBigIntLiteral);\n      }\n      ++this.state.pos;\n      isBigInt = true;\n    }\n\n    if (next === charCodes.lowercaseM) {\n      this.expectPlugin(\"decimal\", this.state.pos);\n      if (hasExponent || hasLeadingZero) {\n        this.raise(start, Errors.InvalidDecimal);\n      }\n      ++this.state.pos;\n      isDecimal = true;\n    }\n\n    if (isIdentifierStart(this.codePointAtPos(this.state.pos))) {\n      throw this.raise(this.state.pos, Errors.NumberIdentifier);\n    }\n\n    // remove \"_\" for numeric literal separator, and trailing `m` or `n`\n    const str = this.input.slice(start, this.state.pos).replace(/[_mn]/g, \"\");\n\n    if (isBigInt) {\n      this.finishToken(tt.bigint, str);\n      return;\n    }\n\n    if (isDecimal) {\n      this.finishToken(tt.decimal, str);\n      return;\n    }\n\n    const val = isOctal ? parseInt(str, 8) : parseFloat(str);\n    this.finishToken(tt.num, val);\n  }\n\n  // Read a string value, interpreting backslash-escapes.\n\n  readCodePoint(throwOnInvalid: boolean): number | null {\n    const ch = this.input.charCodeAt(this.state.pos);\n    let code;\n\n    if (ch === charCodes.leftCurlyBrace) {\n      const codePos = ++this.state.pos;\n      code = this.readHexChar(\n        this.input.indexOf(\"}\", this.state.pos) - this.state.pos,\n        true,\n        throwOnInvalid,\n      );\n      ++this.state.pos;\n      if (code !== null && code > 0x10ffff) {\n        if (throwOnInvalid) {\n          this.raise(codePos, Errors.InvalidCodePoint);\n        } else {\n          return null;\n        }\n      }\n    } else {\n      code = this.readHexChar(4, false, throwOnInvalid);\n    }\n    return code;\n  }\n\n  readString(quote: number): void {\n    let out = \"\",\n      chunkStart = ++this.state.pos;\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === quote) break;\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        // $FlowFixMe\n        out += this.readEscapedChar(false);\n        chunkStart = this.state.pos;\n      } else if (\n        ch === charCodes.lineSeparator ||\n        ch === charCodes.paragraphSeparator\n      ) {\n        ++this.state.pos;\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        throw this.raise(this.state.start, Errors.UnterminatedString);\n      } else {\n        ++this.state.pos;\n      }\n    }\n    out += this.input.slice(chunkStart, this.state.pos++);\n    this.finishToken(tt.string, out);\n  }\n\n  // Reads tempalte continuation `}...`\n  readTemplateContinuation(): void {\n    if (!this.match(tt.braceR)) {\n      this.unexpected(this.state.start, tt.braceR);\n    }\n    // rewind pos to `}`\n    this.state.pos--;\n    this.readTemplateToken();\n  }\n\n  // Reads template string tokens.\n  readTemplateToken(): void {\n    let out = \"\",\n      chunkStart = this.state.pos,\n      containsInvalid = false;\n    ++this.state.pos; // eat '`' or `}`\n    for (;;) {\n      if (this.state.pos >= this.length) {\n        throw this.raise(this.state.start + 1, Errors.UnterminatedTemplate);\n      }\n      const ch = this.input.charCodeAt(this.state.pos);\n      if (ch === charCodes.graveAccent) {\n        ++this.state.pos; // eat '`'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateTail, containsInvalid ? null : out);\n        return;\n      }\n      if (\n        ch === charCodes.dollarSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.leftCurlyBrace\n      ) {\n        this.state.pos += 2; // eat '${'\n        out += this.input.slice(chunkStart, this.state.pos);\n        this.finishToken(tt.templateNonTail, containsInvalid ? null : out);\n        return;\n      }\n      if (ch === charCodes.backslash) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        const escaped = this.readEscapedChar(true);\n        if (escaped === null) {\n          containsInvalid = true;\n        } else {\n          out += escaped;\n        }\n        chunkStart = this.state.pos;\n      } else if (isNewLine(ch)) {\n        out += this.input.slice(chunkStart, this.state.pos);\n        ++this.state.pos;\n        switch (ch) {\n          case charCodes.carriageReturn:\n            if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n              ++this.state.pos;\n            }\n          // fall through\n          case charCodes.lineFeed:\n            out += \"\\n\";\n            break;\n          default:\n            out += String.fromCharCode(ch);\n            break;\n        }\n        ++this.state.curLine;\n        this.state.lineStart = this.state.pos;\n        chunkStart = this.state.pos;\n      } else {\n        ++this.state.pos;\n      }\n    }\n  }\n\n  recordStrictModeErrors(pos: number, message: ErrorTemplate) {\n    if (this.state.strict && !this.state.strictErrors.has(pos)) {\n      this.raise(pos, message);\n    } else {\n      this.state.strictErrors.set(pos, message);\n    }\n  }\n\n  // Used to read escaped characters\n  readEscapedChar(inTemplate: boolean): string | null {\n    const throwOnInvalid = !inTemplate;\n    const ch = this.input.charCodeAt(++this.state.pos);\n    ++this.state.pos;\n    switch (ch) {\n      case charCodes.lowercaseN:\n        return \"\\n\";\n      case charCodes.lowercaseR:\n        return \"\\r\";\n      case charCodes.lowercaseX: {\n        const code = this.readHexChar(2, false, throwOnInvalid);\n        return code === null ? null : String.fromCharCode(code);\n      }\n      case charCodes.lowercaseU: {\n        const code = this.readCodePoint(throwOnInvalid);\n        return code === null ? null : String.fromCodePoint(code);\n      }\n      case charCodes.lowercaseT:\n        return \"\\t\";\n      case charCodes.lowercaseB:\n        return \"\\b\";\n      case charCodes.lowercaseV:\n        return \"\\u000b\";\n      case charCodes.lowercaseF:\n        return \"\\f\";\n      case charCodes.carriageReturn:\n        if (this.input.charCodeAt(this.state.pos) === charCodes.lineFeed) {\n          ++this.state.pos;\n        }\n      // fall through\n      case charCodes.lineFeed:\n        this.state.lineStart = this.state.pos;\n        ++this.state.curLine;\n      // fall through\n      case charCodes.lineSeparator:\n      case charCodes.paragraphSeparator:\n        return \"\";\n      case charCodes.digit8:\n      case charCodes.digit9:\n        if (inTemplate) {\n          return null;\n        } else {\n          this.recordStrictModeErrors(\n            this.state.pos - 1,\n            Errors.StrictNumericEscape,\n          );\n        }\n      // fall through\n      default:\n        if (ch >= charCodes.digit0 && ch <= charCodes.digit7) {\n          const codePos = this.state.pos - 1;\n          const match = this.input\n            .substr(this.state.pos - 1, 3)\n            .match(/^[0-7]+/);\n\n          // This is never null, because of the if condition above.\n          /*:: invariant(match !== null) */\n          let octalStr = match[0];\n\n          let octal = parseInt(octalStr, 8);\n          if (octal > 255) {\n            octalStr = octalStr.slice(0, -1);\n            octal = parseInt(octalStr, 8);\n          }\n          this.state.pos += octalStr.length - 1;\n          const next = this.input.charCodeAt(this.state.pos);\n          if (\n            octalStr !== \"0\" ||\n            next === charCodes.digit8 ||\n            next === charCodes.digit9\n          ) {\n            if (inTemplate) {\n              return null;\n            } else {\n              this.recordStrictModeErrors(codePos, Errors.StrictNumericEscape);\n            }\n          }\n\n          return String.fromCharCode(octal);\n        }\n\n        return String.fromCharCode(ch);\n    }\n  }\n\n  // Used to read character escape sequences ('\\x', '\\u').\n\n  readHexChar(\n    len: number,\n    forceLen: boolean,\n    throwOnInvalid: boolean,\n  ): number | null {\n    const codePos = this.state.pos;\n    const n = this.readInt(16, len, forceLen, false);\n    if (n === null) {\n      if (throwOnInvalid) {\n        this.raise(codePos, Errors.InvalidEscapeSequence);\n      } else {\n        this.state.pos = codePos - 1;\n      }\n    }\n    return n;\n  }\n\n  // Read an identifier, and return it as a string. Sets `this.state.containsEsc`\n  // to whether the word contained a '\\u' escape.\n  //\n  // Incrementally adds only escaped chars, adding other chunks as-is\n  // as a micro-optimization.\n  //\n  // When `firstCode` is given, it assumes it is always an identifier start and\n  // will skip reading start position again\n\n  readWord1(firstCode: number | void): string {\n    this.state.containsEsc = false;\n    let word = \"\";\n    const start = this.state.pos;\n    let chunkStart = this.state.pos;\n    if (firstCode !== undefined) {\n      this.state.pos += firstCode <= 0xffff ? 1 : 2;\n    }\n\n    while (this.state.pos < this.length) {\n      const ch = this.codePointAtPos(this.state.pos);\n      if (isIdentifierChar(ch)) {\n        this.state.pos += ch <= 0xffff ? 1 : 2;\n      } else if (ch === charCodes.backslash) {\n        this.state.containsEsc = true;\n\n        word += this.input.slice(chunkStart, this.state.pos);\n        const escStart = this.state.pos;\n        const identifierCheck =\n          this.state.pos === start ? isIdentifierStart : isIdentifierChar;\n\n        if (this.input.charCodeAt(++this.state.pos) !== charCodes.lowercaseU) {\n          this.raise(this.state.pos, Errors.MissingUnicodeEscape);\n          chunkStart = this.state.pos - 1;\n          continue;\n        }\n\n        ++this.state.pos;\n        const esc = this.readCodePoint(true);\n        if (esc !== null) {\n          if (!identifierCheck(esc)) {\n            this.raise(escStart, Errors.EscapedCharNotAnIdentifier);\n          }\n\n          word += String.fromCodePoint(esc);\n        }\n        chunkStart = this.state.pos;\n      } else {\n        break;\n      }\n    }\n    return word + this.input.slice(chunkStart, this.state.pos);\n  }\n\n  // Read an identifier or keyword token. Will check for reserved\n  // words when necessary.\n\n  readWord(firstCode: number | void): void {\n    const word = this.readWord1(firstCode);\n    const type = keywordTypes.get(word);\n    if (type !== undefined) {\n      // We don't use word as state.value here because word is a dynamic string\n      // while token label is a shared constant string\n      this.finishToken(type, tokenLabelName(type));\n    } else {\n      this.finishToken(tt.name, word);\n    }\n  }\n\n  checkKeywordEscapes(): void {\n    const { type } = this.state;\n    if (tokenIsKeyword(type) && this.state.containsEsc) {\n      this.raise(\n        this.state.start,\n        Errors.InvalidEscapedReservedWord,\n        tokenLabelName(type),\n      );\n    }\n  }\n\n  // updateContext is used by the jsx plugin\n  // eslint-disable-next-line no-unused-vars\n  updateContext(prevType: TokenType): void {}\n}\n","// @flow\n\nimport {\n  CLASS_ELEMENT_KIND_ACCESSOR,\n  CLASS_ELEMENT_FLAG_STATIC,\n  type ClassElementTypes,\n} from \"./scopeflags\";\nimport { Errors, type raiseFunction } from \"../parser/error\";\n\nexport class ClassScope {\n  // A list of private named declared in the current class\n  privateNames: Set<string> = new Set();\n\n  // A list of private getters of setters without their counterpart\n  loneAccessors: Map<string, ClassElementTypes> = new Map();\n\n  // A list of private names used before being defined, mapping to\n  // their position.\n  undefinedPrivateNames: Map<string, number> = new Map();\n}\n\nexport default class ClassScopeHandler {\n  stack: Array<ClassScope> = [];\n  declare raise: raiseFunction;\n  undefinedPrivateNames: Map<string, number> = new Map();\n\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n\n  current(): ClassScope {\n    return this.stack[this.stack.length - 1];\n  }\n\n  enter() {\n    this.stack.push(new ClassScope());\n  }\n\n  exit() {\n    const oldClassScope = this.stack.pop();\n\n    // Migrate the usage of not yet defined private names to the outer\n    // class scope, or raise an error if we reached the top-level scope.\n\n    const current = this.current();\n\n    // Array.from is needed because this is compiled to an array-like for loop\n    for (const [name, pos] of Array.from(oldClassScope.undefinedPrivateNames)) {\n      if (current) {\n        if (!current.undefinedPrivateNames.has(name)) {\n          current.undefinedPrivateNames.set(name, pos);\n        }\n      } else {\n        this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n      }\n    }\n  }\n\n  declarePrivateName(\n    name: string,\n    elementType: ClassElementTypes,\n    pos: number,\n  ) {\n    const { privateNames, loneAccessors, undefinedPrivateNames } =\n      this.current();\n    let redefined = privateNames.has(name);\n\n    if (elementType & CLASS_ELEMENT_KIND_ACCESSOR) {\n      const accessor = redefined && loneAccessors.get(name);\n      if (accessor) {\n        const oldStatic = accessor & CLASS_ELEMENT_FLAG_STATIC;\n        const newStatic = elementType & CLASS_ELEMENT_FLAG_STATIC;\n\n        const oldKind = accessor & CLASS_ELEMENT_KIND_ACCESSOR;\n        const newKind = elementType & CLASS_ELEMENT_KIND_ACCESSOR;\n\n        // The private name can be duplicated only if it is used by\n        // two accessors with different kind (get and set), and if\n        // they have the same placement (static or not).\n        redefined = oldKind === newKind || oldStatic !== newStatic;\n\n        if (!redefined) loneAccessors.delete(name);\n      } else if (!redefined) {\n        loneAccessors.set(name, elementType);\n      }\n    }\n\n    if (redefined) {\n      this.raise(pos, Errors.PrivateNameRedeclaration, name);\n    }\n\n    privateNames.add(name);\n    undefinedPrivateNames.delete(name);\n  }\n\n  usePrivateName(name: string, pos: number) {\n    let classScope;\n    for (classScope of this.stack) {\n      if (classScope.privateNames.has(name)) return;\n    }\n\n    if (classScope) {\n      classScope.undefinedPrivateNames.set(name, pos);\n    } else {\n      // top-level\n      this.raise(pos, Errors.InvalidPrivateFieldResolution, name);\n    }\n  }\n}\n","// @flow\n\nimport type { ErrorTemplate, raiseFunction } from \"../parser/error\";\n\n/*:: declare var invariant; */\n/**\n * @module util/expression-scope\n\nExpressionScope is used to track declaration errors in these ambiguous patterns:\n\n- CoverParenthesizedExpressionAndArrowParameterList\n  e.g. we don't know if `({ x })` is an parenthesized expression or an\n  arrow function parameters until we see an `=>` after `)`.\n\n- CoverCallExpressionAndAsyncArrowHead\n   e.g. we don't know if `async({ x })` is a call expression or an async arrow\n   function parameters until we see an `=>` after `)`\n\nThe following declaration errors (@see parser/error-message) will be recorded in\nsome expression scopes and thrown later when we know what the ambigous pattern is\n\n- AwaitBindingIdentifier\n- AwaitExpressionFormalParameter\n- YieldInParameter\n- InvalidParenthesizedAssignment when parenthesized is an identifier\n\nThere are four different expression scope\n- Expression\n  A general scope that represents program / function body / static block. No errors\n  will be recorded nor thrown in this scope.\n\n- MaybeArrowParameterDeclaration\n  A scope that represents ambiguous arrow head e.g. `(x)`. Errors will be recorded\n  alongside parent scopes and thrown when `ExpressionScopeHandler#validateAsPattern`\n  is called.\n\n- MaybeAsyncArrowParameterDeclaration\n  A scope that represents ambiguous async arrow head e.g. `async(x)`. Errors will\n  be recorded alongside parent scopes and thrown when\n  `ExpressionScopeHandler#validateAsPattern` is called.\n\n- ParameterDeclaration\n  A scope that represents unambiguous function parameters `function(x)`. Errors\n  recorded in this scope will be thrown immediately. No errors will be recorded in\n  this scope.\n\n// @see {@link https://docs.google.com/document/d/1FAvEp9EUK-G8kHfDIEo_385Hs2SUBCYbJ5H-NnLvq8M|V8 Expression Scope design docs}\n */\n\nconst kExpression = 0,\n  kMaybeArrowParameterDeclaration = 1,\n  kMaybeAsyncArrowParameterDeclaration = 2,\n  kParameterDeclaration = 3;\n\ntype ExpressionScopeType = 0 | 1 | 2 | 3;\n\nclass ExpressionScope {\n  type: ExpressionScopeType;\n\n  constructor(type: ExpressionScopeType = kExpression) {\n    this.type = type;\n  }\n\n  canBeArrowParameterDeclaration() {\n    return (\n      this.type === kMaybeAsyncArrowParameterDeclaration ||\n      this.type === kMaybeArrowParameterDeclaration\n    );\n  }\n\n  isCertainlyParameterDeclaration() {\n    return this.type === kParameterDeclaration;\n  }\n}\n\nclass ArrowHeadParsingScope extends ExpressionScope {\n  errors: Map</* pos */ number, /* message */ ErrorTemplate> = new Map();\n  constructor(type: 1 | 2) {\n    super(type);\n  }\n  recordDeclarationError(pos: number, template: ErrorTemplate) {\n    this.errors.set(pos, template);\n  }\n  clearDeclarationError(pos: number) {\n    this.errors.delete(pos);\n  }\n  iterateErrors(iterator: (template: ErrorTemplate, pos: number) => void) {\n    this.errors.forEach(iterator);\n  }\n}\n\nexport default class ExpressionScopeHandler {\n  stack: Array<ExpressionScope> = [new ExpressionScope()];\n  declare raise: raiseFunction;\n  constructor(raise: raiseFunction) {\n    this.raise = raise;\n  }\n  enter(scope: ExpressionScope) {\n    this.stack.push(scope);\n  }\n\n  exit() {\n    this.stack.pop();\n  }\n\n  /**\n   * Record likely parameter initializer errors\n   *\n   * When current scope is a ParameterDeclaration, the error will be thrown immediately,\n   * otherwise it will be recorded to any ancestry MaybeArrowParameterDeclaration and\n   * MaybeAsyncArrowParameterDeclaration scope until an Expression scope is seen.\n   * @param {number} pos Error position\n   * @param {ErrorTemplate} template Error template\n   * @memberof ExpressionScopeHandler\n   */\n  recordParameterInitializerError(pos: number, template: ErrorTemplate): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (!scope.isCertainlyParameterDeclaration()) {\n      if (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, template);\n      } else {\n        /*:: invariant(scope.type == kExpression) */\n        // Type-Expression is the boundary where initializer error can populate to\n        return;\n      }\n      scope = stack[--i];\n    }\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    this.raise(pos, template);\n  }\n\n  /**\n   * Record parenthesized identifier errors\n   *\n   * A parenthesized identifier in LHS can be ambiguous because the assignment\n   * can be transformed to an assignable later, but not vice versa:\n   * For example, in `([(a) = []] = []) => {}`, we think `(a) = []` is an LHS in `[(a) = []]`,\n   * an LHS within `[(a) = []] = []`. However the LHS chain is then transformed by toAssignable,\n   * and we should throw assignment `(a)`, which is only valid in LHS. Hence we record the\n   * location of parenthesized `(a)` to current scope if it is one of MaybeArrowParameterDeclaration\n   * and MaybeAsyncArrowParameterDeclaration\n   *\n   * Unlike `recordParameterInitializerError`, we don't record to ancestry scope because we\n   * validate arrow head parsing scope before exit, and then the LHS will be unambiguous:\n   * For example, in `( x = ( [(a) = []] = [] ) ) => {}`, we should not record `(a)` in `( x = ... ) =>`\n   * arrow scope because when we finish parsing `( [(a) = []] = [] )`, it is an unambiguous assignment\n   * expression and can not be cast to pattern\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @returns {void}\n   * @memberof ExpressionScopeHandler\n   */\n  recordParenthesizedIdentifierError(\n    pos: number,\n    template: ErrorTemplate,\n  ): void {\n    const { stack } = this;\n    const scope: ExpressionScope = stack[stack.length - 1];\n    if (scope.isCertainlyParameterDeclaration()) {\n      this.raise(pos, template);\n    } else if (scope.canBeArrowParameterDeclaration()) {\n      /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n      scope.recordDeclarationError(pos, template);\n    } else {\n      return;\n    }\n  }\n\n  /**\n   * Record likely async arrow parameter errors\n   *\n   * Errors will be recorded to any ancestry MaybeAsyncArrowParameterDeclaration\n   * scope until an Expression scope is seen.\n   * @param {number} pos\n   * @param {ErrorTemplate} template\n   * @memberof ExpressionScopeHandler\n   */\n  recordAsyncArrowParametersError(pos: number, template: ErrorTemplate): void {\n    const { stack } = this;\n    let i = stack.length - 1;\n    let scope: ExpressionScope = stack[i];\n    while (scope.canBeArrowParameterDeclaration()) {\n      if (scope.type === kMaybeAsyncArrowParameterDeclaration) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.recordDeclarationError(pos, template);\n      }\n      scope = stack[--i];\n    }\n  }\n\n  validateAsPattern(): void {\n    const { stack } = this;\n    const currentScope = stack[stack.length - 1];\n    if (!currentScope.canBeArrowParameterDeclaration()) return;\n    /*:: invariant(currentScope instanceof ArrowHeadParsingScope) */\n    currentScope.iterateErrors((template, pos) => {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(pos, template);\n      // iterate from parent scope\n      let i = stack.length - 2;\n      let scope = stack[i];\n      while (scope.canBeArrowParameterDeclaration()) {\n        /*:: invariant(scope instanceof ArrowHeadParsingScope) */\n        scope.clearDeclarationError(pos);\n        scope = stack[--i];\n      }\n    });\n  }\n}\n\nexport function newParameterDeclarationScope() {\n  return new ExpressionScope(kParameterDeclaration);\n}\n\nexport function newArrowHeadScope() {\n  return new ArrowHeadParsingScope(kMaybeArrowParameterDeclaration);\n}\n\nexport function newAsyncArrowScope() {\n  return new ArrowHeadParsingScope(kMaybeAsyncArrowParameterDeclaration);\n}\n\nexport function newExpressionScope() {\n  return new ExpressionScope();\n}\n","// @flow\nexport const PARAM = 0b0000, // Initial Parameter flags\n  PARAM_YIELD = 0b0001, // track [Yield] production parameter\n  PARAM_AWAIT = 0b0010, // track [Await] production parameter\n  PARAM_RETURN = 0b0100, // track [Return] production parameter\n  PARAM_IN = 0b1000; // track [In] production parameter\n\n// ProductionParameterHandler is a stack fashioned production parameter tracker\n// https://tc39.es/ecma262/#sec-grammar-notation\n// The tracked parameters are defined above.\n//\n// Whenever [+Await]/[+Yield] appears in the right-hand sides of a production,\n// we must enter a new tracking stack. For example when parsing\n//\n// AsyncFunctionDeclaration [Yield, Await]:\n//   async [no LineTerminator here] function BindingIdentifier[?Yield, ?Await]\n//     ( FormalParameters[~Yield, +Await] ) { AsyncFunctionBody }\n//\n// we must follow such process:\n//\n// 1. parse async keyword\n// 2. parse function keyword\n// 3. parse bindingIdentifier <= inherit current parameters: [?Await]\n// 4. enter new stack with (PARAM_AWAIT)\n// 5. parse formal parameters <= must have [Await] parameter [+Await]\n// 6. parse function body\n// 7. exit current stack\n\nexport type ParamKind =\n  | typeof PARAM\n  | typeof PARAM_AWAIT\n  | typeof PARAM_IN\n  | typeof PARAM_RETURN\n  | typeof PARAM_YIELD;\n\nexport default class ProductionParameterHandler {\n  stacks: Array<ParamKind> = [];\n  enter(flags: ParamKind) {\n    this.stacks.push(flags);\n  }\n\n  exit() {\n    this.stacks.pop();\n  }\n\n  currentFlags(): ParamKind {\n    return this.stacks[this.stacks.length - 1];\n  }\n\n  get hasAwait(): boolean {\n    return (this.currentFlags() & PARAM_AWAIT) > 0;\n  }\n\n  get hasYield(): boolean {\n    return (this.currentFlags() & PARAM_YIELD) > 0;\n  }\n\n  get hasReturn(): boolean {\n    return (this.currentFlags() & PARAM_RETURN) > 0;\n  }\n\n  get hasIn(): boolean {\n    return (this.currentFlags() & PARAM_IN) > 0;\n  }\n}\n\nexport function functionFlags(\n  isAsync: boolean,\n  isGenerator: boolean,\n): ParamKind {\n  return (isAsync ? PARAM_AWAIT : 0) | (isGenerator ? PARAM_YIELD : 0);\n}\n","// @flow\n\nimport {\n  isTokenType,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport Tokenizer from \"../tokenizer\";\nimport State from \"../tokenizer/state\";\nimport type { Node } from \"../types\";\nimport { lineBreak, skipWhiteSpaceToLineBreak } from \"../util/whitespace\";\nimport { isIdentifierChar } from \"../util/identifier\";\nimport ClassScopeHandler from \"../util/class-scope\";\nimport ExpressionScopeHandler from \"../util/expression-scope\";\nimport { SCOPE_PROGRAM } from \"../util/scopeflags\";\nimport ProductionParameterHandler, {\n  PARAM_AWAIT,\n  PARAM,\n} from \"../util/production-parameter\";\nimport { Errors, type ErrorTemplate, ErrorCodes } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport type { PluginConfig } from \"./base\";\n/*::\nimport type ScopeHandler from \"../util/scope\";\n*/\n\ntype TryParse<Node, Error, Thrown, Aborted, FailState> = {\n  node: Node,\n  error: Error,\n  thrown: Thrown,\n  aborted: Aborted,\n  failState: FailState,\n};\n\n// ## Parser utilities\n\nexport default class UtilParser extends Tokenizer {\n  // Forward-declaration: defined in parser/index.js\n  /*::\n  +getScopeHandler: () => Class<ScopeHandler<*>>;\n  */\n\n  // TODO\n\n  addExtra(node: Node, key: string, val: any): void {\n    if (!node) return;\n\n    const extra = (node.extra = node.extra || {});\n    extra[key] = val;\n  }\n\n  // Tests whether parsed token is a contextual keyword.\n\n  isContextual(token: TokenType): boolean {\n    return this.state.type === token && !this.state.containsEsc;\n  }\n\n  isUnparsedContextual(nameStart: number, name: string): boolean {\n    const nameEnd = nameStart + name.length;\n    if (this.input.slice(nameStart, nameEnd) === name) {\n      const nextCh = this.input.charCodeAt(nameEnd);\n      return !(\n        isIdentifierChar(nextCh) ||\n        // check if `nextCh is between 0xd800 - 0xdbff,\n        // if `nextCh` is NaN, `NaN & 0xfc00` is 0, the function\n        // returns true\n        (nextCh & 0xfc00) === 0xd800\n      );\n    }\n    return false;\n  }\n\n  isLookaheadContextual(name: string): boolean {\n    const next = this.nextTokenStart();\n    return this.isUnparsedContextual(next, name);\n  }\n\n  // Consumes contextual keyword if possible.\n\n  eatContextual(token: TokenType): boolean {\n    if (this.isContextual(token)) {\n      this.next();\n      return true;\n    }\n    return false;\n  }\n\n  // Asserts that following token is given contextual keyword.\n\n  expectContextual(token: TokenType, template?: ErrorTemplate): void {\n    if (!this.eatContextual(token)) this.unexpected(null, template);\n  }\n\n  // Test whether a semicolon can be inserted at the current position.\n\n  canInsertSemicolon(): boolean {\n    return (\n      this.match(tt.eof) ||\n      this.match(tt.braceR) ||\n      this.hasPrecedingLineBreak()\n    );\n  }\n\n  hasPrecedingLineBreak(): boolean {\n    return lineBreak.test(\n      this.input.slice(this.state.lastTokEnd, this.state.start),\n    );\n  }\n\n  hasFollowingLineBreak(): boolean {\n    skipWhiteSpaceToLineBreak.lastIndex = this.state.end;\n    return skipWhiteSpaceToLineBreak.test(this.input);\n  }\n\n  // TODO\n\n  isLineTerminator(): boolean {\n    return this.eat(tt.semi) || this.canInsertSemicolon();\n  }\n\n  // Consume a semicolon, or, failing that, see if we are allowed to\n  // pretend that there is a semicolon at this position.\n\n  semicolon(allowAsi: boolean = true): void {\n    if (allowAsi ? this.isLineTerminator() : this.eat(tt.semi)) return;\n    this.raise(this.state.lastTokEnd, Errors.MissingSemicolon);\n  }\n\n  // Expect a token of a given type. If found, consume it, otherwise,\n  // raise an unexpected token error at given pos.\n\n  expect(type: TokenType, pos?: ?number): void {\n    this.eat(type) || this.unexpected(pos, type);\n  }\n\n  // Throws if the current token and the prev one are separated by a space.\n  assertNoSpace(message: string = \"Unexpected space.\"): void {\n    if (this.state.start > this.state.lastTokEnd) {\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(this.state.lastTokEnd, {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedSpace\",\n        template: message,\n      });\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    }\n  }\n\n  // Raise an unexpected token error. Can take the expected token type\n  // instead of a message string.\n\n  unexpected(\n    pos: ?number,\n    messageOrType: ErrorTemplate | TokenType = {\n      code: ErrorCodes.SyntaxError,\n      reasonCode: \"UnexpectedToken\",\n      template: \"Unexpected token\",\n    },\n  ): empty {\n    if (isTokenType(messageOrType)) {\n      messageOrType = {\n        code: ErrorCodes.SyntaxError,\n        reasonCode: \"UnexpectedToken\",\n        template: `Unexpected token, expected \"${tokenLabelName(\n          // $FlowIgnore: Flow does not support assertion signature and TokenType is opaque\n          messageOrType,\n        )}\"`,\n      };\n    }\n\n    /* eslint-disable @babel/development-internal/dry-error-messages */\n    // $FlowIgnore: Flow does not support assertion signature and TokenType is opaque\n    throw this.raise(pos != null ? pos : this.state.start, messageOrType);\n    /* eslint-enable @babel/development-internal/dry-error-messages */\n  }\n\n  getPluginNamesFromConfigs(pluginConfigs: Array<PluginConfig>): Array<string> {\n    return pluginConfigs.map(c => {\n      if (typeof c === \"string\") {\n        return c;\n      } else {\n        return c[0];\n      }\n    });\n  }\n\n  expectPlugin(pluginConfig: PluginConfig, pos?: ?number): true {\n    if (!this.hasPlugin(pluginConfig)) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: this.getPluginNamesFromConfigs([pluginConfig]) },\n        `This experimental syntax requires enabling the parser plugin: ${JSON.stringify(\n          pluginConfig,\n        )}.`,\n      );\n    }\n\n    return true;\n  }\n\n  expectOnePlugin(pluginConfigs: Array<PluginConfig>, pos?: ?number): void {\n    if (!pluginConfigs.some(c => this.hasPlugin(c))) {\n      throw this.raiseWithData(\n        pos != null ? pos : this.state.start,\n        { missingPlugin: this.getPluginNamesFromConfigs(pluginConfigs) },\n        `This experimental syntax requires enabling one of the following parser plugin(s): ${pluginConfigs\n          .map(c => JSON.stringify(c))\n          .join(\", \")}.`,\n      );\n    }\n  }\n\n  // tryParse will clone parser state.\n  // It is expensive and should be used with cautions\n  tryParse<T: Node | $ReadOnlyArray<Node>>(\n    fn: (abort: (node?: T) => empty) => T,\n    oldState: State = this.state.clone(),\n  ):\n    | TryParse<T, null, false, false, null>\n    | TryParse<T | null, ParsingError, boolean, false, State>\n    | TryParse<T | null, null, false, true, State> {\n    const abortSignal: { node: T | null } = { node: null };\n    try {\n      const node = fn((node = null) => {\n        abortSignal.node = node;\n        throw abortSignal;\n      });\n      if (this.state.errors.length > oldState.errors.length) {\n        const failState = this.state;\n        this.state = oldState;\n        // tokensLength should be preserved during error recovery mode\n        // since the parser does not halt and will instead parse the\n        // remaining tokens\n        this.state.tokensLength = failState.tokensLength;\n        return {\n          node,\n          error: (failState.errors[oldState.errors.length]: ParsingError),\n          thrown: false,\n          aborted: false,\n          failState,\n        };\n      }\n\n      return {\n        node,\n        error: null,\n        thrown: false,\n        aborted: false,\n        failState: null,\n      };\n    } catch (error) {\n      const failState = this.state;\n      this.state = oldState;\n      if (error instanceof SyntaxError) {\n        return { node: null, error, thrown: true, aborted: false, failState };\n      }\n      if (error === abortSignal) {\n        return {\n          node: abortSignal.node,\n          error: null,\n          thrown: false,\n          aborted: true,\n          failState,\n        };\n      }\n\n      throw error;\n    }\n  }\n\n  checkExpressionErrors(\n    refExpressionErrors: ?ExpressionErrors,\n    andThrow: boolean,\n  ) {\n    if (!refExpressionErrors) return false;\n    const { shorthandAssign, doubleProto, optionalParameters } =\n      refExpressionErrors;\n    // shorthandAssign >= 0 || doubleProto >= 0 || optionalParameters >= 0\n    const hasErrors = shorthandAssign + doubleProto + optionalParameters > -3;\n    if (!andThrow) {\n      return hasErrors;\n    } else if (hasErrors) {\n      if (shorthandAssign >= 0) {\n        this.raise(shorthandAssign, Errors.InvalidCoverInitializedName);\n      }\n      if (doubleProto >= 0) {\n        this.raise(doubleProto, Errors.DuplicateProto);\n      }\n      if (optionalParameters >= 0) {\n        this.unexpected(optionalParameters);\n      }\n    }\n  }\n\n  /**\n   * Test if current token is a literal property name\n   * https://tc39.es/ecma262/#prod-LiteralPropertyName\n   * LiteralPropertyName:\n   *   IdentifierName\n   *   StringLiteral\n   *   NumericLiteral\n   *   BigIntLiteral\n   */\n  isLiteralPropertyName(): boolean {\n    return tokenIsLiteralPropertyName(this.state.type);\n  }\n\n  /*\n   * Test if given node is a PrivateName\n   * will be overridden in ESTree plugin\n   */\n  isPrivateName(node: Node): boolean {\n    return node.type === \"PrivateName\";\n  }\n\n  /*\n   * Return the string value of a given private name\n   * WITHOUT `#`\n   * @see {@link https://tc39.es/ecma262/#sec-static-semantics-stringvalue}\n   */\n  getPrivateNameSV(node: Node): string {\n    return node.id.name;\n  }\n\n  /*\n   * Return whether the given node is a member/optional chain that\n   * contains a private name as its property\n   * It is overridden in ESTree plugin\n   */\n  hasPropertyAsPrivateName(node: Node): boolean {\n    return (\n      (node.type === \"MemberExpression\" ||\n        node.type === \"OptionalMemberExpression\") &&\n      this.isPrivateName(node.property)\n    );\n  }\n\n  isOptionalChain(node: Node): boolean {\n    return (\n      node.type === \"OptionalMemberExpression\" ||\n      node.type === \"OptionalCallExpression\"\n    );\n  }\n\n  isObjectProperty(node: Node): boolean {\n    return node.type === \"ObjectProperty\";\n  }\n\n  isObjectMethod(node: Node): boolean {\n    return node.type === \"ObjectMethod\";\n  }\n\n  initializeScopes(\n    inModule: boolean = this.options.sourceType === \"module\",\n  ): () => void {\n    // Initialize state\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n\n    const oldExportedIdentifiers = this.exportedIdentifiers;\n    this.exportedIdentifiers = new Set();\n\n    // initialize scopes\n    const oldInModule = this.inModule;\n    this.inModule = inModule;\n\n    const oldScope = this.scope;\n    const ScopeHandler = this.getScopeHandler();\n    this.scope = new ScopeHandler(this.raise.bind(this), this.inModule);\n\n    const oldProdParam = this.prodParam;\n    this.prodParam = new ProductionParameterHandler();\n\n    const oldClassScope = this.classScope;\n    this.classScope = new ClassScopeHandler(this.raise.bind(this));\n\n    const oldExpressionScope = this.expressionScope;\n    this.expressionScope = new ExpressionScopeHandler(this.raise.bind(this));\n\n    return () => {\n      // Revert state\n      this.state.labels = oldLabels;\n      this.exportedIdentifiers = oldExportedIdentifiers;\n\n      // Revert scopes\n      this.inModule = oldInModule;\n      this.scope = oldScope;\n      this.prodParam = oldProdParam;\n      this.classScope = oldClassScope;\n      this.expressionScope = oldExpressionScope;\n    };\n  }\n\n  enterInitialScopes() {\n    let paramFlags = PARAM;\n    if (this.inModule) {\n      paramFlags |= PARAM_AWAIT;\n    }\n    this.scope.enter(SCOPE_PROGRAM);\n    this.prodParam.enter(paramFlags);\n  }\n}\n\n/**\n * The ExpressionErrors is a context struct used to track ambiguous patterns\n * When we are sure the parsed pattern is a RHS, which means it is not a pattern,\n * we will throw on this position on invalid assign syntax, otherwise it will be reset to -1\n *\n * Types of ExpressionErrors:\n *\n * - **shorthandAssign**: track initializer `=` position\n * - **doubleProto**: track the duplicate `__proto__` key position\n * - **optionalParameters**: track the optional paramter (`?`).\n * It's only used by typescript and flow plugins\n */\nexport class ExpressionErrors {\n  shorthandAssign = -1;\n  doubleProto = -1;\n  optionalParameters = -1;\n}\n","// @flow\n\nimport type Parser from \"./index\";\nimport UtilParser from \"./util\";\nimport { SourceLocation, type Position } from \"../util/location\";\nimport type { Comment, Node as NodeType, NodeBase } from \"../types\";\n\n// Start an AST node, attaching a start offset.\n\nclass Node implements NodeBase {\n  constructor(parser: Parser, pos: number, loc: Position) {\n    this.start = pos;\n    this.end = 0;\n    this.loc = new SourceLocation(loc);\n    if (parser?.options.ranges) this.range = [pos, 0];\n    if (parser?.filename) this.loc.filename = parser.filename;\n  }\n\n  type: string = \"\";\n  declare start: number;\n  declare end: number;\n  declare loc: SourceLocation;\n  declare range: [number, number];\n  declare leadingComments: Array<Comment>;\n  declare trailingComments: Array<Comment>;\n  declare innerComments: Array<Comment>;\n  declare extra: { [key: string]: any };\n}\nconst NodePrototype = Node.prototype;\n\nif (!process.env.BABEL_8_BREAKING) {\n  // $FlowIgnore\n  NodePrototype.__clone = function (): Node {\n    // $FlowIgnore\n    const newNode: any = new Node();\n    const keys = Object.keys(this);\n    for (let i = 0, length = keys.length; i < length; i++) {\n      const key = keys[i];\n      // Do not clone comments that are already attached to the node\n      if (\n        key !== \"leadingComments\" &&\n        key !== \"trailingComments\" &&\n        key !== \"innerComments\"\n      ) {\n        newNode[key] = this[key];\n      }\n    }\n\n    return newNode;\n  };\n}\n\nfunction clonePlaceholder(node: any): any {\n  return cloneIdentifier(node);\n}\n\nexport function cloneIdentifier(node: any): any {\n  // We don't need to clone `typeAnnotations` and `optional`: because\n  // cloneIdentifier is only used in object shorthand and named import/export.\n  // Neither of them allow type annotations after the identifier or optional identifier\n  const { type, start, end, loc, range, extra, name } = node;\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  cloned.extra = extra;\n  cloned.name = name;\n  if (type === \"Placeholder\") {\n    cloned.expectedNode = node.expectedNode;\n  }\n  return cloned;\n}\n\nexport function cloneStringLiteral(node: any): any {\n  const { type, start, end, loc, range, extra } = node;\n  if (type === \"Placeholder\") {\n    return clonePlaceholder(node);\n  }\n  const cloned = Object.create(NodePrototype);\n  cloned.type = type;\n  cloned.start = start;\n  cloned.end = end;\n  cloned.loc = loc;\n  cloned.range = range;\n  if (node.raw !== undefined) {\n    // estree set node.raw instead of node.extra\n    cloned.raw = node.raw;\n  } else {\n    cloned.extra = extra;\n  }\n  cloned.value = node.value;\n  return cloned;\n}\n\nexport class NodeUtils extends UtilParser {\n  startNode<T: NodeType>(): T {\n    // $FlowIgnore\n    return new Node(this, this.state.start, this.state.startLoc);\n  }\n\n  startNodeAt<T: NodeType>(pos: number, loc: Position): T {\n    // $FlowIgnore\n    return new Node(this, pos, loc);\n  }\n\n  /** Start a new node with a previous node's location. */\n  startNodeAtNode<T: NodeType>(type: NodeType): T {\n    return this.startNodeAt(type.start, type.loc.start);\n  }\n\n  // Finish an AST node, adding `type` and `end` properties.\n\n  finishNode<T: NodeType>(node: T, type: string): T {\n    return this.finishNodeAt(\n      node,\n      type,\n      this.state.lastTokEnd,\n      this.state.lastTokEndLoc,\n    );\n  }\n\n  // Finish node at given position\n\n  finishNodeAt<T: NodeType>(\n    node: T,\n    type: string,\n    pos: number,\n    loc: Position,\n  ): T {\n    if (process.env.NODE_ENV !== \"production\" && node.end > 0) {\n      throw new Error(\n        \"Do not call finishNode*() twice on the same node.\" +\n          \" Instead use resetEndLocation() or change type directly.\",\n      );\n    }\n    node.type = type;\n    node.end = pos;\n    node.loc.end = loc;\n    if (this.options.ranges) node.range[1] = pos;\n    if (this.options.attachComment) this.processComment(node);\n    return node;\n  }\n\n  resetStartLocation(node: NodeBase, start: number, startLoc: Position): void {\n    node.start = start;\n    node.loc.start = startLoc;\n    if (this.options.ranges) node.range[0] = start;\n  }\n\n  resetEndLocation(\n    node: NodeBase,\n    end?: number = this.state.lastTokEnd,\n    endLoc?: Position = this.state.lastTokEndLoc,\n  ): void {\n    node.end = end;\n    node.loc.end = endLoc;\n    if (this.options.ranges) node.range[1] = end;\n  }\n\n  /**\n   * Reset the start location of node to the start location of locationNode\n   */\n  resetStartLocationFromNode(node: NodeBase, locationNode: NodeBase): void {\n    this.resetStartLocation(node, locationNode.start, locationNode.loc.start);\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type Parser from \"../../parser\";\nimport {\n  tokenIsIdentifier,\n  tokenIsKeyword,\n  tokenIsKeywordOrIdentifier,\n  tokenIsLiteralPropertyName,\n  tokenLabelName,\n  tt,\n  type TokenType,\n  tokenIsFlowInterfaceOrTypeOrOpaque,\n} from \"../../tokenizer/types\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as charCodes from \"charcodes\";\nimport { isIteratorStart } from \"../../util/identifier\";\nimport FlowScopeHandler from \"./scope\";\nimport {\n  type BindingTypes,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  BIND_FLOW_DECLARE_FN,\n  SCOPE_ARROW,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n} from \"../../util/scopeflags\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\nconst reservedTypes = new Set([\n  \"_\",\n  \"any\",\n  \"bool\",\n  \"boolean\",\n  \"empty\",\n  \"extends\",\n  \"false\",\n  \"interface\",\n  \"mixed\",\n  \"null\",\n  \"number\",\n  \"static\",\n  \"string\",\n  \"true\",\n  \"typeof\",\n  \"void\",\n]);\n\n/* eslint sort-keys: \"error\" */\n// The Errors key follows https://github.com/facebook/flow/blob/master/src/parser/parse_error.ml unless it does not exist\nconst FlowErrors = makeErrorTemplates(\n  {\n    AmbiguousConditionalArrow:\n      \"Ambiguous expression: wrap the arrow functions in parentheses to disambiguate.\",\n    AmbiguousDeclareModuleKind:\n      \"Found both `declare module.exports` and `declare export` in the same module. Modules can only have 1 since they are either an ES module or they are a CommonJS module.\",\n    AssignReservedType: \"Cannot overwrite reserved type %0.\",\n    DeclareClassElement:\n      \"The `declare` modifier can only appear on class fields.\",\n    DeclareClassFieldInitializer:\n      \"Initializers are not allowed in fields with the `declare` modifier.\",\n    DuplicateDeclareModuleExports:\n      \"Duplicate `declare module.exports` statement.\",\n    EnumBooleanMemberNotInitialized:\n      \"Boolean enum members need to be initialized. Use either `%0 = true,` or `%0 = false,` in enum `%1`.\",\n    EnumDuplicateMemberName:\n      \"Enum member names need to be unique, but the name `%0` has already been used before in enum `%1`.\",\n    EnumInconsistentMemberValues:\n      \"Enum `%0` has inconsistent member initializers. Either use no initializers, or consistently use literals (either booleans, numbers, or strings) for all member initializers.\",\n    EnumInvalidExplicitType:\n      \"Enum type `%1` is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidExplicitTypeUnknownSupplied:\n      \"Supplied enum type is not valid. Use one of `boolean`, `number`, `string`, or `symbol` in enum `%0`.\",\n    EnumInvalidMemberInitializerPrimaryType:\n      \"Enum `%0` has type `%2`, so the initializer of `%1` needs to be a %2 literal.\",\n    EnumInvalidMemberInitializerSymbolType:\n      \"Symbol enum members cannot be initialized. Use `%1,` in enum `%0`.\",\n    EnumInvalidMemberInitializerUnknownType:\n      \"The enum member initializer for `%1` needs to be a literal (either a boolean, number, or string) in enum `%0`.\",\n    EnumInvalidMemberName:\n      \"Enum member names cannot start with lowercase 'a' through 'z'. Instead of using `%0`, consider using `%1`, in enum `%2`.\",\n    EnumNumberMemberNotInitialized:\n      \"Number enum members need to be initialized, e.g. `%1 = 1` in enum `%0`.\",\n    EnumStringMemberInconsistentlyInitailized:\n      \"String enum members need to consistently either all use initializers, or use no initializers, in enum `%0`.\",\n    GetterMayNotHaveThisParam: \"A getter cannot have a `this` parameter.\",\n    ImportTypeShorthandOnlyInPureImport:\n      \"The `type` and `typeof` keywords on named imports can only be used on regular `import` statements. It cannot be used with `import type` or `import typeof` statements.\",\n    InexactInsideExact:\n      \"Explicit inexact syntax cannot appear inside an explicit exact object type.\",\n    InexactInsideNonObject:\n      \"Explicit inexact syntax cannot appear in class or interface definitions.\",\n    InexactVariance: \"Explicit inexact syntax cannot have variance.\",\n    InvalidNonTypeImportInDeclareModule:\n      \"Imports within a `declare module` body must always be `import type` or `import typeof`.\",\n    MissingTypeParamDefault:\n      \"Type parameter declaration needs a default, since a preceding type parameter declaration has a default.\",\n    NestedDeclareModule:\n      \"`declare module` cannot be used inside another `declare module`.\",\n    NestedFlowComment:\n      \"Cannot have a flow comment inside another flow comment.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    SetterMayNotHaveThisParam: \"A setter cannot have a `this` parameter.\",\n    SpreadVariance: \"Spread properties cannot have variance.\",\n    ThisParamAnnotationRequired:\n      \"A type annotation is required for the `this` parameter.\",\n    ThisParamBannedInConstructor:\n      \"Constructors cannot have a `this` parameter; constructors don't bind `this` like other functions.\",\n    ThisParamMayNotBeOptional: \"The `this` parameter cannot be optional.\",\n    ThisParamMustBeFirst:\n      \"The `this` parameter must be the first function parameter.\",\n    ThisParamNoDefault: \"The `this` parameter may not have a default value.\",\n    TypeBeforeInitializer:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeCastInPattern:\n      \"The type cast expression is expected to be wrapped with parenthesis.\",\n    UnexpectedExplicitInexactInObject:\n      \"Explicit inexact syntax must appear at the end of an inexact object.\",\n    UnexpectedReservedType: \"Unexpected reserved type %0.\",\n    UnexpectedReservedUnderscore:\n      \"`_` is only allowed as a type argument to call or new.\",\n    UnexpectedSpaceBetweenModuloChecks:\n      \"Spaces between `%` and `checks` are not allowed here.\",\n    UnexpectedSpreadType:\n      \"Spread operator cannot appear in class or interface definitions.\",\n    UnexpectedSubtractionOperand:\n      'Unexpected token, expected \"number\" or \"bigint\".',\n    UnexpectedTokenAfterTypeParameter:\n      \"Expected an arrow function after this type parameter declaration.\",\n    UnexpectedTypeParameterBeforeAsyncArrowFunction:\n      \"Type parameters must come after the async keyword, e.g. instead of `<T> async () => {}`, use `async <T>() => {}`.\",\n    UnsupportedDeclareExportKind:\n      \"`declare export %0` is not supported. Use `%1` instead.\",\n    UnsupportedStatementInDeclareModule:\n      \"Only declares and type imports are allowed inside declare module.\",\n    UnterminatedFlowComment: \"Unterminated flow-comment.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"flow\",\n);\n/* eslint-disable sort-keys */\n\nfunction isEsModuleType(bodyElement: N.Node): boolean {\n  return (\n    bodyElement.type === \"DeclareExportAllDeclaration\" ||\n    (bodyElement.type === \"DeclareExportDeclaration\" &&\n      (!bodyElement.declaration ||\n        (bodyElement.declaration.type !== \"TypeAlias\" &&\n          bodyElement.declaration.type !== \"InterfaceDeclaration\")))\n  );\n}\n\nfunction hasTypeImportKind(node: N.Node): boolean {\n  return node.importKind === \"type\" || node.importKind === \"typeof\";\n}\n\nfunction isMaybeDefaultImport(type: TokenType): boolean {\n  return tokenIsKeywordOrIdentifier(type) && type !== tt._from;\n}\n\nconst exportSuggestions = {\n  const: \"declare export var\",\n  let: \"declare export var\",\n  type: \"export type\",\n  interface: \"export interface\",\n};\n\n// Like Array#filter, but returns a tuple [ acceptedElements, discardedElements ]\nfunction partition<T>(\n  list: T[],\n  test: (T, number, T[]) => ?boolean,\n): [T[], T[]] {\n  const list1 = [];\n  const list2 = [];\n  for (let i = 0; i < list.length; i++) {\n    (test(list[i], i, list) ? list1 : list2).push(list[i]);\n  }\n  return [list1, list2];\n}\n\nconst FLOW_PRAGMA_REGEX = /\\*?\\s*@((?:no)?flow)\\b/;\n\n// Flow enums types\ntype EnumExplicitType = null | \"boolean\" | \"number\" | \"string\" | \"symbol\";\ntype EnumContext = {|\n  enumName: string,\n  explicitType: EnumExplicitType,\n  memberName: string,\n|};\ntype EnumMemberInit =\n  | {| type: \"number\", pos: number, value: N.Node |}\n  | {| type: \"string\", pos: number, value: N.Node |}\n  | {| type: \"boolean\", pos: number, value: N.Node |}\n  | {| type: \"invalid\", pos: number |}\n  | {| type: \"none\", pos: number |};\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // The value of the @flow/@noflow pragma. Initially undefined, transitions\n    // to \"@flow\" or \"@noflow\" if we see a pragma. Transitions to null if we are\n    // past the initial comment.\n    flowPragma: void | null | \"flow\" | \"noflow\" = undefined;\n\n    getScopeHandler(): Class<FlowScopeHandler> {\n      return FlowScopeHandler;\n    }\n\n    shouldParseTypes(): boolean {\n      return this.getPluginOption(\"flow\", \"all\") || this.flowPragma === \"flow\";\n    }\n\n    shouldParseEnums(): boolean {\n      return !!this.getPluginOption(\"flow\", \"enums\");\n    }\n\n    finishToken(type: TokenType, val: any): void {\n      if (\n        type !== tt.string &&\n        type !== tt.semi &&\n        type !== tt.interpreterDirective\n      ) {\n        if (this.flowPragma === undefined) {\n          this.flowPragma = null;\n        }\n      }\n      return super.finishToken(type, val);\n    }\n\n    addComment(comment: N.Comment): void {\n      if (this.flowPragma === undefined) {\n        // Try to parse a flow pragma.\n        const matches = FLOW_PRAGMA_REGEX.exec(comment.value);\n        if (!matches) {\n          // do nothing\n        } else if (matches[1] === \"flow\") {\n          this.flowPragma = \"flow\";\n        } else if (matches[1] === \"noflow\") {\n          this.flowPragma = \"noflow\";\n        } else {\n          throw new Error(\"Unexpected flow pragma\");\n        }\n      }\n      return super.addComment(comment);\n    }\n\n    flowParseTypeInitialiser(tok?: TokenType): N.FlowType {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tok || tt.colon);\n\n      const type = this.flowParseType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParsePredicate(): N.FlowType {\n      const node = this.startNode();\n      const moduloPos = this.state.start;\n      this.next(); // eat `%`\n      this.expectContextual(tt._checks);\n      // Force '%' and 'checks' to be adjacent\n      if (this.state.lastTokStart > moduloPos + 1) {\n        this.raise(moduloPos, FlowErrors.UnexpectedSpaceBetweenModuloChecks);\n      }\n      if (this.eat(tt.parenL)) {\n        node.value = this.parseExpression();\n        this.expect(tt.parenR);\n        return this.finishNode(node, \"DeclaredPredicate\");\n      } else {\n        return this.finishNode(node, \"InferredPredicate\");\n      }\n    }\n\n    flowParseTypeAndPredicateInitialiser(): [?N.FlowType, ?N.FlowPredicate] {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      this.expect(tt.colon);\n      let type = null;\n      let predicate = null;\n      if (this.match(tt.modulo)) {\n        this.state.inType = oldInType;\n        predicate = this.flowParsePredicate();\n      } else {\n        type = this.flowParseType();\n        this.state.inType = oldInType;\n        if (this.match(tt.modulo)) {\n          predicate = this.flowParsePredicate();\n        }\n      }\n      return [type, predicate];\n    }\n\n    flowParseDeclareClass(node: N.FlowDeclareClass): N.FlowDeclareClass {\n      this.next();\n      this.flowParseInterfaceish(node, /*isClass*/ true);\n      return this.finishNode(node, \"DeclareClass\");\n    }\n\n    flowParseDeclareFunction(\n      node: N.FlowDeclareFunction,\n    ): N.FlowDeclareFunction {\n      this.next();\n\n      const id = (node.id = this.parseIdentifier());\n\n      const typeNode = this.startNode();\n      const typeContainer = this.startNode();\n\n      if (this.match(tt.lt)) {\n        typeNode.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        typeNode.typeParameters = null;\n      }\n\n      this.expect(tt.parenL);\n      const tmp = this.flowParseFunctionTypeParams();\n      typeNode.params = tmp.params;\n      typeNode.rest = tmp.rest;\n      typeNode.this = tmp._this;\n      this.expect(tt.parenR);\n\n      [\n        // $FlowFixMe (destructuring not supported yet)\n        typeNode.returnType,\n        // $FlowFixMe (destructuring not supported yet)\n        node.predicate,\n      ] = this.flowParseTypeAndPredicateInitialiser();\n\n      typeContainer.typeAnnotation = this.finishNode(\n        typeNode,\n        \"FunctionTypeAnnotation\",\n      );\n\n      id.typeAnnotation = this.finishNode(typeContainer, \"TypeAnnotation\");\n\n      this.resetEndLocation(id);\n      this.semicolon();\n\n      this.scope.declareName(node.id.name, BIND_FLOW_DECLARE_FN, node.id.start);\n\n      return this.finishNode(node, \"DeclareFunction\");\n    }\n\n    flowParseDeclare(\n      node: N.FlowDeclare,\n      insideModule?: boolean,\n    ): N.FlowDeclare {\n      if (this.match(tt._class)) {\n        return this.flowParseDeclareClass(node);\n      } else if (this.match(tt._function)) {\n        return this.flowParseDeclareFunction(node);\n      } else if (this.match(tt._var)) {\n        return this.flowParseDeclareVariable(node);\n      } else if (this.eatContextual(tt._module)) {\n        if (this.match(tt.dot)) {\n          return this.flowParseDeclareModuleExports(node);\n        } else {\n          if (insideModule) {\n            this.raise(this.state.lastTokStart, FlowErrors.NestedDeclareModule);\n          }\n          return this.flowParseDeclareModule(node);\n        }\n      } else if (this.isContextual(tt._type)) {\n        return this.flowParseDeclareTypeAlias(node);\n      } else if (this.isContextual(tt._opaque)) {\n        return this.flowParseDeclareOpaqueType(node);\n      } else if (this.isContextual(tt._interface)) {\n        return this.flowParseDeclareInterface(node);\n      } else if (this.match(tt._export)) {\n        return this.flowParseDeclareExportDeclaration(node, insideModule);\n      } else {\n        throw this.unexpected();\n      }\n    }\n\n    flowParseDeclareVariable(\n      node: N.FlowDeclareVariable,\n    ): N.FlowDeclareVariable {\n      this.next();\n      node.id = this.flowParseTypeAnnotatableIdentifier(\n        /*allowPrimitiveOverride*/ true,\n      );\n      this.scope.declareName(node.id.name, BIND_VAR, node.id.start);\n      this.semicolon();\n      return this.finishNode(node, \"DeclareVariable\");\n    }\n\n    flowParseDeclareModule(node: N.FlowDeclareModule): N.FlowDeclareModule {\n      this.scope.enter(SCOPE_OTHER);\n\n      if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        node.id = this.parseIdentifier();\n      }\n\n      const bodyNode = (node.body = this.startNode());\n      const body = (bodyNode.body = []);\n      this.expect(tt.braceL);\n      while (!this.match(tt.braceR)) {\n        let bodyNode = this.startNode();\n\n        if (this.match(tt._import)) {\n          this.next();\n          if (!this.isContextual(tt._type) && !this.match(tt._typeof)) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InvalidNonTypeImportInDeclareModule,\n            );\n          }\n          this.parseImport(bodyNode);\n        } else {\n          this.expectContextual(\n            tt._declare,\n            FlowErrors.UnsupportedStatementInDeclareModule,\n          );\n\n          bodyNode = this.flowParseDeclare(bodyNode, true);\n        }\n\n        body.push(bodyNode);\n      }\n\n      this.scope.exit();\n\n      this.expect(tt.braceR);\n\n      this.finishNode(bodyNode, \"BlockStatement\");\n\n      let kind = null;\n      let hasModuleExport = false;\n      body.forEach(bodyElement => {\n        if (isEsModuleType(bodyElement)) {\n          if (kind === \"CommonJS\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"ES\";\n        } else if (bodyElement.type === \"DeclareModuleExports\") {\n          if (hasModuleExport) {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.DuplicateDeclareModuleExports,\n            );\n          }\n          if (kind === \"ES\") {\n            this.raise(\n              bodyElement.start,\n              FlowErrors.AmbiguousDeclareModuleKind,\n            );\n          }\n          kind = \"CommonJS\";\n          hasModuleExport = true;\n        }\n      });\n\n      node.kind = kind || \"CommonJS\";\n      return this.finishNode(node, \"DeclareModule\");\n    }\n\n    flowParseDeclareExportDeclaration(\n      node: N.FlowDeclareExportDeclaration,\n      insideModule: ?boolean,\n    ): N.FlowDeclareExportDeclaration {\n      this.expect(tt._export);\n\n      if (this.eat(tt._default)) {\n        if (this.match(tt._function) || this.match(tt._class)) {\n          // declare export default class ...\n          // declare export default function ...\n          node.declaration = this.flowParseDeclare(this.startNode());\n        } else {\n          // declare export default [type];\n          node.declaration = this.flowParseType();\n          this.semicolon();\n        }\n        node.default = true;\n\n        return this.finishNode(node, \"DeclareExportDeclaration\");\n      } else {\n        if (\n          this.match(tt._const) ||\n          this.isLet() ||\n          ((this.isContextual(tt._type) || this.isContextual(tt._interface)) &&\n            !insideModule)\n        ) {\n          const label = this.state.value;\n          const suggestion = exportSuggestions[label];\n\n          throw this.raise(\n            this.state.start,\n            FlowErrors.UnsupportedDeclareExportKind,\n            label,\n            suggestion,\n          );\n        }\n\n        if (\n          this.match(tt._var) || // declare export var ...\n          this.match(tt._function) || // declare export function ...\n          this.match(tt._class) || // declare export class ...\n          this.isContextual(tt._opaque) // declare export opaque ..\n        ) {\n          node.declaration = this.flowParseDeclare(this.startNode());\n          node.default = false;\n\n          return this.finishNode(node, \"DeclareExportDeclaration\");\n        } else if (\n          this.match(tt.star) || // declare export * from ''\n          this.match(tt.braceL) || // declare export {} ...\n          this.isContextual(tt._interface) || // declare export interface ...\n          this.isContextual(tt._type) || // declare export type ...\n          this.isContextual(tt._opaque) // declare export opaque type ...\n        ) {\n          node = this.parseExport(node);\n          if (node.type === \"ExportNamedDeclaration\") {\n            // flow does not support the ExportNamedDeclaration\n            // $FlowIgnore\n            node.type = \"ExportDeclaration\";\n            // $FlowFixMe\n            node.default = false;\n            delete node.exportKind;\n          }\n\n          // $FlowIgnore\n          node.type = \"Declare\" + node.type;\n\n          return node;\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParseDeclareModuleExports(\n      node: N.FlowDeclareModuleExports,\n    ): N.FlowDeclareModuleExports {\n      this.next();\n      this.expectContextual(tt._exports);\n      node.typeAnnotation = this.flowParseTypeAnnotation();\n      this.semicolon();\n\n      return this.finishNode(node, \"DeclareModuleExports\");\n    }\n\n    flowParseDeclareTypeAlias(\n      node: N.FlowDeclareTypeAlias,\n    ): N.FlowDeclareTypeAlias {\n      this.next();\n      this.flowParseTypeAlias(node);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareTypeAlias\";\n      return node;\n    }\n\n    flowParseDeclareOpaqueType(\n      node: N.FlowDeclareOpaqueType,\n    ): N.FlowDeclareOpaqueType {\n      this.next();\n      this.flowParseOpaqueType(node, true);\n      // Don't do finishNode as we don't want to process comments twice\n      node.type = \"DeclareOpaqueType\";\n      return node;\n    }\n\n    flowParseDeclareInterface(\n      node: N.FlowDeclareInterface,\n    ): N.FlowDeclareInterface {\n      this.next();\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"DeclareInterface\");\n    }\n\n    // Interfaces\n\n    flowParseInterfaceish(\n      node: N.FlowDeclare,\n      isClass?: boolean = false,\n    ): void {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ !isClass,\n        /* declaration */ true,\n      );\n\n      this.scope.declareName(\n        node.id.name,\n        isClass ? BIND_FUNCTION : BIND_LEXICAL,\n        node.id.start,\n      );\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.extends = [];\n      node.implements = [];\n      node.mixins = [];\n\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (!isClass && this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._mixins)) {\n        this.next();\n        do {\n          node.mixins.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        do {\n          node.implements.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: isClass,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: isClass,\n        allowInexact: false,\n      });\n    }\n\n    flowParseInterfaceExtends(): N.FlowInterfaceExtends {\n      const node = this.startNode();\n\n      node.id = this.flowParseQualifiedTypeIdentifier();\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      } else {\n        node.typeParameters = null;\n      }\n\n      return this.finishNode(node, \"InterfaceExtends\");\n    }\n\n    flowParseInterface(node: N.FlowInterface): N.FlowInterface {\n      this.flowParseInterfaceish(node);\n      return this.finishNode(node, \"InterfaceDeclaration\");\n    }\n\n    checkNotUnderscore(word: string) {\n      if (word === \"_\") {\n        this.raise(this.state.start, FlowErrors.UnexpectedReservedUnderscore);\n      }\n    }\n\n    checkReservedType(word: string, startLoc: number, declaration?: boolean) {\n      if (!reservedTypes.has(word)) return;\n\n      this.raise(\n        startLoc,\n        declaration\n          ? FlowErrors.AssignReservedType\n          : FlowErrors.UnexpectedReservedType,\n        word,\n      );\n    }\n\n    flowParseRestrictedIdentifier(\n      liberal?: boolean,\n      declaration?: boolean,\n    ): N.Identifier {\n      this.checkReservedType(this.state.value, this.state.start, declaration);\n      return this.parseIdentifier(liberal);\n    }\n\n    // Type aliases\n\n    flowParseTypeAlias(node: N.FlowTypeAlias): N.FlowTypeAlias {\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ false,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      node.right = this.flowParseTypeInitialiser(tt.eq);\n      this.semicolon();\n\n      return this.finishNode(node, \"TypeAlias\");\n    }\n\n    flowParseOpaqueType(\n      node: N.FlowOpaqueType,\n      declare: boolean,\n    ): N.FlowOpaqueType {\n      this.expectContextual(tt._type);\n      node.id = this.flowParseRestrictedIdentifier(\n        /* liberal */ true,\n        /* declaration */ true,\n      );\n      this.scope.declareName(node.id.name, BIND_LEXICAL, node.id.start);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      } else {\n        node.typeParameters = null;\n      }\n\n      // Parse the supertype\n      node.supertype = null;\n      if (this.match(tt.colon)) {\n        node.supertype = this.flowParseTypeInitialiser(tt.colon);\n      }\n\n      node.impltype = null;\n      if (!declare) {\n        node.impltype = this.flowParseTypeInitialiser(tt.eq);\n      }\n      this.semicolon();\n\n      return this.finishNode(node, \"OpaqueType\");\n    }\n\n    // Type annotations\n\n    flowParseTypeParameter(requireDefault?: boolean = false): N.TypeParameter {\n      const nodeStart = this.state.start;\n\n      const node = this.startNode();\n\n      const variance = this.flowParseVariance();\n\n      const ident = this.flowParseTypeAnnotatableIdentifier();\n      node.name = ident.name;\n      node.variance = variance;\n      node.bound = ident.typeAnnotation;\n\n      if (this.match(tt.eq)) {\n        this.eat(tt.eq);\n        node.default = this.flowParseType();\n      } else {\n        if (requireDefault) {\n          this.raise(nodeStart, FlowErrors.MissingTypeParamDefault);\n        }\n      }\n\n      return this.finishNode(node, \"TypeParameter\");\n    }\n\n    flowParseTypeParameterDeclaration(): N.TypeParameterDeclaration {\n      const oldInType = this.state.inType;\n      const node = this.startNode();\n      node.params = [];\n\n      this.state.inType = true;\n\n      // istanbul ignore else: this condition is already checked at all call sites\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      let defaultRequired = false;\n\n      do {\n        const typeParameter = this.flowParseTypeParameter(defaultRequired);\n\n        node.params.push(typeParameter);\n\n        if (typeParameter.default) {\n          defaultRequired = true;\n        }\n\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      } while (!this.match(tt.gt));\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterDeclaration\");\n    }\n\n    flowParseTypeParameterInstantiation(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n      this.state.noAnonFunctionType = false;\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseType());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseTypeParameterInstantiationCallOrNew(): N.TypeParameterInstantiation {\n      const node = this.startNode();\n      const oldInType = this.state.inType;\n      node.params = [];\n\n      this.state.inType = true;\n\n      this.expect(tt.lt);\n      while (!this.match(tt.gt)) {\n        node.params.push(this.flowParseTypeOrImplicitInstantiation());\n        if (!this.match(tt.gt)) {\n          this.expect(tt.comma);\n        }\n      }\n      this.expect(tt.gt);\n\n      this.state.inType = oldInType;\n\n      return this.finishNode(node, \"TypeParameterInstantiation\");\n    }\n\n    flowParseInterfaceType(): N.FlowInterfaceType {\n      const node = this.startNode();\n      this.expectContextual(tt._interface);\n\n      node.extends = [];\n      if (this.eat(tt._extends)) {\n        do {\n          node.extends.push(this.flowParseInterfaceExtends());\n        } while (this.eat(tt.comma));\n      }\n\n      node.body = this.flowParseObjectType({\n        allowStatic: false,\n        allowExact: false,\n        allowSpread: false,\n        allowProto: false,\n        allowInexact: false,\n      });\n\n      return this.finishNode(node, \"InterfaceTypeAnnotation\");\n    }\n\n    flowParseObjectPropertyKey(): N.Expression {\n      return this.match(tt.num) || this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(true);\n    }\n\n    flowParseObjectTypeIndexer(\n      node: N.FlowObjectTypeIndexer,\n      isStatic: boolean,\n      variance: ?N.FlowVariance,\n    ): N.FlowObjectTypeIndexer {\n      node.static = isStatic;\n\n      // Note: bracketL has already been consumed\n      if (this.lookahead().type === tt.colon) {\n        node.id = this.flowParseObjectPropertyKey();\n        node.key = this.flowParseTypeInitialiser();\n      } else {\n        node.id = null;\n        node.key = this.flowParseType();\n      }\n      this.expect(tt.bracketR);\n      node.value = this.flowParseTypeInitialiser();\n      node.variance = variance;\n\n      return this.finishNode(node, \"ObjectTypeIndexer\");\n    }\n\n    flowParseObjectTypeInternalSlot(\n      node: N.FlowObjectTypeInternalSlot,\n      isStatic: boolean,\n    ): N.FlowObjectTypeInternalSlot {\n      node.static = isStatic;\n      // Note: both bracketL have already been consumed\n      node.id = this.flowParseObjectPropertyKey();\n      this.expect(tt.bracketR);\n      this.expect(tt.bracketR);\n      if (this.match(tt.lt) || this.match(tt.parenL)) {\n        node.method = true;\n        node.optional = false;\n        node.value = this.flowParseObjectTypeMethodish(\n          this.startNodeAt(node.start, node.loc.start),\n        );\n      } else {\n        node.method = false;\n        if (this.eat(tt.question)) {\n          node.optional = true;\n        }\n        node.value = this.flowParseTypeInitialiser();\n      }\n      return this.finishNode(node, \"ObjectTypeInternalSlot\");\n    }\n\n    flowParseObjectTypeMethodish(\n      node: N.FlowFunctionTypeAnnotation,\n    ): N.FlowFunctionTypeAnnotation {\n      node.params = [];\n      node.rest = null;\n      node.typeParameters = null;\n      node.this = null;\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      this.expect(tt.parenL);\n      if (this.match(tt._this)) {\n        node.this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        node.this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        node.params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n\n      if (this.eat(tt.ellipsis)) {\n        node.rest = this.flowParseFunctionTypeParam(false);\n      }\n      this.expect(tt.parenR);\n      node.returnType = this.flowParseTypeInitialiser();\n\n      return this.finishNode(node, \"FunctionTypeAnnotation\");\n    }\n\n    flowParseObjectTypeCallProperty(\n      node: N.FlowObjectTypeCallProperty,\n      isStatic: boolean,\n    ): N.FlowObjectTypeCallProperty {\n      const valueNode = this.startNode();\n      node.static = isStatic;\n      node.value = this.flowParseObjectTypeMethodish(valueNode);\n      return this.finishNode(node, \"ObjectTypeCallProperty\");\n    }\n\n    flowParseObjectType({\n      allowStatic,\n      allowExact,\n      allowSpread,\n      allowProto,\n      allowInexact,\n    }: {\n      allowStatic: boolean,\n      allowExact: boolean,\n      allowSpread: boolean,\n      allowProto: boolean,\n      allowInexact: boolean,\n    }): N.FlowObjectTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n\n      const nodeStart = this.startNode();\n\n      nodeStart.callProperties = [];\n      nodeStart.properties = [];\n      nodeStart.indexers = [];\n      nodeStart.internalSlots = [];\n\n      let endDelim;\n      let exact;\n      let inexact = false;\n      if (allowExact && this.match(tt.braceBarL)) {\n        this.expect(tt.braceBarL);\n        endDelim = tt.braceBarR;\n        exact = true;\n      } else {\n        this.expect(tt.braceL);\n        endDelim = tt.braceR;\n        exact = false;\n      }\n\n      nodeStart.exact = exact;\n\n      while (!this.match(endDelim)) {\n        let isStatic = false;\n        let protoStart: ?number = null;\n        let inexactStart: ?number = null;\n        const node = this.startNode();\n\n        if (allowProto && this.isContextual(tt._proto)) {\n          const lookahead = this.lookahead();\n\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            protoStart = this.state.start;\n            allowStatic = false;\n          }\n        }\n\n        if (allowStatic && this.isContextual(tt._static)) {\n          const lookahead = this.lookahead();\n\n          // static is a valid identifier name\n          if (lookahead.type !== tt.colon && lookahead.type !== tt.question) {\n            this.next();\n            isStatic = true;\n          }\n        }\n\n        const variance = this.flowParseVariance();\n\n        if (this.eat(tt.bracketL)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (this.eat(tt.bracketL)) {\n            if (variance) {\n              this.unexpected(variance.start);\n            }\n            nodeStart.internalSlots.push(\n              this.flowParseObjectTypeInternalSlot(node, isStatic),\n            );\n          } else {\n            nodeStart.indexers.push(\n              this.flowParseObjectTypeIndexer(node, isStatic, variance),\n            );\n          }\n        } else if (this.match(tt.parenL) || this.match(tt.lt)) {\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n          nodeStart.callProperties.push(\n            this.flowParseObjectTypeCallProperty(node, isStatic),\n          );\n        } else {\n          let kind = \"init\";\n\n          if (this.isContextual(tt._get) || this.isContextual(tt._set)) {\n            const lookahead = this.lookahead();\n            if (tokenIsLiteralPropertyName(lookahead.type)) {\n              kind = this.state.value;\n              this.next();\n            }\n          }\n\n          const propOrInexact = this.flowParseObjectTypeProperty(\n            node,\n            isStatic,\n            protoStart,\n            variance,\n            kind,\n            allowSpread,\n            allowInexact ?? !exact,\n          );\n\n          if (propOrInexact === null) {\n            inexact = true;\n            inexactStart = this.state.lastTokStart;\n          } else {\n            nodeStart.properties.push(propOrInexact);\n          }\n        }\n\n        this.flowObjectTypeSemicolon();\n\n        if (\n          inexactStart &&\n          !this.match(tt.braceR) &&\n          !this.match(tt.braceBarR)\n        ) {\n          this.raise(\n            inexactStart,\n            FlowErrors.UnexpectedExplicitInexactInObject,\n          );\n        }\n      }\n\n      this.expect(endDelim);\n\n      /* The inexact flag should only be added on ObjectTypeAnnotations that\n       * are not the body of an interface, declare interface, or declare class.\n       * Since spreads are only allowed in object types, checking that is\n       * sufficient here.\n       */\n      if (allowSpread) {\n        nodeStart.inexact = inexact;\n      }\n\n      const out = this.finishNode(nodeStart, \"ObjectTypeAnnotation\");\n\n      this.state.inType = oldInType;\n\n      return out;\n    }\n\n    flowParseObjectTypeProperty(\n      node: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n      isStatic: boolean,\n      protoStart: ?number,\n      variance: ?N.FlowVariance,\n      kind: string,\n      allowSpread: boolean,\n      allowInexact: boolean,\n    ): (N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty) | null {\n      if (this.eat(tt.ellipsis)) {\n        const isInexactToken =\n          this.match(tt.comma) ||\n          this.match(tt.semi) ||\n          this.match(tt.braceR) ||\n          this.match(tt.braceBarR);\n\n        if (isInexactToken) {\n          if (!allowSpread) {\n            this.raise(\n              this.state.lastTokStart,\n              FlowErrors.InexactInsideNonObject,\n            );\n          } else if (!allowInexact) {\n            this.raise(this.state.lastTokStart, FlowErrors.InexactInsideExact);\n          }\n          if (variance) {\n            this.raise(variance.start, FlowErrors.InexactVariance);\n          }\n\n          return null;\n        }\n\n        if (!allowSpread) {\n          this.raise(this.state.lastTokStart, FlowErrors.UnexpectedSpreadType);\n        }\n        if (protoStart != null) {\n          this.unexpected(protoStart);\n        }\n        if (variance) {\n          this.raise(variance.start, FlowErrors.SpreadVariance);\n        }\n\n        node.argument = this.flowParseType();\n        return this.finishNode(node, \"ObjectTypeSpreadProperty\");\n      } else {\n        node.key = this.flowParseObjectPropertyKey();\n        node.static = isStatic;\n        node.proto = protoStart != null;\n        node.kind = kind;\n\n        let optional = false;\n        if (this.match(tt.lt) || this.match(tt.parenL)) {\n          // This is a method property\n          node.method = true;\n\n          if (protoStart != null) {\n            this.unexpected(protoStart);\n          }\n          if (variance) {\n            this.unexpected(variance.start);\n          }\n\n          node.value = this.flowParseObjectTypeMethodish(\n            this.startNodeAt(node.start, node.loc.start),\n          );\n          if (kind === \"get\" || kind === \"set\") {\n            this.flowCheckGetterSetterParams(node);\n          }\n          /** Declared classes/interfaces do not allow spread */\n          if (\n            !allowSpread &&\n            node.key.name === \"constructor\" &&\n            node.value.this\n          ) {\n            this.raise(\n              node.value.this.start,\n              FlowErrors.ThisParamBannedInConstructor,\n            );\n          }\n        } else {\n          if (kind !== \"init\") this.unexpected();\n\n          node.method = false;\n\n          if (this.eat(tt.question)) {\n            optional = true;\n          }\n          node.value = this.flowParseTypeInitialiser();\n          node.variance = variance;\n        }\n\n        node.optional = optional;\n\n        return this.finishNode(node, \"ObjectTypeProperty\");\n      }\n    }\n\n    // This is similar to checkGetterSetterParams, but as\n    // @babel/parser uses non estree properties we cannot reuse it here\n    flowCheckGetterSetterParams(\n      property: N.FlowObjectTypeProperty | N.FlowObjectTypeSpreadProperty,\n    ): void {\n      const paramCount = property.kind === \"get\" ? 0 : 1;\n      const start = property.start;\n      const length =\n        property.value.params.length + (property.value.rest ? 1 : 0);\n\n      if (property.value.this) {\n        this.raise(\n          property.value.this.start,\n          property.kind === \"get\"\n            ? FlowErrors.GetterMayNotHaveThisParam\n            : FlowErrors.SetterMayNotHaveThisParam,\n        );\n      }\n\n      if (length !== paramCount) {\n        if (property.kind === \"get\") {\n          this.raise(start, Errors.BadGetterArity);\n        } else {\n          this.raise(start, Errors.BadSetterArity);\n        }\n      }\n\n      if (property.kind === \"set\" && property.value.rest) {\n        this.raise(start, Errors.BadSetterRestParameter);\n      }\n    }\n\n    flowObjectTypeSemicolon(): void {\n      if (\n        !this.eat(tt.semi) &&\n        !this.eat(tt.comma) &&\n        !this.match(tt.braceR) &&\n        !this.match(tt.braceBarR)\n      ) {\n        this.unexpected();\n      }\n    }\n\n    flowParseQualifiedTypeIdentifier(\n      startPos?: number,\n      startLoc?: Position,\n      id?: N.Identifier,\n    ): N.FlowQualifiedTypeIdentifier {\n      startPos = startPos || this.state.start;\n      startLoc = startLoc || this.state.startLoc;\n      let node = id || this.flowParseRestrictedIdentifier(true);\n\n      while (this.eat(tt.dot)) {\n        const node2 = this.startNodeAt(startPos, startLoc);\n        node2.qualification = node;\n        node2.id = this.flowParseRestrictedIdentifier(true);\n        node = this.finishNode(node2, \"QualifiedTypeIdentifier\");\n      }\n\n      return node;\n    }\n\n    flowParseGenericType(\n      startPos: number,\n      startLoc: Position,\n      id: N.Identifier,\n    ): N.FlowGenericTypeAnnotation {\n      const node = this.startNodeAt(startPos, startLoc);\n\n      node.typeParameters = null;\n      node.id = this.flowParseQualifiedTypeIdentifier(startPos, startLoc, id);\n\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterInstantiation();\n      }\n\n      return this.finishNode(node, \"GenericTypeAnnotation\");\n    }\n\n    flowParseTypeofType(): N.FlowTypeofTypeAnnotation {\n      const node = this.startNode();\n      this.expect(tt._typeof);\n      node.argument = this.flowParsePrimaryType();\n      return this.finishNode(node, \"TypeofTypeAnnotation\");\n    }\n\n    flowParseTupleType(): N.FlowTupleTypeAnnotation {\n      const node = this.startNode();\n      node.types = [];\n      this.expect(tt.bracketL);\n      // We allow trailing commas\n      while (this.state.pos < this.length && !this.match(tt.bracketR)) {\n        node.types.push(this.flowParseType());\n        if (this.match(tt.bracketR)) break;\n        this.expect(tt.comma);\n      }\n      this.expect(tt.bracketR);\n      return this.finishNode(node, \"TupleTypeAnnotation\");\n    }\n\n    flowParseFunctionTypeParam(first: boolean): N.FlowFunctionTypeParam {\n      let name = null;\n      let optional = false;\n      let typeAnnotation = null;\n      const node = this.startNode();\n      const lh = this.lookahead();\n      const isThis = this.state.type === tt._this;\n\n      if (lh.type === tt.colon || lh.type === tt.question) {\n        if (isThis && !first) {\n          this.raise(node.start, FlowErrors.ThisParamMustBeFirst);\n        }\n        name = this.parseIdentifier(isThis);\n        if (this.eat(tt.question)) {\n          optional = true;\n          if (isThis) {\n            this.raise(node.start, FlowErrors.ThisParamMayNotBeOptional);\n          }\n        }\n        typeAnnotation = this.flowParseTypeInitialiser();\n      } else {\n        typeAnnotation = this.flowParseType();\n      }\n      node.name = name;\n      node.optional = optional;\n      node.typeAnnotation = typeAnnotation;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    reinterpretTypeAsFunctionTypeParam(\n      type: N.FlowType,\n    ): N.FlowFunctionTypeParam {\n      const node = this.startNodeAt(type.start, type.loc.start);\n      node.name = null;\n      node.optional = false;\n      node.typeAnnotation = type;\n      return this.finishNode(node, \"FunctionTypeParam\");\n    }\n\n    flowParseFunctionTypeParams(params: N.FlowFunctionTypeParam[] = []): {\n      params: N.FlowFunctionTypeParam[],\n      rest: ?N.FlowFunctionTypeParam,\n      _this: ?N.FlowFunctionTypeParam,\n    } {\n      let rest: ?N.FlowFunctionTypeParam = null;\n      let _this: ?N.FlowFunctionTypeParam = null;\n      if (this.match(tt._this)) {\n        _this = this.flowParseFunctionTypeParam(/* first */ true);\n        // match Flow parser behavior\n        _this.name = null;\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      while (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n        params.push(this.flowParseFunctionTypeParam(false));\n        if (!this.match(tt.parenR)) {\n          this.expect(tt.comma);\n        }\n      }\n      if (this.eat(tt.ellipsis)) {\n        rest = this.flowParseFunctionTypeParam(false);\n      }\n      return { params, rest, _this };\n    }\n\n    flowIdentToTypeAnnotation(\n      startPos: number,\n      startLoc: Position,\n      node: N.FlowTypeAnnotation,\n      id: N.Identifier,\n    ): N.FlowTypeAnnotation {\n      switch (id.name) {\n        case \"any\":\n          return this.finishNode(node, \"AnyTypeAnnotation\");\n\n        case \"bool\":\n        case \"boolean\":\n          return this.finishNode(node, \"BooleanTypeAnnotation\");\n\n        case \"mixed\":\n          return this.finishNode(node, \"MixedTypeAnnotation\");\n\n        case \"empty\":\n          return this.finishNode(node, \"EmptyTypeAnnotation\");\n\n        case \"number\":\n          return this.finishNode(node, \"NumberTypeAnnotation\");\n\n        case \"string\":\n          return this.finishNode(node, \"StringTypeAnnotation\");\n\n        case \"symbol\":\n          return this.finishNode(node, \"SymbolTypeAnnotation\");\n\n        default:\n          this.checkNotUnderscore(id.name);\n          return this.flowParseGenericType(startPos, startLoc, id);\n      }\n    }\n\n    // The parsing of types roughly parallels the parsing of expressions, and\n    // primary types are kind of like primary expressions...they're the\n    // primitives with which other types are constructed.\n    flowParsePrimaryType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const node = this.startNode();\n      let tmp;\n      let type;\n      let isGroupedType = false;\n      const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n\n      switch (this.state.type) {\n        case tt.braceL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: false,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: true,\n          });\n\n        case tt.braceBarL:\n          return this.flowParseObjectType({\n            allowStatic: false,\n            allowExact: true,\n            allowSpread: true,\n            allowProto: false,\n            allowInexact: false,\n          });\n\n        case tt.bracketL:\n          this.state.noAnonFunctionType = false;\n          type = this.flowParseTupleType();\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n          return type;\n\n        case tt.lt:\n          node.typeParameters = this.flowParseTypeParameterDeclaration();\n          this.expect(tt.parenL);\n          tmp = this.flowParseFunctionTypeParams();\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.parenL:\n          this.next();\n\n          // Check to see if this is actually a grouped type\n          if (!this.match(tt.parenR) && !this.match(tt.ellipsis)) {\n            if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n              const token = this.lookahead().type;\n              isGroupedType = token !== tt.question && token !== tt.colon;\n            } else {\n              isGroupedType = true;\n            }\n          }\n\n          if (isGroupedType) {\n            this.state.noAnonFunctionType = false;\n            type = this.flowParseType();\n            this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n            // A `,` or a `) =>` means this is an anonymous function type\n            if (\n              this.state.noAnonFunctionType ||\n              !(\n                this.match(tt.comma) ||\n                (this.match(tt.parenR) && this.lookahead().type === tt.arrow)\n              )\n            ) {\n              this.expect(tt.parenR);\n              return type;\n            } else {\n              // Eat a comma if there is one\n              this.eat(tt.comma);\n            }\n          }\n\n          if (type) {\n            tmp = this.flowParseFunctionTypeParams([\n              this.reinterpretTypeAsFunctionTypeParam(type),\n            ]);\n          } else {\n            tmp = this.flowParseFunctionTypeParams();\n          }\n\n          node.params = tmp.params;\n          node.rest = tmp.rest;\n          node.this = tmp._this;\n\n          this.expect(tt.parenR);\n\n          this.expect(tt.arrow);\n\n          node.returnType = this.flowParseType();\n\n          node.typeParameters = null;\n\n          return this.finishNode(node, \"FunctionTypeAnnotation\");\n\n        case tt.string:\n          return this.parseLiteral<N.StringLiteralTypeAnnotation>(\n            this.state.value,\n            \"StringLiteralTypeAnnotation\",\n          );\n\n        case tt._true:\n        case tt._false:\n          node.value = this.match(tt._true);\n          this.next();\n          return this.finishNode<N.BooleanLiteralTypeAnnotation>(\n            node,\n            \"BooleanLiteralTypeAnnotation\",\n          );\n\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            this.next();\n            if (this.match(tt.num)) {\n              return this.parseLiteralAtNode<N.NumberLiteralTypeAnnotation>(\n                -this.state.value,\n                \"NumberLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            if (this.match(tt.bigint)) {\n              return this.parseLiteralAtNode<N.BigIntLiteralTypeAnnotation>(\n                -this.state.value,\n                \"BigIntLiteralTypeAnnotation\",\n                node,\n              );\n            }\n\n            throw this.raise(\n              this.state.start,\n              FlowErrors.UnexpectedSubtractionOperand,\n            );\n          }\n\n          throw this.unexpected();\n        case tt.num:\n          return this.parseLiteral(\n            this.state.value,\n            \"NumberLiteralTypeAnnotation\",\n          );\n\n        case tt.bigint:\n          return this.parseLiteral(\n            this.state.value,\n            \"BigIntLiteralTypeAnnotation\",\n          );\n\n        case tt._void:\n          this.next();\n          return this.finishNode(node, \"VoidTypeAnnotation\");\n\n        case tt._null:\n          this.next();\n          return this.finishNode(node, \"NullLiteralTypeAnnotation\");\n\n        case tt._this:\n          this.next();\n          return this.finishNode(node, \"ThisTypeAnnotation\");\n\n        case tt.star:\n          this.next();\n          return this.finishNode(node, \"ExistsTypeAnnotation\");\n\n        case tt._typeof:\n          return this.flowParseTypeofType();\n\n        default:\n          if (tokenIsKeyword(this.state.type)) {\n            const label = tokenLabelName(this.state.type);\n            this.next();\n            return super.createIdentifier(node, label);\n          } else if (tokenIsIdentifier(this.state.type)) {\n            if (this.isContextual(tt._interface)) {\n              return this.flowParseInterfaceType();\n            }\n\n            return this.flowIdentToTypeAnnotation(\n              startPos,\n              startLoc,\n              node,\n              this.parseIdentifier(),\n            );\n          }\n      }\n\n      throw this.unexpected();\n    }\n\n    flowParsePostfixType(): N.FlowTypeAnnotation {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let type = this.flowParsePrimaryType();\n      let seenOptionalIndexedAccess = false;\n      while (\n        (this.match(tt.bracketL) || this.match(tt.questionDot)) &&\n        !this.canInsertSemicolon()\n      ) {\n        const node = this.startNodeAt(startPos, startLoc);\n        const optional = this.eat(tt.questionDot);\n        seenOptionalIndexedAccess = seenOptionalIndexedAccess || optional;\n        this.expect(tt.bracketL);\n        if (!optional && this.match(tt.bracketR)) {\n          node.elementType = type;\n          this.next(); // eat `]`\n          type = this.finishNode(node, \"ArrayTypeAnnotation\");\n        } else {\n          node.objectType = type;\n          node.indexType = this.flowParseType();\n          this.expect(tt.bracketR);\n          if (seenOptionalIndexedAccess) {\n            node.optional = optional;\n            type = this.finishNode<N.FlowOptionalIndexedAccessType>(\n              node,\n              \"OptionalIndexedAccessType\",\n            );\n          } else {\n            type = this.finishNode<N.FlowIndexedAccessType>(\n              node,\n              \"IndexedAccessType\",\n            );\n          }\n        }\n      }\n      return type;\n    }\n\n    flowParsePrefixType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      if (this.eat(tt.question)) {\n        node.typeAnnotation = this.flowParsePrefixType();\n        return this.finishNode(node, \"NullableTypeAnnotation\");\n      } else {\n        return this.flowParsePostfixType();\n      }\n    }\n\n    flowParseAnonFunctionWithoutParens(): N.FlowTypeAnnotation {\n      const param = this.flowParsePrefixType();\n      if (!this.state.noAnonFunctionType && this.eat(tt.arrow)) {\n        // TODO: This should be a type error. Passing in a SourceLocation, and it expects a Position.\n        const node = this.startNodeAt(param.start, param.loc.start);\n        node.params = [this.reinterpretTypeAsFunctionTypeParam(param)];\n        node.rest = null;\n        node.this = null;\n        node.returnType = this.flowParseType();\n        node.typeParameters = null;\n        return this.finishNode(node, \"FunctionTypeAnnotation\");\n      }\n      return param;\n    }\n\n    flowParseIntersectionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseAND);\n      const type = this.flowParseAnonFunctionWithoutParens();\n      node.types = [type];\n      while (this.eat(tt.bitwiseAND)) {\n        node.types.push(this.flowParseAnonFunctionWithoutParens());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"IntersectionTypeAnnotation\");\n    }\n\n    flowParseUnionType(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      this.eat(tt.bitwiseOR);\n      const type = this.flowParseIntersectionType();\n      node.types = [type];\n      while (this.eat(tt.bitwiseOR)) {\n        node.types.push(this.flowParseIntersectionType());\n      }\n      return node.types.length === 1\n        ? type\n        : this.finishNode(node, \"UnionTypeAnnotation\");\n    }\n\n    flowParseType(): N.FlowTypeAnnotation {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      const type = this.flowParseUnionType();\n      this.state.inType = oldInType;\n      return type;\n    }\n\n    flowParseTypeOrImplicitInstantiation(): N.FlowTypeAnnotation {\n      if (this.state.type === tt.name && this.state.value === \"_\") {\n        const startPos = this.state.start;\n        const startLoc = this.state.startLoc;\n        const node = this.parseIdentifier();\n        return this.flowParseGenericType(startPos, startLoc, node);\n      } else {\n        return this.flowParseType();\n      }\n    }\n\n    flowParseTypeAnnotation(): N.FlowTypeAnnotation {\n      const node = this.startNode();\n      node.typeAnnotation = this.flowParseTypeInitialiser();\n      return this.finishNode(node, \"TypeAnnotation\");\n    }\n\n    flowParseTypeAnnotatableIdentifier(\n      allowPrimitiveOverride?: boolean,\n    ): N.Identifier {\n      const ident = allowPrimitiveOverride\n        ? this.parseIdentifier()\n        : this.flowParseRestrictedIdentifier();\n      if (this.match(tt.colon)) {\n        ident.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(ident);\n      }\n      return ident;\n    }\n\n    typeCastToParameter(node: N.Node): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    flowParseVariance(): ?N.FlowVariance {\n      let variance = null;\n      if (this.match(tt.plusMin)) {\n        variance = this.startNode();\n        if (this.state.value === \"+\") {\n          variance.kind = \"plus\";\n        } else {\n          variance.kind = \"minus\";\n        }\n        this.next();\n        this.finishNode(variance, \"Variance\");\n      }\n      return variance;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseFunctionBody(\n      node: N.Function,\n      allowExpressionBody: ?boolean,\n      isMethod?: boolean = false,\n    ): void {\n      if (allowExpressionBody) {\n        return this.forwardNoArrowParamsConversionAt(node, () =>\n          super.parseFunctionBody(node, true, isMethod),\n        );\n      }\n\n      return super.parseFunctionBody(node, false, isMethod);\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        const typeNode = this.startNode();\n\n        [\n          // $FlowFixMe (destructuring not supported yet)\n          typeNode.typeAnnotation,\n          // $FlowFixMe (destructuring not supported yet)\n          node.predicate,\n        ] = this.flowParseTypeAndPredicateInitialiser();\n\n        node.returnType = typeNode.typeAnnotation\n          ? this.finishNode(typeNode, \"TypeAnnotation\")\n          : null;\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    // interfaces and enums\n    parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n      // strict mode handling of `interface` since it's a reserved word\n      if (this.state.strict && this.isContextual(tt._interface)) {\n        const lookahead = this.lookahead();\n        if (tokenIsKeywordOrIdentifier(lookahead.type)) {\n          const node = this.startNode();\n          this.next();\n          return this.flowParseInterface(node);\n        }\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      const stmt = super.parseStatement(context, topLevel);\n      // We will parse a flow pragma in any comment before the first statement.\n      if (this.flowPragma === undefined && !this.isValidDirective(stmt)) {\n        this.flowPragma = null;\n      }\n      return stmt;\n    }\n\n    // declares, interfaces and type aliases\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.ExpressionStatement {\n      if (expr.type === \"Identifier\") {\n        if (expr.name === \"declare\") {\n          if (\n            this.match(tt._class) ||\n            tokenIsIdentifier(this.state.type) ||\n            this.match(tt._function) ||\n            this.match(tt._var) ||\n            this.match(tt._export)\n          ) {\n            return this.flowParseDeclare(node);\n          }\n        } else if (tokenIsIdentifier(this.state.type)) {\n          if (expr.name === \"interface\") {\n            return this.flowParseInterface(node);\n          } else if (expr.name === \"type\") {\n            return this.flowParseTypeAlias(node);\n          } else if (expr.name === \"opaque\") {\n            return this.flowParseOpaqueType(node, false);\n          }\n        }\n      }\n\n      return super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    shouldParseExportDeclaration(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return !this.state.containsEsc;\n      }\n      return super.shouldParseExportDeclaration();\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      const { type } = this.state;\n      if (\n        tokenIsFlowInterfaceOrTypeOrOpaque(type) ||\n        (this.shouldParseEnums() && type === tt._enum)\n      ) {\n        return this.state.containsEsc;\n      }\n\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        const node = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(node);\n      }\n      return super.parseExportDefaultExpression();\n    }\n\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      if (!this.match(tt.question)) return expr;\n\n      if (this.state.maybeInArrowParameters) {\n        const nextCh = this.lookaheadCharCode();\n        // These tokens cannot start an expression, so if one of them follows\n        // ? then we are probably in an arrow function parameters list and we\n        // don't parse the conditional expression.\n        if (\n          nextCh === charCodes.comma || // (a?, b) => c\n          nextCh === charCodes.equalsTo || // (a? = b) => c\n          nextCh === charCodes.colon || // (a?: b) => c\n          nextCh === charCodes.rightParenthesis // (a?) => c\n        ) {\n          /*:: invariant(refExpressionErrors != null) */\n          this.setOptionalParametersError(refExpressionErrors);\n          return expr;\n        }\n      }\n\n      this.expect(tt.question);\n      const state = this.state.clone();\n      const originalNoArrowAt = this.state.noArrowAt;\n      const node = this.startNodeAt(startPos, startLoc);\n      let { consequent, failed } = this.tryParseConditionalConsequent();\n      let [valid, invalid] = this.getArrowLikeExpressions(consequent);\n\n      if (failed || invalid.length > 0) {\n        const noArrowAt = [...originalNoArrowAt];\n\n        if (invalid.length > 0) {\n          this.state = state;\n          this.state.noArrowAt = noArrowAt;\n\n          for (let i = 0; i < invalid.length; i++) {\n            noArrowAt.push(invalid[i].start);\n          }\n\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n          [valid, invalid] = this.getArrowLikeExpressions(consequent);\n        }\n\n        if (failed && valid.length > 1) {\n          // if there are two or more possible correct ways of parsing, throw an\n          // error.\n          // e.g.   Source: a ? (b): c => (d): e => f\n          //      Result 1: a ? b : (c => ((d): e => f))\n          //      Result 2: a ? ((b): c => d) : (e => f)\n          this.raise(state.start, FlowErrors.AmbiguousConditionalArrow);\n        }\n\n        if (failed && valid.length === 1) {\n          this.state = state;\n          noArrowAt.push(valid[0].start);\n          this.state.noArrowAt = noArrowAt;\n          ({ consequent, failed } = this.tryParseConditionalConsequent());\n        }\n      }\n\n      this.getArrowLikeExpressions(consequent, true);\n\n      this.state.noArrowAt = originalNoArrowAt;\n      this.expect(tt.colon);\n\n      node.test = expr;\n      node.consequent = consequent;\n      node.alternate = this.forwardNoArrowParamsConversionAt(node, () =>\n        this.parseMaybeAssign(undefined, undefined),\n      );\n\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n\n    tryParseConditionalConsequent(): {\n      consequent: N.Expression,\n      failed: boolean,\n    } {\n      this.state.noArrowParamsConversionAt.push(this.state.start);\n\n      const consequent = this.parseMaybeAssignAllowIn();\n      const failed = !this.match(tt.colon);\n\n      this.state.noArrowParamsConversionAt.pop();\n\n      return { consequent, failed };\n    }\n\n    // Given an expression, walks through out its arrow functions whose body is\n    // an expression and through out conditional expressions. It returns every\n    // function which has been parsed with a return type but could have been\n    // parenthesized expressions.\n    // These functions are separated into two arrays: one containing the ones\n    // whose parameters can be converted to assignable lists, one containing the\n    // others.\n    getArrowLikeExpressions(\n      node: N.Expression,\n      disallowInvalid?: boolean,\n    ): [N.ArrowFunctionExpression[], N.ArrowFunctionExpression[]] {\n      const stack = [node];\n      const arrows: N.ArrowFunctionExpression[] = [];\n\n      while (stack.length !== 0) {\n        const node = stack.pop();\n        if (node.type === \"ArrowFunctionExpression\") {\n          if (node.typeParameters || !node.returnType) {\n            // This is an arrow expression without ambiguity, so check its parameters\n            this.finishArrowValidation(node);\n          } else {\n            arrows.push(node);\n          }\n          stack.push(node.body);\n        } else if (node.type === \"ConditionalExpression\") {\n          stack.push(node.consequent);\n          stack.push(node.alternate);\n        }\n      }\n\n      if (disallowInvalid) {\n        arrows.forEach(node => this.finishArrowValidation(node));\n        return [arrows, []];\n      }\n\n      return partition(arrows, node =>\n        node.params.every(param => this.isAssignable(param, true)),\n      );\n    }\n\n    finishArrowValidation(node: N.ArrowFunctionExpression) {\n      this.toAssignableList(\n        // node.params is Expression[] instead of $ReadOnlyArray<Pattern> because it\n        // has not been converted yet.\n        ((node.params: any): N.Expression[]),\n        node.extra?.trailingComma,\n        /* isLHS */ false,\n      );\n      // Enter scope, as checkParams defines bindings\n      this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n      // Use super's method to force the parameters to be checked\n      super.checkParams(node, false, true);\n      this.scope.exit();\n    }\n\n    forwardNoArrowParamsConversionAt<T>(node: N.Node, parse: () => T): T {\n      let result: T;\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        this.state.noArrowParamsConversionAt.push(this.state.start);\n        result = parse();\n        this.state.noArrowParamsConversionAt.pop();\n      } else {\n        result = parse();\n      }\n\n      return result;\n    }\n\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode = this.startNodeAt(startPos, startLoc);\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.flowParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    assertModuleNodeAllowed(node: N.Node) {\n      if (\n        (node.type === \"ImportDeclaration\" &&\n          (node.importKind === \"type\" || node.importKind === \"typeof\")) ||\n        (node.type === \"ExportNamedDeclaration\" &&\n          node.exportKind === \"type\") ||\n        (node.type === \"ExportAllDeclaration\" && node.exportKind === \"type\")\n      ) {\n        // Allow Flowtype imports and exports in all conditions because\n        // Flow itself does not care about 'sourceType'.\n        return;\n      }\n\n      super.assertModuleNodeAllowed(node);\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      const decl = super.parseExport(node);\n      if (\n        decl.type === \"ExportNamedDeclaration\" ||\n        decl.type === \"ExportAllDeclaration\"\n      ) {\n        decl.exportKind = decl.exportKind || \"value\";\n      }\n      return decl;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      if (this.isContextual(tt._type)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n\n        if (this.match(tt.braceL)) {\n          // export type { foo, bar };\n          node.specifiers = this.parseExportSpecifiers(\n            /* isInTypeExport */ true,\n          );\n          this.parseExportFrom(node);\n          return null;\n        } else {\n          // export type Foo = Bar;\n          return this.flowParseTypeAlias(declarationNode);\n        }\n      } else if (this.isContextual(tt._opaque)) {\n        node.exportKind = \"type\";\n\n        const declarationNode = this.startNode();\n        this.next();\n        // export opaque type Foo = Bar;\n        return this.flowParseOpaqueType(declarationNode, false);\n      } else if (this.isContextual(tt._interface)) {\n        node.exportKind = \"type\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseInterface(declarationNode);\n      } else if (this.shouldParseEnums() && this.isContextual(tt._enum)) {\n        node.exportKind = \"value\";\n        const declarationNode = this.startNode();\n        this.next();\n        return this.flowParseEnumDeclaration(declarationNode);\n      } else {\n        return super.parseExportDeclaration(node);\n      }\n    }\n\n    eatExportStar(node: N.Node): boolean {\n      if (super.eatExportStar(...arguments)) return true;\n\n      if (this.isContextual(tt._type) && this.lookahead().type === tt.star) {\n        node.exportKind = \"type\";\n        this.next();\n        this.next();\n        return true;\n      }\n\n      return false;\n    }\n\n    maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n      const pos = this.state.start;\n      const hasNamespace = super.maybeParseExportNamespaceSpecifier(node);\n      if (hasNamespace && node.exportKind === \"type\") {\n        this.unexpected(pos);\n      }\n      return hasNamespace;\n    }\n\n    parseClassId(node: N.Class, isStatement: boolean, optionalId: ?boolean) {\n      super.parseClassId(node, isStatement, optionalId);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const pos = this.state.start;\n      if (this.isContextual(tt._declare)) {\n        if (this.parseClassMemberFromModifier(classBody, member)) {\n          // 'declare' is a class element name\n          return;\n        }\n\n        member.declare = true;\n      }\n\n      super.parseClassMember(classBody, member, state);\n\n      if (member.declare) {\n        if (\n          member.type !== \"ClassProperty\" &&\n          member.type !== \"ClassPrivateProperty\" &&\n          member.type !== \"PropertyDefinition\" // Used by estree plugin\n        ) {\n          this.raise(pos, FlowErrors.DeclareClassElement);\n        } else if (member.value) {\n          this.raise(\n            member.value.start,\n            FlowErrors.DeclareClassFieldInitializer,\n          );\n        }\n      }\n    }\n\n    isIterator(word: string): boolean {\n      return word === \"iterator\" || word === \"asyncIterator\";\n    }\n\n    readIterator(): void {\n      const word = super.readWord1();\n      const fullWord = \"@@\" + word;\n\n      // Allow @@iterator and @@asyncIterator as a identifier only inside type\n      if (!this.isIterator(word) || !this.state.inType) {\n        this.raise(this.state.pos, Errors.InvalidIdentifier, fullWord);\n      }\n\n      this.finishToken(tt.name, fullWord);\n    }\n\n    // ensure that inside flow types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (code === charCodes.leftCurlyBrace && next === charCodes.verticalBar) {\n        return this.finishOp(tt.braceBarL, 2);\n      } else if (\n        this.state.inType &&\n        (code === charCodes.greaterThan || code === charCodes.lessThan)\n      ) {\n        return this.finishOp(code === charCodes.greaterThan ? tt.gt : tt.lt, 1);\n      } else if (this.state.inType && code === charCodes.questionMark) {\n        if (next === charCodes.dot) {\n          return this.finishOp(tt.questionDot, 2);\n        }\n        // allow double nullable types in Flow: ??string\n        return this.finishOp(tt.question, 1);\n      } else if (isIteratorStart(code, next)) {\n        this.state.pos += 2; // eat \"@@\"\n        return this.readIterator();\n      } else {\n        return super.getTokenFromCode(code);\n      }\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      if (node.type === \"TypeCastExpression\") {\n        return this.isAssignable(node.expression, isBinding);\n      } else {\n        return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      if (node.type === \"TypeCastExpression\") {\n        return super.toAssignable(this.typeCastToParameter(node), isLHS);\n      } else {\n        return super.toAssignable(node, isLHS);\n      }\n    }\n\n    // turn type casts that we found in function parameter head into type annotated params\n    toAssignableList(\n      exprList: N.Expression[],\n      trailingCommaPos?: ?number,\n      isLHS: boolean,\n    ): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (expr?.type === \"TypeCastExpression\") {\n          exprList[i] = this.typeCastToParameter(expr);\n        }\n      }\n      return super.toAssignableList(exprList, trailingCommaPos, isLHS);\n    }\n\n    // this is a list of nodes, from something like a call expression, we need to filter the\n    // type casts that we've found that are illegal in this context\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isParenthesizedExpr?: boolean,\n    ): $ReadOnlyArray<?N.Expression> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (\n          expr &&\n          expr.type === \"TypeCastExpression\" &&\n          !expr.extra?.parenthesized &&\n          (exprList.length > 1 || !isParenthesizedExpr)\n        ) {\n          this.raise(expr.typeAnnotation.start, FlowErrors.TypeCastInPattern);\n        }\n      }\n\n      return exprList;\n    }\n\n    parseArrayLike(\n      close: TokenType,\n      canBePattern: boolean,\n      isTuple: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(\n        close,\n        canBePattern,\n        isTuple,\n        refExpressionErrors,\n      );\n\n      // This could be an array pattern:\n      //   ([a: string, b: string]) => {}\n      // In this case, we don't have to call toReferencedList. We will\n      // call it, if needed, when we are sure that it is a parenthesized\n      // expression by calling toReferencedListDeep.\n      if (canBePattern && !this.state.maybeInArrowParameters) {\n        this.toReferencedList(node.elements);\n      }\n\n      return node;\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      ...args:\n        | [string, BindingTypes | void]\n        | [\n            string,\n            BindingTypes | void,\n            ?Set<string>,\n            boolean | void,\n            boolean | void,\n          ]\n    ): void {\n      if (expr.type !== \"TypeCastExpression\") {\n        return super.checkLVal(expr, ...args);\n      }\n    }\n\n    // parse class property type annotations\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      if (this.match(tt.colon)) {\n        node.typeAnnotation = this.flowParseTypeAnnotation();\n      }\n      return super.parseClassPrivateProperty(node);\n    }\n\n    // determine whether or not we're currently in the position where a class method would appear\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    // determine whether or not we're currently in the position where a class property would appear\n    isClassProperty(): boolean {\n      return this.match(tt.colon) || super.isClassProperty();\n    }\n\n    isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n      return !this.match(tt.colon) && super.isNonstaticConstructor(method);\n    }\n\n    // parse type parameters for class methods\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n\n      if (method.params && isConstructor) {\n        const params = method.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n        // estree support\n      } else if (\n        // $FlowFixMe flow does not know about the face that estree can replace ClassMethod with MethodDefinition\n        method.type === \"MethodDefinition\" &&\n        isConstructor &&\n        method.value.params\n      ) {\n        const params = method.value.params;\n        if (params.length > 0 && this.isThisParam(params[0])) {\n          this.raise(method.start, FlowErrors.ThisParamBannedInConstructor);\n        }\n      }\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      if ((method: $FlowFixMe).variance) {\n        this.unexpected((method: $FlowFixMe).variance.start);\n      }\n      delete (method: $FlowFixMe).variance;\n      if (this.match(tt.lt)) {\n        method.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    // parse a the super class type parameters and implements\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.flowParseTypeParameterInstantiation();\n      }\n      if (this.isContextual(tt._implements)) {\n        this.next();\n        const implemented: N.FlowClassImplements[] = (node.implements = []);\n        do {\n          const node = this.startNode();\n          node.id = this.flowParseRestrictedIdentifier(/*liberal*/ true);\n          if (this.match(tt.lt)) {\n            node.typeParameters = this.flowParseTypeParameterInstantiation();\n          } else {\n            node.typeParameters = null;\n          }\n          implemented.push(this.finishNode(node, \"ClassImplements\"));\n        } while (this.eat(tt.comma));\n      }\n    }\n\n    checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n      super.checkGetterSetterParams(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      if (params.length > 0) {\n        const param = params[0];\n        if (this.isThisParam(param) && method.kind === \"get\") {\n          this.raise(param.start, FlowErrors.GetterMayNotHaveThisParam);\n        } else if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.SetterMayNotHaveThisParam);\n        }\n      }\n    }\n\n    parsePropertyNamePrefixOperator(\n      node: N.ObjectOrClassMember | N.ClassMember,\n    ): void {\n      node.variance = this.flowParseVariance();\n    }\n\n    // parse type parameters for object method shorthand\n    parseObjPropValue(\n      prop: N.ObjectMember,\n      startPos: ?number,\n      startLoc: ?Position,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isPattern: boolean,\n      isAccessor: boolean,\n      refExpressionErrors: ?ExpressionErrors,\n    ): void {\n      if ((prop: $FlowFixMe).variance) {\n        this.unexpected((prop: $FlowFixMe).variance.start);\n      }\n      delete (prop: $FlowFixMe).variance;\n\n      let typeParameters;\n\n      // method shorthand\n      if (this.match(tt.lt) && !isAccessor) {\n        typeParameters = this.flowParseTypeParameterDeclaration();\n        if (!this.match(tt.parenL)) this.unexpected();\n      }\n\n      super.parseObjPropValue(\n        prop,\n        startPos,\n        startLoc,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n        refExpressionErrors,\n      );\n\n      // add typeParameters if we found them\n      if (typeParameters) {\n        (prop.value || prop).typeParameters = typeParameters;\n      }\n    }\n\n    parseAssignableListItemTypes(param: N.Pattern): N.Pattern {\n      if (this.eat(tt.question)) {\n        if (param.type !== \"Identifier\") {\n          this.raise(param.start, FlowErrors.PatternIsOptional);\n        }\n        if (this.isThisParam(param)) {\n          this.raise(param.start, FlowErrors.ThisParamMayNotBeOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      if (this.match(tt.colon)) {\n        param.typeAnnotation = this.flowParseTypeAnnotation();\n      } else if (this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamAnnotationRequired);\n      }\n\n      if (this.match(tt.eq) && this.isThisParam(param)) {\n        this.raise(param.start, FlowErrors.ThisParamNoDefault);\n      }\n\n      this.resetEndLocation(param);\n      return param;\n    }\n\n    parseMaybeDefault(\n      startPos?: ?number,\n      startLoc?: ?Position,\n      left?: ?N.Pattern,\n    ): N.Pattern {\n      const node = super.parseMaybeDefault(startPos, startLoc, left);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(node.typeAnnotation.start, FlowErrors.TypeBeforeInitializer);\n      }\n\n      return node;\n    }\n\n    shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n      if (!hasTypeImportKind(node)) {\n        return super.shouldParseDefaultImport(node);\n      }\n\n      return isMaybeDefaultImport(this.state.type);\n    }\n\n    parseImportSpecifierLocal(\n      node: N.ImportDeclaration,\n      specifier: N.Node,\n      type: string,\n      contextDescription: string,\n    ): void {\n      specifier.local = hasTypeImportKind(node)\n        ? this.flowParseRestrictedIdentifier(\n            /* liberal */ true,\n            /* declaration */ true,\n          )\n        : this.parseIdentifier();\n\n      this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n      node.specifiers.push(this.finishNode(specifier, type));\n    }\n\n    // parse typeof and type imports\n    maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n      node.importKind = \"value\";\n\n      let kind = null;\n      if (this.match(tt._typeof)) {\n        kind = \"typeof\";\n      } else if (this.isContextual(tt._type)) {\n        kind = \"type\";\n      }\n      if (kind) {\n        const lh = this.lookahead();\n        const { type } = lh;\n\n        // import type * is not allowed\n        if (kind === \"type\" && type === tt.star) {\n          this.unexpected(lh.start);\n        }\n\n        if (\n          isMaybeDefaultImport(type) ||\n          type === tt.braceL ||\n          type === tt.star\n        ) {\n          this.next();\n          node.importKind = kind;\n        }\n      }\n\n      return super.maybeParseDefaultImportSpecifier(node);\n    }\n\n    // parse import-type/typeof shorthand\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      // eslint-disable-next-line no-unused-vars\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      const firstIdent = specifier.imported;\n\n      let specifierTypeKind = null;\n      if (firstIdent.type === \"Identifier\") {\n        if (firstIdent.name === \"type\") {\n          specifierTypeKind = \"type\";\n        } else if (firstIdent.name === \"typeof\") {\n          specifierTypeKind = \"typeof\";\n        }\n      }\n\n      let isBinding = false;\n      if (this.isContextual(tt._as) && !this.isLookaheadContextual(\"as\")) {\n        const as_ident = this.parseIdentifier(true);\n        if (\n          specifierTypeKind !== null &&\n          !tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type as ,` or `import {type as }`\n          specifier.imported = as_ident;\n          specifier.importKind = specifierTypeKind;\n          specifier.local = cloneIdentifier(as_ident);\n        } else {\n          // `import {type as foo`\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n          specifier.local = this.parseIdentifier();\n        }\n      } else {\n        if (\n          specifierTypeKind !== null &&\n          tokenIsKeywordOrIdentifier(this.state.type)\n        ) {\n          // `import {type foo`\n          specifier.imported = this.parseIdentifier(true);\n          specifier.importKind = specifierTypeKind;\n        } else {\n          if (importedIsString) {\n            /*:: invariant(firstIdent instanceof N.StringLiteral) */\n            throw this.raise(\n              specifier.start,\n              Errors.ImportBindingIsString,\n              firstIdent.value,\n            );\n          }\n          /*:: invariant(firstIdent instanceof N.Node) */\n          specifier.imported = firstIdent;\n          specifier.importKind = null;\n        }\n\n        if (this.eatContextual(tt._as)) {\n          specifier.local = this.parseIdentifier();\n        } else {\n          isBinding = true;\n          specifier.local = cloneIdentifier(specifier.imported);\n        }\n      }\n\n      const specifierIsTypeImport = hasTypeImportKind(specifier);\n\n      if (isInTypeOnlyImport && specifierIsTypeImport) {\n        this.raise(\n          specifier.start,\n          FlowErrors.ImportTypeShorthandOnlyInPureImport,\n        );\n      }\n\n      if (isInTypeOnlyImport || specifierIsTypeImport) {\n        this.checkReservedType(\n          specifier.local.name,\n          specifier.local.start,\n          /* declaration */ true,\n        );\n      }\n\n      if (isBinding && !isInTypeOnlyImport && !specifierIsTypeImport) {\n        this.checkReservedWord(\n          specifier.local.name,\n          specifier.start,\n          true,\n          true,\n        );\n      }\n\n      this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n      return this.finishNode(specifier, \"ImportSpecifier\");\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    // parse function type parameters - function foo<T>() {}\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      // $FlowFixMe\n      const kind = node.kind;\n      if (kind !== \"get\" && kind !== \"set\" && this.match(tt.lt)) {\n        node.typeParameters = this.flowParseTypeParameterDeclaration();\n      }\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // parse flow type annotations on variable declarator heads - let foo: string = bar\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (this.match(tt.colon)) {\n        decl.id.typeAnnotation = this.flowParseTypeAnnotation();\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n        this.state.noAnonFunctionType = true;\n        node.returnType = this.flowParseTypeAnnotation();\n        this.state.noAnonFunctionType = oldNoAnonFunctionType;\n      }\n\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    // todo description\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    // We need to support type parameter declarations for arrow functions. This\n    // is tricky. There are three situations we need to handle\n    //\n    // 1. This is either JSX or an arrow function. We'll try JSX first. If that\n    //    fails, we'll try an arrow function. If that fails, we'll throw the JSX\n    //    error.\n    // 2. This is an arrow function. We'll parse the type parameter declaration,\n    //    parse the rest, make sure the rest is an arrow function, and go from\n    //    there\n    // 3. This is neither. Just call the super method\n    parseMaybeAssign(\n      refExpressionErrors?: ?ExpressionErrors,\n      afterLeftParse?: Function,\n    ): N.Expression {\n      let state = null;\n\n      let jsx;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        state = this.state.clone();\n\n        jsx = this.tryParse(\n          () => super.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n          state,\n        );\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` and `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (jsx?.error || this.match(tt.lt)) {\n        state = state || this.state.clone();\n\n        let typeParameters;\n\n        const arrow = this.tryParse(abort => {\n          typeParameters = this.flowParseTypeParameterDeclaration();\n\n          const arrowExpression = this.forwardNoArrowParamsConversionAt(\n            typeParameters,\n            () => {\n              const result = super.parseMaybeAssign(\n                refExpressionErrors,\n                afterLeftParse,\n              );\n\n              this.resetStartLocationFromNode(result, typeParameters);\n\n              return result;\n            },\n          );\n\n          // <T>(() => {});\n          // <T>(() => {}: any);\n          if (arrowExpression.extra?.parenthesized) abort();\n\n          // The above can return a TypeCastExpression when the arrow\n          // expression is not wrapped in parens. See also `this.parseParenItem`.\n          // (<T>() => {}: any);\n          const expr = this.maybeUnwrapTypeCastExpression(arrowExpression);\n\n          if (expr.type !== \"ArrowFunctionExpression\") abort();\n\n          expr.typeParameters = typeParameters;\n          this.resetStartLocationFromNode(expr, typeParameters);\n\n          return arrowExpression;\n        }, state);\n\n        let arrowExpression: ?(\n          | N.ArrowFunctionExpression\n          | N.TypeCastExpression\n        ) = null;\n\n        if (\n          arrow.node &&\n          this.maybeUnwrapTypeCastExpression(arrow.node).type ===\n            \"ArrowFunctionExpression\"\n        ) {\n          if (!arrow.error && !arrow.aborted) {\n            // <T> async () => {}\n            if (arrow.node.async) {\n              /*:: invariant(typeParameters) */\n              this.raise(\n                typeParameters.start,\n                FlowErrors.UnexpectedTypeParameterBeforeAsyncArrowFunction,\n              );\n            }\n\n            return arrow.node;\n          }\n\n          arrowExpression = arrow.node;\n        }\n\n        // If we are here, both JSX and Flow parsing attempts failed.\n        // Give the precedence to the JSX error, except if JSX had an\n        // unrecoverable error while Flow didn't.\n        // If the error is recoverable, we can only re-report it if there is\n        // a node we can return.\n\n        if (jsx?.node) {\n          /*:: invariant(jsx.failState) */\n          this.state = jsx.failState;\n          return jsx.node;\n        }\n\n        if (arrowExpression) {\n          /*:: invariant(arrow.failState) */\n          this.state = arrow.failState;\n          return arrowExpression;\n        }\n\n        if (jsx?.thrown) throw jsx.error;\n        if (arrow.thrown) throw arrow.error;\n\n        /*:: invariant(typeParameters) */\n        throw this.raise(\n          typeParameters.start,\n          FlowErrors.UnexpectedTokenAfterTypeParameter,\n        );\n      }\n\n      return super.parseMaybeAssign(refExpressionErrors, afterLeftParse);\n    }\n\n    // handle return types for arrow functions\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        const result = this.tryParse(() => {\n          const oldNoAnonFunctionType = this.state.noAnonFunctionType;\n          this.state.noAnonFunctionType = true;\n\n          const typeNode = this.startNode();\n\n          [\n            // $FlowFixMe (destructuring not supported yet)\n            typeNode.typeAnnotation,\n            // $FlowFixMe (destructuring not supported yet)\n            node.predicate,\n          ] = this.flowParseTypeAndPredicateInitialiser();\n\n          this.state.noAnonFunctionType = oldNoAnonFunctionType;\n\n          if (this.canInsertSemicolon()) this.unexpected();\n          if (!this.match(tt.arrow)) this.unexpected();\n\n          return typeNode;\n        });\n\n        if (result.thrown) return null;\n        /*:: invariant(result.node) */\n\n        if (result.error) this.state = result.failState;\n\n        // assign after it is clear it is an arrow\n        node.returnType = result.node.typeAnnotation\n          ? this.finishNode(result.node, \"TypeAnnotation\")\n          : null;\n      }\n\n      return super.parseArrow(node);\n    }\n\n    shouldParseArrow(params: Array<N.Node>): boolean {\n      return this.match(tt.colon) || super.shouldParseArrow(params);\n    }\n\n    setArrowFunctionParameters(\n      node: N.ArrowFunctionExpression,\n      params: N.Expression[],\n    ): void {\n      if (this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1) {\n        node.params = params;\n      } else {\n        super.setArrowFunctionParameters(node, params);\n      }\n    }\n\n    checkParams(\n      node: N.Function,\n      allowDuplicates: boolean,\n      isArrowFunction: ?boolean,\n    ): void {\n      if (\n        isArrowFunction &&\n        this.state.noArrowParamsConversionAt.indexOf(node.start) !== -1\n      ) {\n        return;\n      }\n\n      // ensure the `this` param is first, if it exists\n      for (let i = 0; i < node.params.length; i++) {\n        if (this.isThisParam(node.params[i]) && i > 0) {\n          this.raise(node.params[i].start, FlowErrors.ThisParamMustBeFirst);\n        }\n      }\n\n      return super.checkParams(...arguments);\n    }\n\n    parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n      return super.parseParenAndDistinguishExpression(\n        canBeArrow && this.state.noArrowAt.indexOf(this.state.start) === -1,\n      );\n    }\n\n    parseSubscripts(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls?: ?boolean,\n    ): N.Expression {\n      if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.state.noArrowAt.indexOf(startPos) !== -1\n      ) {\n        this.next();\n\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        base = this.finishNode(node, \"CallExpression\");\n      } else if (\n        base.type === \"Identifier\" &&\n        base.name === \"async\" &&\n        this.match(tt.lt)\n      ) {\n        const state = this.state.clone();\n        const arrow = this.tryParse(\n          abort =>\n            this.parseAsyncArrowWithTypeParameters(startPos, startLoc) ||\n            abort(),\n          state,\n        );\n\n        /*:: invariant(arrow.node != null) */\n        if (!arrow.error && !arrow.aborted) return arrow.node;\n\n        const result = this.tryParse(\n          () => super.parseSubscripts(base, startPos, startLoc, noCalls),\n          state,\n        );\n\n        if (result.node && !result.error) return result.node;\n\n        if (arrow.node) {\n          this.state = arrow.failState;\n          return arrow.node;\n        }\n\n        if (result.node) {\n          this.state = result.failState;\n          return result.node;\n        }\n\n        throw arrow.error || result.error;\n      }\n\n      return super.parseSubscripts(base, startPos, startLoc, noCalls);\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      subscriptState: N.ParseSubscriptState,\n    ): N.Expression {\n      if (this.match(tt.questionDot) && this.isLookaheadToken_lt()) {\n        subscriptState.optionalChainMember = true;\n        if (noCalls) {\n          subscriptState.stop = true;\n          return base;\n        }\n        this.next();\n        const node: N.OptionalCallExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.callee = base;\n        node.typeArguments = this.flowParseTypeParameterInstantiation();\n        this.expect(tt.parenL);\n        // $FlowFixMe\n        node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n        node.optional = true;\n        return this.finishCallExpression(node, /* optional */ true);\n      } else if (!noCalls && this.shouldParseTypes() && this.match(tt.lt)) {\n        const node = this.startNodeAt(startPos, startLoc);\n        node.callee = base;\n\n        const result = this.tryParse(() => {\n          node.typeArguments =\n            this.flowParseTypeParameterInstantiationCallOrNew();\n          this.expect(tt.parenL);\n          node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n          if (subscriptState.optionalChainMember) node.optional = false;\n          return this.finishCallExpression(\n            node,\n            subscriptState.optionalChainMember,\n          );\n        });\n\n        if (result.node) {\n          if (result.error) this.state = result.failState;\n          return result.node;\n        }\n      }\n\n      return super.parseSubscript(\n        base,\n        startPos,\n        startLoc,\n        noCalls,\n        subscriptState,\n      );\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      let targs = null;\n      if (this.shouldParseTypes() && this.match(tt.lt)) {\n        targs = this.tryParse(() =>\n          this.flowParseTypeParameterInstantiationCallOrNew(),\n        ).node;\n      }\n      node.typeArguments = targs;\n\n      super.parseNewArguments(node);\n    }\n\n    parseAsyncArrowWithTypeParameters(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      const node = this.startNodeAt(startPos, startLoc);\n      this.parseFunctionParams(node);\n      if (!this.parseArrow(node)) return;\n      return this.parseArrowExpression(\n        node,\n        /* params */ undefined,\n        /* isAsync */ true,\n      );\n    }\n\n    readToken_mult_modulo(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.asterisk &&\n        next === charCodes.slash &&\n        this.state.hasFlowComment\n      ) {\n        this.state.hasFlowComment = false;\n        this.state.pos += 2;\n        this.nextToken();\n        return;\n      }\n\n      super.readToken_mult_modulo(code);\n    }\n\n    readToken_pipe_amp(code: number): void {\n      const next = this.input.charCodeAt(this.state.pos + 1);\n      if (\n        code === charCodes.verticalBar &&\n        next === charCodes.rightCurlyBrace\n      ) {\n        // '|}'\n        this.finishOp(tt.braceBarR, 2);\n        return;\n      }\n\n      super.readToken_pipe_amp(code);\n    }\n\n    parseTopLevel(file: N.File, program: N.Program): N.File {\n      const fileNode = super.parseTopLevel(file, program);\n      if (this.state.hasFlowComment) {\n        this.raise(this.state.pos, FlowErrors.UnterminatedFlowComment);\n      }\n      return fileNode;\n    }\n\n    skipBlockComment(): N.CommentBlock | void {\n      if (this.hasPlugin(\"flowComments\") && this.skipFlowComment()) {\n        if (this.state.hasFlowComment) {\n          this.unexpected(null, FlowErrors.NestedFlowComment);\n        }\n        this.hasFlowCommentCompletion();\n        this.state.pos += this.skipFlowComment();\n        this.state.hasFlowComment = true;\n        return;\n      }\n\n      if (this.state.hasFlowComment) {\n        const end = this.input.indexOf(\"*-/\", (this.state.pos += 2));\n        if (end === -1) {\n          throw this.raise(this.state.pos - 2, Errors.UnterminatedComment);\n        }\n        this.state.pos = end + 3;\n        return;\n      }\n\n      return super.skipBlockComment();\n    }\n\n    skipFlowComment(): number | boolean {\n      const { pos } = this.state;\n      let shiftToFirstNonWhiteSpace = 2;\n      while (\n        [charCodes.space, charCodes.tab].includes(\n          this.input.charCodeAt(pos + shiftToFirstNonWhiteSpace),\n        )\n      ) {\n        shiftToFirstNonWhiteSpace++;\n      }\n\n      const ch2 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos);\n      const ch3 = this.input.charCodeAt(shiftToFirstNonWhiteSpace + pos + 1);\n\n      if (ch2 === charCodes.colon && ch3 === charCodes.colon) {\n        return shiftToFirstNonWhiteSpace + 2; // check for /*::\n      }\n      if (\n        this.input.slice(\n          shiftToFirstNonWhiteSpace + pos,\n          shiftToFirstNonWhiteSpace + pos + 12,\n        ) === \"flow-include\"\n      ) {\n        return shiftToFirstNonWhiteSpace + 12; // check for /*flow-include\n      }\n      if (ch2 === charCodes.colon && ch3 !== charCodes.colon) {\n        return shiftToFirstNonWhiteSpace; // check for /*:, advance up to :\n      }\n      return false;\n    }\n\n    hasFlowCommentCompletion(): void {\n      const end = this.input.indexOf(\"*/\", this.state.pos);\n      if (end === -1) {\n        throw this.raise(this.state.pos, Errors.UnterminatedComment);\n      }\n    }\n\n    // Flow enum parsing\n\n    flowEnumErrorBooleanMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumBooleanMemberNotInitialized,\n        memberName,\n        enumName,\n      );\n    }\n\n    flowEnumErrorInvalidMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      const suggestion = memberName[0].toUpperCase() + memberName.slice(1);\n      this.raise(\n        pos,\n        FlowErrors.EnumInvalidMemberName,\n        memberName,\n        suggestion,\n        enumName,\n      );\n    }\n\n    flowEnumErrorDuplicateMemberName(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumDuplicateMemberName, memberName, enumName);\n    }\n\n    flowEnumErrorInconsistentMemberValues(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(pos, FlowErrors.EnumInconsistentMemberValues, enumName);\n    }\n\n    flowEnumErrorInvalidExplicitType(\n      pos: number,\n      {\n        enumName,\n        suppliedType,\n      }: { enumName: string, suppliedType: null | string },\n    ) {\n      return this.raise(\n        pos,\n        suppliedType === null\n          ? FlowErrors.EnumInvalidExplicitTypeUnknownSupplied\n          : FlowErrors.EnumInvalidExplicitType,\n        enumName,\n        suppliedType,\n      );\n    }\n\n    flowEnumErrorInvalidMemberInitializer(\n      pos: number,\n      { enumName, explicitType, memberName }: EnumContext,\n    ) {\n      let message = null;\n      switch (explicitType) {\n        case \"boolean\":\n        case \"number\":\n        case \"string\":\n          message = FlowErrors.EnumInvalidMemberInitializerPrimaryType;\n          break;\n        case \"symbol\":\n          message = FlowErrors.EnumInvalidMemberInitializerSymbolType;\n          break;\n        default:\n          // null\n          message = FlowErrors.EnumInvalidMemberInitializerUnknownType;\n      }\n      return this.raise(pos, message, enumName, memberName, explicitType);\n    }\n\n    flowEnumErrorNumberMemberNotInitialized(\n      pos: number,\n      { enumName, memberName }: { enumName: string, memberName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumNumberMemberNotInitialized,\n        enumName,\n        memberName,\n      );\n    }\n\n    flowEnumErrorStringMemberInconsistentlyInitailized(\n      pos: number,\n      { enumName }: { enumName: string },\n    ): void {\n      this.raise(\n        pos,\n        FlowErrors.EnumStringMemberInconsistentlyInitailized,\n        enumName,\n      );\n    }\n\n    flowEnumMemberInit(): EnumMemberInit {\n      const startPos = this.state.start;\n      const endOfInit = () => this.match(tt.comma) || this.match(tt.braceR);\n      switch (this.state.type) {\n        case tt.num: {\n          const literal = this.parseNumericLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"number\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt.string: {\n          const literal = this.parseStringLiteral(this.state.value);\n          if (endOfInit()) {\n            return { type: \"string\", pos: literal.start, value: literal };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        case tt._true:\n        case tt._false: {\n          const literal = this.parseBooleanLiteral(this.match(tt._true));\n          if (endOfInit()) {\n            return {\n              type: \"boolean\",\n              pos: literal.start,\n              value: literal,\n            };\n          }\n          return { type: \"invalid\", pos: startPos };\n        }\n        default:\n          return { type: \"invalid\", pos: startPos };\n      }\n    }\n\n    flowEnumMemberRaw(): { id: N.Node, init: EnumMemberInit } {\n      const pos = this.state.start;\n      const id = this.parseIdentifier(true);\n      const init = this.eat(tt.eq)\n        ? this.flowEnumMemberInit()\n        : { type: \"none\", pos };\n      return { id, init };\n    }\n\n    flowEnumCheckExplicitTypeMismatch(\n      pos: number,\n      context: EnumContext,\n      expectedType: EnumExplicitType,\n    ): void {\n      const { explicitType } = context;\n      if (explicitType === null) {\n        return;\n      }\n      if (explicitType !== expectedType) {\n        this.flowEnumErrorInvalidMemberInitializer(pos, context);\n      }\n    }\n\n    flowEnumMembers({\n      enumName,\n      explicitType,\n    }: {\n      enumName: string,\n      explicitType: EnumExplicitType,\n    }): {|\n      members: {|\n        booleanMembers: Array<N.Node>,\n        numberMembers: Array<N.Node>,\n        stringMembers: Array<N.Node>,\n        defaultedMembers: Array<N.Node>,\n      |},\n      hasUnknownMembers: boolean,\n    |} {\n      const seenNames = new Set();\n      const members = {\n        booleanMembers: [],\n        numberMembers: [],\n        stringMembers: [],\n        defaultedMembers: [],\n      };\n      let hasUnknownMembers = false;\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.ellipsis)) {\n          hasUnknownMembers = true;\n          break;\n        }\n        const memberNode = this.startNode();\n        const { id, init } = this.flowEnumMemberRaw();\n        const memberName = id.name;\n        if (memberName === \"\") {\n          continue;\n        }\n        if (/^[a-z]/.test(memberName)) {\n          this.flowEnumErrorInvalidMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        if (seenNames.has(memberName)) {\n          this.flowEnumErrorDuplicateMemberName(id.start, {\n            enumName,\n            memberName,\n          });\n        }\n        seenNames.add(memberName);\n        const context = { enumName, explicitType, memberName };\n        memberNode.id = id;\n        switch (init.type) {\n          case \"boolean\": {\n            this.flowEnumCheckExplicitTypeMismatch(\n              init.pos,\n              context,\n              \"boolean\",\n            );\n            memberNode.init = init.value;\n            members.booleanMembers.push(\n              this.finishNode(memberNode, \"EnumBooleanMember\"),\n            );\n            break;\n          }\n          case \"number\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"number\");\n            memberNode.init = init.value;\n            members.numberMembers.push(\n              this.finishNode(memberNode, \"EnumNumberMember\"),\n            );\n            break;\n          }\n          case \"string\": {\n            this.flowEnumCheckExplicitTypeMismatch(init.pos, context, \"string\");\n            memberNode.init = init.value;\n            members.stringMembers.push(\n              this.finishNode(memberNode, \"EnumStringMember\"),\n            );\n            break;\n          }\n          case \"invalid\": {\n            throw this.flowEnumErrorInvalidMemberInitializer(init.pos, context);\n          }\n          case \"none\": {\n            switch (explicitType) {\n              case \"boolean\":\n                this.flowEnumErrorBooleanMemberNotInitialized(\n                  init.pos,\n                  context,\n                );\n                break;\n              case \"number\":\n                this.flowEnumErrorNumberMemberNotInitialized(init.pos, context);\n                break;\n              default:\n                members.defaultedMembers.push(\n                  this.finishNode(memberNode, \"EnumDefaultedMember\"),\n                );\n            }\n          }\n        }\n\n        if (!this.match(tt.braceR)) {\n          this.expect(tt.comma);\n        }\n      }\n      return { members, hasUnknownMembers };\n    }\n\n    flowEnumStringMembers(\n      initializedMembers: Array<N.Node>,\n      defaultedMembers: Array<N.Node>,\n      { enumName }: { enumName: string },\n    ): Array<N.Node> {\n      if (initializedMembers.length === 0) {\n        return defaultedMembers;\n      } else if (defaultedMembers.length === 0) {\n        return initializedMembers;\n      } else if (defaultedMembers.length > initializedMembers.length) {\n        for (const member of initializedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return defaultedMembers;\n      } else {\n        for (const member of defaultedMembers) {\n          this.flowEnumErrorStringMemberInconsistentlyInitailized(\n            member.start,\n            { enumName },\n          );\n        }\n        return initializedMembers;\n      }\n    }\n\n    flowEnumParseExplicitType({\n      enumName,\n    }: {\n      enumName: string,\n    }): EnumExplicitType {\n      if (this.eatContextual(tt._of)) {\n        if (!tokenIsIdentifier(this.state.type)) {\n          throw this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: null,\n          });\n        }\n\n        const { value } = this.state;\n        this.next();\n\n        if (\n          value !== \"boolean\" &&\n          value !== \"number\" &&\n          value !== \"string\" &&\n          value !== \"symbol\"\n        ) {\n          this.flowEnumErrorInvalidExplicitType(this.state.start, {\n            enumName,\n            suppliedType: value,\n          });\n        }\n\n        return value;\n      }\n      return null;\n    }\n\n    flowEnumBody(node: N.Node, { enumName, nameLoc }): N.Node {\n      const explicitType = this.flowEnumParseExplicitType({ enumName });\n      this.expect(tt.braceL);\n      const { members, hasUnknownMembers } = this.flowEnumMembers({\n        enumName,\n        explicitType,\n      });\n      node.hasUnknownMembers = hasUnknownMembers;\n\n      switch (explicitType) {\n        case \"boolean\":\n          node.explicitType = true;\n          node.members = members.booleanMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumBooleanBody\");\n        case \"number\":\n          node.explicitType = true;\n          node.members = members.numberMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumNumberBody\");\n        case \"string\":\n          node.explicitType = true;\n          node.members = this.flowEnumStringMembers(\n            members.stringMembers,\n            members.defaultedMembers,\n            { enumName },\n          );\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumStringBody\");\n        case \"symbol\":\n          node.members = members.defaultedMembers;\n          this.expect(tt.braceR);\n          return this.finishNode(node, \"EnumSymbolBody\");\n        default: {\n          // `explicitType` is `null`\n          const empty = () => {\n            node.members = [];\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          };\n          node.explicitType = false;\n\n          const boolsLen = members.booleanMembers.length;\n          const numsLen = members.numberMembers.length;\n          const strsLen = members.stringMembers.length;\n          const defaultedLen = members.defaultedMembers.length;\n\n          if (!boolsLen && !numsLen && !strsLen && !defaultedLen) {\n            return empty();\n          } else if (!boolsLen && !numsLen) {\n            node.members = this.flowEnumStringMembers(\n              members.stringMembers,\n              members.defaultedMembers,\n              { enumName },\n            );\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumStringBody\");\n          } else if (!numsLen && !strsLen && boolsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorBooleanMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.booleanMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumBooleanBody\");\n          } else if (!boolsLen && !strsLen && numsLen >= defaultedLen) {\n            for (const member of members.defaultedMembers) {\n              this.flowEnumErrorNumberMemberNotInitialized(member.start, {\n                enumName,\n                memberName: member.id.name,\n              });\n            }\n            node.members = members.numberMembers;\n            this.expect(tt.braceR);\n            return this.finishNode(node, \"EnumNumberBody\");\n          } else {\n            this.flowEnumErrorInconsistentMemberValues(nameLoc, { enumName });\n            return empty();\n          }\n        }\n      }\n    }\n\n    flowParseEnumDeclaration(node: N.Node): N.Node {\n      const id = this.parseIdentifier();\n      node.id = id;\n      node.body = this.flowEnumBody(this.startNode(), {\n        enumName: id.name,\n        nameLoc: id.start,\n      });\n      return this.finishNode(node, \"EnumDeclaration\");\n    }\n\n    // check if the next token is a tt.lt\n    isLookaheadToken_lt(): boolean {\n      const next = this.nextTokenStart();\n      if (this.input.charCodeAt(next) === charCodes.lessThan) {\n        const afterNext = this.input.charCodeAt(next + 1);\n        return (\n          afterNext !== charCodes.lessThan && afterNext !== charCodes.equalsTo\n        );\n      }\n      return false;\n    }\n\n    maybeUnwrapTypeCastExpression(node: N.Node) {\n      return node.type === \"TypeCastExpression\" ? node.expression : node;\n    }\n  };\n","// @flow\n\nconst entities: { [name: string]: string } = {\n  quot: \"\\u0022\",\n  amp: \"&\",\n  apos: \"\\u0027\",\n  lt: \"<\",\n  gt: \">\",\n  nbsp: \"\\u00A0\",\n  iexcl: \"\\u00A1\",\n  cent: \"\\u00A2\",\n  pound: \"\\u00A3\",\n  curren: \"\\u00A4\",\n  yen: \"\\u00A5\",\n  brvbar: \"\\u00A6\",\n  sect: \"\\u00A7\",\n  uml: \"\\u00A8\",\n  copy: \"\\u00A9\",\n  ordf: \"\\u00AA\",\n  laquo: \"\\u00AB\",\n  not: \"\\u00AC\",\n  shy: \"\\u00AD\",\n  reg: \"\\u00AE\",\n  macr: \"\\u00AF\",\n  deg: \"\\u00B0\",\n  plusmn: \"\\u00B1\",\n  sup2: \"\\u00B2\",\n  sup3: \"\\u00B3\",\n  acute: \"\\u00B4\",\n  micro: \"\\u00B5\",\n  para: \"\\u00B6\",\n  middot: \"\\u00B7\",\n  cedil: \"\\u00B8\",\n  sup1: \"\\u00B9\",\n  ordm: \"\\u00BA\",\n  raquo: \"\\u00BB\",\n  frac14: \"\\u00BC\",\n  frac12: \"\\u00BD\",\n  frac34: \"\\u00BE\",\n  iquest: \"\\u00BF\",\n  Agrave: \"\\u00C0\",\n  Aacute: \"\\u00C1\",\n  Acirc: \"\\u00C2\",\n  Atilde: \"\\u00C3\",\n  Auml: \"\\u00C4\",\n  Aring: \"\\u00C5\",\n  AElig: \"\\u00C6\",\n  Ccedil: \"\\u00C7\",\n  Egrave: \"\\u00C8\",\n  Eacute: \"\\u00C9\",\n  Ecirc: \"\\u00CA\",\n  Euml: \"\\u00CB\",\n  Igrave: \"\\u00CC\",\n  Iacute: \"\\u00CD\",\n  Icirc: \"\\u00CE\",\n  Iuml: \"\\u00CF\",\n  ETH: \"\\u00D0\",\n  Ntilde: \"\\u00D1\",\n  Ograve: \"\\u00D2\",\n  Oacute: \"\\u00D3\",\n  Ocirc: \"\\u00D4\",\n  Otilde: \"\\u00D5\",\n  Ouml: \"\\u00D6\",\n  times: \"\\u00D7\",\n  Oslash: \"\\u00D8\",\n  Ugrave: \"\\u00D9\",\n  Uacute: \"\\u00DA\",\n  Ucirc: \"\\u00DB\",\n  Uuml: \"\\u00DC\",\n  Yacute: \"\\u00DD\",\n  THORN: \"\\u00DE\",\n  szlig: \"\\u00DF\",\n  agrave: \"\\u00E0\",\n  aacute: \"\\u00E1\",\n  acirc: \"\\u00E2\",\n  atilde: \"\\u00E3\",\n  auml: \"\\u00E4\",\n  aring: \"\\u00E5\",\n  aelig: \"\\u00E6\",\n  ccedil: \"\\u00E7\",\n  egrave: \"\\u00E8\",\n  eacute: \"\\u00E9\",\n  ecirc: \"\\u00EA\",\n  euml: \"\\u00EB\",\n  igrave: \"\\u00EC\",\n  iacute: \"\\u00ED\",\n  icirc: \"\\u00EE\",\n  iuml: \"\\u00EF\",\n  eth: \"\\u00F0\",\n  ntilde: \"\\u00F1\",\n  ograve: \"\\u00F2\",\n  oacute: \"\\u00F3\",\n  ocirc: \"\\u00F4\",\n  otilde: \"\\u00F5\",\n  ouml: \"\\u00F6\",\n  divide: \"\\u00F7\",\n  oslash: \"\\u00F8\",\n  ugrave: \"\\u00F9\",\n  uacute: \"\\u00FA\",\n  ucirc: \"\\u00FB\",\n  uuml: \"\\u00FC\",\n  yacute: \"\\u00FD\",\n  thorn: \"\\u00FE\",\n  yuml: \"\\u00FF\",\n  OElig: \"\\u0152\",\n  oelig: \"\\u0153\",\n  Scaron: \"\\u0160\",\n  scaron: \"\\u0161\",\n  Yuml: \"\\u0178\",\n  fnof: \"\\u0192\",\n  circ: \"\\u02C6\",\n  tilde: \"\\u02DC\",\n  Alpha: \"\\u0391\",\n  Beta: \"\\u0392\",\n  Gamma: \"\\u0393\",\n  Delta: \"\\u0394\",\n  Epsilon: \"\\u0395\",\n  Zeta: \"\\u0396\",\n  Eta: \"\\u0397\",\n  Theta: \"\\u0398\",\n  Iota: \"\\u0399\",\n  Kappa: \"\\u039A\",\n  Lambda: \"\\u039B\",\n  Mu: \"\\u039C\",\n  Nu: \"\\u039D\",\n  Xi: \"\\u039E\",\n  Omicron: \"\\u039F\",\n  Pi: \"\\u03A0\",\n  Rho: \"\\u03A1\",\n  Sigma: \"\\u03A3\",\n  Tau: \"\\u03A4\",\n  Upsilon: \"\\u03A5\",\n  Phi: \"\\u03A6\",\n  Chi: \"\\u03A7\",\n  Psi: \"\\u03A8\",\n  Omega: \"\\u03A9\",\n  alpha: \"\\u03B1\",\n  beta: \"\\u03B2\",\n  gamma: \"\\u03B3\",\n  delta: \"\\u03B4\",\n  epsilon: \"\\u03B5\",\n  zeta: \"\\u03B6\",\n  eta: \"\\u03B7\",\n  theta: \"\\u03B8\",\n  iota: \"\\u03B9\",\n  kappa: \"\\u03BA\",\n  lambda: \"\\u03BB\",\n  mu: \"\\u03BC\",\n  nu: \"\\u03BD\",\n  xi: \"\\u03BE\",\n  omicron: \"\\u03BF\",\n  pi: \"\\u03C0\",\n  rho: \"\\u03C1\",\n  sigmaf: \"\\u03C2\",\n  sigma: \"\\u03C3\",\n  tau: \"\\u03C4\",\n  upsilon: \"\\u03C5\",\n  phi: \"\\u03C6\",\n  chi: \"\\u03C7\",\n  psi: \"\\u03C8\",\n  omega: \"\\u03C9\",\n  thetasym: \"\\u03D1\",\n  upsih: \"\\u03D2\",\n  piv: \"\\u03D6\",\n  ensp: \"\\u2002\",\n  emsp: \"\\u2003\",\n  thinsp: \"\\u2009\",\n  zwnj: \"\\u200C\",\n  zwj: \"\\u200D\",\n  lrm: \"\\u200E\",\n  rlm: \"\\u200F\",\n  ndash: \"\\u2013\",\n  mdash: \"\\u2014\",\n  lsquo: \"\\u2018\",\n  rsquo: \"\\u2019\",\n  sbquo: \"\\u201A\",\n  ldquo: \"\\u201C\",\n  rdquo: \"\\u201D\",\n  bdquo: \"\\u201E\",\n  dagger: \"\\u2020\",\n  Dagger: \"\\u2021\",\n  bull: \"\\u2022\",\n  hellip: \"\\u2026\",\n  permil: \"\\u2030\",\n  prime: \"\\u2032\",\n  Prime: \"\\u2033\",\n  lsaquo: \"\\u2039\",\n  rsaquo: \"\\u203A\",\n  oline: \"\\u203E\",\n  frasl: \"\\u2044\",\n  euro: \"\\u20AC\",\n  image: \"\\u2111\",\n  weierp: \"\\u2118\",\n  real: \"\\u211C\",\n  trade: \"\\u2122\",\n  alefsym: \"\\u2135\",\n  larr: \"\\u2190\",\n  uarr: \"\\u2191\",\n  rarr: \"\\u2192\",\n  darr: \"\\u2193\",\n  harr: \"\\u2194\",\n  crarr: \"\\u21B5\",\n  lArr: \"\\u21D0\",\n  uArr: \"\\u21D1\",\n  rArr: \"\\u21D2\",\n  dArr: \"\\u21D3\",\n  hArr: \"\\u21D4\",\n  forall: \"\\u2200\",\n  part: \"\\u2202\",\n  exist: \"\\u2203\",\n  empty: \"\\u2205\",\n  nabla: \"\\u2207\",\n  isin: \"\\u2208\",\n  notin: \"\\u2209\",\n  ni: \"\\u220B\",\n  prod: \"\\u220F\",\n  sum: \"\\u2211\",\n  minus: \"\\u2212\",\n  lowast: \"\\u2217\",\n  radic: \"\\u221A\",\n  prop: \"\\u221D\",\n  infin: \"\\u221E\",\n  ang: \"\\u2220\",\n  and: \"\\u2227\",\n  or: \"\\u2228\",\n  cap: \"\\u2229\",\n  cup: \"\\u222A\",\n  int: \"\\u222B\",\n  there4: \"\\u2234\",\n  sim: \"\\u223C\",\n  cong: \"\\u2245\",\n  asymp: \"\\u2248\",\n  ne: \"\\u2260\",\n  equiv: \"\\u2261\",\n  le: \"\\u2264\",\n  ge: \"\\u2265\",\n  sub: \"\\u2282\",\n  sup: \"\\u2283\",\n  nsub: \"\\u2284\",\n  sube: \"\\u2286\",\n  supe: \"\\u2287\",\n  oplus: \"\\u2295\",\n  otimes: \"\\u2297\",\n  perp: \"\\u22A5\",\n  sdot: \"\\u22C5\",\n  lceil: \"\\u2308\",\n  rceil: \"\\u2309\",\n  lfloor: \"\\u230A\",\n  rfloor: \"\\u230B\",\n  lang: \"\\u2329\",\n  rang: \"\\u232A\",\n  loz: \"\\u25CA\",\n  spades: \"\\u2660\",\n  clubs: \"\\u2663\",\n  hearts: \"\\u2665\",\n  diams: \"\\u2666\",\n};\nexport default entities;\n","// @flow\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport * as charCodes from \"charcodes\";\n\nimport XHTMLEntities from \"./xhtml\";\nimport type Parser from \"../../parser\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport {\n  tokenComesBeforeExpression,\n  tokenIsKeyword,\n  tokenLabelName,\n  type TokenType,\n  tt,\n} from \"../../tokenizer/types\";\nimport { TokContext, types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport { isIdentifierChar, isIdentifierStart } from \"../../util/identifier\";\nimport type { Position } from \"../../util/location\";\nimport { isNewLine } from \"../../util/whitespace\";\nimport { Errors, makeErrorTemplates, ErrorCodes } from \"../../parser/error\";\n\nconst HEX_NUMBER = /^[\\da-fA-F]+$/;\nconst DECIMAL_NUMBER = /^\\d+$/;\n\n/* eslint sort-keys: \"error\" */\nconst JsxErrors = makeErrorTemplates(\n  {\n    AttributeIsEmpty:\n      \"JSX attributes must only be assigned a non-empty expression.\",\n    MissingClosingTagElement:\n      \"Expected corresponding JSX closing tag for <%0>.\",\n    MissingClosingTagFragment: \"Expected corresponding JSX closing tag for <>.\",\n    UnexpectedSequenceExpression:\n      \"Sequence expressions cannot be directly nested inside JSX. Did you mean to wrap it in parentheses (...)?\",\n    UnsupportedJsxValue:\n      \"JSX value should be either an expression or a quoted JSX text.\",\n    UnterminatedJsxContent: \"Unterminated JSX contents.\",\n    UnwrappedAdjacentJSXElements:\n      \"Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>?\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"jsx\",\n);\n/* eslint-disable sort-keys */\n\nfunction isFragment(object: ?N.JSXElement): boolean {\n  return object\n    ? object.type === \"JSXOpeningFragment\" ||\n        object.type === \"JSXClosingFragment\"\n    : false;\n}\n\n// Transforms JSX element name to string.\n\nfunction getQualifiedJSXName(\n  object: N.JSXIdentifier | N.JSXNamespacedName | N.JSXMemberExpression,\n): string {\n  if (object.type === \"JSXIdentifier\") {\n    return object.name;\n  }\n\n  if (object.type === \"JSXNamespacedName\") {\n    return object.namespace.name + \":\" + object.name.name;\n  }\n\n  if (object.type === \"JSXMemberExpression\") {\n    return (\n      getQualifiedJSXName(object.object) +\n      \".\" +\n      getQualifiedJSXName(object.property)\n    );\n  }\n\n  // istanbul ignore next\n  throw new Error(\"Node had unexpected type: \" + object.type);\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    // Reads inline JSX contents token.\n\n    jsxReadToken(): void {\n      let out = \"\";\n      let chunkStart = this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, JsxErrors.UnterminatedJsxContent);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n\n        switch (ch) {\n          case charCodes.lessThan:\n          case charCodes.leftCurlyBrace:\n            if (this.state.pos === this.state.start) {\n              if (ch === charCodes.lessThan && this.state.canStartJSXElement) {\n                ++this.state.pos;\n                return this.finishToken(tt.jsxTagStart);\n              }\n              return super.getTokenFromCode(ch);\n            }\n            out += this.input.slice(chunkStart, this.state.pos);\n            return this.finishToken(tt.jsxText, out);\n\n          case charCodes.ampersand:\n            out += this.input.slice(chunkStart, this.state.pos);\n            out += this.jsxReadEntity();\n            chunkStart = this.state.pos;\n            break;\n\n          case charCodes.greaterThan:\n          case charCodes.rightCurlyBrace:\n            if (process.env.BABEL_8_BREAKING) {\n              const htmlEntity =\n                ch === charCodes.rightCurlyBrace ? \"&rbrace;\" : \"&gt;\";\n              const char = this.input[this.state.pos];\n              this.raise(this.state.pos, {\n                code: ErrorCodes.SyntaxError,\n                reasonCode: \"UnexpectedToken\",\n                template: `Unexpected token \\`${char}\\`. Did you mean \\`${htmlEntity}\\` or \\`{'${char}'}\\`?`,\n              });\n            }\n          /* falls through */\n\n          default:\n            if (isNewLine(ch)) {\n              out += this.input.slice(chunkStart, this.state.pos);\n              out += this.jsxReadNewLine(true);\n              chunkStart = this.state.pos;\n            } else {\n              ++this.state.pos;\n            }\n        }\n      }\n    }\n\n    jsxReadNewLine(normalizeCRLF: boolean): string {\n      const ch = this.input.charCodeAt(this.state.pos);\n      let out;\n      ++this.state.pos;\n      if (\n        ch === charCodes.carriageReturn &&\n        this.input.charCodeAt(this.state.pos) === charCodes.lineFeed\n      ) {\n        ++this.state.pos;\n        out = normalizeCRLF ? \"\\n\" : \"\\r\\n\";\n      } else {\n        out = String.fromCharCode(ch);\n      }\n      ++this.state.curLine;\n      this.state.lineStart = this.state.pos;\n\n      return out;\n    }\n\n    jsxReadString(quote: number): void {\n      let out = \"\";\n      let chunkStart = ++this.state.pos;\n      for (;;) {\n        if (this.state.pos >= this.length) {\n          throw this.raise(this.state.start, Errors.UnterminatedString);\n        }\n\n        const ch = this.input.charCodeAt(this.state.pos);\n        if (ch === quote) break;\n        if (ch === charCodes.ampersand) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadEntity();\n          chunkStart = this.state.pos;\n        } else if (isNewLine(ch)) {\n          out += this.input.slice(chunkStart, this.state.pos);\n          out += this.jsxReadNewLine(false);\n          chunkStart = this.state.pos;\n        } else {\n          ++this.state.pos;\n        }\n      }\n      out += this.input.slice(chunkStart, this.state.pos++);\n      return this.finishToken(tt.string, out);\n    }\n\n    jsxReadEntity(): string {\n      let str = \"\";\n      let count = 0;\n      let entity;\n      let ch = this.input[this.state.pos];\n\n      const startPos = ++this.state.pos;\n      while (this.state.pos < this.length && count++ < 10) {\n        ch = this.input[this.state.pos++];\n        if (ch === \";\") {\n          if (str[0] === \"#\") {\n            if (str[1] === \"x\") {\n              str = str.substr(2);\n              if (HEX_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 16));\n              }\n            } else {\n              str = str.substr(1);\n              if (DECIMAL_NUMBER.test(str)) {\n                entity = String.fromCodePoint(parseInt(str, 10));\n              }\n            }\n          } else {\n            entity = XHTMLEntities[str];\n          }\n          break;\n        }\n        str += ch;\n      }\n      if (!entity) {\n        this.state.pos = startPos;\n        return \"&\";\n      }\n      return entity;\n    }\n\n    // Read a JSX identifier (valid tag or attribute name).\n    //\n    // Optimized version since JSX identifiers can\"t contain\n    // escape characters and so can be read as single slice.\n    // Also assumes that first character was already checked\n    // by isIdentifierStart in readToken.\n\n    jsxReadWord(): void {\n      let ch;\n      const start = this.state.pos;\n      do {\n        ch = this.input.charCodeAt(++this.state.pos);\n      } while (isIdentifierChar(ch) || ch === charCodes.dash);\n      return this.finishToken(\n        tt.jsxName,\n        this.input.slice(start, this.state.pos),\n      );\n    }\n\n    // Parse next token as JSX identifier\n\n    jsxParseIdentifier(): N.JSXIdentifier {\n      const node = this.startNode();\n      if (this.match(tt.jsxName)) {\n        node.name = this.state.value;\n      } else if (tokenIsKeyword(this.state.type)) {\n        node.name = tokenLabelName(this.state.type);\n      } else {\n        this.unexpected();\n      }\n      this.next();\n      return this.finishNode(node, \"JSXIdentifier\");\n    }\n\n    // Parse namespaced identifier.\n\n    jsxParseNamespacedName(): N.JSXNamespacedName {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      const name = this.jsxParseIdentifier();\n      if (!this.eat(tt.colon)) return name;\n\n      const node = this.startNodeAt(startPos, startLoc);\n      node.namespace = name;\n      node.name = this.jsxParseIdentifier();\n      return this.finishNode(node, \"JSXNamespacedName\");\n    }\n\n    // Parses element name in any form - namespaced, member\n    // or single identifier.\n\n    jsxParseElementName():\n      | N.JSXIdentifier\n      | N.JSXNamespacedName\n      | N.JSXMemberExpression {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let node = this.jsxParseNamespacedName();\n      if (node.type === \"JSXNamespacedName\") {\n        return node;\n      }\n      while (this.eat(tt.dot)) {\n        const newNode = this.startNodeAt(startPos, startLoc);\n        newNode.object = node;\n        newNode.property = this.jsxParseIdentifier();\n        node = this.finishNode(newNode, \"JSXMemberExpression\");\n      }\n      return node;\n    }\n\n    // Parses any type of JSX attribute value.\n\n    jsxParseAttributeValue(): N.Expression {\n      let node;\n      switch (this.state.type) {\n        case tt.braceL:\n          node = this.startNode();\n          this.setContext(tc.brace);\n          this.next();\n          node = this.jsxParseExpressionContainer(node, tc.j_oTag);\n          if (node.expression.type === \"JSXEmptyExpression\") {\n            this.raise(node.start, JsxErrors.AttributeIsEmpty);\n          }\n          return node;\n\n        case tt.jsxTagStart:\n        case tt.string:\n          return this.parseExprAtom();\n\n        default:\n          throw this.raise(this.state.start, JsxErrors.UnsupportedJsxValue);\n      }\n    }\n\n    // JSXEmptyExpression is unique type since it doesn't actually parse anything,\n    // and so it should start at the end of last read token (left brace) and finish\n    // at the beginning of the next one (right brace).\n\n    jsxParseEmptyExpression(): N.JSXEmptyExpression {\n      const node = this.startNodeAt(\n        this.state.lastTokEnd,\n        this.state.lastTokEndLoc,\n      );\n      return this.finishNodeAt(\n        node,\n        \"JSXEmptyExpression\",\n        this.state.start,\n        this.state.startLoc,\n      );\n    }\n\n    // Parse JSX spread child\n\n    jsxParseSpreadChild(node: N.JSXSpreadChild): N.JSXSpreadChild {\n      this.next(); // ellipsis\n      node.expression = this.parseExpression();\n      this.setContext(tc.j_oTag);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXSpreadChild\");\n    }\n\n    // Parses JSX expression enclosed into curly brackets.\n\n    jsxParseExpressionContainer(\n      node: N.JSXExpressionContainer,\n      previousContext: TokContext,\n    ): N.JSXExpressionContainer {\n      if (this.match(tt.braceR)) {\n        node.expression = this.jsxParseEmptyExpression();\n      } else {\n        const expression = this.parseExpression();\n\n        if (process.env.BABEL_8_BREAKING) {\n          if (\n            expression.type === \"SequenceExpression\" &&\n            !expression.extra?.parenthesized\n          ) {\n            this.raise(\n              expression.expressions[1].start,\n              JsxErrors.UnexpectedSequenceExpression,\n            );\n          }\n        }\n\n        node.expression = expression;\n      }\n      this.setContext(previousContext);\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"JSXExpressionContainer\");\n    }\n\n    // Parses following JSX attribute name-value pair.\n\n    jsxParseAttribute(): N.JSXAttribute {\n      const node = this.startNode();\n      if (this.match(tt.braceL)) {\n        this.setContext(tc.brace);\n        this.next();\n        this.expect(tt.ellipsis);\n        node.argument = this.parseMaybeAssignAllowIn();\n        this.setContext(tc.j_oTag);\n        this.expect(tt.braceR);\n        return this.finishNode(node, \"JSXSpreadAttribute\");\n      }\n      node.name = this.jsxParseNamespacedName();\n      node.value = this.eat(tt.eq) ? this.jsxParseAttributeValue() : null;\n      return this.finishNode(node, \"JSXAttribute\");\n    }\n\n    // Parses JSX opening tag starting after \"<\".\n\n    jsxParseOpeningElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXOpeningElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXOpeningFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      return this.jsxParseOpeningElementAfterName(node);\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      const attributes: N.JSXAttribute[] = [];\n      while (!this.match(tt.slash) && !this.match(tt.jsxTagEnd)) {\n        attributes.push(this.jsxParseAttribute());\n      }\n      node.attributes = attributes;\n      node.selfClosing = this.eat(tt.slash);\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXOpeningElement\");\n    }\n\n    // Parses JSX closing tag starting after \"</\".\n\n    jsxParseClosingElementAt(\n      startPos: number,\n      startLoc: Position,\n    ): N.JSXClosingElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      if (this.match(tt.jsxTagEnd)) {\n        this.expect(tt.jsxTagEnd);\n        return this.finishNode(node, \"JSXClosingFragment\");\n      }\n      node.name = this.jsxParseElementName();\n      this.expect(tt.jsxTagEnd);\n      return this.finishNode(node, \"JSXClosingElement\");\n    }\n\n    // Parses entire JSX element, including it\"s opening tag\n    // (starting after \"<\"), attributes, contents and closing tag.\n\n    jsxParseElementAt(startPos: number, startLoc: Position): N.JSXElement {\n      const node = this.startNodeAt(startPos, startLoc);\n      const children = [];\n      const openingElement = this.jsxParseOpeningElementAt(startPos, startLoc);\n      let closingElement = null;\n\n      if (!openingElement.selfClosing) {\n        contents: for (;;) {\n          switch (this.state.type) {\n            case tt.jsxTagStart:\n              startPos = this.state.start;\n              startLoc = this.state.startLoc;\n              this.next();\n              if (this.eat(tt.slash)) {\n                closingElement = this.jsxParseClosingElementAt(\n                  startPos,\n                  startLoc,\n                );\n                break contents;\n              }\n              children.push(this.jsxParseElementAt(startPos, startLoc));\n              break;\n\n            case tt.jsxText:\n              children.push(this.parseExprAtom());\n              break;\n\n            case tt.braceL: {\n              const node = this.startNode();\n              this.setContext(tc.brace);\n              this.next();\n              if (this.match(tt.ellipsis)) {\n                children.push(this.jsxParseSpreadChild(node));\n              } else {\n                children.push(\n                  this.jsxParseExpressionContainer(node, tc.j_expr),\n                );\n              }\n\n              break;\n            }\n            // istanbul ignore next - should never happen\n            default:\n              throw this.unexpected();\n          }\n        }\n\n        if (isFragment(openingElement) && !isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagFragment,\n          );\n        } else if (!isFragment(openingElement) && isFragment(closingElement)) {\n          this.raise(\n            // $FlowIgnore\n            closingElement.start,\n            JsxErrors.MissingClosingTagElement,\n            getQualifiedJSXName(openingElement.name),\n          );\n        } else if (!isFragment(openingElement) && !isFragment(closingElement)) {\n          if (\n            // $FlowIgnore\n            getQualifiedJSXName(closingElement.name) !==\n            getQualifiedJSXName(openingElement.name)\n          ) {\n            this.raise(\n              // $FlowIgnore\n              closingElement.start,\n              JsxErrors.MissingClosingTagElement,\n              getQualifiedJSXName(openingElement.name),\n            );\n          }\n        }\n      }\n\n      if (isFragment(openingElement)) {\n        node.openingFragment = openingElement;\n        node.closingFragment = closingElement;\n      } else {\n        node.openingElement = openingElement;\n        node.closingElement = closingElement;\n      }\n      node.children = children;\n      if (this.match(tt.lt)) {\n        throw this.raise(\n          this.state.start,\n          JsxErrors.UnwrappedAdjacentJSXElements,\n        );\n      }\n\n      return isFragment(openingElement)\n        ? this.finishNode(node, \"JSXFragment\")\n        : this.finishNode(node, \"JSXElement\");\n    }\n\n    // Parses entire JSX element from current position.\n\n    jsxParseElement(): N.JSXElement {\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      this.next();\n      return this.jsxParseElementAt(startPos, startLoc);\n    }\n\n    setContext(newContext: TokContext) {\n      const { context } = this.state;\n      context[context.length - 1] = newContext;\n    }\n\n    // ==================================\n    // Overrides\n    // ==================================\n\n    parseExprAtom(refExpressionErrors: ?ExpressionErrors): N.Expression {\n      if (this.match(tt.jsxText)) {\n        return this.parseLiteral(this.state.value, \"JSXText\");\n      } else if (this.match(tt.jsxTagStart)) {\n        return this.jsxParseElement();\n      } else if (\n        this.match(tt.lt) &&\n        this.input.charCodeAt(this.state.pos) !== charCodes.exclamationMark\n      ) {\n        // In case we encounter an lt token here it will always be the start of\n        // jsx as the lt sign is not allowed in places that expect an expression\n        this.replaceToken(tt.jsxTagStart);\n        return this.jsxParseElement();\n      } else {\n        return super.parseExprAtom(refExpressionErrors);\n      }\n    }\n\n    skipSpace() {\n      const curContext = this.curContext();\n      if (!curContext.preserveSpace) super.skipSpace();\n    }\n\n    getTokenFromCode(code: number): void {\n      const context = this.curContext();\n\n      if (context === tc.j_expr) {\n        return this.jsxReadToken();\n      }\n\n      if (context === tc.j_oTag || context === tc.j_cTag) {\n        if (isIdentifierStart(code)) {\n          return this.jsxReadWord();\n        }\n\n        if (code === charCodes.greaterThan) {\n          ++this.state.pos;\n          return this.finishToken(tt.jsxTagEnd);\n        }\n\n        if (\n          (code === charCodes.quotationMark || code === charCodes.apostrophe) &&\n          context === tc.j_oTag\n        ) {\n          return this.jsxReadString(code);\n        }\n      }\n\n      if (\n        code === charCodes.lessThan &&\n        this.state.canStartJSXElement &&\n        this.input.charCodeAt(this.state.pos + 1) !== charCodes.exclamationMark\n      ) {\n        ++this.state.pos;\n        return this.finishToken(tt.jsxTagStart);\n      }\n\n      return super.getTokenFromCode(code);\n    }\n\n    updateContext(prevType: TokenType): void {\n      const { context, type } = this.state;\n      if (type === tt.slash && prevType === tt.jsxTagStart) {\n        // do not consider JSX expr -> JSX open tag -> ... anymore\n        // reconsider as closing tag context\n        context.splice(-2, 2, tc.j_cTag);\n        this.state.canStartJSXElement = false;\n      } else if (type === tt.jsxTagStart) {\n        // start opening tag context\n        context.push(tc.j_oTag);\n      } else if (type === tt.jsxTagEnd) {\n        const out = context[context.length - 1];\n        if ((out === tc.j_oTag && prevType === tt.slash) || out === tc.j_cTag) {\n          context.pop();\n          this.state.canStartJSXElement =\n            context[context.length - 1] === tc.j_expr;\n        } else {\n          this.setContext(tc.j_expr);\n          this.state.canStartJSXElement = true;\n        }\n      } else {\n        this.state.canStartJSXElement = tokenComesBeforeExpression(type);\n      }\n    }\n  };\n","// @flow\n\nimport ScopeHandler, { Scope } from \"../../util/scope\";\nimport {\n  BIND_KIND_TYPE,\n  BIND_FLAGS_TS_ENUM,\n  BIND_FLAGS_TS_CONST_ENUM,\n  BIND_FLAGS_TS_EXPORT_ONLY,\n  BIND_KIND_VALUE,\n  BIND_FLAGS_CLASS,\n  type ScopeFlags,\n  type BindingTypes,\n} from \"../../util/scopeflags\";\nimport * as N from \"../../types\";\n\nclass TypeScriptScope extends Scope {\n  types: Set<string> = new Set();\n\n  // enums (which are also in .types)\n  enums: Set<string> = new Set();\n\n  // const enums (which are also in .enums and .types)\n  constEnums: Set<string> = new Set();\n\n  // classes (which are also in .lexical) and interface (which are also in .types)\n  classes: Set<string> = new Set();\n\n  // namespaces and ambient functions (or classes) are too difficult to track,\n  // especially without type analysis.\n  // We need to track them anyway, to avoid \"X is not defined\" errors\n  // when exporting them.\n  exportOnlyBindings: Set<string> = new Set();\n}\n\n// See https://github.com/babel/babel/pull/9766#discussion_r268920730 for an\n// explanation of how typescript handles scope.\n\nexport default class TypeScriptScopeHandler extends ScopeHandler<TypeScriptScope> {\n  createScope(flags: ScopeFlags): TypeScriptScope {\n    return new TypeScriptScope(flags);\n  }\n\n  declareName(name: string, bindingType: BindingTypes, pos: number) {\n    const scope = this.currentScope();\n    if (bindingType & BIND_FLAGS_TS_EXPORT_ONLY) {\n      this.maybeExportDefined(scope, name);\n      scope.exportOnlyBindings.add(name);\n      return;\n    }\n\n    super.declareName(...arguments);\n\n    if (bindingType & BIND_KIND_TYPE) {\n      if (!(bindingType & BIND_KIND_VALUE)) {\n        // \"Value\" bindings have already been registered by the superclass.\n        this.checkRedeclarationInScope(scope, name, bindingType, pos);\n        this.maybeExportDefined(scope, name);\n      }\n      scope.types.add(name);\n    }\n    if (bindingType & BIND_FLAGS_TS_ENUM) scope.enums.add(name);\n    if (bindingType & BIND_FLAGS_TS_CONST_ENUM) scope.constEnums.add(name);\n    if (bindingType & BIND_FLAGS_CLASS) scope.classes.add(name);\n  }\n\n  isRedeclaredInScope(\n    scope: TypeScriptScope,\n    name: string,\n    bindingType: BindingTypes,\n  ): boolean {\n    if (scope.enums.has(name)) {\n      if (bindingType & BIND_FLAGS_TS_ENUM) {\n        // Enums can be merged with other enums if they are both\n        //  const or both non-const.\n        const isConst = !!(bindingType & BIND_FLAGS_TS_CONST_ENUM);\n        const wasConst = scope.constEnums.has(name);\n        return isConst !== wasConst;\n      }\n      return true;\n    }\n    if (bindingType & BIND_FLAGS_CLASS && scope.classes.has(name)) {\n      if (scope.lexical.has(name)) {\n        // Classes can be merged with interfaces\n        return !!(bindingType & BIND_KIND_VALUE);\n      } else {\n        // Interface can be merged with other classes or interfaces\n        return false;\n      }\n    }\n    if (bindingType & BIND_KIND_TYPE && scope.types.has(name)) {\n      return true;\n    }\n\n    return super.isRedeclaredInScope(...arguments);\n  }\n\n  checkLocalExport(id: N.Identifier) {\n    const topLevelScope = this.scopeStack[0];\n    const { name } = id;\n    if (\n      !topLevelScope.types.has(name) &&\n      !topLevelScope.exportOnlyBindings.has(name)\n    ) {\n      super.checkLocalExport(id);\n    }\n  }\n}\n","// @flow\n\n/*:: declare var invariant; */\n\n// Error messages are colocated with the plugin.\n/* eslint-disable @babel/development-internal/dry-error-messages */\n\nimport type State from \"../../tokenizer/state\";\nimport {\n  tokenIsIdentifier,\n  tokenIsTSDeclarationStart,\n  tokenIsTSTypeOperator,\n  tokenOperatorPrecedence,\n  tokenIsKeywordOrIdentifier,\n  tt,\n  type TokenType,\n  tokenIsTemplate,\n} from \"../../tokenizer/types\";\nimport { types as tc } from \"../../tokenizer/context\";\nimport * as N from \"../../types\";\nimport type { Position } from \"../../util/location\";\nimport type Parser from \"../../parser\";\nimport {\n  type BindingTypes,\n  SCOPE_TS_MODULE,\n  SCOPE_OTHER,\n  BIND_TS_ENUM,\n  BIND_TS_CONST_ENUM,\n  BIND_TS_TYPE,\n  BIND_TS_INTERFACE,\n  BIND_TS_AMBIENT,\n  BIND_TS_NAMESPACE,\n  BIND_CLASS,\n  BIND_LEXICAL,\n} from \"../../util/scopeflags\";\nimport TypeScriptScopeHandler from \"./scope\";\nimport * as charCodes from \"charcodes\";\nimport type { ExpressionErrors } from \"../../parser/util\";\nimport { PARAM } from \"../../util/production-parameter\";\nimport {\n  Errors,\n  makeErrorTemplates,\n  type ErrorTemplate,\n  ErrorCodes,\n} from \"../../parser/error\";\nimport { cloneIdentifier } from \"../../parser/node\";\n\ntype TsModifier =\n  | \"readonly\"\n  | \"abstract\"\n  | \"declare\"\n  | \"static\"\n  | \"override\"\n  | N.Accessibility;\n\nfunction nonNull<T>(x: ?T): T {\n  if (x == null) {\n    // $FlowIgnore\n    throw new Error(`Unexpected ${x} value.`);\n  }\n  return x;\n}\n\nfunction assert(x: boolean): void {\n  if (!x) {\n    throw new Error(\"Assert fail\");\n  }\n}\n\ntype ParsingContext =\n  | \"EnumMembers\"\n  | \"HeritageClauseElement\"\n  | \"TupleElementTypes\"\n  | \"TypeMembers\"\n  | \"TypeParametersOrArguments\";\n\n/* eslint sort-keys: \"error\" */\nconst TSErrors = makeErrorTemplates(\n  {\n    AbstractMethodHasImplementation:\n      \"Method '%0' cannot have an implementation because it is marked abstract.\",\n    AbstractPropertyHasInitializer:\n      \"Property '%0' cannot have an initializer because it is marked abstract.\",\n    AccesorCannotDeclareThisParameter:\n      \"'get' and 'set' accessors cannot declare 'this' parameters.\",\n    AccesorCannotHaveTypeParameters: \"An accessor cannot have type parameters.\",\n    ClassMethodHasDeclare: \"Class methods cannot have the 'declare' modifier.\",\n    ClassMethodHasReadonly:\n      \"Class methods cannot have the 'readonly' modifier.\",\n    ConstructorHasTypeParameters:\n      \"Type parameters cannot appear on a constructor declaration.\",\n    DeclareAccessor: \"'declare' is not allowed in %0ters.\",\n    DeclareClassFieldHasInitializer:\n      \"Initializers are not allowed in ambient contexts.\",\n    DeclareFunctionHasImplementation:\n      \"An implementation cannot be declared in ambient contexts.\",\n    DuplicateAccessibilityModifier: \"Accessibility modifier already seen.\",\n    DuplicateModifier: \"Duplicate modifier: '%0'.\",\n    EmptyHeritageClauseType: \"'%0' list cannot be empty.\",\n    EmptyTypeArguments: \"Type argument list cannot be empty.\",\n    EmptyTypeParameters: \"Type parameter list cannot be empty.\",\n    ExpectedAmbientAfterExportDeclare:\n      \"'export declare' must be followed by an ambient declaration.\",\n    ImportAliasHasImportType: \"An import alias can not use 'import type'.\",\n    IncompatibleModifiers: \"'%0' modifier cannot be used with '%1' modifier.\",\n    IndexSignatureHasAbstract:\n      \"Index signatures cannot have the 'abstract' modifier.\",\n    IndexSignatureHasAccessibility:\n      \"Index signatures cannot have an accessibility modifier ('%0').\",\n    IndexSignatureHasDeclare:\n      \"Index signatures cannot have the 'declare' modifier.\",\n    IndexSignatureHasOverride:\n      \"'override' modifier cannot appear on an index signature.\",\n    IndexSignatureHasStatic:\n      \"Index signatures cannot have the 'static' modifier.\",\n    InvalidModifierOnTypeMember:\n      \"'%0' modifier cannot appear on a type member.\",\n    InvalidModifiersOrder: \"'%0' modifier must precede '%1' modifier.\",\n    InvalidTupleMemberLabel:\n      \"Tuple members must be labeled with a simple identifier.\",\n    MissingInterfaceName:\n      \"'interface' declarations must be followed by an identifier.\",\n    MixedLabeledAndUnlabeledElements:\n      \"Tuple members must all have names or all not have names.\",\n    NonAbstractClassHasAbstractMethod:\n      \"Abstract methods can only appear within an abstract class.\",\n    NonClassMethodPropertyHasAbstractModifer:\n      \"'abstract' modifier can only appear on a class, method, or property declaration.\",\n    OptionalTypeBeforeRequired:\n      \"A required element cannot follow an optional element.\",\n    OverrideNotInSubClass:\n      \"This member cannot have an 'override' modifier because its containing class does not extend another class.\",\n    PatternIsOptional:\n      \"A binding pattern parameter cannot be optional in an implementation signature.\",\n    PrivateElementHasAbstract:\n      \"Private elements cannot have the 'abstract' modifier.\",\n    PrivateElementHasAccessibility:\n      \"Private elements cannot have an accessibility modifier ('%0').\",\n    ReadonlyForMethodSignature:\n      \"'readonly' modifier can only appear on a property declaration or index signature.\",\n    ReservedArrowTypeParam:\n      \"This syntax is reserved in files with the .mts or .cts extension. Add a trailing comma, as in `<T,>() => ...`.\",\n    ReservedTypeAssertion:\n      \"This syntax is reserved in files with the .mts or .cts extension. Use an `as` expression instead.\",\n    SetAccesorCannotHaveOptionalParameter:\n      \"A 'set' accessor cannot have an optional parameter.\",\n    SetAccesorCannotHaveRestParameter:\n      \"A 'set' accessor cannot have rest parameter.\",\n    SetAccesorCannotHaveReturnType:\n      \"A 'set' accessor cannot have a return type annotation.\",\n    StaticBlockCannotHaveModifier:\n      \"Static class blocks cannot have any modifier.\",\n    TypeAnnotationAfterAssign:\n      \"Type annotations must come before default assignments, e.g. instead of `age = 25: number` use `age: number = 25`.\",\n    TypeImportCannotSpecifyDefaultAndNamed:\n      \"A type-only import can specify a default import or named bindings, but not both.\",\n    TypeModifierIsUsedInTypeExports:\n      \"The 'type' modifier cannot be used on a named export when 'export type' is used on its export statement.\",\n    TypeModifierIsUsedInTypeImports:\n      \"The 'type' modifier cannot be used on a named import when 'import type' is used on its import statement.\",\n    UnexpectedParameterModifier:\n      \"A parameter property is only allowed in a constructor implementation.\",\n    UnexpectedReadonly:\n      \"'readonly' type modifier is only permitted on array and tuple literal types.\",\n    UnexpectedTypeAnnotation: \"Did not expect a type annotation here.\",\n    UnexpectedTypeCastInParameter:\n      \"Unexpected type cast in parameter position.\",\n    UnsupportedImportTypeArgument:\n      \"Argument in a type import must be a string literal.\",\n    UnsupportedParameterPropertyKind:\n      \"A parameter property may not be declared using a binding pattern.\",\n    UnsupportedSignatureParameterKind:\n      \"Name in a signature must be an Identifier, ObjectPattern or ArrayPattern, instead got %0.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n  /* syntaxPlugin */ \"typescript\",\n);\n/* eslint-disable sort-keys */\n\n// Doesn't handle \"void\" or \"null\" because those are keywords, not identifiers.\n// It also doesn't handle \"intrinsic\", since usually it's not a keyword.\nfunction keywordTypeFromName(\n  value: string,\n): N.TsKeywordTypeType | typeof undefined {\n  switch (value) {\n    case \"any\":\n      return \"TSAnyKeyword\";\n    case \"boolean\":\n      return \"TSBooleanKeyword\";\n    case \"bigint\":\n      return \"TSBigIntKeyword\";\n    case \"never\":\n      return \"TSNeverKeyword\";\n    case \"number\":\n      return \"TSNumberKeyword\";\n    case \"object\":\n      return \"TSObjectKeyword\";\n    case \"string\":\n      return \"TSStringKeyword\";\n    case \"symbol\":\n      return \"TSSymbolKeyword\";\n    case \"undefined\":\n      return \"TSUndefinedKeyword\";\n    case \"unknown\":\n      return \"TSUnknownKeyword\";\n    default:\n      return undefined;\n  }\n}\n\nfunction tsIsAccessModifier(modifier: string): boolean %checks {\n  return (\n    modifier === \"private\" || modifier === \"public\" || modifier === \"protected\"\n  );\n}\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    getScopeHandler(): Class<TypeScriptScopeHandler> {\n      return TypeScriptScopeHandler;\n    }\n\n    tsIsIdentifier(): boolean {\n      // TODO: actually a bit more complex in TypeScript, but shouldn't matter.\n      // See https://github.com/Microsoft/TypeScript/issues/15008\n      return tokenIsIdentifier(this.state.type);\n    }\n\n    tsTokenCanFollowModifier() {\n      return (\n        (this.match(tt.bracketL) ||\n          this.match(tt.braceL) ||\n          this.match(tt.star) ||\n          this.match(tt.ellipsis) ||\n          this.match(tt.privateName) ||\n          this.isLiteralPropertyName()) &&\n        !this.hasPrecedingLineBreak()\n      );\n    }\n\n    tsNextTokenCanFollowModifier() {\n      // Note: TypeScript's implementation is much more complicated because\n      // more things are considered modifiers there.\n      // This implementation only handles modifiers not handled by @babel/parser itself. And \"static\".\n      // TODO: Would be nice to avoid lookahead. Want a hasLineBreakUpNext() method...\n      this.next();\n      return this.tsTokenCanFollowModifier();\n    }\n\n    /** Parses a modifier matching one the given modifier names. */\n    tsParseModifier<T: TsModifier>(\n      allowedModifiers: T[],\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): ?T {\n      if (!tokenIsIdentifier(this.state.type)) {\n        return undefined;\n      }\n\n      const modifier = this.state.value;\n      if (allowedModifiers.indexOf(modifier) !== -1) {\n        if (stopOnStartOfClassStaticBlock && this.tsIsStartOfStaticBlocks()) {\n          return undefined;\n        }\n        if (this.tsTryParse(this.tsNextTokenCanFollowModifier.bind(this))) {\n          return modifier;\n        }\n      }\n      return undefined;\n    }\n\n    /** Parses a list of modifiers, in any order.\n     *  If you need a specific order, you must call this function multiple times:\n     *    this.tsParseModifiers(node, [\"public\"]);\n     *    this.tsParseModifiers(node, [\"abstract\", \"readonly\"]);\n     */\n    tsParseModifiers(\n      modified: {\n        [key: TsModifier]: ?true,\n        accessibility?: N.Accessibility,\n      },\n      allowedModifiers: TsModifier[],\n      disallowedModifiers?: TsModifier[],\n      errorTemplate?: ErrorTemplate,\n      stopOnStartOfClassStaticBlock?: boolean,\n    ): void {\n      const enforceOrder = (pos, modifier, before, after) => {\n        if (modifier === before && modified[after]) {\n          this.raise(pos, TSErrors.InvalidModifiersOrder, before, after);\n        }\n      };\n      const incompatible = (pos, modifier, mod1, mod2) => {\n        if (\n          (modified[mod1] && modifier === mod2) ||\n          (modified[mod2] && modifier === mod1)\n        ) {\n          this.raise(pos, TSErrors.IncompatibleModifiers, mod1, mod2);\n        }\n      };\n\n      for (;;) {\n        const startPos = this.state.start;\n        const modifier: ?TsModifier = this.tsParseModifier(\n          allowedModifiers.concat(disallowedModifiers ?? []),\n          stopOnStartOfClassStaticBlock,\n        );\n\n        if (!modifier) break;\n\n        if (tsIsAccessModifier(modifier)) {\n          if (modified.accessibility) {\n            this.raise(startPos, TSErrors.DuplicateAccessibilityModifier);\n          } else {\n            enforceOrder(startPos, modifier, modifier, \"override\");\n            enforceOrder(startPos, modifier, modifier, \"static\");\n            enforceOrder(startPos, modifier, modifier, \"readonly\");\n\n            modified.accessibility = modifier;\n          }\n        } else {\n          if (Object.hasOwnProperty.call(modified, modifier)) {\n            this.raise(startPos, TSErrors.DuplicateModifier, modifier);\n          } else {\n            enforceOrder(startPos, modifier, \"static\", \"readonly\");\n            enforceOrder(startPos, modifier, \"static\", \"override\");\n            enforceOrder(startPos, modifier, \"override\", \"readonly\");\n            enforceOrder(startPos, modifier, \"abstract\", \"override\");\n\n            incompatible(startPos, modifier, \"declare\", \"override\");\n            incompatible(startPos, modifier, \"static\", \"abstract\");\n          }\n          modified[modifier] = true;\n        }\n\n        if (disallowedModifiers?.includes(modifier)) {\n          this.raise(\n            startPos,\n            // $FlowIgnore\n            errorTemplate,\n            modifier,\n          );\n        }\n      }\n    }\n\n    tsIsListTerminator(kind: ParsingContext): boolean {\n      switch (kind) {\n        case \"EnumMembers\":\n        case \"TypeMembers\":\n          return this.match(tt.braceR);\n        case \"HeritageClauseElement\":\n          return this.match(tt.braceL);\n        case \"TupleElementTypes\":\n          return this.match(tt.bracketR);\n        case \"TypeParametersOrArguments\":\n          return this.match(tt.gt);\n      }\n\n      throw new Error(\"Unreachable\");\n    }\n\n    tsParseList<T: N.Node>(kind: ParsingContext, parseElement: () => T): T[] {\n      const result: T[] = [];\n      while (!this.tsIsListTerminator(kind)) {\n        // Skipping \"parseListElement\" from the TS source since that's just for error handling.\n        result.push(parseElement());\n      }\n      return result;\n    }\n\n    tsParseDelimitedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      return nonNull(\n        this.tsParseDelimitedListWorker(\n          kind,\n          parseElement,\n          /* expectSuccess */ true,\n          refTrailingCommaPos,\n        ),\n      );\n    }\n\n    /**\n     * If !expectSuccess, returns undefined instead of failing to parse.\n     * If expectSuccess, parseElement should always return a defined value.\n     */\n    tsParseDelimitedListWorker<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => ?T,\n      expectSuccess: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): ?(T[]) {\n      const result = [];\n      let trailingCommaPos = -1;\n\n      for (;;) {\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n        trailingCommaPos = -1;\n\n        const element = parseElement();\n        if (element == null) {\n          return undefined;\n        }\n        result.push(element);\n\n        if (this.eat(tt.comma)) {\n          trailingCommaPos = this.state.lastTokStart;\n          continue;\n        }\n\n        if (this.tsIsListTerminator(kind)) {\n          break;\n        }\n\n        if (expectSuccess) {\n          // This will fail with an error about a missing comma\n          this.expect(tt.comma);\n        }\n        return undefined;\n      }\n\n      if (refTrailingCommaPos) {\n        refTrailingCommaPos.value = trailingCommaPos;\n      }\n\n      return result;\n    }\n\n    tsParseBracketedList<T: N.Node>(\n      kind: ParsingContext,\n      parseElement: () => T,\n      bracket: boolean,\n      skipFirstToken: boolean,\n      refTrailingCommaPos?: { value: number },\n    ): T[] {\n      if (!skipFirstToken) {\n        if (bracket) {\n          this.expect(tt.bracketL);\n        } else {\n          this.expect(tt.lt);\n        }\n      }\n\n      const result = this.tsParseDelimitedList(\n        kind,\n        parseElement,\n        refTrailingCommaPos,\n      );\n\n      if (bracket) {\n        this.expect(tt.bracketR);\n      } else {\n        this.expect(tt.gt);\n      }\n\n      return result;\n    }\n\n    tsParseImportType(): N.TsImportType {\n      const node: N.TsImportType = this.startNode();\n      this.expect(tt._import);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        this.raise(this.state.start, TSErrors.UnsupportedImportTypeArgument);\n      }\n\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.argument = this.parseExprAtom();\n      this.expect(tt.parenR);\n\n      if (this.eat(tt.dot)) {\n        node.qualifier = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSImportType\");\n    }\n\n    tsParseEntityName(allowReservedWords: boolean): N.TsEntityName {\n      let entity: N.TsEntityName = this.parseIdentifier();\n      while (this.eat(tt.dot)) {\n        const node: N.TsQualifiedName = this.startNodeAtNode(entity);\n        node.left = entity;\n        node.right = this.parseIdentifier(allowReservedWords);\n        entity = this.finishNode(node, \"TSQualifiedName\");\n      }\n      return entity;\n    }\n\n    tsParseTypeReference(): N.TsTypeReference {\n      const node: N.TsTypeReference = this.startNode();\n      node.typeName = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (!this.hasPrecedingLineBreak() && this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n      return this.finishNode(node, \"TSTypeReference\");\n    }\n\n    tsParseThisTypePredicate(lhs: N.TsThisType): N.TsTypePredicate {\n      this.next();\n      const node: N.TsTypePredicate = this.startNodeAtNode(lhs);\n      node.parameterName = lhs;\n      node.typeAnnotation = this.tsParseTypeAnnotation(/* eatColon */ false);\n      node.asserts = false;\n      return this.finishNode(node, \"TSTypePredicate\");\n    }\n\n    tsParseThisTypeNode(): N.TsThisType {\n      const node: N.TsThisType = this.startNode();\n      this.next();\n      return this.finishNode(node, \"TSThisType\");\n    }\n\n    tsParseTypeQuery(): N.TsTypeQuery {\n      const node: N.TsTypeQuery = this.startNode();\n      this.expect(tt._typeof);\n      if (this.match(tt._import)) {\n        node.exprName = this.tsParseImportType();\n      } else {\n        node.exprName = this.tsParseEntityName(/* allowReservedWords */ true);\n      }\n      return this.finishNode(node, \"TSTypeQuery\");\n    }\n\n    tsParseTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsEatThenParseType(tt._extends);\n      node.default = this.tsEatThenParseType(tt.eq);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsTryParseTypeParameters(): ?N.TsTypeParameterDeclaration {\n      if (this.match(tt.lt)) {\n        return this.tsParseTypeParameters();\n      }\n    }\n\n    tsParseTypeParameters() {\n      const node: N.TsTypeParameterDeclaration = this.startNode();\n\n      if (this.match(tt.lt) || this.match(tt.jsxTagStart)) {\n        this.next();\n      } else {\n        this.unexpected();\n      }\n\n      const refTrailingCommaPos = { value: -1 };\n\n      node.params = this.tsParseBracketedList(\n        \"TypeParametersOrArguments\",\n        this.tsParseTypeParameter.bind(this),\n        /* bracket */ false,\n        /* skipFirstToken */ true,\n        refTrailingCommaPos,\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeParameters);\n      }\n      if (refTrailingCommaPos.value !== -1) {\n        this.addExtra(node, \"trailingComma\", refTrailingCommaPos.value);\n      }\n      return this.finishNode(node, \"TSTypeParameterDeclaration\");\n    }\n\n    tsTryNextParseConstantContext(): ?N.TsTypeReference {\n      if (this.lookahead().type === tt._const) {\n        this.next();\n        return this.tsParseTypeReference();\n      }\n      return null;\n    }\n\n    // Note: In TypeScript implementation we must provide `yieldContext` and `awaitContext`,\n    // but here it's always false, because this is only used for types.\n    tsFillSignature(\n      returnToken: TokenType,\n      signature: N.TsSignatureDeclaration,\n    ): void {\n      // Arrow fns *must* have return token (`=>`). Normal functions can omit it.\n      const returnTokenRequired = returnToken === tt.arrow;\n      signature.typeParameters = this.tsTryParseTypeParameters();\n      this.expect(tt.parenL);\n      signature.parameters = this.tsParseBindingListForSignature();\n      if (returnTokenRequired) {\n        signature.typeAnnotation =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      } else if (this.match(returnToken)) {\n        signature.typeAnnotation =\n          this.tsParseTypeOrTypePredicateAnnotation(returnToken);\n      }\n    }\n\n    tsParseBindingListForSignature(): $ReadOnlyArray<\n      N.Identifier | N.RestElement | N.ObjectPattern | N.ArrayPattern,\n    > {\n      return this.parseBindingList(tt.parenR, charCodes.rightParenthesis).map(\n        pattern => {\n          if (\n            pattern.type !== \"Identifier\" &&\n            pattern.type !== \"RestElement\" &&\n            pattern.type !== \"ObjectPattern\" &&\n            pattern.type !== \"ArrayPattern\"\n          ) {\n            this.raise(\n              pattern.start,\n              TSErrors.UnsupportedSignatureParameterKind,\n              pattern.type,\n            );\n          }\n          return (pattern: any);\n        },\n      );\n    }\n\n    tsParseTypeMemberSemicolon(): void {\n      if (!this.eat(tt.comma) && !this.isLineTerminator()) {\n        this.expect(tt.semi);\n      }\n    }\n\n    tsParseSignatureMember(\n      kind: \"TSCallSignatureDeclaration\" | \"TSConstructSignatureDeclaration\",\n      node: N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration,\n    ): N.TsCallSignatureDeclaration | N.TsConstructSignatureDeclaration {\n      this.tsFillSignature(tt.colon, node);\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, kind);\n    }\n\n    tsIsUnambiguouslyIndexSignature() {\n      this.next(); // Skip '{'\n      if (tokenIsIdentifier(this.state.type)) {\n        this.next();\n        return this.match(tt.colon);\n      }\n      return false;\n    }\n\n    tsTryParseIndexSignature(node: N.Node): ?N.TsIndexSignature {\n      if (\n        !(\n          this.match(tt.bracketL) &&\n          this.tsLookAhead(this.tsIsUnambiguouslyIndexSignature.bind(this))\n        )\n      ) {\n        return undefined;\n      }\n\n      this.expect(tt.bracketL);\n      const id = this.parseIdentifier();\n      id.typeAnnotation = this.tsParseTypeAnnotation();\n      this.resetEndLocation(id); // set end position to end of type\n\n      this.expect(tt.bracketR);\n      node.parameters = [id];\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n      this.tsParseTypeMemberSemicolon();\n      return this.finishNode(node, \"TSIndexSignature\");\n    }\n\n    tsParsePropertyOrMethodSignature(\n      node: N.TsPropertySignature | N.TsMethodSignature,\n      readonly: boolean,\n    ): N.TsPropertySignature | N.TsMethodSignature {\n      if (this.eat(tt.question)) node.optional = true;\n      const nodeAny: any = node;\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        if (readonly) {\n          this.raise(node.start, TSErrors.ReadonlyForMethodSignature);\n        }\n        const method: N.TsMethodSignature = nodeAny;\n        if (method.kind && this.match(tt.lt)) {\n          this.raise(this.state.pos, TSErrors.AccesorCannotHaveTypeParameters);\n        }\n        this.tsFillSignature(tt.colon, method);\n        this.tsParseTypeMemberSemicolon();\n        if (method.kind === \"get\") {\n          if (method.parameters.length > 0) {\n            this.raise(this.state.pos, Errors.BadGetterArity);\n            if (this.isThisParam(method.parameters[0])) {\n              this.raise(\n                this.state.pos,\n                TSErrors.AccesorCannotDeclareThisParameter,\n              );\n            }\n          }\n        } else if (method.kind === \"set\") {\n          if (method.parameters.length !== 1) {\n            this.raise(this.state.pos, Errors.BadSetterArity);\n          } else {\n            const firstParameter = method.parameters[0];\n            if (this.isThisParam(firstParameter)) {\n              this.raise(\n                this.state.pos,\n                TSErrors.AccesorCannotDeclareThisParameter,\n              );\n            }\n            if (\n              firstParameter.type === \"Identifier\" &&\n              firstParameter.optional\n            ) {\n              this.raise(\n                this.state.pos,\n                TSErrors.SetAccesorCannotHaveOptionalParameter,\n              );\n            }\n            if (firstParameter.type === \"RestElement\") {\n              this.raise(\n                this.state.pos,\n                TSErrors.SetAccesorCannotHaveRestParameter,\n              );\n            }\n          }\n          if (method.typeAnnotation) {\n            this.raise(\n              method.typeAnnotation.start,\n              TSErrors.SetAccesorCannotHaveReturnType,\n            );\n          }\n        } else {\n          method.kind = \"method\";\n        }\n        return this.finishNode(method, \"TSMethodSignature\");\n      } else {\n        const property: N.TsPropertySignature = nodeAny;\n        if (readonly) property.readonly = true;\n        const type = this.tsTryParseTypeAnnotation();\n        if (type) property.typeAnnotation = type;\n        this.tsParseTypeMemberSemicolon();\n        return this.finishNode(property, \"TSPropertySignature\");\n      }\n    }\n\n    tsParseTypeMember(): N.TsTypeElement {\n      const node: any = this.startNode();\n\n      if (this.match(tt.parenL) || this.match(tt.lt)) {\n        return this.tsParseSignatureMember(\"TSCallSignatureDeclaration\", node);\n      }\n\n      if (this.match(tt._new)) {\n        const id: N.Identifier = this.startNode();\n        this.next();\n        if (this.match(tt.parenL) || this.match(tt.lt)) {\n          return this.tsParseSignatureMember(\n            \"TSConstructSignatureDeclaration\",\n            node,\n          );\n        } else {\n          node.key = this.createIdentifier(id, \"new\");\n          return this.tsParsePropertyOrMethodSignature(node, false);\n        }\n      }\n\n      this.tsParseModifiers(\n        node,\n        [\"readonly\"],\n        [\n          \"declare\",\n          \"abstract\",\n          \"private\",\n          \"protected\",\n          \"public\",\n          \"static\",\n          \"override\",\n        ],\n        TSErrors.InvalidModifierOnTypeMember,\n      );\n\n      const idx = this.tsTryParseIndexSignature(node);\n      if (idx) {\n        return idx;\n      }\n\n      this.parsePropertyName(node);\n      if (\n        !node.computed &&\n        node.key.type === \"Identifier\" &&\n        (node.key.name === \"get\" || node.key.name === \"set\") &&\n        this.tsTokenCanFollowModifier()\n      ) {\n        node.kind = node.key.name;\n        this.parsePropertyName(node);\n      }\n      return this.tsParsePropertyOrMethodSignature(node, !!node.readonly);\n    }\n\n    tsParseTypeLiteral(): N.TsTypeLiteral {\n      const node: N.TsTypeLiteral = this.startNode();\n      node.members = this.tsParseObjectTypeMembers();\n      return this.finishNode(node, \"TSTypeLiteral\");\n    }\n\n    tsParseObjectTypeMembers(): $ReadOnlyArray<N.TsTypeElement> {\n      this.expect(tt.braceL);\n      const members = this.tsParseList(\n        \"TypeMembers\",\n        this.tsParseTypeMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return members;\n    }\n\n    tsIsStartOfMappedType(): boolean {\n      this.next();\n      if (this.eat(tt.plusMin)) {\n        return this.isContextual(tt._readonly);\n      }\n      if (this.isContextual(tt._readonly)) {\n        this.next();\n      }\n      if (!this.match(tt.bracketL)) {\n        return false;\n      }\n      this.next();\n      if (!this.tsIsIdentifier()) {\n        return false;\n      }\n      this.next();\n      return this.match(tt._in);\n    }\n\n    tsParseMappedTypeParameter(): N.TsTypeParameter {\n      const node: N.TsTypeParameter = this.startNode();\n      node.name = this.tsParseTypeParameterName();\n      node.constraint = this.tsExpectThenParseType(tt._in);\n      return this.finishNode(node, \"TSTypeParameter\");\n    }\n\n    tsParseMappedType(): N.TsMappedType {\n      const node: N.TsMappedType = this.startNode();\n\n      this.expect(tt.braceL);\n\n      if (this.match(tt.plusMin)) {\n        node.readonly = this.state.value;\n        this.next();\n        this.expectContextual(tt._readonly);\n      } else if (this.eatContextual(tt._readonly)) {\n        node.readonly = true;\n      }\n\n      this.expect(tt.bracketL);\n      node.typeParameter = this.tsParseMappedTypeParameter();\n      node.nameType = this.eatContextual(tt._as) ? this.tsParseType() : null;\n\n      this.expect(tt.bracketR);\n\n      if (this.match(tt.plusMin)) {\n        node.optional = this.state.value;\n        this.next();\n        this.expect(tt.question);\n      } else if (this.eat(tt.question)) {\n        node.optional = true;\n      }\n\n      node.typeAnnotation = this.tsTryParseType();\n      this.semicolon();\n      this.expect(tt.braceR);\n\n      return this.finishNode(node, \"TSMappedType\");\n    }\n\n    tsParseTupleType(): N.TsTupleType {\n      const node: N.TsTupleType = this.startNode();\n      node.elementTypes = this.tsParseBracketedList(\n        \"TupleElementTypes\",\n        this.tsParseTupleElementType.bind(this),\n        /* bracket */ true,\n        /* skipFirstToken */ false,\n      );\n\n      // Validate the elementTypes to ensure that no mandatory elements\n      // follow optional elements\n      let seenOptionalElement = false;\n      let labeledElements = null;\n      node.elementTypes.forEach(elementNode => {\n        let { type } = elementNode;\n\n        if (\n          seenOptionalElement &&\n          type !== \"TSRestType\" &&\n          type !== \"TSOptionalType\" &&\n          !(type === \"TSNamedTupleMember\" && elementNode.optional)\n        ) {\n          this.raise(elementNode.start, TSErrors.OptionalTypeBeforeRequired);\n        }\n\n        // Flow doesn't support ||=\n        seenOptionalElement =\n          seenOptionalElement ||\n          (type === \"TSNamedTupleMember\" && elementNode.optional) ||\n          type === \"TSOptionalType\";\n\n        // When checking labels, check the argument of the spread operator\n        if (type === \"TSRestType\") {\n          elementNode = elementNode.typeAnnotation;\n          type = elementNode.type;\n        }\n\n        const isLabeled = type === \"TSNamedTupleMember\";\n        // Flow doesn't support ??=\n        labeledElements = labeledElements ?? isLabeled;\n        if (labeledElements !== isLabeled) {\n          this.raise(\n            elementNode.start,\n            TSErrors.MixedLabeledAndUnlabeledElements,\n          );\n        }\n      });\n\n      return this.finishNode(node, \"TSTupleType\");\n    }\n\n    tsParseTupleElementType(): N.TsType | N.TsNamedTupleMember {\n      // parses `...TsType[]`\n\n      const { start: startPos, startLoc } = this.state;\n\n      const rest = this.eat(tt.ellipsis);\n      let type = this.tsParseType();\n      const optional = this.eat(tt.question);\n      const labeled = this.eat(tt.colon);\n\n      if (labeled) {\n        const labeledNode: N.TsNamedTupleMember = this.startNodeAtNode(type);\n        labeledNode.optional = optional;\n\n        if (\n          type.type === \"TSTypeReference\" &&\n          !type.typeParameters &&\n          type.typeName.type === \"Identifier\"\n        ) {\n          labeledNode.label = (type.typeName: N.Identifier);\n        } else {\n          this.raise(type.start, TSErrors.InvalidTupleMemberLabel);\n          // This produces an invalid AST, but at least we don't drop\n          // nodes representing the invalid source.\n          // $FlowIgnore\n          labeledNode.label = type;\n        }\n\n        labeledNode.elementType = this.tsParseType();\n        type = this.finishNode(labeledNode, \"TSNamedTupleMember\");\n      } else if (optional) {\n        const optionalTypeNode: N.TsOptionalType = this.startNodeAtNode(type);\n        optionalTypeNode.typeAnnotation = type;\n        type = this.finishNode(optionalTypeNode, \"TSOptionalType\");\n      }\n\n      if (rest) {\n        const restNode: N.TsRestType = this.startNodeAt(startPos, startLoc);\n        restNode.typeAnnotation = type;\n        type = this.finishNode(restNode, \"TSRestType\");\n      }\n\n      return type;\n    }\n\n    tsParseParenthesizedType(): N.TsParenthesizedType {\n      const node = this.startNode();\n      this.expect(tt.parenL);\n      node.typeAnnotation = this.tsParseType();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSParenthesizedType\");\n    }\n\n    tsParseFunctionOrConstructorType(\n      type: \"TSFunctionType\" | \"TSConstructorType\",\n      abstract?: boolean,\n    ): N.TsFunctionOrConstructorType {\n      const node: N.TsFunctionOrConstructorType = this.startNode();\n      if (type === \"TSConstructorType\") {\n        // $FlowIgnore\n        node.abstract = !!abstract;\n        if (abstract) this.next();\n        this.next(); // eat `new`\n      }\n      this.tsFillSignature(tt.arrow, node);\n      return this.finishNode(node, type);\n    }\n\n    tsParseLiteralTypeNode(): N.TsLiteralType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = (() => {\n        switch (this.state.type) {\n          case tt.num:\n          case tt.bigint:\n          case tt.string:\n          case tt._true:\n          case tt._false:\n            // For compatibility to estree we cannot call parseLiteral directly here\n            return this.parseExprAtom();\n          default:\n            throw this.unexpected();\n        }\n      })();\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    tsParseTemplateLiteralType(): N.TsType {\n      const node: N.TsLiteralType = this.startNode();\n      node.literal = this.parseTemplate(false);\n      return this.finishNode(node, \"TSLiteralType\");\n    }\n\n    parseTemplateSubstitution(): N.TsType {\n      if (this.state.inType) return this.tsParseType();\n      return super.parseTemplateSubstitution();\n    }\n\n    tsParseThisTypeOrThisTypePredicate(): N.TsThisType | N.TsTypePredicate {\n      const thisKeyword = this.tsParseThisTypeNode();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        return this.tsParseThisTypePredicate(thisKeyword);\n      } else {\n        return thisKeyword;\n      }\n    }\n\n    tsParseNonArrayType(): N.TsType {\n      switch (this.state.type) {\n        case tt.string:\n        case tt.num:\n        case tt.bigint:\n        case tt._true:\n        case tt._false:\n          return this.tsParseLiteralTypeNode();\n        case tt.plusMin:\n          if (this.state.value === \"-\") {\n            const node: N.TsLiteralType = this.startNode();\n            const nextToken = this.lookahead();\n            if (nextToken.type !== tt.num && nextToken.type !== tt.bigint) {\n              throw this.unexpected();\n            }\n            node.literal = this.parseMaybeUnary();\n            return this.finishNode(node, \"TSLiteralType\");\n          }\n          break;\n        case tt._this:\n          return this.tsParseThisTypeOrThisTypePredicate();\n        case tt._typeof:\n          return this.tsParseTypeQuery();\n        case tt._import:\n          return this.tsParseImportType();\n        case tt.braceL:\n          return this.tsLookAhead(this.tsIsStartOfMappedType.bind(this))\n            ? this.tsParseMappedType()\n            : this.tsParseTypeLiteral();\n        case tt.bracketL:\n          return this.tsParseTupleType();\n        case tt.parenL:\n          if (process.env.BABEL_8_BREAKING) {\n            if (!this.options.createParenthesizedExpressions) {\n              const startPos = this.state.start;\n              this.next();\n              const type = this.tsParseType();\n              this.expect(tt.parenR);\n              this.addExtra(type, \"parenthesized\", true);\n              this.addExtra(type, \"parenStart\", startPos);\n              return type;\n            }\n          }\n\n          return this.tsParseParenthesizedType();\n        case tt.templateNonTail:\n        case tt.templateTail:\n          return this.tsParseTemplateLiteralType();\n        default: {\n          const { type } = this.state;\n          if (\n            tokenIsIdentifier(type) ||\n            type === tt._void ||\n            type === tt._null\n          ) {\n            const nodeType =\n              type === tt._void\n                ? \"TSVoidKeyword\"\n                : type === tt._null\n                ? \"TSNullKeyword\"\n                : keywordTypeFromName(this.state.value);\n            if (\n              nodeType !== undefined &&\n              this.lookaheadCharCode() !== charCodes.dot\n            ) {\n              const node: N.TsKeywordType = this.startNode();\n              this.next();\n              return this.finishNode(node, nodeType);\n            }\n            return this.tsParseTypeReference();\n          }\n        }\n      }\n\n      throw this.unexpected();\n    }\n\n    tsParseArrayTypeOrHigher(): N.TsType {\n      let type = this.tsParseNonArrayType();\n      while (!this.hasPrecedingLineBreak() && this.eat(tt.bracketL)) {\n        if (this.match(tt.bracketR)) {\n          const node: N.TsArrayType = this.startNodeAtNode(type);\n          node.elementType = type;\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSArrayType\");\n        } else {\n          const node: N.TsIndexedAccessType = this.startNodeAtNode(type);\n          node.objectType = type;\n          node.indexType = this.tsParseType();\n          this.expect(tt.bracketR);\n          type = this.finishNode(node, \"TSIndexedAccessType\");\n        }\n      }\n      return type;\n    }\n\n    tsParseTypeOperator(): N.TsTypeOperator {\n      const node: N.TsTypeOperator = this.startNode();\n      const operator = this.state.value;\n      this.next(); // eat operator\n      node.operator = operator;\n      node.typeAnnotation = this.tsParseTypeOperatorOrHigher();\n\n      if (operator === \"readonly\") {\n        this.tsCheckTypeAnnotationForReadOnly(node);\n      }\n\n      return this.finishNode(node, \"TSTypeOperator\");\n    }\n\n    tsCheckTypeAnnotationForReadOnly(node: N.Node) {\n      switch (node.typeAnnotation.type) {\n        case \"TSTupleType\":\n        case \"TSArrayType\":\n          return;\n        default:\n          this.raise(node.start, TSErrors.UnexpectedReadonly);\n      }\n    }\n\n    tsParseInferType(): N.TsInferType {\n      const node = this.startNode();\n      this.expectContextual(tt._infer);\n      const typeParameter = this.startNode();\n      typeParameter.name = this.tsParseTypeParameterName();\n      node.typeParameter = this.finishNode(typeParameter, \"TSTypeParameter\");\n      return this.finishNode(node, \"TSInferType\");\n    }\n\n    tsParseTypeOperatorOrHigher(): N.TsType {\n      const isTypeOperator =\n        tokenIsTSTypeOperator(this.state.type) && !this.state.containsEsc;\n      return isTypeOperator\n        ? this.tsParseTypeOperator()\n        : this.isContextual(tt._infer)\n        ? this.tsParseInferType()\n        : this.tsParseArrayTypeOrHigher();\n    }\n\n    tsParseUnionOrIntersectionType(\n      kind: \"TSUnionType\" | \"TSIntersectionType\",\n      parseConstituentType: () => N.TsType,\n      operator: TokenType,\n    ): N.TsType {\n      const node: N.TsUnionType | N.TsIntersectionType = this.startNode();\n      const hasLeadingOperator = this.eat(operator);\n      const types = [];\n      do {\n        types.push(parseConstituentType());\n      } while (this.eat(operator));\n      if (types.length === 1 && !hasLeadingOperator) {\n        return types[0];\n      }\n      node.types = types;\n      return this.finishNode(node, kind);\n    }\n\n    tsParseIntersectionTypeOrHigher(): N.TsType {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSIntersectionType\",\n        this.tsParseTypeOperatorOrHigher.bind(this),\n        tt.bitwiseAND,\n      );\n    }\n\n    tsParseUnionTypeOrHigher() {\n      return this.tsParseUnionOrIntersectionType(\n        \"TSUnionType\",\n        this.tsParseIntersectionTypeOrHigher.bind(this),\n        tt.bitwiseOR,\n      );\n    }\n\n    tsIsStartOfFunctionType() {\n      if (this.match(tt.lt)) {\n        return true;\n      }\n      return (\n        this.match(tt.parenL) &&\n        this.tsLookAhead(this.tsIsUnambiguouslyStartOfFunctionType.bind(this))\n      );\n    }\n\n    tsSkipParameterStart(): boolean {\n      if (tokenIsIdentifier(this.state.type) || this.match(tt._this)) {\n        this.next();\n        return true;\n      }\n\n      if (this.match(tt.braceL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.braceL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.braceR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      if (this.match(tt.bracketL)) {\n        let braceStackCounter = 1;\n        this.next();\n\n        while (braceStackCounter > 0) {\n          if (this.match(tt.bracketL)) {\n            ++braceStackCounter;\n          } else if (this.match(tt.bracketR)) {\n            --braceStackCounter;\n          }\n          this.next();\n        }\n        return true;\n      }\n\n      return false;\n    }\n\n    tsIsUnambiguouslyStartOfFunctionType(): boolean {\n      this.next();\n      if (this.match(tt.parenR) || this.match(tt.ellipsis)) {\n        // ( )\n        // ( ...\n        return true;\n      }\n      if (this.tsSkipParameterStart()) {\n        if (\n          this.match(tt.colon) ||\n          this.match(tt.comma) ||\n          this.match(tt.question) ||\n          this.match(tt.eq)\n        ) {\n          // ( xxx :\n          // ( xxx ,\n          // ( xxx ?\n          // ( xxx =\n          return true;\n        }\n        if (this.match(tt.parenR)) {\n          this.next();\n          if (this.match(tt.arrow)) {\n            // ( xxx ) =>\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    tsParseTypeOrTypePredicateAnnotation(\n      returnToken: TokenType,\n    ): N.TsTypeAnnotation {\n      return this.tsInType(() => {\n        const t: N.TsTypeAnnotation = this.startNode();\n        this.expect(returnToken);\n\n        const node = this.startNode<N.TsTypePredicate>();\n\n        const asserts = !!this.tsTryParse(\n          this.tsParseTypePredicateAsserts.bind(this),\n        );\n\n        if (asserts && this.match(tt._this)) {\n          // When asserts is false, thisKeyword is handled by tsParseNonArrayType\n          // : asserts this is type\n          let thisTypePredicate = this.tsParseThisTypeOrThisTypePredicate();\n          // if it turns out to be a `TSThisType`, wrap it with `TSTypePredicate`\n          // : asserts this\n          if (thisTypePredicate.type === \"TSThisType\") {\n            node.parameterName = (thisTypePredicate: N.TsThisType);\n            node.asserts = true;\n            (node: N.TsTypePredicate).typeAnnotation = null;\n            thisTypePredicate = this.finishNode(node, \"TSTypePredicate\");\n          } else {\n            this.resetStartLocationFromNode(thisTypePredicate, node);\n            (thisTypePredicate: N.TsTypePredicate).asserts = true;\n          }\n          t.typeAnnotation = thisTypePredicate;\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        const typePredicateVariable =\n          this.tsIsIdentifier() &&\n          this.tsTryParse(this.tsParseTypePredicatePrefix.bind(this));\n\n        if (!typePredicateVariable) {\n          if (!asserts) {\n            // : type\n            return this.tsParseTypeAnnotation(/* eatColon */ false, t);\n          }\n\n          // : asserts foo\n          node.parameterName = this.parseIdentifier();\n          node.asserts = asserts;\n          (node: N.TsTypePredicate).typeAnnotation = null;\n          t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n          return this.finishNode(t, \"TSTypeAnnotation\");\n        }\n\n        // : asserts foo is type\n        const type = this.tsParseTypeAnnotation(/* eatColon */ false);\n        node.parameterName = typePredicateVariable;\n        node.typeAnnotation = type;\n        node.asserts = asserts;\n        t.typeAnnotation = this.finishNode(node, \"TSTypePredicate\");\n        return this.finishNode(t, \"TSTypeAnnotation\");\n      });\n    }\n\n    tsTryParseTypeOrTypePredicateAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon)\n        ? this.tsParseTypeOrTypePredicateAnnotation(tt.colon)\n        : undefined;\n    }\n\n    tsTryParseTypeAnnotation(): ?N.TsTypeAnnotation {\n      return this.match(tt.colon) ? this.tsParseTypeAnnotation() : undefined;\n    }\n\n    tsTryParseType(): ?N.TsType {\n      return this.tsEatThenParseType(tt.colon);\n    }\n\n    tsParseTypePredicatePrefix(): ?N.Identifier {\n      const id = this.parseIdentifier();\n      if (this.isContextual(tt._is) && !this.hasPrecedingLineBreak()) {\n        this.next();\n        return id;\n      }\n    }\n\n    tsParseTypePredicateAsserts(): boolean {\n      if (this.state.type !== tt._asserts) {\n        return false;\n      }\n      const containsEsc = this.state.containsEsc;\n      this.next();\n      if (!tokenIsIdentifier(this.state.type) && !this.match(tt._this)) {\n        return false;\n      }\n\n      if (containsEsc) {\n        this.raise(\n          this.state.lastTokStart,\n          Errors.InvalidEscapedReservedWord,\n          \"asserts\",\n        );\n      }\n\n      return true;\n    }\n\n    tsParseTypeAnnotation(\n      eatColon = true,\n      t: N.TsTypeAnnotation = this.startNode(),\n    ): N.TsTypeAnnotation {\n      this.tsInType(() => {\n        if (eatColon) this.expect(tt.colon);\n        t.typeAnnotation = this.tsParseType();\n      });\n      return this.finishNode(t, \"TSTypeAnnotation\");\n    }\n\n    /** Be sure to be in a type context before calling this, using `tsInType`. */\n    tsParseType(): N.TsType {\n      // Need to set `state.inType` so that we don't parse JSX in a type context.\n      assert(this.state.inType);\n      const type = this.tsParseNonConditionalType();\n      if (this.hasPrecedingLineBreak() || !this.eat(tt._extends)) {\n        return type;\n      }\n      const node: N.TsConditionalType = this.startNodeAtNode(type);\n      node.checkType = type;\n      node.extendsType = this.tsParseNonConditionalType();\n      this.expect(tt.question);\n      node.trueType = this.tsParseType();\n      this.expect(tt.colon);\n      node.falseType = this.tsParseType();\n      return this.finishNode(node, \"TSConditionalType\");\n    }\n\n    isAbstractConstructorSignature(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._new\n      );\n    }\n\n    tsParseNonConditionalType(): N.TsType {\n      if (this.tsIsStartOfFunctionType()) {\n        return this.tsParseFunctionOrConstructorType(\"TSFunctionType\");\n      }\n      if (this.match(tt._new)) {\n        // As in `new () => Date`\n        return this.tsParseFunctionOrConstructorType(\"TSConstructorType\");\n      } else if (this.isAbstractConstructorSignature()) {\n        // As in `abstract new () => Date`\n        return this.tsParseFunctionOrConstructorType(\n          \"TSConstructorType\",\n          /* abstract */ true,\n        );\n      }\n      return this.tsParseUnionTypeOrHigher();\n    }\n\n    tsParseTypeAssertion(): N.TsTypeAssertion {\n      if (this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")) {\n        this.raise(this.state.start, TSErrors.ReservedTypeAssertion);\n      }\n\n      const node: N.TsTypeAssertion = this.startNode();\n      const _const = this.tsTryNextParseConstantContext();\n      node.typeAnnotation = _const || this.tsNextThenParseType();\n      this.expect(tt.gt);\n      node.expression = this.parseMaybeUnary();\n      return this.finishNode(node, \"TSTypeAssertion\");\n    }\n\n    tsParseHeritageClause(\n      descriptor: string,\n    ): $ReadOnlyArray<N.TsExpressionWithTypeArguments> {\n      const originalStart = this.state.start;\n\n      const delimitedList = this.tsParseDelimitedList(\n        \"HeritageClauseElement\",\n        this.tsParseExpressionWithTypeArguments.bind(this),\n      );\n\n      if (!delimitedList.length) {\n        this.raise(originalStart, TSErrors.EmptyHeritageClauseType, descriptor);\n      }\n\n      return delimitedList;\n    }\n\n    tsParseExpressionWithTypeArguments(): N.TsExpressionWithTypeArguments {\n      const node: N.TsExpressionWithTypeArguments = this.startNode();\n      // Note: TS uses parseLeftHandSideExpressionOrHigher,\n      // then has grammar errors later if it's not an EntityName.\n      node.expression = this.tsParseEntityName(/* allowReservedWords */ false);\n      if (this.match(tt.lt)) {\n        node.typeParameters = this.tsParseTypeArguments();\n      }\n\n      return this.finishNode(node, \"TSExpressionWithTypeArguments\");\n    }\n\n    tsParseInterfaceDeclaration(\n      node: N.TsInterfaceDeclaration,\n    ): N.TsInterfaceDeclaration {\n      if (tokenIsIdentifier(this.state.type)) {\n        node.id = this.parseIdentifier();\n        this.checkLVal(\n          node.id,\n          \"typescript interface declaration\",\n          BIND_TS_INTERFACE,\n        );\n      } else {\n        node.id = null;\n        this.raise(this.state.start, TSErrors.MissingInterfaceName);\n      }\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      if (this.eat(tt._extends)) {\n        node.extends = this.tsParseHeritageClause(\"extends\");\n      }\n      const body: N.TSInterfaceBody = this.startNode();\n      body.body = this.tsInType(this.tsParseObjectTypeMembers.bind(this));\n      node.body = this.finishNode(body, \"TSInterfaceBody\");\n      return this.finishNode(node, \"TSInterfaceDeclaration\");\n    }\n\n    tsParseTypeAliasDeclaration(\n      node: N.TsTypeAliasDeclaration,\n    ): N.TsTypeAliasDeclaration {\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"typescript type alias\", BIND_TS_TYPE);\n\n      node.typeParameters = this.tsTryParseTypeParameters();\n      node.typeAnnotation = this.tsInType(() => {\n        this.expect(tt.eq);\n\n        if (\n          this.isContextual(tt._intrinsic) &&\n          this.lookahead().type !== tt.dot\n        ) {\n          const node: N.TsKeywordType = this.startNode();\n          this.next();\n          return this.finishNode(node, \"TSIntrinsicKeyword\");\n        }\n\n        return this.tsParseType();\n      });\n\n      this.semicolon();\n      return this.finishNode(node, \"TSTypeAliasDeclaration\");\n    }\n\n    tsInNoContext<T>(cb: () => T): T {\n      const oldContext = this.state.context;\n      this.state.context = [oldContext[0]];\n      try {\n        return cb();\n      } finally {\n        this.state.context = oldContext;\n      }\n    }\n\n    /**\n     * Runs `cb` in a type context.\n     * This should be called one token *before* the first type token,\n     * so that the call to `next()` is run in type context.\n     */\n    tsInType<T>(cb: () => T): T {\n      const oldInType = this.state.inType;\n      this.state.inType = true;\n      try {\n        return cb();\n      } finally {\n        this.state.inType = oldInType;\n      }\n    }\n\n    tsEatThenParseType(token: TokenType): N.TsType | typeof undefined {\n      return !this.match(token) ? undefined : this.tsNextThenParseType();\n    }\n\n    tsExpectThenParseType(token: TokenType): N.TsType {\n      return this.tsDoThenParseType(() => this.expect(token));\n    }\n\n    tsNextThenParseType(): N.TsType {\n      return this.tsDoThenParseType(() => this.next());\n    }\n\n    tsDoThenParseType(cb: () => void): N.TsType {\n      return this.tsInType(() => {\n        cb();\n        return this.tsParseType();\n      });\n    }\n\n    tsParseEnumMember(): N.TsEnumMember {\n      const node: N.TsEnumMember = this.startNode();\n      // Computed property names are grammar errors in an enum, so accept just string literal or identifier.\n      node.id = this.match(tt.string)\n        ? this.parseExprAtom()\n        : this.parseIdentifier(/* liberal */ true);\n      if (this.eat(tt.eq)) {\n        node.initializer = this.parseMaybeAssignAllowIn();\n      }\n      return this.finishNode(node, \"TSEnumMember\");\n    }\n\n    tsParseEnumDeclaration(\n      node: N.TsEnumDeclaration,\n      isConst: boolean,\n    ): N.TsEnumDeclaration {\n      if (isConst) node.const = true;\n      node.id = this.parseIdentifier();\n      this.checkLVal(\n        node.id,\n        \"typescript enum declaration\",\n        isConst ? BIND_TS_CONST_ENUM : BIND_TS_ENUM,\n      );\n\n      this.expect(tt.braceL);\n      node.members = this.tsParseDelimitedList(\n        \"EnumMembers\",\n        this.tsParseEnumMember.bind(this),\n      );\n      this.expect(tt.braceR);\n      return this.finishNode(node, \"TSEnumDeclaration\");\n    }\n\n    tsParseModuleBlock(): N.TsModuleBlock {\n      const node: N.TsModuleBlock = this.startNode();\n      this.scope.enter(SCOPE_OTHER);\n\n      this.expect(tt.braceL);\n      // Inside of a module block is considered \"top-level\", meaning it can have imports and exports.\n      this.parseBlockOrModuleBlockBody(\n        (node.body = []),\n        /* directives */ undefined,\n        /* topLevel */ true,\n        /* end */ tt.braceR,\n      );\n      this.scope.exit();\n      return this.finishNode(node, \"TSModuleBlock\");\n    }\n\n    tsParseModuleOrNamespaceDeclaration(\n      node: N.TsModuleDeclaration,\n      nested?: boolean = false,\n    ): N.TsModuleDeclaration {\n      node.id = this.parseIdentifier();\n\n      if (!nested) {\n        this.checkLVal(\n          node.id,\n          \"module or namespace declaration\",\n          BIND_TS_NAMESPACE,\n        );\n      }\n\n      if (this.eat(tt.dot)) {\n        const inner = this.startNode();\n        this.tsParseModuleOrNamespaceDeclaration(inner, true);\n        node.body = inner;\n      } else {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      }\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseAmbientExternalModuleDeclaration(\n      node: N.TsModuleDeclaration,\n    ): N.TsModuleDeclaration {\n      if (this.isContextual(tt._global)) {\n        node.global = true;\n        node.id = this.parseIdentifier();\n      } else if (this.match(tt.string)) {\n        node.id = this.parseExprAtom();\n      } else {\n        this.unexpected();\n      }\n      if (this.match(tt.braceL)) {\n        this.scope.enter(SCOPE_TS_MODULE);\n        this.prodParam.enter(PARAM);\n        node.body = this.tsParseModuleBlock();\n        this.prodParam.exit();\n        this.scope.exit();\n      } else {\n        this.semicolon();\n      }\n\n      return this.finishNode(node, \"TSModuleDeclaration\");\n    }\n\n    tsParseImportEqualsDeclaration(\n      node: N.TsImportEqualsDeclaration,\n      isExport?: boolean,\n    ): N.TsImportEqualsDeclaration {\n      node.isExport = isExport || false;\n      node.id = this.parseIdentifier();\n      this.checkLVal(node.id, \"import equals declaration\", BIND_LEXICAL);\n      this.expect(tt.eq);\n      const moduleReference = this.tsParseModuleReference();\n      if (\n        node.importKind === \"type\" &&\n        moduleReference.type !== \"TSExternalModuleReference\"\n      ) {\n        this.raise(moduleReference.start, TSErrors.ImportAliasHasImportType);\n      }\n      node.moduleReference = moduleReference;\n      this.semicolon();\n      return this.finishNode(node, \"TSImportEqualsDeclaration\");\n    }\n\n    tsIsExternalModuleReference(): boolean {\n      return (\n        this.isContextual(tt._require) &&\n        this.lookaheadCharCode() === charCodes.leftParenthesis\n      );\n    }\n\n    tsParseModuleReference(): N.TsModuleReference {\n      return this.tsIsExternalModuleReference()\n        ? this.tsParseExternalModuleReference()\n        : this.tsParseEntityName(/* allowReservedWords */ false);\n    }\n\n    tsParseExternalModuleReference(): N.TsExternalModuleReference {\n      const node: N.TsExternalModuleReference = this.startNode();\n      this.expectContextual(tt._require);\n      this.expect(tt.parenL);\n      if (!this.match(tt.string)) {\n        throw this.unexpected();\n      }\n      // For compatibility to estree we cannot call parseLiteral directly here\n      node.expression = this.parseExprAtom();\n      this.expect(tt.parenR);\n      return this.finishNode(node, \"TSExternalModuleReference\");\n    }\n\n    // Utilities\n\n    tsLookAhead<T>(f: () => T): T {\n      const state = this.state.clone();\n      const res = f();\n      this.state = state;\n      return res;\n    }\n\n    tsTryParseAndCatch<T: ?N.NodeBase>(f: () => T): ?T {\n      const result = this.tryParse(abort => f() || abort());\n\n      if (result.aborted || !result.node) return undefined;\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    tsTryParse<T>(f: () => ?T): ?T {\n      const state = this.state.clone();\n      const result = f();\n      if (result !== undefined && result !== false) {\n        return result;\n      } else {\n        this.state = state;\n        return undefined;\n      }\n    }\n\n    tsTryParseDeclare(nany: any): ?N.Declaration {\n      if (this.isLineTerminator()) {\n        return;\n      }\n      let starttype = this.state.type;\n      let kind;\n\n      if (this.isContextual(tt._let)) {\n        starttype = tt._var;\n        kind = \"let\";\n      }\n\n      return this.tsInAmbientContext(() => {\n        switch (starttype) {\n          case tt._function:\n            nany.declare = true;\n            return this.parseFunctionStatement(\n              nany,\n              /* async */ false,\n              /* declarationPosition */ true,\n            );\n          case tt._class:\n            // While this is also set by tsParseExpressionStatement, we need to set it\n            // before parsing the class declaration to now how to register it in the scope.\n            nany.declare = true;\n            return this.parseClass(\n              nany,\n              /* isStatement */ true,\n              /* optionalId */ false,\n            );\n          case tt._const:\n            if (this.match(tt._const) && this.isLookaheadContextual(\"enum\")) {\n              // `const enum = 0;` not allowed because \"enum\" is a strict mode reserved word.\n              this.expect(tt._const);\n              this.expectContextual(tt._enum);\n              return this.tsParseEnumDeclaration(nany, /* isConst */ true);\n            }\n          // falls through\n          case tt._var:\n            kind = kind || this.state.value;\n            return this.parseVarStatement(nany, kind);\n          case tt._global:\n            return this.tsParseAmbientExternalModuleDeclaration(nany);\n          default: {\n            if (tokenIsIdentifier(starttype)) {\n              return this.tsParseDeclaration(\n                nany,\n                this.state.value,\n                /* next */ true,\n              );\n            }\n          }\n        }\n      });\n    }\n\n    // Note: this won't be called unless the keyword is allowed in `shouldParseExportDeclaration`.\n    tsTryParseExportDeclaration(): ?N.Declaration {\n      return this.tsParseDeclaration(\n        this.startNode(),\n        this.state.value,\n        /* next */ true,\n      );\n    }\n\n    tsParseExpressionStatement(node: any, expr: N.Identifier): ?N.Declaration {\n      switch (expr.name) {\n        case \"declare\": {\n          const declaration = this.tsTryParseDeclare(node);\n          if (declaration) {\n            declaration.declare = true;\n            return declaration;\n          }\n          break;\n        }\n        case \"global\":\n          // `global { }` (with no `declare`) may appear inside an ambient module declaration.\n          // Would like to use tsParseAmbientExternalModuleDeclaration here, but already ran past \"global\".\n          if (this.match(tt.braceL)) {\n            this.scope.enter(SCOPE_TS_MODULE);\n            this.prodParam.enter(PARAM);\n            const mod: N.TsModuleDeclaration = node;\n            mod.global = true;\n            mod.id = expr;\n            mod.body = this.tsParseModuleBlock();\n            this.scope.exit();\n            this.prodParam.exit();\n            return this.finishNode(mod, \"TSModuleDeclaration\");\n          }\n          break;\n\n        default:\n          return this.tsParseDeclaration(node, expr.name, /* next */ false);\n      }\n    }\n\n    // Common to tsTryParseDeclare, tsTryParseExportDeclaration, and tsParseExpressionStatement.\n    tsParseDeclaration(\n      node: any,\n      value: string,\n      next: boolean,\n    ): ?N.Declaration {\n      // no declaration apart from enum can be followed by a line break.\n      switch (value) {\n        case \"abstract\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            (this.match(tt._class) || tokenIsIdentifier(this.state.type))\n          ) {\n            return this.tsParseAbstractDeclaration(node);\n          }\n          break;\n\n        case \"enum\":\n          if (next || tokenIsIdentifier(this.state.type)) {\n            if (next) this.next();\n            return this.tsParseEnumDeclaration(node, /* isConst */ false);\n          }\n          break;\n\n        case \"interface\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseInterfaceDeclaration(node);\n          }\n          break;\n\n        case \"module\":\n          if (this.tsCheckLineTerminator(next)) {\n            if (this.match(tt.string)) {\n              return this.tsParseAmbientExternalModuleDeclaration(node);\n            } else if (tokenIsIdentifier(this.state.type)) {\n              return this.tsParseModuleOrNamespaceDeclaration(node);\n            }\n          }\n          break;\n\n        case \"namespace\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseModuleOrNamespaceDeclaration(node);\n          }\n          break;\n\n        case \"type\":\n          if (\n            this.tsCheckLineTerminator(next) &&\n            tokenIsIdentifier(this.state.type)\n          ) {\n            return this.tsParseTypeAliasDeclaration(node);\n          }\n          break;\n      }\n    }\n\n    tsCheckLineTerminator(next: boolean) {\n      if (next) {\n        if (this.hasFollowingLineBreak()) return false;\n        this.next();\n        return true;\n      }\n      return !this.isLineTerminator();\n    }\n\n    tsTryParseGenericAsyncArrowFunction(\n      startPos: number,\n      startLoc: Position,\n    ): ?N.ArrowFunctionExpression {\n      if (!this.match(tt.lt)) {\n        return undefined;\n      }\n\n      const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n      this.state.maybeInArrowParameters = true;\n\n      const res: ?N.ArrowFunctionExpression = this.tsTryParseAndCatch(() => {\n        const node: N.ArrowFunctionExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        node.typeParameters = this.tsParseTypeParameters();\n        // Don't use overloaded parseFunctionParams which would look for \"<\" again.\n        super.parseFunctionParams(node);\n        node.returnType = this.tsTryParseTypeOrTypePredicateAnnotation();\n        this.expect(tt.arrow);\n        return node;\n      });\n\n      this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n      if (!res) {\n        return undefined;\n      }\n\n      return this.parseArrowExpression(\n        res,\n        /* params are already set */ null,\n        /* async */ true,\n      );\n    }\n\n    tsParseTypeArguments(): N.TsTypeParameterInstantiation {\n      const node = this.startNode();\n      node.params = this.tsInType(() =>\n        // Temporarily remove a JSX parsing context, which makes us scan different tokens.\n        this.tsInNoContext(() => {\n          this.expect(tt.lt);\n          return this.tsParseDelimitedList(\n            \"TypeParametersOrArguments\",\n            this.tsParseType.bind(this),\n          );\n        }),\n      );\n      if (node.params.length === 0) {\n        this.raise(node.start, TSErrors.EmptyTypeArguments);\n      }\n      this.expect(tt.gt);\n      return this.finishNode(node, \"TSTypeParameterInstantiation\");\n    }\n\n    tsIsDeclarationStart(): boolean {\n      return tokenIsTSDeclarationStart(this.state.type);\n    }\n\n    // ======================================================\n    // OVERRIDES\n    // ======================================================\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.tsIsDeclarationStart()) return false;\n      return super.isExportDefaultSpecifier();\n    }\n\n    parseAssignableListItem(\n      allowModifiers: ?boolean,\n      decorators: N.Decorator[],\n    ): N.Pattern | N.TSParameterProperty {\n      // Store original location/position to include modifiers in range\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      let accessibility: ?N.Accessibility;\n      let readonly = false;\n      let override = false;\n      if (allowModifiers !== undefined) {\n        const modified = {};\n        this.tsParseModifiers(modified, [\n          \"public\",\n          \"private\",\n          \"protected\",\n          \"override\",\n          \"readonly\",\n        ]);\n        accessibility = modified.accessibility;\n        override = modified.override;\n        readonly = modified.readonly;\n        if (\n          allowModifiers === false &&\n          (accessibility || readonly || override)\n        ) {\n          this.raise(startPos, TSErrors.UnexpectedParameterModifier);\n        }\n      }\n\n      const left = this.parseMaybeDefault();\n      this.parseAssignableListItemTypes(left);\n      const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n      if (accessibility || readonly || override) {\n        const pp: N.TSParameterProperty = this.startNodeAt(startPos, startLoc);\n        if (decorators.length) {\n          pp.decorators = decorators;\n        }\n        if (accessibility) pp.accessibility = accessibility;\n        if (readonly) pp.readonly = readonly;\n        if (override) pp.override = override;\n        if (elt.type !== \"Identifier\" && elt.type !== \"AssignmentPattern\") {\n          this.raise(pp.start, TSErrors.UnsupportedParameterPropertyKind);\n        }\n        pp.parameter = ((elt: any): N.Identifier | N.AssignmentPattern);\n        return this.finishNode(pp, \"TSParameterProperty\");\n      }\n\n      if (decorators.length) {\n        left.decorators = decorators;\n      }\n\n      return elt;\n    }\n\n    parseFunctionBodyAndFinish(\n      node: N.BodilessFunctionOrMethodBase,\n      type: string,\n      isMethod?: boolean = false,\n    ): void {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeOrTypePredicateAnnotation(tt.colon);\n      }\n\n      const bodilessType =\n        type === \"FunctionDeclaration\"\n          ? \"TSDeclareFunction\"\n          : type === \"ClassMethod\" || type === \"ClassPrivateMethod\"\n          ? \"TSDeclareMethod\"\n          : undefined;\n      if (bodilessType && !this.match(tt.braceL) && this.isLineTerminator()) {\n        this.finishNode(node, bodilessType);\n        return;\n      }\n      if (bodilessType === \"TSDeclareFunction\" && this.state.isAmbientContext) {\n        this.raise(node.start, TSErrors.DeclareFunctionHasImplementation);\n        if (\n          // $FlowIgnore\n          node.declare\n        ) {\n          super.parseFunctionBodyAndFinish(node, bodilessType, isMethod);\n          return;\n        }\n      }\n\n      super.parseFunctionBodyAndFinish(node, type, isMethod);\n    }\n\n    registerFunctionStatementId(node: N.Function): void {\n      if (!node.body && node.id) {\n        // Function ids are validated after parsing their body.\n        // For bodyless function, we need to do it here.\n        this.checkLVal(node.id, \"function name\", BIND_TS_AMBIENT);\n      } else {\n        super.registerFunctionStatementId(...arguments);\n      }\n    }\n\n    tsCheckForInvalidTypeCasts(items: $ReadOnlyArray<?N.Expression>) {\n      items.forEach(node => {\n        if (node?.type === \"TSTypeCastExpression\") {\n          this.raise(\n            node.typeAnnotation.start,\n            TSErrors.UnexpectedTypeAnnotation,\n          );\n        }\n      });\n    }\n\n    toReferencedList(\n      exprList: $ReadOnlyArray<?N.Expression>,\n      isInParens?: boolean, // eslint-disable-line no-unused-vars\n    ): $ReadOnlyArray<?N.Expression> {\n      // Handles invalid scenarios like: `f(a:b)`, `(a:b);`, and `(a:b,c:d)`.\n      //\n      // Note that `f<T>(a:b)` goes through a different path and is handled\n      // in `parseSubscript` directly.\n      this.tsCheckForInvalidTypeCasts(exprList);\n      return exprList;\n    }\n\n    parseArrayLike(...args): N.ArrayExpression | N.TupleExpression {\n      const node = super.parseArrayLike(...args);\n\n      if (node.type === \"ArrayExpression\") {\n        this.tsCheckForInvalidTypeCasts(node.elements);\n      }\n\n      return node;\n    }\n\n    parseSubscript(\n      base: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      noCalls: ?boolean,\n      state: N.ParseSubscriptState,\n    ): N.Expression {\n      if (!this.hasPrecedingLineBreak() && this.match(tt.bang)) {\n        // When ! is consumed as a postfix operator (non-null assertion),\n        // disallow JSX tag forming after. e.g. When parsing `p! < n.p!`\n        // `<n.p` can not be a start of JSX tag\n        this.state.canStartJSXElement = false;\n        this.next();\n\n        const nonNullExpression: N.TsNonNullExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        nonNullExpression.expression = base;\n        return this.finishNode(nonNullExpression, \"TSNonNullExpression\");\n      }\n\n      let isOptionalCall = false;\n      if (\n        this.match(tt.questionDot) &&\n        this.lookaheadCharCode() === charCodes.lessThan\n      ) {\n        if (noCalls) {\n          state.stop = true;\n          return base;\n        }\n        state.optionalChainMember = isOptionalCall = true;\n        this.next();\n      }\n\n      if (this.match(tt.lt)) {\n        let missingParenErrorPos;\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // There are number of things we are going to \"maybe\" parse, like type arguments on\n        // tagged template expressions. If any of them fail, walk it back and continue.\n        const result = this.tsTryParseAndCatch(() => {\n          if (!noCalls && this.atPossibleAsyncArrow(base)) {\n            // Almost certainly this is a generic async function `async <T>() => ...\n            // But it might be a call with a type argument `async<T>();`\n            const asyncArrowFn = this.tsTryParseGenericAsyncArrowFunction(\n              startPos,\n              startLoc,\n            );\n            if (asyncArrowFn) {\n              return asyncArrowFn;\n            }\n          }\n\n          const node: N.CallExpression = this.startNodeAt(startPos, startLoc);\n          node.callee = base;\n\n          const typeArguments = this.tsParseTypeArguments();\n\n          if (typeArguments) {\n            if (isOptionalCall && !this.match(tt.parenL)) {\n              missingParenErrorPos = this.state.pos;\n              this.unexpected();\n            }\n\n            if (!noCalls && this.eat(tt.parenL)) {\n              // possibleAsync always false here, because we would have handled it above.\n              // $FlowIgnore (won't be any undefined arguments)\n              node.arguments = this.parseCallExpressionArguments(\n                tt.parenR,\n                /* possibleAsync */ false,\n              );\n\n              // Handles invalid case: `f<T>(a:b)`\n              this.tsCheckForInvalidTypeCasts(node.arguments);\n\n              node.typeParameters = typeArguments;\n              if (state.optionalChainMember) {\n                // $FlowIgnore\n                node.optional = isOptionalCall;\n              }\n\n              return this.finishCallExpression(node, state.optionalChainMember);\n            } else if (tokenIsTemplate(this.state.type)) {\n              const result = this.parseTaggedTemplateExpression(\n                base,\n                startPos,\n                startLoc,\n                state,\n              );\n              result.typeParameters = typeArguments;\n              return result;\n            }\n          }\n\n          this.unexpected();\n        });\n\n        if (missingParenErrorPos) {\n          this.unexpected(missingParenErrorPos, tt.parenL);\n        }\n\n        if (result) return result;\n      }\n\n      return super.parseSubscript(base, startPos, startLoc, noCalls, state);\n    }\n\n    parseNewArguments(node: N.NewExpression): void {\n      if (this.match(tt.lt)) {\n        // tsTryParseAndCatch is expensive, so avoid if not necessary.\n        // 99% certain this is `new C<T>();`. But may be `new C < T;`, which is also legal.\n        const typeParameters = this.tsTryParseAndCatch(() => {\n          const args = this.tsParseTypeArguments();\n          if (!this.match(tt.parenL)) this.unexpected();\n          return args;\n        });\n        if (typeParameters) {\n          node.typeParameters = typeParameters;\n        }\n      }\n\n      super.parseNewArguments(node);\n    }\n\n    parseExprOp(\n      left: N.Expression,\n      leftStartPos: number,\n      leftStartLoc: Position,\n      minPrec: number,\n    ) {\n      if (\n        tokenOperatorPrecedence(tt._in) > minPrec &&\n        !this.hasPrecedingLineBreak() &&\n        this.isContextual(tt._as)\n      ) {\n        const node: N.TsAsExpression = this.startNodeAt(\n          leftStartPos,\n          leftStartLoc,\n        );\n        node.expression = left;\n        const _const = this.tsTryNextParseConstantContext();\n        if (_const) {\n          node.typeAnnotation = _const;\n        } else {\n          node.typeAnnotation = this.tsNextThenParseType();\n        }\n        this.finishNode(node, \"TSAsExpression\");\n        // rescan `<`, `>` because they were scanned when this.state.inType was true\n        this.reScan_lt_gt();\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n\n      return super.parseExprOp(left, leftStartPos, leftStartLoc, minPrec);\n    }\n\n    checkReservedWord(\n      word: string, // eslint-disable-line no-unused-vars\n      startLoc: number, // eslint-disable-line no-unused-vars\n      checkKeywords: boolean, // eslint-disable-line no-unused-vars\n      // eslint-disable-next-line no-unused-vars\n      isBinding: boolean,\n    ): void {\n      // Don't bother checking for TypeScript code.\n      // Strict mode words may be allowed as in `declare namespace N { const static: number; }`.\n      // And we have a type checker anyway, so don't bother having the parser do it.\n    }\n\n    /*\n    Don't bother doing this check in TypeScript code because:\n    1. We may have a nested export statement with the same name:\n      export const x = 0;\n      export namespace N {\n        export const x = 1;\n      }\n    2. We have a type checker to warn us about this sort of thing.\n    */\n    checkDuplicateExports() {}\n\n    parseImport(node: N.Node): N.AnyImport {\n      node.importKind = \"value\";\n      if (\n        tokenIsIdentifier(this.state.type) ||\n        this.match(tt.star) ||\n        this.match(tt.braceL)\n      ) {\n        let ahead = this.lookahead();\n\n        if (\n          this.isContextual(tt._type) &&\n          // import type, { a } from \"b\";\n          ahead.type !== tt.comma &&\n          // import type from \"a\";\n          ahead.type !== tt._from &&\n          // import type = require(\"a\");\n          ahead.type !== tt.eq\n        ) {\n          node.importKind = \"type\";\n          this.next();\n          ahead = this.lookahead();\n        }\n\n        if (tokenIsIdentifier(this.state.type) && ahead.type === tt.eq) {\n          return this.tsParseImportEqualsDeclaration(node);\n        }\n      }\n\n      const importNode = super.parseImport(node);\n      /*:: invariant(importNode.type !== \"TSImportEqualsDeclaration\") */\n\n      // `import type` can only be used on imports with named imports or with a\n      // default import - but not both\n      if (\n        importNode.importKind === \"type\" &&\n        importNode.specifiers.length > 1 &&\n        importNode.specifiers[0].type === \"ImportDefaultSpecifier\"\n      ) {\n        this.raise(\n          importNode.start,\n          TSErrors.TypeImportCannotSpecifyDefaultAndNamed,\n        );\n      }\n\n      return importNode;\n    }\n\n    parseExport(node: N.Node): N.AnyExport {\n      if (this.match(tt._import)) {\n        // `export import A = B;`\n        this.next(); // eat `tt._import`\n        if (\n          this.isContextual(tt._type) &&\n          this.lookaheadCharCode() !== charCodes.equalsTo\n        ) {\n          node.importKind = \"type\";\n          this.next(); // eat \"type\"\n        } else {\n          node.importKind = \"value\";\n        }\n        return this.tsParseImportEqualsDeclaration(node, /* isExport */ true);\n      } else if (this.eat(tt.eq)) {\n        // `export = x;`\n        const assign: N.TsExportAssignment = node;\n        assign.expression = this.parseExpression();\n        this.semicolon();\n        return this.finishNode(assign, \"TSExportAssignment\");\n      } else if (this.eatContextual(tt._as)) {\n        // `export as namespace A;`\n        const decl: N.TsNamespaceExportDeclaration = node;\n        // See `parseNamespaceExportDeclaration` in TypeScript's own parser\n        this.expectContextual(tt._namespace);\n        decl.id = this.parseIdentifier();\n        this.semicolon();\n        return this.finishNode(decl, \"TSNamespaceExportDeclaration\");\n      } else {\n        if (\n          this.isContextual(tt._type) &&\n          this.lookahead().type === tt.braceL\n        ) {\n          this.next();\n          node.exportKind = \"type\";\n        } else {\n          node.exportKind = \"value\";\n        }\n\n        return super.parseExport(node);\n      }\n    }\n\n    isAbstractClass(): boolean {\n      return (\n        this.isContextual(tt._abstract) && this.lookahead().type === tt._class\n      );\n    }\n\n    parseExportDefaultExpression(): N.Expression | N.Declaration {\n      if (this.isAbstractClass()) {\n        const cls = this.startNode();\n        this.next(); // Skip \"abstract\"\n        cls.abstract = true;\n        this.parseClass(cls, true, true);\n        return cls;\n      }\n\n      // export default interface allowed in:\n      // https://github.com/Microsoft/TypeScript/pull/16040\n      if (this.match(tt._interface)) {\n        const interfaceNode = this.startNode();\n        this.next();\n        const result = this.tsParseInterfaceDeclaration(interfaceNode);\n        if (result) return result;\n      }\n\n      return super.parseExportDefaultExpression();\n    }\n\n    parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n      if (this.state.type === tt._const) {\n        const ahead = this.lookahead();\n        if (ahead.type === tt._enum) {\n          const node: N.TsEnumDeclaration = this.startNode();\n          this.next(); // eat 'const'\n          this.expectContextual(tt._enum);\n          return this.tsParseEnumDeclaration(node, /* isConst */ true);\n        }\n      }\n      return super.parseStatementContent(context, topLevel);\n    }\n\n    parseAccessModifier(): ?N.Accessibility {\n      return this.tsParseModifier([\"public\", \"protected\", \"private\"]);\n    }\n\n    tsHasSomeModifiers(member: any, modifiers: TsModifier[]): boolean {\n      return modifiers.some(modifier => {\n        if (tsIsAccessModifier(modifier)) {\n          return member.accessibility === modifier;\n        }\n        return !!member[modifier];\n      });\n    }\n\n    tsIsStartOfStaticBlocks() {\n      return (\n        this.isContextual(tt._static) &&\n        this.lookaheadCharCode() === charCodes.leftCurlyBrace\n      );\n    }\n\n    parseClassMember(\n      classBody: N.ClassBody,\n      member: any,\n      state: N.ParseClassMemberState,\n    ): void {\n      const modifiers = [\n        \"declare\",\n        \"private\",\n        \"public\",\n        \"protected\",\n        \"override\",\n        \"abstract\",\n        \"readonly\",\n        \"static\",\n      ];\n      this.tsParseModifiers(\n        member,\n        modifiers,\n        /* disallowedModifiers */ undefined,\n        /* errorTemplate */ undefined,\n        /* stopOnStartOfClassStaticBlock */ true,\n      );\n\n      const callParseClassMemberWithIsStatic = () => {\n        if (this.tsIsStartOfStaticBlocks()) {\n          this.next(); // eat \"static\"\n          this.next(); // eat \"{\"\n          if (this.tsHasSomeModifiers(member, modifiers)) {\n            this.raise(this.state.pos, TSErrors.StaticBlockCannotHaveModifier);\n          }\n          this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        } else {\n          this.parseClassMemberWithIsStatic(\n            classBody,\n            member,\n            state,\n            !!member.static,\n          );\n        }\n      };\n      if (member.declare) {\n        this.tsInAmbientContext(callParseClassMemberWithIsStatic);\n      } else {\n        callParseClassMemberWithIsStatic();\n      }\n    }\n\n    parseClassMemberWithIsStatic(\n      classBody: N.ClassBody,\n      member: N.ClassMember | N.TsIndexSignature,\n      state: N.ParseClassMemberState,\n      isStatic: boolean,\n    ): void {\n      const idx = this.tsTryParseIndexSignature(member);\n      if (idx) {\n        classBody.body.push(idx);\n\n        if ((member: any).abstract) {\n          this.raise(member.start, TSErrors.IndexSignatureHasAbstract);\n        }\n        if ((member: any).accessibility) {\n          this.raise(\n            member.start,\n            TSErrors.IndexSignatureHasAccessibility,\n            (member: any).accessibility,\n          );\n        }\n        if ((member: any).declare) {\n          this.raise(member.start, TSErrors.IndexSignatureHasDeclare);\n        }\n        if ((member: any).override) {\n          this.raise(member.start, TSErrors.IndexSignatureHasOverride);\n        }\n\n        return;\n      }\n\n      if (!this.state.inAbstractClass && (member: any).abstract) {\n        this.raise(member.start, TSErrors.NonAbstractClassHasAbstractMethod);\n      }\n\n      if ((member: any).override) {\n        if (!state.hadSuperClass) {\n          this.raise(member.start, TSErrors.OverrideNotInSubClass);\n        }\n      }\n\n      /*:: invariant(member.type !== \"TSIndexSignature\") */\n\n      super.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n    }\n\n    parsePostMemberNameModifiers(\n      methodOrProp: N.ClassMethod | N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      const optional = this.eat(tt.question);\n      if (optional) methodOrProp.optional = true;\n\n      if ((methodOrProp: any).readonly && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasReadonly);\n      }\n\n      if ((methodOrProp: any).declare && this.match(tt.parenL)) {\n        this.raise(methodOrProp.start, TSErrors.ClassMethodHasDeclare);\n      }\n    }\n\n    // Note: The reason we do this in `parseExpressionStatement` and not `parseStatement`\n    // is that e.g. `type()` is valid JS, so we must try parsing that first.\n    // If it's really a type, we will parse `type` as the statement, and can correct it here\n    // by parsing the rest.\n    parseExpressionStatement(\n      node: N.ExpressionStatement,\n      expr: N.Expression,\n    ): N.Statement {\n      const decl =\n        expr.type === \"Identifier\"\n          ? this.tsParseExpressionStatement(node, expr)\n          : undefined;\n      return decl || super.parseExpressionStatement(node, expr);\n    }\n\n    // export type\n    // Should be true for anything parsed by `tsTryParseExportDeclaration`.\n    shouldParseExportDeclaration(): boolean {\n      if (this.tsIsDeclarationStart()) return true;\n      return super.shouldParseExportDeclaration();\n    }\n\n    // An apparent conditional expression could actually be an optional parameter in an arrow function.\n    parseConditional(\n      expr: N.Expression,\n      startPos: number,\n      startLoc: Position,\n      refExpressionErrors?: ?ExpressionErrors,\n    ): N.Expression {\n      // only do the expensive clone if there is a question mark\n      // and if we come from inside parens\n      if (!this.state.maybeInArrowParameters || !this.match(tt.question)) {\n        return super.parseConditional(\n          expr,\n          startPos,\n          startLoc,\n          refExpressionErrors,\n        );\n      }\n\n      const result = this.tryParse(() =>\n        super.parseConditional(expr, startPos, startLoc),\n      );\n\n      if (!result.node) {\n        if (result.error) {\n          /*:: invariant(refExpressionErrors != null) */\n          super.setOptionalParametersError(refExpressionErrors, result.error);\n        }\n\n        return expr;\n      }\n      if (result.error) this.state = result.failState;\n      return result.node;\n    }\n\n    // Note: These \"type casts\" are *not* valid TS expressions.\n    // But we parse them here and change them when completing the arrow function.\n    parseParenItem(\n      node: N.Expression,\n      startPos: number,\n      startLoc: Position,\n    ): N.Expression {\n      node = super.parseParenItem(node, startPos, startLoc);\n      if (this.eat(tt.question)) {\n        node.optional = true;\n        // Include questionmark in location of node\n        // Don't use this.finishNode() as otherwise we might process comments twice and\n        // include already consumed parens\n        this.resetEndLocation(node);\n      }\n\n      if (this.match(tt.colon)) {\n        const typeCastNode: N.TsTypeCastExpression = this.startNodeAt(\n          startPos,\n          startLoc,\n        );\n        typeCastNode.expression = node;\n        typeCastNode.typeAnnotation = this.tsParseTypeAnnotation();\n\n        return this.finishNode(typeCastNode, \"TSTypeCastExpression\");\n      }\n\n      return node;\n    }\n\n    parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n      // Store original location/position\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n\n      // \"export declare\" is equivalent to just \"export\".\n      const isDeclare = this.eatContextual(tt._declare);\n\n      if (\n        isDeclare &&\n        (this.isContextual(tt._declare) || !this.shouldParseExportDeclaration())\n      ) {\n        throw this.raise(\n          this.state.start,\n          TSErrors.ExpectedAmbientAfterExportDeclare,\n        );\n      }\n\n      let declaration: ?N.Declaration;\n\n      if (tokenIsIdentifier(this.state.type)) {\n        declaration = this.tsTryParseExportDeclaration();\n      }\n      if (!declaration) {\n        declaration = super.parseExportDeclaration(node);\n      }\n      if (\n        declaration &&\n        (declaration.type === \"TSInterfaceDeclaration\" ||\n          declaration.type === \"TSTypeAliasDeclaration\" ||\n          isDeclare)\n      ) {\n        node.exportKind = \"type\";\n      }\n\n      if (declaration && isDeclare) {\n        // Reset location to include `declare` in range\n        this.resetStartLocation(declaration, startPos, startLoc);\n\n        declaration.declare = true;\n      }\n\n      return declaration;\n    }\n\n    parseClassId(\n      node: N.Class,\n      isStatement: boolean,\n      optionalId: ?boolean,\n    ): void {\n      if ((!isStatement || optionalId) && this.isContextual(tt._implements)) {\n        return;\n      }\n\n      super.parseClassId(\n        node,\n        isStatement,\n        optionalId,\n        (node: any).declare ? BIND_TS_AMBIENT : BIND_CLASS,\n      );\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n    }\n\n    parseClassPropertyAnnotation(\n      node: N.ClassProperty | N.ClassPrivateProperty,\n    ): void {\n      if (!node.optional && this.eat(tt.bang)) {\n        node.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) node.typeAnnotation = type;\n    }\n\n    parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n      this.parseClassPropertyAnnotation(node);\n\n      if (this.state.isAmbientContext && this.match(tt.eq)) {\n        this.raise(this.state.start, TSErrors.DeclareClassFieldHasInitializer);\n      }\n      if (node.abstract && this.match(tt.eq)) {\n        const { key } = node;\n        this.raise(\n          this.state.start,\n          TSErrors.AbstractPropertyHasInitializer,\n          key.type === \"Identifier\" && !node.computed\n            ? key.name\n            : `[${this.input.slice(key.start, key.end)}]`,\n        );\n      }\n\n      return super.parseClassProperty(node);\n    }\n\n    parseClassPrivateProperty(\n      node: N.ClassPrivateProperty,\n    ): N.ClassPrivateProperty {\n      // $FlowIgnore\n      if (node.abstract) {\n        this.raise(node.start, TSErrors.PrivateElementHasAbstract);\n      }\n\n      // $FlowIgnore\n      if (node.accessibility) {\n        this.raise(\n          node.start,\n          TSErrors.PrivateElementHasAccessibility,\n          node.accessibility,\n        );\n      }\n\n      this.parseClassPropertyAnnotation(node);\n      return super.parseClassPrivateProperty(node);\n    }\n\n    pushClassMethod(\n      classBody: N.ClassBody,\n      method: N.ClassMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n      isConstructor: boolean,\n      allowsDirectSuper: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters && isConstructor) {\n        this.raise(typeParameters.start, TSErrors.ConstructorHasTypeParameters);\n      }\n\n      // $FlowIgnore\n      if (method.declare && (method.kind === \"get\" || method.kind === \"set\")) {\n        this.raise(method.start, TSErrors.DeclareAccessor, method.kind);\n      }\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassMethod(\n        classBody,\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    }\n\n    pushClassPrivateMethod(\n      classBody: N.ClassBody,\n      method: N.ClassPrivateMethod,\n      isGenerator: boolean,\n      isAsync: boolean,\n    ): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) method.typeParameters = typeParameters;\n      super.pushClassPrivateMethod(classBody, method, isGenerator, isAsync);\n    }\n\n    declareClassPrivateMethodInScope(\n      node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n      kind: number,\n    ) {\n      if (node.type === \"TSDeclareMethod\") return;\n      // This happens when using the \"estree\" plugin.\n      if (node.type === \"MethodDefinition\" && !node.value.body) return;\n\n      super.declareClassPrivateMethodInScope(node, kind);\n    }\n\n    parseClassSuper(node: N.Class): void {\n      super.parseClassSuper(node);\n      if (node.superClass && this.match(tt.lt)) {\n        node.superTypeParameters = this.tsParseTypeArguments();\n      }\n      if (this.eatContextual(tt._implements)) {\n        node.implements = this.tsParseHeritageClause(\"implements\");\n      }\n    }\n\n    parseObjPropValue(prop: N.ObjectMember, ...args): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) prop.typeParameters = typeParameters;\n\n      super.parseObjPropValue(prop, ...args);\n    }\n\n    parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n      const typeParameters = this.tsTryParseTypeParameters();\n      if (typeParameters) node.typeParameters = typeParameters;\n      super.parseFunctionParams(node, allowModifiers);\n    }\n\n    // `let x: number;`\n    parseVarId(\n      decl: N.VariableDeclarator,\n      kind: \"var\" | \"let\" | \"const\",\n    ): void {\n      super.parseVarId(decl, kind);\n      if (decl.id.type === \"Identifier\" && this.eat(tt.bang)) {\n        decl.definite = true;\n      }\n\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) {\n        decl.id.typeAnnotation = type;\n        this.resetEndLocation(decl.id); // set end position to end of type\n      }\n    }\n\n    // parse the return type of an async arrow function - let foo = (async (): number => {});\n    parseAsyncArrowFromCallExpression(\n      node: N.ArrowFunctionExpression,\n      call: N.CallExpression,\n    ): N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        node.returnType = this.tsParseTypeAnnotation();\n      }\n      return super.parseAsyncArrowFromCallExpression(node, call);\n    }\n\n    parseMaybeAssign(...args): N.Expression {\n      // Note: When the JSX plugin is on, type assertions (`<T> x`) aren't valid syntax.\n\n      let state: ?State;\n      let jsx;\n      let typeCast;\n\n      if (\n        this.hasPlugin(\"jsx\") &&\n        (this.match(tt.jsxTagStart) || this.match(tt.lt))\n      ) {\n        // Prefer to parse JSX if possible. But may be an arrow fn.\n        state = this.state.clone();\n\n        jsx = this.tryParse(() => super.parseMaybeAssign(...args), state);\n\n        /*:: invariant(!jsx.aborted) */\n        /*:: invariant(jsx.node != null) */\n        if (!jsx.error) return jsx.node;\n\n        // Remove `tc.j_expr` or `tc.j_oTag` from context added\n        // by parsing `jsxTagStart` to stop the JSX plugin from\n        // messing with the tokens\n        const { context } = this.state;\n        const currentContext = context[context.length - 1];\n        if (currentContext === tc.j_oTag || currentContext === tc.j_expr) {\n          context.pop();\n        }\n      }\n\n      if (!jsx?.error && !this.match(tt.lt)) {\n        return super.parseMaybeAssign(...args);\n      }\n\n      // Either way, we're looking at a '<': tt.jsxTagStart or relational.\n\n      let typeParameters: ?N.TsTypeParameterDeclaration;\n      state = state || this.state.clone();\n\n      const arrow = this.tryParse(abort => {\n        // This is similar to TypeScript's `tryParseParenthesizedArrowFunctionExpression`.\n        typeParameters = this.tsParseTypeParameters();\n        const expr = super.parseMaybeAssign(...args);\n\n        if (\n          expr.type !== \"ArrowFunctionExpression\" ||\n          expr.extra?.parenthesized\n        ) {\n          abort();\n        }\n\n        // Correct TypeScript code should have at least 1 type parameter, but don't crash on bad code.\n        if (typeParameters?.params.length !== 0) {\n          this.resetStartLocationFromNode(expr, typeParameters);\n        }\n        expr.typeParameters = typeParameters;\n        return expr;\n      }, state);\n\n      /*:: invariant(arrow.node != null) */\n      if (!arrow.error && !arrow.aborted) {\n        // This error is reported outside of the this.tryParse call so that\n        // in case of <T>(x) => 2, we don't consider <T>(x) as a type assertion\n        // because of this error.\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (!jsx) {\n        // Try parsing a type cast instead of an arrow function.\n        // This will never happen outside of JSX.\n        // (Because in JSX the '<' should be a jsxTagStart and not a relational.\n        assert(!this.hasPlugin(\"jsx\"));\n\n        // This will start with a type assertion (via parseMaybeUnary).\n        // But don't directly call `this.tsParseTypeAssertion` because we want to handle any binary after it.\n        typeCast = this.tryParse(() => super.parseMaybeAssign(...args), state);\n        /*:: invariant(!typeCast.aborted) */\n        /*:: invariant(typeCast.node != null) */\n        if (!typeCast.error) return typeCast.node;\n      }\n\n      if (jsx?.node) {\n        /*:: invariant(jsx.failState) */\n        this.state = jsx.failState;\n        return jsx.node;\n      }\n\n      if (arrow.node) {\n        /*:: invariant(arrow.failState) */\n        this.state = arrow.failState;\n        if (typeParameters) this.reportReservedArrowTypeParam(typeParameters);\n        return arrow.node;\n      }\n\n      if (typeCast?.node) {\n        /*:: invariant(typeCast.failState) */\n        this.state = typeCast.failState;\n        return typeCast.node;\n      }\n\n      if (jsx?.thrown) throw jsx.error;\n      if (arrow.thrown) throw arrow.error;\n      if (typeCast?.thrown) throw typeCast.error;\n\n      throw jsx?.error || arrow.error || typeCast?.error;\n    }\n\n    reportReservedArrowTypeParam(node: any) {\n      if (\n        node.params.length === 1 &&\n        !node.extra?.trailingComma &&\n        this.getPluginOption(\"typescript\", \"disallowAmbiguousJSXLike\")\n      ) {\n        this.raise(node.start, TSErrors.ReservedArrowTypeParam);\n      }\n    }\n\n    // Handle type assertions\n    parseMaybeUnary(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n      if (!this.hasPlugin(\"jsx\") && this.match(tt.lt)) {\n        return this.tsParseTypeAssertion();\n      } else {\n        return super.parseMaybeUnary(refExpressionErrors);\n      }\n    }\n\n    parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n      if (this.match(tt.colon)) {\n        // This is different from how the TS parser does it.\n        // TS uses lookahead. The Babel Parser parses it as a parenthesized expression and converts.\n\n        const result = this.tryParse(abort => {\n          const returnType = this.tsParseTypeOrTypePredicateAnnotation(\n            tt.colon,\n          );\n          if (this.canInsertSemicolon() || !this.match(tt.arrow)) abort();\n          return returnType;\n        });\n\n        if (result.aborted) return;\n\n        if (!result.thrown) {\n          if (result.error) this.state = result.failState;\n          node.returnType = result.node;\n        }\n      }\n\n      return super.parseArrow(node);\n    }\n\n    // Allow type annotations inside of a parameter list.\n    parseAssignableListItemTypes(param: N.Pattern) {\n      if (this.eat(tt.question)) {\n        if (\n          param.type !== \"Identifier\" &&\n          !this.state.isAmbientContext &&\n          !this.state.inType\n        ) {\n          this.raise(param.start, TSErrors.PatternIsOptional);\n        }\n\n        ((param: any): N.Identifier).optional = true;\n      }\n      const type = this.tsTryParseTypeAnnotation();\n      if (type) param.typeAnnotation = type;\n      this.resetEndLocation(param);\n\n      return param;\n    }\n\n    isAssignable(node: N.Node, isBinding?: boolean): boolean {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return this.isAssignable(node.expression, isBinding);\n        case \"TSParameterProperty\":\n          return true;\n        default:\n          return super.isAssignable(node, isBinding);\n      }\n    }\n\n    toAssignable(node: N.Node, isLHS: boolean = false): N.Node {\n      switch (node.type) {\n        case \"TSTypeCastExpression\":\n          return super.toAssignable(this.typeCastToParameter(node), isLHS);\n        case \"TSParameterProperty\":\n          return super.toAssignable(node, isLHS);\n        case \"ParenthesizedExpression\":\n          return this.toAssignableParenthesizedExpression(node, isLHS);\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    toAssignableParenthesizedExpression(node: N.Node, isLHS: boolean) {\n      switch (node.expression.type) {\n        case \"TSAsExpression\":\n        case \"TSNonNullExpression\":\n        case \"TSTypeAssertion\":\n        case \"ParenthesizedExpression\":\n          node.expression = this.toAssignable(node.expression, isLHS);\n          return node;\n        default:\n          return super.toAssignable(node, isLHS);\n      }\n    }\n\n    checkLVal(\n      expr: N.Expression,\n      contextDescription: string,\n      ...args:\n        | [BindingTypes | void]\n        | [BindingTypes | void, ?Set<string>, boolean | void, boolean | void]\n    ): void {\n      switch (expr.type) {\n        case \"TSTypeCastExpression\":\n          // Allow \"typecasts\" to appear on the left of assignment expressions,\n          // because it may be in an arrow function.\n          // e.g. `const f = (foo: number = 0) => foo;`\n          return;\n        case \"TSParameterProperty\":\n          this.checkLVal(expr.parameter, \"parameter property\", ...args);\n          return;\n        case \"TSAsExpression\":\n        case \"TSTypeAssertion\":\n          if (\n            /*bindingType*/ !args[0] &&\n            contextDescription !== \"parenthesized expression\" &&\n            !expr.extra?.parenthesized\n          ) {\n            this.raise(expr.start, Errors.InvalidLhs, contextDescription);\n            break;\n          }\n          this.checkLVal(expr.expression, \"parenthesized expression\", ...args);\n          return;\n        case \"TSNonNullExpression\":\n          this.checkLVal(expr.expression, contextDescription, ...args);\n          return;\n        default:\n          super.checkLVal(expr, contextDescription, ...args);\n          return;\n      }\n    }\n\n    parseBindingAtom(): N.Pattern {\n      switch (this.state.type) {\n        case tt._this:\n          // \"this\" may be the name of a parameter, so allow it.\n          return this.parseIdentifier(/* liberal */ true);\n        default:\n          return super.parseBindingAtom();\n      }\n    }\n\n    parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n      if (this.match(tt.lt)) {\n        const typeArguments = this.tsParseTypeArguments();\n\n        if (this.match(tt.parenL)) {\n          const call = super.parseMaybeDecoratorArguments(expr);\n          call.typeParameters = typeArguments;\n          return call;\n        }\n\n        this.unexpected(this.state.start, tt.parenL);\n      }\n\n      return super.parseMaybeDecoratorArguments(expr);\n    }\n\n    checkCommaAfterRest(close) {\n      if (\n        this.state.isAmbientContext &&\n        this.match(tt.comma) &&\n        this.lookaheadCharCode() === close\n      ) {\n        this.next();\n      } else {\n        super.checkCommaAfterRest(close);\n      }\n    }\n\n    // === === === === === === === === === === === === === === === ===\n    // Note: All below methods are duplicates of something in flow.js.\n    // Not sure what the best way to combine these is.\n    // === === === === === === === === === === === === === === === ===\n\n    isClassMethod(): boolean {\n      return this.match(tt.lt) || super.isClassMethod();\n    }\n\n    isClassProperty(): boolean {\n      return (\n        this.match(tt.bang) || this.match(tt.colon) || super.isClassProperty()\n      );\n    }\n\n    parseMaybeDefault(...args): N.Pattern {\n      const node = super.parseMaybeDefault(...args);\n\n      if (\n        node.type === \"AssignmentPattern\" &&\n        node.typeAnnotation &&\n        node.right.start < node.typeAnnotation.start\n      ) {\n        this.raise(\n          node.typeAnnotation.start,\n          TSErrors.TypeAnnotationAfterAssign,\n        );\n      }\n\n      return node;\n    }\n\n    // ensure that inside types, we bypass the jsx parser plugin\n    getTokenFromCode(code: number): void {\n      if (this.state.inType) {\n        if (code === charCodes.greaterThan) {\n          return this.finishOp(tt.gt, 1);\n        }\n        if (code === charCodes.lessThan) {\n          return this.finishOp(tt.lt, 1);\n        }\n      }\n      return super.getTokenFromCode(code);\n    }\n\n    // used after we have finished parsing types\n    reScan_lt_gt() {\n      const { type } = this.state;\n      if (type === tt.lt) {\n        this.state.pos -= 1;\n        this.readToken_lt();\n      } else if (type === tt.gt) {\n        this.state.pos -= 1;\n        this.readToken_gt();\n      }\n    }\n\n    toAssignableList(exprList: N.Expression[]): $ReadOnlyArray<N.Pattern> {\n      for (let i = 0; i < exprList.length; i++) {\n        const expr = exprList[i];\n        if (!expr) continue;\n        switch (expr.type) {\n          case \"TSTypeCastExpression\":\n            exprList[i] = this.typeCastToParameter(expr);\n            break;\n          case \"TSAsExpression\":\n          case \"TSTypeAssertion\":\n            if (!this.state.maybeInArrowParameters) {\n              exprList[i] = this.typeCastToParameter(expr);\n            } else {\n              this.raise(expr.start, TSErrors.UnexpectedTypeCastInParameter);\n            }\n            break;\n        }\n      }\n      return super.toAssignableList(...arguments);\n    }\n\n    typeCastToParameter(node: N.TsTypeCastExpression): N.Node {\n      node.expression.typeAnnotation = node.typeAnnotation;\n\n      this.resetEndLocation(\n        node.expression,\n        node.typeAnnotation.end,\n        node.typeAnnotation.loc.end,\n      );\n\n      return node.expression;\n    }\n\n    shouldParseArrow(params: Array<N.Node>) {\n      if (this.match(tt.colon)) {\n        return params.every(expr => this.isAssignable(expr, true));\n      }\n      return super.shouldParseArrow(params);\n    }\n\n    shouldParseAsyncArrow(): boolean {\n      return this.match(tt.colon) || super.shouldParseAsyncArrow();\n    }\n\n    canHaveLeadingDecorator() {\n      // Avoid unnecessary lookahead in checking for abstract class unless needed!\n      return super.canHaveLeadingDecorator() || this.isAbstractClass();\n    }\n\n    jsxParseOpeningElementAfterName(\n      node: N.JSXOpeningElement,\n    ): N.JSXOpeningElement {\n      if (this.match(tt.lt)) {\n        const typeArguments = this.tsTryParseAndCatch(() =>\n          this.tsParseTypeArguments(),\n        );\n        if (typeArguments) node.typeParameters = typeArguments;\n      }\n      return super.jsxParseOpeningElementAfterName(node);\n    }\n\n    getGetterSetterExpectedParamCount(\n      method: N.ObjectMethod | N.ClassMethod,\n    ): number {\n      const baseCount = super.getGetterSetterExpectedParamCount(method);\n      const params = this.getObjectOrClassMethodParams(method);\n      const firstParam = params[0];\n      const hasContextParam = firstParam && this.isThisParam(firstParam);\n\n      return hasContextParam ? baseCount + 1 : baseCount;\n    }\n\n    parseCatchClauseParam(): N.Pattern {\n      const param = super.parseCatchClauseParam();\n      const type = this.tsTryParseTypeAnnotation();\n\n      if (type) {\n        param.typeAnnotation = type;\n        this.resetEndLocation(param);\n      }\n\n      return param;\n    }\n\n    tsInAmbientContext<T>(cb: () => T): T {\n      const oldIsAmbientContext = this.state.isAmbientContext;\n      this.state.isAmbientContext = true;\n      try {\n        return cb();\n      } finally {\n        this.state.isAmbientContext = oldIsAmbientContext;\n      }\n    }\n\n    parseClass<T: N.Class>(node: T, ...args: any[]): T {\n      const oldInAbstractClass = this.state.inAbstractClass;\n      this.state.inAbstractClass = !!(node: any).abstract;\n      try {\n        return super.parseClass(node, ...args);\n      } finally {\n        this.state.inAbstractClass = oldInAbstractClass;\n      }\n    }\n\n    tsParseAbstractDeclaration(\n      node: any,\n    ): N.ClassDeclaration | N.TsInterfaceDeclaration | typeof undefined {\n      if (this.match(tt._class)) {\n        node.abstract = true;\n        return this.parseClass<N.ClassDeclaration>(\n          (node: N.ClassDeclaration),\n          /* isStatement */ true,\n          /* optionalId */ false,\n        );\n      } else if (this.isContextual(tt._interface)) {\n        // for invalid abstract interface\n\n        // To avoid\n        //   abstract interface\n        //   Foo {}\n        if (!this.hasFollowingLineBreak()) {\n          node.abstract = true;\n          this.raise(\n            node.start,\n            TSErrors.NonClassMethodPropertyHasAbstractModifer,\n          );\n          this.next();\n          return this.tsParseInterfaceDeclaration(\n            (node: N.TsInterfaceDeclaration),\n          );\n        }\n      } else {\n        this.unexpected(null, tt._class);\n      }\n    }\n\n    parseMethod(...args: any[]) {\n      const method = super.parseMethod(...args);\n      if (method.abstract) {\n        const hasBody = this.hasPlugin(\"estree\")\n          ? !!method.value.body\n          : !!method.body;\n        if (hasBody) {\n          const { key } = method;\n          this.raise(\n            method.start,\n            TSErrors.AbstractMethodHasImplementation,\n            key.type === \"Identifier\" && !method.computed\n              ? key.name\n              : `[${this.input.slice(key.start, key.end)}]`,\n          );\n        }\n      }\n      return method;\n    }\n\n    tsParseTypeParameterName(): N.Identifier | string {\n      const typeName: N.Identifier = this.parseIdentifier();\n      return process.env.BABEL_8_BREAKING ? typeName : typeName.name;\n    }\n\n    shouldParseAsAmbientContext(): boolean {\n      return !!this.getPluginOption(\"typescript\", \"dts\");\n    }\n\n    parse() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.parse();\n    }\n\n    getExpression() {\n      if (this.shouldParseAsAmbientContext()) {\n        this.state.isAmbientContext = true;\n      }\n      return super.getExpression();\n    }\n\n    parseExportSpecifier(\n      node: any,\n      isString: boolean,\n      isInTypeExport: boolean,\n      isMaybeTypeOnly: boolean,\n    ) {\n      if (!isString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          node,\n          /* isImport */ false,\n          isInTypeExport,\n        );\n        return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n      }\n      node.exportKind = \"value\";\n      return super.parseExportSpecifier(\n        node,\n        isString,\n        isInTypeExport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseImportSpecifier(\n      specifier: any,\n      importedIsString: boolean,\n      isInTypeOnlyImport: boolean,\n      isMaybeTypeOnly: boolean,\n    ): N.ImportSpecifier {\n      if (!importedIsString && isMaybeTypeOnly) {\n        this.parseTypeOnlyImportExportSpecifier(\n          specifier,\n          /* isImport */ true,\n          isInTypeOnlyImport,\n        );\n        return this.finishNode<N.ImportSpecifier>(specifier, \"ImportSpecifier\");\n      }\n      specifier.importKind = \"value\";\n      return super.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        isInTypeOnlyImport,\n        isMaybeTypeOnly,\n      );\n    }\n\n    parseTypeOnlyImportExportSpecifier(\n      node: any,\n      isImport: boolean,\n      isInTypeOnlyImportExport: boolean,\n    ): void {\n      const leftOfAsKey = isImport ? \"imported\" : \"local\";\n      const rightOfAsKey = isImport ? \"local\" : \"exported\";\n\n      let leftOfAs = node[leftOfAsKey];\n      let rightOfAs;\n\n      let hasTypeSpecifier = false;\n      let canParseAsKeyword = true;\n\n      const pos = leftOfAs.start;\n\n      // https://github.com/microsoft/TypeScript/blob/fc4f9d83d5939047aa6bb2a43965c6e9bbfbc35b/src/compiler/parser.ts#L7411-L7456\n      // import { type } from \"mod\";          - hasTypeSpecifier: false, leftOfAs: type\n      // import { type as } from \"mod\";       - hasTypeSpecifier: true,  leftOfAs: as\n      // import { type as as } from \"mod\";    - hasTypeSpecifier: false, leftOfAs: type, rightOfAs: as\n      // import { type as as as } from \"mod\"; - hasTypeSpecifier: true,  leftOfAs: as,   rightOfAs: as\n      if (this.isContextual(tt._as)) {\n        // { type as ...? }\n        const firstAs = this.parseIdentifier();\n        if (this.isContextual(tt._as)) {\n          // { type as as ...? }\n          const secondAs = this.parseIdentifier();\n          if (tokenIsKeywordOrIdentifier(this.state.type)) {\n            // { type as as something }\n            hasTypeSpecifier = true;\n            leftOfAs = firstAs;\n            rightOfAs = this.parseIdentifier();\n            canParseAsKeyword = false;\n          } else {\n            // { type as as }\n            rightOfAs = secondAs;\n            canParseAsKeyword = false;\n          }\n        } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n          // { type as something }\n          canParseAsKeyword = false;\n          rightOfAs = this.parseIdentifier();\n        } else {\n          // { type as }\n          hasTypeSpecifier = true;\n          leftOfAs = firstAs;\n        }\n      } else if (tokenIsKeywordOrIdentifier(this.state.type)) {\n        // { type something ...? }\n        hasTypeSpecifier = true;\n        leftOfAs = this.parseIdentifier();\n      }\n      if (hasTypeSpecifier && isInTypeOnlyImportExport) {\n        this.raise(\n          pos,\n          isImport\n            ? TSErrors.TypeModifierIsUsedInTypeImports\n            : TSErrors.TypeModifierIsUsedInTypeExports,\n        );\n      }\n\n      node[leftOfAsKey] = leftOfAs;\n      node[rightOfAsKey] = rightOfAs;\n\n      const kindKey = isImport ? \"importKind\" : \"exportKind\";\n      node[kindKey] = hasTypeSpecifier ? \"type\" : \"value\";\n\n      if (canParseAsKeyword && this.eatContextual(tt._as)) {\n        node[rightOfAsKey] = isImport\n          ? this.parseIdentifier()\n          : this.parseModuleExportName();\n      }\n      if (!node[rightOfAsKey]) {\n        node[rightOfAsKey] = cloneIdentifier(node[leftOfAsKey]);\n      }\n      if (isImport) {\n        this.checkLVal(node[rightOfAsKey], \"import specifier\", BIND_LEXICAL);\n      }\n    }\n  };\n","// @flow\n\nimport * as charCodes from \"charcodes\";\n\nimport { tokenLabelName, tt } from \"../tokenizer/types\";\nimport type Parser from \"../parser\";\nimport * as N from \"../types\";\nimport { makeErrorTemplates, ErrorCodes } from \"../parser/error\";\n\nexport type PlaceholderTypes =\n  | \"Identifier\"\n  | \"StringLiteral\"\n  | \"Expression\"\n  | \"Statement\"\n  | \"Declaration\"\n  | \"BlockStatement\"\n  | \"ClassBody\"\n  | \"Pattern\";\n\n// $PropertyType doesn't support enums. Use a fake \"switch\" (GetPlaceholderNode)\n//type MaybePlaceholder<T: PlaceholderTypes> = $PropertyType<N, T> | N.Placeholder<T>;\n\ntype _Switch<Value, Cases, Index> = $Call<\n  (\n    $ElementType<$ElementType<Cases, Index>, 0>,\n  ) => $ElementType<$ElementType<Cases, Index>, 1>,\n  Value,\n>;\ntype $Switch<Value, Cases> = _Switch<Value, Cases, *>;\n\ntype NodeOf<T: PlaceholderTypes> = $Switch<\n  T,\n  [\n    [\"Identifier\", N.Identifier],\n    [\"StringLiteral\", N.StringLiteral],\n    [\"Expression\", N.Expression],\n    [\"Statement\", N.Statement],\n    [\"Declaration\", N.Declaration],\n    [\"BlockStatement\", N.BlockStatement],\n    [\"ClassBody\", N.ClassBody],\n    [\"Pattern\", N.Pattern],\n  ],\n>;\n\n// Placeholder<T> breaks everything, because its type is incompatible with\n// the substituted nodes.\ntype MaybePlaceholder<T: PlaceholderTypes> = NodeOf<T>; // | Placeholder<T>\n\nconst PlaceHolderErrors = makeErrorTemplates(\n  {\n    ClassNameIsRequired: \"A class name is required.\",\n  },\n  /* code */ ErrorCodes.SyntaxError,\n);\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parsePlaceholder<T: PlaceholderTypes>(\n      expectedNode: T,\n    ): /*?N.Placeholder<T>*/ ?MaybePlaceholder<T> {\n      if (this.match(tt.placeholder)) {\n        const node = this.startNode();\n        this.next();\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n\n        // We can't use this.parseIdentifier because\n        // we don't want nested placeholders.\n        node.name = super.parseIdentifier(/* liberal */ true);\n\n        this.assertNoSpace(\"Unexpected space in placeholder.\");\n        this.expect(tt.placeholder);\n        return this.finishPlaceholder(node, expectedNode);\n      }\n    }\n\n    finishPlaceholder<T: PlaceholderTypes>(\n      node: N.Node,\n      expectedNode: T,\n    ): /*N.Placeholder<T>*/ MaybePlaceholder<T> {\n      const isFinished = !!(node.expectedNode && node.type === \"Placeholder\");\n      node.expectedNode = expectedNode;\n\n      return isFinished ? node : this.finishNode(node, \"Placeholder\");\n    }\n\n    /* ============================================================ *\n     * tokenizer/index.js                                           *\n     * ============================================================ */\n\n    getTokenFromCode(code: number) {\n      if (\n        code === charCodes.percentSign &&\n        this.input.charCodeAt(this.state.pos + 1) === charCodes.percentSign\n      ) {\n        return this.finishOp(tt.placeholder, 2);\n      }\n\n      return super.getTokenFromCode(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): MaybePlaceholder<\"Expression\"> {\n      return (\n        this.parsePlaceholder(\"Expression\") || super.parseExprAtom(...arguments)\n      );\n    }\n\n    parseIdentifier(): MaybePlaceholder<\"Identifier\"> {\n      // NOTE: This function only handles identifiers outside of\n      // expressions and binding patterns, since they are already\n      // handled by the parseExprAtom and parseBindingAtom functions.\n      // This is needed, for example, to parse \"class %%NAME%% {}\".\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseIdentifier(...arguments)\n      );\n    }\n\n    checkReservedWord(word: string): void {\n      // Sometimes we call #checkReservedWord(node.name), expecting\n      // that node is an Identifier. If it is a Placeholder, name\n      // will be undefined.\n      if (word !== undefined) super.checkReservedWord(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/lval.js                                               *\n     * ============================================================ */\n\n    parseBindingAtom(): MaybePlaceholder<\"Pattern\"> {\n      return (\n        this.parsePlaceholder(\"Pattern\") || super.parseBindingAtom(...arguments)\n      );\n    }\n\n    checkLVal(expr: N.Expression): void {\n      if (expr.type !== \"Placeholder\") super.checkLVal(...arguments);\n    }\n\n    toAssignable(node: N.Node): N.Node {\n      if (\n        node &&\n        node.type === \"Placeholder\" &&\n        node.expectedNode === \"Expression\"\n      ) {\n        node.expectedNode = \"Pattern\";\n        return node;\n      }\n      return super.toAssignable(...arguments);\n    }\n\n    /* ============================================================ *\n     * parser/statement.js                                          *\n     * ============================================================ */\n\n    isLet(context: ?string): boolean {\n      if (super.isLet(context)) {\n        return true;\n      }\n\n      // Replicate the original checks that lead to looking ahead for an\n      // identifier.\n      if (!this.isContextual(tt._let)) {\n        return false;\n      }\n      if (context) return false;\n\n      // Accept \"let %%\" as the start of \"let %%placeholder%%\", as though the\n      // placeholder were an identifier.\n      const nextToken = this.lookahead();\n      if (nextToken.type === tt.placeholder) {\n        return true;\n      }\n\n      return false;\n    }\n\n    verifyBreakContinue(node: N.BreakStatement | N.ContinueStatement) {\n      if (node.label && node.label.type === \"Placeholder\") return;\n      super.verifyBreakContinue(...arguments);\n    }\n\n    parseExpressionStatement(\n      node: MaybePlaceholder<\"Statement\">,\n      expr: N.Expression,\n    ): MaybePlaceholder<\"Statement\"> {\n      if (\n        expr.type !== \"Placeholder\" ||\n        (expr.extra && expr.extra.parenthesized)\n      ) {\n        return super.parseExpressionStatement(...arguments);\n      }\n\n      if (this.match(tt.colon)) {\n        const stmt: N.LabeledStatement = node;\n        stmt.label = this.finishPlaceholder(expr, \"Identifier\");\n        this.next();\n        stmt.body = this.parseStatement(\"label\");\n        return this.finishNode(stmt, \"LabeledStatement\");\n      }\n\n      this.semicolon();\n\n      node.name = expr.name;\n      return this.finishPlaceholder(node, \"Statement\");\n    }\n\n    parseBlock(): MaybePlaceholder<\"BlockStatement\"> {\n      return (\n        this.parsePlaceholder(\"BlockStatement\") ||\n        super.parseBlock(...arguments)\n      );\n    }\n\n    parseFunctionId(): ?MaybePlaceholder<\"Identifier\"> {\n      return (\n        this.parsePlaceholder(\"Identifier\") ||\n        super.parseFunctionId(...arguments)\n      );\n    }\n\n    parseClass<T: N.Class>(\n      node: T,\n      isStatement: /* T === ClassDeclaration */ boolean,\n      optionalId?: boolean,\n    ): T {\n      const type = isStatement ? \"ClassDeclaration\" : \"ClassExpression\";\n\n      this.next();\n      this.takeDecorators(node);\n      const oldStrict = this.state.strict;\n\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (placeholder) {\n        if (\n          this.match(tt._extends) ||\n          this.match(tt.placeholder) ||\n          this.match(tt.braceL)\n        ) {\n          node.id = placeholder;\n        } else if (optionalId || !isStatement) {\n          node.id = null;\n          node.body = this.finishPlaceholder(placeholder, \"ClassBody\");\n          return this.finishNode(node, type);\n        } else {\n          this.unexpected(null, PlaceHolderErrors.ClassNameIsRequired);\n        }\n      } else {\n        this.parseClassId(node, isStatement, optionalId);\n      }\n\n      this.parseClassSuper(node);\n      node.body =\n        this.parsePlaceholder(\"ClassBody\") ||\n        this.parseClassBody(!!node.superClass, oldStrict);\n      return this.finishNode(node, type);\n    }\n\n    parseExport(node: N.Node): N.Node {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseExport(...arguments);\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // export %%DECL%%;\n        node.specifiers = [];\n        node.source = null;\n        node.declaration = this.finishPlaceholder(placeholder, \"Declaration\");\n        return this.finishNode(node, \"ExportNamedDeclaration\");\n      }\n\n      // export %%NAME%% from \"foo\";\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = placeholder;\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n\n      return super.parseExport(node);\n    }\n\n    isExportDefaultSpecifier(): boolean {\n      if (this.match(tt._default)) {\n        const next = this.nextTokenStart();\n        if (this.isUnparsedContextual(next, \"from\")) {\n          if (\n            this.input.startsWith(\n              tokenLabelName(tt.placeholder),\n              this.nextTokenStartSince(next + 4),\n            )\n          ) {\n            return true;\n          }\n        }\n      }\n      return super.isExportDefaultSpecifier();\n    }\n\n    maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n      if (node.specifiers && node.specifiers.length > 0) {\n        // \"export %%NAME%%\" has already been parsed by #parseExport.\n        return true;\n      }\n      return super.maybeParseExportDefaultSpecifier(...arguments);\n    }\n\n    checkExport(node: N.ExportNamedDeclaration): void {\n      const { specifiers } = node;\n      if (specifiers?.length) {\n        node.specifiers = specifiers.filter(\n          node => node.exported.type === \"Placeholder\",\n        );\n      }\n      super.checkExport(node);\n      node.specifiers = specifiers;\n    }\n\n    parseImport(\n      node: N.Node,\n    ): N.ImportDeclaration | N.TsImportEqualsDeclaration {\n      const placeholder = this.parsePlaceholder(\"Identifier\");\n      if (!placeholder) return super.parseImport(...arguments);\n\n      node.specifiers = [];\n\n      if (!this.isContextual(tt._from) && !this.match(tt.comma)) {\n        // import %%STRING%%;\n        node.source = this.finishPlaceholder(placeholder, \"StringLiteral\");\n        this.semicolon();\n        return this.finishNode(node, \"ImportDeclaration\");\n      }\n\n      // import %%DEFAULT%% ...\n      const specifier = this.startNodeAtNode(placeholder);\n      specifier.local = placeholder;\n      this.finishNode(specifier, \"ImportDefaultSpecifier\");\n      node.specifiers.push(specifier);\n\n      if (this.eat(tt.comma)) {\n        // import %%DEFAULT%%, * as ...\n        const hasStarImport = this.maybeParseStarImportSpecifier(node);\n\n        // import %%DEFAULT%%, { ...\n        if (!hasStarImport) this.parseNamedImportSpecifiers(node);\n      }\n\n      this.expectContextual(tt._from);\n      node.source = this.parseImportSource();\n      this.semicolon();\n      return this.finishNode(node, \"ImportDeclaration\");\n    }\n\n    parseImportSource(): MaybePlaceholder<\"StringLiteral\"> {\n      // import ... from %%STRING%%;\n\n      return (\n        this.parsePlaceholder(\"StringLiteral\") ||\n        super.parseImportSource(...arguments)\n      );\n    }\n  };\n","import type Parser from \"../parser\";\nimport { tokenIsIdentifier, tt } from \"../tokenizer/types\";\nimport * as N from \"../types\";\n\nexport default (superClass: Class<Parser>): Class<Parser> =>\n  class extends superClass {\n    parseV8Intrinsic(): N.Expression {\n      if (this.match(tt.modulo)) {\n        const v8IntrinsicStart = this.state.start;\n        // let the `loc` of Identifier starts from `%`\n        const node = this.startNode();\n        this.next(); // eat '%'\n        if (tokenIsIdentifier(this.state.type)) {\n          const name = this.parseIdentifierName(this.state.start);\n          const identifier = this.createIdentifier(node, name);\n          identifier.type = \"V8IntrinsicIdentifier\";\n          if (this.match(tt.parenL)) {\n            return identifier;\n          }\n        }\n        this.unexpected(v8IntrinsicStart);\n      }\n    }\n\n    /* ============================================================ *\n     * parser/expression.js                                         *\n     * ============================================================ */\n\n    parseExprAtom(): N.Expression {\n      return this.parseV8Intrinsic() || super.parseExprAtom(...arguments);\n    }\n  };\n","// @flow\n\nimport type Parser from \"./parser\";\nimport type { PluginConfig } from \"./parser/base\";\n\nexport type Plugin = PluginConfig;\n\nexport type PluginList = $ReadOnlyArray<PluginConfig>;\n\nexport type MixinPlugin = (superClass: Class<Parser>) => Class<Parser>;\n\n// This function’s second parameter accepts either a string (plugin name) or an\n// array pair (plugin name and options object). If an options object is given,\n// then each value is non-recursively checked for identity with the actual\n// option value of each plugin in the first argument (which is an array of\n// plugin names or array pairs).\nexport function hasPlugin(\n  plugins: PluginList,\n  expectedConfig: PluginConfig,\n): boolean {\n  // The expectedOptions object is by default an empty object if the given\n  // expectedConfig argument does not give an options object (i.e., if it is a\n  // string).\n  const [expectedName, expectedOptions] =\n    typeof expectedConfig === \"string\" ? [expectedConfig, {}] : expectedConfig;\n\n  const expectedKeys = Object.keys(expectedOptions);\n\n  const expectedOptionsIsEmpty = expectedKeys.length === 0;\n\n  return plugins.some(p => {\n    if (typeof p === \"string\") {\n      return expectedOptionsIsEmpty && p === expectedName;\n    } else {\n      const [pluginName, pluginOptions] = p;\n      if (pluginName !== expectedName) {\n        return false;\n      }\n      for (const key of expectedKeys) {\n        if (pluginOptions[key] !== expectedOptions[key]) {\n          return false;\n        }\n      }\n      return true;\n    }\n  });\n}\n\nexport function getPluginOption(\n  plugins: PluginList,\n  name: string,\n  option: string,\n) {\n  const plugin = plugins.find(plugin => {\n    if (Array.isArray(plugin)) {\n      return plugin[0] === name;\n    } else {\n      return plugin === name;\n    }\n  });\n\n  if (plugin && Array.isArray(plugin)) {\n    return plugin[1][option];\n  }\n\n  return null;\n}\n\nconst PIPELINE_PROPOSALS = [\"minimal\", \"fsharp\", \"hack\", \"smart\"];\nconst TOPIC_TOKENS = [\"^\", \"%\", \"#\"];\nconst RECORD_AND_TUPLE_SYNTAX_TYPES = [\"hash\", \"bar\"];\n\nexport function validatePlugins(plugins: PluginList) {\n  if (hasPlugin(plugins, \"decorators\")) {\n    if (hasPlugin(plugins, \"decorators-legacy\")) {\n      throw new Error(\n        \"Cannot use the decorators and decorators-legacy plugin together\",\n      );\n    }\n\n    const decoratorsBeforeExport = getPluginOption(\n      plugins,\n      \"decorators\",\n      \"decoratorsBeforeExport\",\n    );\n    if (decoratorsBeforeExport == null) {\n      throw new Error(\n        \"The 'decorators' plugin requires a 'decoratorsBeforeExport' option,\" +\n          \" whose value must be a boolean. If you are migrating from\" +\n          \" Babylon/Babel 6 or want to use the old decorators proposal, you\" +\n          \" should use the 'decorators-legacy' plugin instead of 'decorators'.\",\n      );\n    } else if (typeof decoratorsBeforeExport !== \"boolean\") {\n      throw new Error(\"'decoratorsBeforeExport' must be a boolean.\");\n    }\n  }\n\n  if (hasPlugin(plugins, \"flow\") && hasPlugin(plugins, \"typescript\")) {\n    throw new Error(\"Cannot combine flow and typescript plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"placeholders\") && hasPlugin(plugins, \"v8intrinsic\")) {\n    throw new Error(\"Cannot combine placeholders and v8intrinsic plugins.\");\n  }\n\n  if (hasPlugin(plugins, \"pipelineOperator\")) {\n    const proposal = getPluginOption(plugins, \"pipelineOperator\", \"proposal\");\n\n    if (!PIPELINE_PROPOSALS.includes(proposal)) {\n      const proposalList = PIPELINE_PROPOSALS.map(p => `\"${p}\"`).join(\", \");\n      throw new Error(\n        `\"pipelineOperator\" requires \"proposal\" option whose value must be one of: ${proposalList}.`,\n      );\n    }\n\n    const tupleSyntaxIsHash = hasPlugin(plugins, [\n      \"recordAndTuple\",\n      { syntaxType: \"hash\" },\n    ]);\n\n    if (proposal === \"hack\") {\n      if (hasPlugin(plugins, \"placeholders\")) {\n        throw new Error(\n          \"Cannot combine placeholders plugin and Hack-style pipes.\",\n        );\n      }\n\n      if (hasPlugin(plugins, \"v8intrinsic\")) {\n        throw new Error(\n          \"Cannot combine v8intrinsic plugin and Hack-style pipes.\",\n        );\n      }\n\n      const topicToken = getPluginOption(\n        plugins,\n        \"pipelineOperator\",\n        \"topicToken\",\n      );\n\n      if (!TOPIC_TOKENS.includes(topicToken)) {\n        const tokenList = TOPIC_TOKENS.map(t => `\"${t}\"`).join(\", \");\n\n        throw new Error(\n          `\"pipelineOperator\" in \"proposal\": \"hack\" mode also requires a \"topicToken\" option whose value must be one of: ${tokenList}.`,\n        );\n      }\n\n      if (topicToken === \"#\" && tupleSyntaxIsHash) {\n        throw new Error(\n          'Plugin conflict between `[\"pipelineOperator\", { proposal: \"hack\", topicToken: \"#\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n        );\n      }\n    } else if (proposal === \"smart\" && tupleSyntaxIsHash) {\n      throw new Error(\n        'Plugin conflict between `[\"pipelineOperator\", { proposal: \"smart\" }]` and `[\"recordAndtuple\", { syntaxType: \"hash\"}]`.',\n      );\n    }\n  }\n\n  if (hasPlugin(plugins, \"moduleAttributes\")) {\n    if (process.env.BABEL_8_BREAKING) {\n      throw new Error(\n        \"`moduleAttributes` has been removed in Babel 8, please use `importAssertions` parser plugin, or `@babel/plugin-syntax-import-assertions`.\",\n      );\n    } else {\n      if (hasPlugin(plugins, \"importAssertions\")) {\n        throw new Error(\n          \"Cannot combine importAssertions and moduleAttributes plugins.\",\n        );\n      }\n      const moduleAttributesVerionPluginOption = getPluginOption(\n        plugins,\n        \"moduleAttributes\",\n        \"version\",\n      );\n      if (moduleAttributesVerionPluginOption !== \"may-2020\") {\n        throw new Error(\n          \"The 'moduleAttributes' plugin requires a 'version' option,\" +\n            \" representing the last proposal update. Currently, the\" +\n            \" only supported value is 'may-2020'.\",\n        );\n      }\n    }\n  }\n\n  if (\n    hasPlugin(plugins, \"recordAndTuple\") &&\n    !RECORD_AND_TUPLE_SYNTAX_TYPES.includes(\n      getPluginOption(plugins, \"recordAndTuple\", \"syntaxType\"),\n    )\n  ) {\n    throw new Error(\n      \"'recordAndTuple' requires 'syntaxType' option whose value should be one of: \" +\n        RECORD_AND_TUPLE_SYNTAX_TYPES.map(p => `'${p}'`).join(\", \"),\n    );\n  }\n\n  if (\n    hasPlugin(plugins, \"asyncDoExpressions\") &&\n    !hasPlugin(plugins, \"doExpressions\")\n  ) {\n    const error = new Error(\n      \"'asyncDoExpressions' requires 'doExpressions', please add 'doExpressions' to parser plugins.\",\n    );\n    // $FlowIgnore\n    error.missingPlugins = \"doExpressions\"; // so @babel/core can provide better error message\n    throw error;\n  }\n}\n\n// These plugins are defined using a mixin which extends the parser class.\n\nimport estree from \"./plugins/estree\";\nimport flow from \"./plugins/flow\";\nimport jsx from \"./plugins/jsx\";\nimport typescript from \"./plugins/typescript\";\nimport placeholders from \"./plugins/placeholders\";\nimport v8intrinsic from \"./plugins/v8intrinsic\";\n\n// NOTE: order is important. estree must come first; placeholders must come last.\nexport const mixinPlugins: { [name: string]: MixinPlugin } = {\n  estree,\n  jsx,\n  flow,\n  typescript,\n  v8intrinsic,\n  placeholders,\n};\n\nexport const mixinPluginNames: $ReadOnlyArray<string> =\n  Object.keys(mixinPlugins);\n","// @flow\n\nimport type { PluginList } from \"./plugin-utils\";\n\n// A second optional argument can be given to further configure\n// the parser process. These options are recognized:\n\nexport type SourceType = \"script\" | \"module\" | \"unambiguous\";\n\nexport type Options = {\n  sourceType: SourceType,\n  sourceFilename?: string,\n  startColumn: number,\n  startLine: number,\n  allowAwaitOutsideFunction: boolean,\n  allowReturnOutsideFunction: boolean,\n  allowImportExportEverywhere: boolean,\n  allowSuperOutsideMethod: boolean,\n  allowUndeclaredExports: boolean,\n  plugins: PluginList,\n  strictMode: ?boolean,\n  ranges: boolean,\n  tokens: boolean,\n  createParenthesizedExpressions: boolean,\n  errorRecovery: boolean,\n  attachComment: boolean,\n};\n\nexport const defaultOptions: Options = {\n  // Source type (\"script\" or \"module\") for different semantics\n  sourceType: \"script\",\n  // Source filename.\n  sourceFilename: undefined,\n  // Column (0-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startColumn: 0,\n  // Line (1-based) from which to start counting source. Useful for\n  // integration with other tools.\n  startLine: 1,\n  // When enabled, await at the top level is not considered an\n  // error.\n  allowAwaitOutsideFunction: false,\n  // When enabled, a return at the top level is not considered an\n  // error.\n  allowReturnOutsideFunction: false,\n  // When enabled, import/export statements are not constrained to\n  // appearing at the top of the program.\n  allowImportExportEverywhere: false,\n  // TODO\n  allowSuperOutsideMethod: false,\n  // When enabled, export statements can reference undeclared variables.\n  allowUndeclaredExports: false,\n  // An array of plugins to enable\n  plugins: [],\n  // TODO\n  strictMode: null,\n  // Nodes have their start and end characters offsets recorded in\n  // `start` and `end` properties (directly on the node, rather than\n  // the `loc` object, which holds line/column data. To also add a\n  // [semi-standardized][range] `range` property holding a `[start,\n  // end]` array with the same numbers, set the `ranges` option to\n  // `true`.\n  //\n  // [range]: https://bugzilla.mozilla.org/show_bug.cgi?id=745678\n  ranges: false,\n  // Adds all parsed tokens to a `tokens` property on the `File` node\n  tokens: false,\n  // Whether to create ParenthesizedExpression AST nodes (if false\n  // the parser sets extra.parenthesized on the expression nodes instead).\n  createParenthesizedExpressions: false,\n  // When enabled, errors are attached to the AST instead of being directly thrown.\n  // Some errors will still throw, because @babel/parser can't always recover.\n  errorRecovery: false,\n  // When enabled, comments will be attached to adjacent AST nodes as one of\n  // `leadingComments`, `trailingComments` and `innerComments`. The comment attachment\n  // is vital to preserve comments after transform. If you don't print AST back,\n  // consider set this option to `false` for performance\n  attachComment: true,\n};\n\n// Interpret and default an options object\n\nexport function getOptions(opts: ?Options): Options {\n  const options: any = {};\n  for (const key of Object.keys(defaultOptions)) {\n    options[key] = opts && opts[key] != null ? opts[key] : defaultOptions[key];\n  }\n  return options;\n}\n","// @flow\n\n/*:: declare var invariant; */\nimport * as charCodes from \"charcodes\";\nimport { tt, type TokenType } from \"../tokenizer/types\";\nimport type {\n  TSParameterProperty,\n  Decorator,\n  Expression,\n  Node,\n  Pattern,\n  RestElement,\n  SpreadElement,\n  /*:: ObjectOrClassMember, */\n  /*:: ClassMember, */\n  /*:: ObjectMember, */\n  /*:: TsNamedTypeElementBase, */\n  /*:: Identifier, */\n  /*:: ObjectExpression, */\n  /*:: ObjectPattern, */\n} from \"../types\";\nimport type { Pos, Position } from \"../util/location\";\nimport {\n  isStrictBindOnlyReservedWord,\n  isStrictBindReservedWord,\n} from \"../util/identifier\";\nimport { NodeUtils } from \"./node\";\nimport { type BindingTypes, BIND_NONE } from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { Errors } from \"./error\";\n\nconst unwrapParenthesizedExpression = (node: Node): Node => {\n  return node.type === \"ParenthesizedExpression\"\n    ? unwrapParenthesizedExpression(node.expression)\n    : node;\n};\n\nexport default class LValParser extends NodeUtils {\n  // Forward-declaration: defined in expression.js\n  /*::\n  +parseIdentifier: (liberal?: boolean) => Identifier;\n  +parseMaybeAssignAllowIn: (\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n    refNeedsArrowPos?: ?Pos,\n  ) => Expression;\n  +parseObjectLike: <T: ObjectPattern | ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => T;\n  +parseObjPropValue: (\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ) => void;\n  +parsePropertyName: (\n    prop: ObjectOrClassMember | ClassMember | TsNamedTypeElementBase,\n  ) => Expression | Identifier;\n  */\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseDecorator: () => Decorator;\n  */\n\n  /**\n   * Convert existing expression atom to assignable pattern\n   * if possible. Also checks invalid destructuring targets:\n\n   - Parenthesized Destructuring patterns\n   - RestElement is not the last element\n   - Missing `=` in assignment pattern\n\n   NOTE: There is a corresponding \"isAssignable\" method.\n   When this one is updated, please check if also that one needs to be updated.\n\n   * @param {Node} node The expression atom\n   * @param {boolean} [isLHS=false] Whether we are parsing a LeftHandSideExpression. If isLHS is `true`, the following cases are allowed:\n                                    `[(a)] = [0]`, `[(a.b)] = [0]`\n\n   * @returns {Node} The converted assignable pattern\n   * @memberof LValParser\n   */\n  toAssignable(node: Node, isLHS: boolean = false): Node {\n    let parenthesized = undefined;\n    if (node.type === \"ParenthesizedExpression\" || node.extra?.parenthesized) {\n      parenthesized = unwrapParenthesizedExpression(node);\n      if (isLHS) {\n        // an LHS can be reinterpreted to a binding pattern but not vice versa.\n        // therefore a parenthesized identifier is ambiguous until we are sure it is an assignment expression\n        // i.e. `([(a) = []] = []) => {}`\n        // see also `recordParenthesizedIdentifierError` signature in packages/babel-parser/src/util/expression-scope.js\n        if (parenthesized.type === \"Identifier\") {\n          this.expressionScope.recordParenthesizedIdentifierError(\n            node.start,\n            Errors.InvalidParenthesizedAssignment,\n          );\n        } else if (parenthesized.type !== \"MemberExpression\") {\n          // A parenthesized member expression can be in LHS but not in pattern.\n          // If the LHS is later interpreted as a pattern, `checkLVal` will throw for member expression binding\n          // i.e. `([(a.b) = []] = []) => {}`\n          this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n        }\n      } else {\n        this.raise(node.start, Errors.InvalidParenthesizedAssignment);\n      }\n    }\n\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        break;\n\n      case \"ObjectExpression\":\n        node.type = \"ObjectPattern\";\n        for (\n          let i = 0, length = node.properties.length, last = length - 1;\n          i < length;\n          i++\n        ) {\n          const prop = node.properties[i];\n          const isLast = i === last;\n          this.toAssignableObjectExpressionProp(prop, isLast, isLHS);\n\n          if (\n            isLast &&\n            prop.type === \"RestElement\" &&\n            node.extra?.trailingComma\n          ) {\n            this.raiseRestNotLast(node.extra.trailingComma);\n          }\n        }\n        break;\n\n      case \"ObjectProperty\":\n        this.toAssignable(node.value, isLHS);\n        break;\n\n      case \"SpreadElement\": {\n        this.checkToRestConversion(node);\n\n        node.type = \"RestElement\";\n        const arg = node.argument;\n        this.toAssignable(arg, isLHS);\n        break;\n      }\n\n      case \"ArrayExpression\":\n        node.type = \"ArrayPattern\";\n        this.toAssignableList(node.elements, node.extra?.trailingComma, isLHS);\n        break;\n\n      case \"AssignmentExpression\":\n        if (node.operator !== \"=\") {\n          this.raise(node.left.end, Errors.MissingEqInAssignment);\n        }\n\n        node.type = \"AssignmentPattern\";\n        delete node.operator;\n        this.toAssignable(node.left, isLHS);\n        break;\n\n      case \"ParenthesizedExpression\":\n        /*::invariant (parenthesized !== undefined) */\n        this.toAssignable(parenthesized, isLHS);\n        break;\n\n      default:\n      // We don't know how to deal with this node. It will\n      // be reported by a later call to checkLVal\n    }\n    return node;\n  }\n\n  toAssignableObjectExpressionProp(\n    prop: Node,\n    isLast: boolean,\n    isLHS: boolean,\n  ) {\n    if (prop.type === \"ObjectMethod\") {\n      const error =\n        prop.kind === \"get\" || prop.kind === \"set\"\n          ? Errors.PatternHasAccessor\n          : Errors.PatternHasMethod;\n\n      /* eslint-disable @babel/development-internal/dry-error-messages */\n      this.raise(prop.key.start, error);\n      /* eslint-enable @babel/development-internal/dry-error-messages */\n    } else if (prop.type === \"SpreadElement\" && !isLast) {\n      this.raiseRestNotLast(prop.start);\n    } else {\n      this.toAssignable(prop, isLHS);\n    }\n  }\n\n  // Convert list of expression atoms to binding list.\n\n  toAssignableList(\n    exprList: Expression[],\n    trailingCommaPos?: ?number,\n    isLHS: boolean,\n  ): $ReadOnlyArray<Pattern> {\n    let end = exprList.length;\n    if (end) {\n      const last = exprList[end - 1];\n      if (last?.type === \"RestElement\") {\n        --end;\n      } else if (last?.type === \"SpreadElement\") {\n        last.type = \"RestElement\";\n        let arg = last.argument;\n        this.toAssignable(arg, isLHS);\n        arg = unwrapParenthesizedExpression(arg);\n        if (\n          arg.type !== \"Identifier\" &&\n          arg.type !== \"MemberExpression\" &&\n          arg.type !== \"ArrayPattern\" &&\n          arg.type !== \"ObjectPattern\"\n        ) {\n          this.unexpected(arg.start);\n        }\n\n        if (trailingCommaPos) {\n          this.raiseTrailingCommaAfterRest(trailingCommaPos);\n        }\n\n        --end;\n      }\n    }\n    for (let i = 0; i < end; i++) {\n      const elt = exprList[i];\n      if (elt) {\n        this.toAssignable(elt, isLHS);\n        if (elt.type === \"RestElement\") {\n          this.raiseRestNotLast(elt.start);\n        }\n      }\n    }\n    return exprList;\n  }\n\n  isAssignable(node: Node, isBinding?: boolean): boolean {\n    switch (node.type) {\n      case \"Identifier\":\n      case \"ObjectPattern\":\n      case \"ArrayPattern\":\n      case \"AssignmentPattern\":\n      case \"RestElement\":\n        return true;\n\n      case \"ObjectExpression\": {\n        const last = node.properties.length - 1;\n        return node.properties.every((prop, i) => {\n          return (\n            prop.type !== \"ObjectMethod\" &&\n            (i === last || prop.type !== \"SpreadElement\") &&\n            this.isAssignable(prop)\n          );\n        });\n      }\n\n      case \"ObjectProperty\":\n        return this.isAssignable(node.value);\n\n      case \"SpreadElement\":\n        return this.isAssignable(node.argument);\n\n      case \"ArrayExpression\":\n        return node.elements.every(\n          element => element === null || this.isAssignable(element),\n        );\n\n      case \"AssignmentExpression\":\n        return node.operator === \"=\";\n\n      case \"ParenthesizedExpression\":\n        return this.isAssignable(node.expression);\n\n      case \"MemberExpression\":\n      case \"OptionalMemberExpression\":\n        return !isBinding;\n\n      default:\n        return false;\n    }\n  }\n\n  // Convert list of expression atoms to a list of\n\n  toReferencedList(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean, // eslint-disable-line no-unused-vars\n  ): $ReadOnlyArray<?Expression> {\n    return exprList;\n  }\n\n  toReferencedListDeep(\n    exprList: $ReadOnlyArray<?Expression>,\n    isParenthesizedExpr?: boolean,\n  ): void {\n    this.toReferencedList(exprList, isParenthesizedExpr);\n\n    for (const expr of exprList) {\n      if (expr?.type === \"ArrayExpression\") {\n        this.toReferencedListDeep(expr.elements);\n      }\n    }\n  }\n\n  // Parses spread element.\n\n  parseSpread(\n    refExpressionErrors: ?ExpressionErrors,\n    refNeedsArrowPos?: ?Pos,\n  ): SpreadElement {\n    const node = this.startNode();\n    this.next();\n    node.argument = this.parseMaybeAssignAllowIn(\n      refExpressionErrors,\n      undefined,\n      refNeedsArrowPos,\n    );\n    return this.finishNode(node, \"SpreadElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  // https://tc39.es/ecma262/#prod-BindingRestElement\n  parseRestBinding(): RestElement {\n    const node = this.startNode();\n    this.next(); // eat `...`\n    node.argument = this.parseBindingAtom();\n    return this.finishNode(node, \"RestElement\");\n  }\n\n  // Parses lvalue (assignable) atom.\n  parseBindingAtom(): Pattern {\n    // https://tc39.es/ecma262/#prod-BindingPattern\n    switch (this.state.type) {\n      case tt.bracketL: {\n        const node = this.startNode();\n        this.next();\n        node.elements = this.parseBindingList(\n          tt.bracketR,\n          charCodes.rightSquareBracket,\n          true,\n        );\n        return this.finishNode(node, \"ArrayPattern\");\n      }\n\n      case tt.braceL:\n        return this.parseObjectLike(tt.braceR, true);\n    }\n\n    // https://tc39.es/ecma262/#prod-BindingIdentifier\n    return this.parseIdentifier();\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingElementList\n  parseBindingList(\n    close: TokenType,\n    closeCharCode: $Values<typeof charCodes>,\n    allowEmpty?: boolean,\n    allowModifiers?: boolean,\n  ): $ReadOnlyArray<Pattern | TSParameterProperty> {\n    const elts: Array<Pattern | TSParameterProperty> = [];\n    let first = true;\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n      }\n      if (allowEmpty && this.match(tt.comma)) {\n        // $FlowFixMe This method returns `$ReadOnlyArray<?Pattern>` if `allowEmpty` is set.\n        elts.push(null);\n      } else if (this.eat(close)) {\n        break;\n      } else if (this.match(tt.ellipsis)) {\n        elts.push(this.parseAssignableListItemTypes(this.parseRestBinding()));\n        this.checkCommaAfterRest(closeCharCode);\n        this.expect(close);\n        break;\n      } else {\n        const decorators = [];\n        if (this.match(tt.at) && this.hasPlugin(\"decorators\")) {\n          this.raise(this.state.start, Errors.UnsupportedParameterDecorator);\n        }\n        // invariant: hasPlugin(\"decorators-legacy\")\n        while (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n        }\n        elts.push(this.parseAssignableListItem(allowModifiers, decorators));\n      }\n    }\n    return elts;\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingRestProperty\n  parseBindingRestProperty(prop: RestElement): RestElement {\n    this.next(); // eat '...'\n    // Don't use parseRestBinding() as we only allow Identifier here.\n    prop.argument = this.parseIdentifier();\n    this.checkCommaAfterRest(charCodes.rightCurlyBrace);\n    return this.finishNode(prop, \"RestElement\");\n  }\n\n  // https://tc39.es/ecma262/#prod-BindingProperty\n  parseBindingProperty(): ObjectMember | RestElement {\n    const prop = this.startNode();\n    const { type, start: startPos, startLoc } = this.state;\n    if (type === tt.ellipsis) {\n      return this.parseBindingRestProperty(prop);\n    } else {\n      this.parsePropertyName(prop);\n    }\n    prop.method = false;\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      false /* isGenerator */,\n      false /* isAsync */,\n      true /* isPattern */,\n      false /* isAccessor */,\n    );\n\n    return prop;\n  }\n\n  parseAssignableListItem(\n    allowModifiers: ?boolean,\n    decorators: Decorator[],\n  ): Pattern | TSParameterProperty {\n    const left = this.parseMaybeDefault();\n    this.parseAssignableListItemTypes(left);\n    const elt = this.parseMaybeDefault(left.start, left.loc.start, left);\n    if (decorators.length) {\n      left.decorators = decorators;\n    }\n    return elt;\n  }\n\n  // Used by flow/typescript plugin to add type annotations to binding elements\n  parseAssignableListItemTypes(param: Pattern): Pattern {\n    return param;\n  }\n\n  // Parses assignment pattern around given atom if possible.\n  // https://tc39.es/ecma262/#prod-BindingElement\n  parseMaybeDefault(\n    startPos?: ?number,\n    startLoc?: ?Position,\n    left?: ?Pattern,\n  ): Pattern {\n    startLoc = startLoc ?? this.state.startLoc;\n    startPos = startPos ?? this.state.start;\n    // $FlowIgnore\n    left = left ?? this.parseBindingAtom();\n    if (!this.eat(tt.eq)) return left;\n\n    const node = this.startNodeAt(startPos, startLoc);\n    node.left = left;\n    node.right = this.parseMaybeAssignAllowIn();\n    return this.finishNode(node, \"AssignmentPattern\");\n  }\n\n  /**\n   * Verify that if a node is an lval - something that can be assigned to.\n   *\n   * @param {Expression} expr The given node\n   * @param {string} contextDescription The auxiliary context information printed when error is thrown\n   * @param {BindingTypes} [bindingType=BIND_NONE] The desired binding type. If the given node is an identifier and `bindingType` is not\n                                                   BIND_NONE, `checkLVal` will register binding to the parser scope\n                                                   See also src/util/scopeflags.js\n   * @param {?Set<string>} checkClashes An optional string set to check if an identifier name is included. `checkLVal` will add checked\n                                        identifier name to `checkClashes` It is used in tracking duplicates in function parameter lists. If\n                                        it is nullish, `checkLVal` will skip duplicate checks\n   * @param {boolean} [disallowLetBinding] Whether an identifier named \"let\" should be disallowed\n   * @param {boolean} [strictModeChanged=false] Whether an identifier has been parsed in a sloppy context but should be reinterpreted as\n                                                strict-mode. e.g. `(arguments) => { \"use strict \"}`\n   * @memberof LValParser\n   */\n  checkLVal(\n    expr: Expression,\n    contextDescription: string,\n    bindingType: BindingTypes = BIND_NONE,\n    checkClashes: ?Set<string>,\n    disallowLetBinding?: boolean,\n    strictModeChanged?: boolean = false,\n  ): void {\n    switch (expr.type) {\n      case \"Identifier\": {\n        const { name } = expr;\n        if (\n          this.state.strict &&\n          // \"Global\" reserved words have already been checked by parseIdentifier,\n          // unless they have been found in the id or parameters of a strict-mode\n          // function in a sloppy context.\n          (strictModeChanged\n            ? isStrictBindReservedWord(name, this.inModule)\n            : isStrictBindOnlyReservedWord(name))\n        ) {\n          this.raise(\n            expr.start,\n            bindingType === BIND_NONE\n              ? Errors.StrictEvalArguments\n              : Errors.StrictEvalArgumentsBinding,\n            name,\n          );\n        }\n\n        if (checkClashes) {\n          if (checkClashes.has(name)) {\n            this.raise(expr.start, Errors.ParamDupe);\n          } else {\n            checkClashes.add(name);\n          }\n        }\n        if (disallowLetBinding && name === \"let\") {\n          this.raise(expr.start, Errors.LetInLexicalBinding);\n        }\n        if (!(bindingType & BIND_NONE)) {\n          this.scope.declareName(name, bindingType, expr.start);\n        }\n        break;\n      }\n\n      case \"MemberExpression\":\n        if (bindingType !== BIND_NONE) {\n          this.raise(expr.start, Errors.InvalidPropertyBindingPattern);\n        }\n        break;\n\n      case \"ObjectPattern\":\n        for (let prop of expr.properties) {\n          if (this.isObjectProperty(prop)) prop = prop.value;\n          // If we find here an ObjectMethod, it's because this was originally\n          // an ObjectExpression which has then been converted.\n          // toAssignable already reported this error with a nicer message.\n          else if (this.isObjectMethod(prop)) continue;\n\n          this.checkLVal(\n            prop,\n            \"object destructuring pattern\",\n            bindingType,\n            checkClashes,\n            disallowLetBinding,\n          );\n        }\n        break;\n\n      case \"ArrayPattern\":\n        for (const elem of expr.elements) {\n          if (elem) {\n            this.checkLVal(\n              elem,\n              \"array destructuring pattern\",\n              bindingType,\n              checkClashes,\n              disallowLetBinding,\n            );\n          }\n        }\n        break;\n\n      case \"AssignmentPattern\":\n        this.checkLVal(\n          expr.left,\n          \"assignment pattern\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"RestElement\":\n        this.checkLVal(\n          expr.argument,\n          \"rest element\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      case \"ParenthesizedExpression\":\n        this.checkLVal(\n          expr.expression,\n          \"parenthesized expression\",\n          bindingType,\n          checkClashes,\n        );\n        break;\n\n      default: {\n        this.raise(\n          expr.start,\n          bindingType === BIND_NONE\n            ? Errors.InvalidLhs\n            : Errors.InvalidLhsBinding,\n          contextDescription,\n        );\n      }\n    }\n  }\n\n  checkToRestConversion(node: SpreadElement): void {\n    if (\n      node.argument.type !== \"Identifier\" &&\n      node.argument.type !== \"MemberExpression\"\n    ) {\n      this.raise(node.argument.start, Errors.InvalidRestAssignmentPattern);\n    }\n  }\n\n  checkCommaAfterRest(close: $Values<typeof charCodes>): void {\n    if (this.match(tt.comma)) {\n      if (this.lookaheadCharCode() === close) {\n        this.raiseTrailingCommaAfterRest(this.state.start);\n      } else {\n        this.raiseRestNotLast(this.state.start);\n      }\n    }\n  }\n\n  raiseRestNotLast(pos: number) {\n    throw this.raise(pos, Errors.ElementAfterRest);\n  }\n\n  raiseTrailingCommaAfterRest(pos: number) {\n    this.raise(pos, Errors.RestTrailingComma);\n  }\n}\n","// @flow\n\n// A recursive descent parser operates by defining functions for all\n// syntactic elements, and recursively calling those, each function\n// advancing the input stream and returning an AST node. Precedence\n// of constructs (for example, the fact that `!x[1]` means `!(x[1])`\n// instead of `(!x)[1]` is handled by the fact that the parser\n// function that parses unary prefix operators is called first, and\n// in turn calls the function that parses `[]` subscripts — that\n// way, it'll receive the node for `x[1]` already parsed, and wraps\n// *that* in the unary operator node.\n//\n// Acorn uses an [operator precedence parser][opp] to handle binary\n// operator precedence, because it is much more compact than using\n// the technique outlined above, which uses different, nesting\n// functions to specify precedence, for all of the ten binary\n// precedence levels that JavaScript defines.\n//\n// [opp]: http://en.wikipedia.org/wiki/Operator-precedence_parser\n\nimport {\n  tokenCanStartExpression,\n  tokenIsAssignment,\n  tokenIsIdentifier,\n  tokenIsKeywordOrIdentifier,\n  tokenIsOperator,\n  tokenIsPostfix,\n  tokenIsPrefix,\n  tokenIsRightAssociative,\n  tokenIsTemplate,\n  tokenKeywordOrIdentifierIsKeyword,\n  tokenLabelName,\n  tokenOperatorPrecedence,\n  tt,\n  type TokenType,\n} from \"../tokenizer/types\";\nimport * as N from \"../types\";\nimport LValParser from \"./lval\";\nimport {\n  isKeyword,\n  isReservedWord,\n  isStrictReservedWord,\n  isStrictBindReservedWord,\n  isIdentifierStart,\n  canBeReservedWord,\n} from \"../util/identifier\";\nimport { Position, createPositionWithColumnOffset } from \"../util/location\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_OUTSIDE,\n  BIND_VAR,\n  SCOPE_ARROW,\n  SCOPE_CLASS,\n  SCOPE_DIRECT_SUPER,\n  SCOPE_FUNCTION,\n  SCOPE_SUPER,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport {\n  PARAM_AWAIT,\n  PARAM_IN,\n  PARAM_RETURN,\n  functionFlags,\n} from \"../util/production-parameter\";\nimport {\n  newArrowHeadScope,\n  newAsyncArrowScope,\n  newExpressionScope,\n} from \"../util/expression-scope\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport type { ParsingError } from \"./error\";\nimport { setInnerComments } from \"./comments\";\nimport { cloneIdentifier } from \"./node\";\n\n/*::\nimport type { SourceType } from \"../options\";\n*/\n\nconst invalidHackPipeBodies = new Map([\n  [\"ArrowFunctionExpression\", \"arrow function\"],\n  [\"AssignmentExpression\", \"assignment\"],\n  [\"ConditionalExpression\", \"conditional\"],\n  [\"YieldExpression\", \"yield\"],\n]);\n\nexport default class ExpressionParser extends LValParser {\n  // Forward-declaration: defined in statement.js\n  /*::\n  +parseBlock: (\n    allowDirectives?: boolean,\n    createNewLexicalScope?: boolean,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ) => N.BlockStatement;\n  +parseClass: (\n    node: N.Class,\n    isStatement: boolean,\n    optionalId?: boolean,\n  ) => N.Class;\n  +parseDecorators: (allowExport?: boolean) => void;\n  +parseFunction: <T: N.NormalFunction>(\n    node: T,\n    statement?: number,\n    allowExpressionBody?: boolean,\n    isAsync?: boolean,\n  ) => T;\n  +parseFunctionParams: (node: N.Function, allowModifiers?: boolean) => void;\n  +takeDecorators: (node: N.HasDecorators) => void;\n  +parseBlockOrModuleBlockBody: (\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void\n  ) => void\n  +parseProgram: (\n    program: N.Program, end: TokenType, sourceType?: SourceType\n  ) => N.Program\n  */\n\n  // For object literal, check if property __proto__ has been used more than once.\n  // If the expression is a destructuring assignment, then __proto__ may appear\n  // multiple times. Otherwise, __proto__ is a duplicated key.\n\n  // For record expression, check if property __proto__ exists\n\n  checkProto(\n    prop: N.ObjectMember | N.SpreadElement,\n    isRecord: ?boolean,\n    protoRef: { used: boolean },\n    refExpressionErrors: ?ExpressionErrors,\n  ): void {\n    if (\n      prop.type === \"SpreadElement\" ||\n      this.isObjectMethod(prop) ||\n      prop.computed ||\n      // $FlowIgnore\n      prop.shorthand\n    ) {\n      return;\n    }\n\n    const key = prop.key;\n    // It is either an Identifier or a String/NumericLiteral\n    const name = key.type === \"Identifier\" ? key.name : key.value;\n\n    if (name === \"__proto__\") {\n      if (isRecord) {\n        this.raise(key.start, Errors.RecordNoProto);\n        return;\n      }\n      if (protoRef.used) {\n        if (refExpressionErrors) {\n          // Store the first redefinition's position, otherwise ignore because\n          // we are parsing ambiguous pattern\n          if (refExpressionErrors.doubleProto === -1) {\n            refExpressionErrors.doubleProto = key.start;\n          }\n        } else {\n          this.raise(key.start, Errors.DuplicateProto);\n        }\n      }\n\n      protoRef.used = true;\n    }\n  }\n\n  shouldExitDescending(expr: N.Expression, potentialArrowAt: number): boolean {\n    return (\n      expr.type === \"ArrowFunctionExpression\" && expr.start === potentialArrowAt\n    );\n  }\n\n  // Convenience method to parse an Expression only\n  getExpression(): N.Expression & N.ParserOutput {\n    this.enterInitialScopes();\n    this.nextToken();\n    const expr = this.parseExpression();\n    if (!this.match(tt.eof)) {\n      this.unexpected();\n    }\n    // Unlike parseTopLevel, we need to drain remaining commentStacks\n    // because the top level node is _not_ Program.\n    this.finalizeRemainingComments();\n    expr.comments = this.state.comments;\n    expr.errors = this.state.errors;\n    if (this.options.tokens) {\n      expr.tokens = this.tokens;\n    }\n    return expr;\n  }\n\n  // ### Expression parsing\n\n  // These nest, from the most general expression type at the top to\n  // 'atomic', nondivisible expression types at the bottom. Most of\n  // the functions will simply let the function (s) below them parse,\n  // and, *if* the syntactic construct they handle is present, wrap\n  // the AST node that the inner parser gave them in another node.\n\n  // Parse a full expression.\n  // - `disallowIn`\n  //   is used to forbid the `in` operator (in for loops initialization expressions)\n  //   When `disallowIn` is true, the production parameter [In] is not present.\n\n  // - `refExpressionErrors `\n  //   provides reference for storing '=' operator inside shorthand\n  //   property assignment in contexts where both object expression\n  //   and object pattern might appear (so it's possible to raise\n  //   delayed syntax error at correct position).\n\n  parseExpression(\n    disallowIn?: boolean,\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression {\n    if (disallowIn) {\n      return this.disallowInAnd(() =>\n        this.parseExpressionBase(refExpressionErrors),\n      );\n    }\n    return this.allowInAnd(() => this.parseExpressionBase(refExpressionErrors));\n  }\n\n  // https://tc39.es/ecma262/#prod-Expression\n  parseExpressionBase(refExpressionErrors?: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const expr = this.parseMaybeAssign(refExpressionErrors);\n    if (this.match(tt.comma)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.expressions = [expr];\n      while (this.eat(tt.comma)) {\n        node.expressions.push(this.parseMaybeAssign(refExpressionErrors));\n      }\n      this.toReferencedList(node.expressions);\n      return this.finishNode(node, \"SequenceExpression\");\n    }\n    return expr;\n  }\n\n  // Set [~In] parameter for assignment expression\n  parseMaybeAssignDisallowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.disallowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // Set [+In] parameter for assignment expression\n  parseMaybeAssignAllowIn(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ) {\n    return this.allowInAnd(() =>\n      this.parseMaybeAssign(refExpressionErrors, afterLeftParse),\n    );\n  }\n\n  // This method is only used by\n  // the typescript and flow plugins.\n  setOptionalParametersError(\n    refExpressionErrors: ExpressionErrors,\n    resultError?: ParsingError,\n  ) {\n    refExpressionErrors.optionalParameters =\n      resultError?.pos ?? this.state.start;\n  }\n\n  // Parse an assignment expression. This includes applications of\n  // operators like `+=`.\n  // https://tc39.es/ecma262/#prod-AssignmentExpression\n  parseMaybeAssign(\n    refExpressionErrors?: ?ExpressionErrors,\n    afterLeftParse?: Function,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    if (this.isContextual(tt._yield)) {\n      if (this.prodParam.hasYield) {\n        let left = this.parseYield();\n        if (afterLeftParse) {\n          left = afterLeftParse.call(this, left, startPos, startLoc);\n        }\n        return left;\n      }\n    }\n\n    let ownExpressionErrors;\n    if (refExpressionErrors) {\n      ownExpressionErrors = false;\n    } else {\n      refExpressionErrors = new ExpressionErrors();\n      ownExpressionErrors = true;\n    }\n    const { type } = this.state;\n\n    if (type === tt.parenL || tokenIsIdentifier(type)) {\n      this.state.potentialArrowAt = this.state.start;\n    }\n\n    let left = this.parseMaybeConditional(refExpressionErrors);\n    if (afterLeftParse) {\n      left = afterLeftParse.call(this, left, startPos, startLoc);\n    }\n    if (tokenIsAssignment(this.state.type)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      const operator = this.state.value;\n      node.operator = operator;\n\n      if (this.match(tt.eq)) {\n        node.left = this.toAssignable(left, /* isLHS */ true);\n\n        if (refExpressionErrors.doubleProto >= startPos) {\n          refExpressionErrors.doubleProto = -1; // reset because double __proto__ is valid in assignment expression\n        }\n        if (refExpressionErrors.shorthandAssign >= startPos) {\n          refExpressionErrors.shorthandAssign = -1; // reset because shorthand default was used correctly\n        }\n      } else {\n        node.left = left;\n      }\n\n      this.checkLVal(left, \"assignment expression\");\n      this.next();\n      node.right = this.parseMaybeAssign();\n      return this.finishNode(node, \"AssignmentExpression\");\n    } else if (ownExpressionErrors) {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n\n    return left;\n  }\n\n  // Parse a ternary conditional (`?:`) operator.\n  // https://tc39.es/ecma262/#prod-ConditionalExpression\n\n  parseMaybeConditional(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprOps(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseConditional(expr, startPos, startLoc, refExpressionErrors);\n  }\n\n  parseConditional(\n    expr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    // eslint-disable-next-line no-unused-vars\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.Expression {\n    if (this.eat(tt.question)) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.test = expr;\n      node.consequent = this.parseMaybeAssignAllowIn();\n      this.expect(tt.colon);\n      node.alternate = this.parseMaybeAssign();\n      return this.finishNode(node, \"ConditionalExpression\");\n    }\n    return expr;\n  }\n\n  parseMaybeUnaryOrPrivate(\n    refExpressionErrors?: ExpressionErrors,\n  ): N.Expression | N.PrivateName {\n    return this.match(tt.privateName)\n      ? this.parsePrivateName()\n      : this.parseMaybeUnary(refExpressionErrors);\n  }\n\n  // Start the precedence parser.\n  // https://tc39.es/ecma262/#prod-ShortCircuitExpression\n\n  parseExprOps(refExpressionErrors: ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseMaybeUnaryOrPrivate(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseExprOp(expr, startPos, startLoc, -1);\n  }\n\n  // Parse binary operators with the operator precedence parsing\n  // algorithm. `left` is the left-hand side of the operator.\n  // `minPrec` provides context that allows the function to stop and\n  // defer further parser to one of its callers when it encounters an\n  // operator that has a lower precedence than the set it is parsing.\n\n  parseExprOp(\n    left: N.Expression | N.PrivateName,\n    leftStartPos: number,\n    leftStartLoc: Position,\n    minPrec: number,\n  ): N.Expression {\n    if (this.isPrivateName(left)) {\n      // https://tc39.es/ecma262/#prod-RelationalExpression\n      // RelationalExpression [In, Yield, Await]\n      //   [+In] PrivateIdentifier in ShiftExpression[?Yield, ?Await]\n\n      const value = this.getPrivateNameSV(left);\n      const { start } = left;\n\n      if (\n        minPrec >= tokenOperatorPrecedence(tt._in) ||\n        !this.prodParam.hasIn ||\n        !this.match(tt._in)\n      ) {\n        this.raise(start, Errors.PrivateInExpectedIn, value);\n      }\n\n      this.classScope.usePrivateName(value, start);\n    }\n\n    const op = this.state.type;\n    if (tokenIsOperator(op) && (this.prodParam.hasIn || !this.match(tt._in))) {\n      let prec = tokenOperatorPrecedence(op);\n      if (prec > minPrec) {\n        if (op === tt.pipeline) {\n          this.expectPlugin(\"pipelineOperator\");\n          if (this.state.inFSharpPipelineDirectBody) {\n            return left;\n          }\n          this.checkPipelineAtInfixOperator(left, leftStartPos);\n        }\n        const node = this.startNodeAt(leftStartPos, leftStartLoc);\n        node.left = left;\n        node.operator = this.state.value;\n\n        const logical = op === tt.logicalOR || op === tt.logicalAND;\n        const coalesce = op === tt.nullishCoalescing;\n\n        if (coalesce) {\n          // Handle the precedence of `tt.coalesce` as equal to the range of logical expressions.\n          // In other words, `node.right` shouldn't contain logical expressions in order to check the mixed error.\n          prec = tokenOperatorPrecedence(tt.logicalAND);\n        }\n\n        this.next();\n\n        if (\n          op === tt.pipeline &&\n          this.hasPlugin([\"pipelineOperator\", { proposal: \"minimal\" }])\n        ) {\n          if (this.state.type === tt._await && this.prodParam.hasAwait) {\n            throw this.raise(\n              this.state.start,\n              Errors.UnexpectedAwaitAfterPipelineBody,\n            );\n          }\n        }\n\n        node.right = this.parseExprOpRightExpr(op, prec);\n        this.finishNode(\n          node,\n          logical || coalesce ? \"LogicalExpression\" : \"BinaryExpression\",\n        );\n        /* this check is for all ?? operators\n         * a ?? b && c for this example\n         * when op is coalesce and nextOp is logical (&&), throw at the pos of nextOp that it can not be mixed.\n         * Symmetrically it also throws when op is logical and nextOp is coalesce\n         */\n        const nextOp = this.state.type;\n        if (\n          (coalesce && (nextOp === tt.logicalOR || nextOp === tt.logicalAND)) ||\n          (logical && nextOp === tt.nullishCoalescing)\n        ) {\n          throw this.raise(this.state.start, Errors.MixingCoalesceWithLogical);\n        }\n\n        return this.parseExprOp(node, leftStartPos, leftStartLoc, minPrec);\n      }\n    }\n    return left;\n  }\n\n  // Helper function for `parseExprOp`. Parse the right-hand side of binary-\n  // operator expressions, then apply any operator-specific functions.\n\n  parseExprOpRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    switch (op) {\n      case tt.pipeline:\n        switch (this.getPluginOption(\"pipelineOperator\", \"proposal\")) {\n          case \"hack\":\n            return this.withTopicBindingContext(() => {\n              return this.parseHackPipeBody();\n            });\n\n          case \"smart\":\n            return this.withTopicBindingContext(() => {\n              if (this.prodParam.hasYield && this.isContextual(tt._yield)) {\n                throw this.raise(\n                  this.state.start,\n                  Errors.PipeBodyIsTighter,\n                  this.state.value,\n                );\n              }\n              return this.parseSmartPipelineBodyInStyle(\n                this.parseExprOpBaseRightExpr(op, prec),\n                startPos,\n                startLoc,\n              );\n            });\n\n          case \"fsharp\":\n            return this.withSoloAwaitPermittingContext(() => {\n              return this.parseFSharpPipelineBody(prec);\n            });\n        }\n\n      // Falls through.\n      default:\n        return this.parseExprOpBaseRightExpr(op, prec);\n    }\n  }\n\n  // Helper function for `parseExprOpRightExpr`. Parse the right-hand side of\n  // binary-operator expressions without applying any operator-specific functions.\n\n  parseExprOpBaseRightExpr(op: TokenType, prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    return this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      tokenIsRightAssociative(op) ? prec - 1 : prec,\n    );\n  }\n\n  parseHackPipeBody(): N.Expression {\n    const { start } = this.state;\n\n    const body = this.parseMaybeAssign();\n\n    // TODO: Check how to handle type casts in Flow and TS once they are supported\n    if (invalidHackPipeBodies.has(body.type) && !body.extra?.parenthesized) {\n      this.raise(\n        start,\n        Errors.PipeUnparenthesizedBody,\n        invalidHackPipeBodies.get(body.type),\n      );\n    }\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(start, Errors.PipeTopicUnused);\n    }\n\n    return body;\n  }\n\n  checkExponentialAfterUnary(node: N.AwaitExpression | N.UnaryExpression) {\n    if (this.match(tt.exponent)) {\n      this.raise(\n        node.argument.start,\n        Errors.UnexpectedTokenUnaryExponentiation,\n      );\n    }\n  }\n\n  // Parse unary operators, both prefix and postfix.\n  // https://tc39.es/ecma262/#prod-UnaryExpression\n  parseMaybeUnary(\n    refExpressionErrors: ?ExpressionErrors,\n    sawUnary?: boolean,\n  ): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const isAwait = this.isContextual(tt._await);\n\n    if (isAwait && this.isAwaitAllowed()) {\n      this.next();\n      const expr = this.parseAwait(startPos, startLoc);\n      if (!sawUnary) this.checkExponentialAfterUnary(expr);\n      return expr;\n    }\n    const update = this.match(tt.incDec);\n    const node = this.startNode();\n    if (tokenIsPrefix(this.state.type)) {\n      node.operator = this.state.value;\n      node.prefix = true;\n\n      if (this.match(tt._throw)) {\n        this.expectPlugin(\"throwExpressions\");\n      }\n      const isDelete = this.match(tt._delete);\n      this.next();\n\n      node.argument = this.parseMaybeUnary(null, true);\n\n      this.checkExpressionErrors(refExpressionErrors, true);\n\n      if (this.state.strict && isDelete) {\n        const arg = node.argument;\n\n        if (arg.type === \"Identifier\") {\n          this.raise(node.start, Errors.StrictDelete);\n        } else if (this.hasPropertyAsPrivateName(arg)) {\n          this.raise(node.start, Errors.DeletePrivateField);\n        }\n      }\n\n      if (!update) {\n        if (!sawUnary) this.checkExponentialAfterUnary(node);\n        return this.finishNode(node, \"UnaryExpression\");\n      }\n    }\n\n    const expr = this.parseUpdate(node, update, refExpressionErrors);\n\n    if (isAwait) {\n      const { type } = this.state;\n      const startsExpr = this.hasPlugin(\"v8intrinsic\")\n        ? tokenCanStartExpression(type)\n        : tokenCanStartExpression(type) && !this.match(tt.modulo);\n      if (startsExpr && !this.isAmbiguousAwait()) {\n        this.raiseOverwrite(startPos, Errors.AwaitNotInAsyncContext);\n        return this.parseAwait(startPos, startLoc);\n      }\n    }\n\n    return expr;\n  }\n\n  // https://tc39.es/ecma262/#prod-UpdateExpression\n  parseUpdate(\n    node: N.Expression,\n    update: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.Expression {\n    if (update) {\n      this.checkLVal(node.argument, \"prefix operation\");\n      return this.finishNode(node, \"UpdateExpression\");\n    }\n\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    let expr = this.parseExprSubscripts(refExpressionErrors);\n    if (this.checkExpressionErrors(refExpressionErrors, false)) return expr;\n    while (tokenIsPostfix(this.state.type) && !this.canInsertSemicolon()) {\n      const node = this.startNodeAt(startPos, startLoc);\n      node.operator = this.state.value;\n      node.prefix = false;\n      node.argument = expr;\n      this.checkLVal(expr, \"postfix operation\");\n      this.next();\n      expr = this.finishNode(node, \"UpdateExpression\");\n    }\n    return expr;\n  }\n\n  // Parse call, dot, and `[]`-subscript expressions.\n  // https://tc39.es/ecma262/#prod-LeftHandSideExpression\n  parseExprSubscripts(refExpressionErrors: ?ExpressionErrors): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    const potentialArrowAt = this.state.potentialArrowAt;\n    const expr = this.parseExprAtom(refExpressionErrors);\n\n    if (this.shouldExitDescending(expr, potentialArrowAt)) {\n      return expr;\n    }\n\n    return this.parseSubscripts(expr, startPos, startLoc);\n  }\n\n  parseSubscripts(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls?: ?boolean,\n  ): N.Expression {\n    const state = {\n      optionalChainMember: false,\n      maybeAsyncArrow: this.atPossibleAsyncArrow(base),\n      stop: false,\n    };\n    do {\n      base = this.parseSubscript(base, startPos, startLoc, noCalls, state);\n\n      // After parsing a subscript, this isn't \"async\" for sure.\n      state.maybeAsyncArrow = false;\n    } while (!state.stop);\n    return base;\n  }\n\n  /**\n   * @param state Set 'state.stop = true' to indicate that we should stop parsing subscripts.\n   *   state.optionalChainMember to indicate that the member is currently in OptionalChain\n   */\n  parseSubscript(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const { type } = this.state;\n    if (!noCalls && type === tt.doubleColon) {\n      return this.parseBind(base, startPos, startLoc, noCalls, state);\n    } else if (tokenIsTemplate(type)) {\n      return this.parseTaggedTemplateExpression(\n        base,\n        startPos,\n        startLoc,\n        state,\n      );\n    }\n\n    let optional = false;\n\n    if (type === tt.questionDot) {\n      if (noCalls && this.lookaheadCharCode() === charCodes.leftParenthesis) {\n        // stop at `?.` when parsing `new a?.()`\n        state.stop = true;\n        return base;\n      }\n      state.optionalChainMember = optional = true;\n      this.next();\n    }\n\n    if (!noCalls && this.match(tt.parenL)) {\n      return this.parseCoverCallAndAsyncArrowHead(\n        base,\n        startPos,\n        startLoc,\n        state,\n        optional,\n      );\n    } else {\n      const computed = this.eat(tt.bracketL);\n      if (computed || optional || this.eat(tt.dot)) {\n        return this.parseMember(\n          base,\n          startPos,\n          startLoc,\n          state,\n          computed,\n          optional,\n        );\n      } else {\n        state.stop = true;\n        return base;\n      }\n    }\n  }\n\n  // base[?Yield, ?Await] [ Expression[+In, ?Yield, ?Await] ]\n  // base[?Yield, ?Await] . IdentifierName\n  // base[?Yield, ?Await] . PrivateIdentifier\n  //   where `base` is one of CallExpression, MemberExpression and OptionalChain\n  parseMember(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    computed: boolean,\n    optional: boolean,\n  ): N.OptionalMemberExpression | N.MemberExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    node.computed = computed;\n    if (computed) {\n      node.property = this.parseExpression();\n      this.expect(tt.bracketR);\n    } else if (this.match(tt.privateName)) {\n      if (base.type === \"Super\") {\n        this.raise(startPos, Errors.SuperPrivateField);\n      }\n      this.classScope.usePrivateName(this.state.value, this.state.start);\n      node.property = this.parsePrivateName();\n    } else {\n      node.property = this.parseIdentifier(true);\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n      return this.finishNode(node, \"OptionalMemberExpression\");\n    } else {\n      return this.finishNode(node, \"MemberExpression\");\n    }\n  }\n\n  // https://github.com/tc39/proposal-bind-operator#syntax\n  parseBind(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    noCalls: ?boolean,\n    state: N.ParseSubscriptState,\n  ): N.Expression {\n    const node = this.startNodeAt(startPos, startLoc);\n    node.object = base;\n    this.next(); // eat '::'\n    node.callee = this.parseNoCallExpr();\n    state.stop = true;\n    return this.parseSubscripts(\n      this.finishNode(node, \"BindExpression\"),\n      startPos,\n      startLoc,\n      noCalls,\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead\n  // CoverCallExpressionAndAsyncArrowHead\n  // CallExpression[?Yield, ?Await] Arguments[?Yield, ?Await]\n  // OptionalChain[?Yield, ?Await] Arguments[?Yield, ?Await]\n  parseCoverCallAndAsyncArrowHead(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n    optional: boolean,\n  ): N.Expression {\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    let refExpressionErrors = null;\n\n    this.state.maybeInArrowParameters = true;\n    this.next(); // eat `(`\n\n    let node = this.startNodeAt(startPos, startLoc);\n    node.callee = base;\n\n    if (state.maybeAsyncArrow) {\n      this.expressionScope.enter(newAsyncArrowScope());\n      refExpressionErrors = new ExpressionErrors();\n    }\n\n    if (state.optionalChainMember) {\n      node.optional = optional;\n    }\n\n    if (optional) {\n      node.arguments = this.parseCallExpressionArguments(tt.parenR);\n    } else {\n      node.arguments = this.parseCallExpressionArguments(\n        tt.parenR,\n        base.type === \"Import\",\n        base.type !== \"Super\",\n        node,\n        refExpressionErrors,\n      );\n    }\n    this.finishCallExpression(node, state.optionalChainMember);\n\n    if (state.maybeAsyncArrow && this.shouldParseAsyncArrow() && !optional) {\n      state.stop = true;\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      node = this.parseAsyncArrowFromCallExpression(\n        this.startNodeAt(startPos, startLoc),\n        node,\n      );\n    } else {\n      if (state.maybeAsyncArrow) {\n        this.checkExpressionErrors(refExpressionErrors, true);\n        this.expressionScope.exit();\n      }\n      this.toReferencedArguments(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return node;\n  }\n\n  toReferencedArguments(\n    node: N.CallExpression | N.OptionalCallExpression,\n    isParenthesizedExpr?: boolean,\n  ) {\n    this.toReferencedListDeep(node.arguments, isParenthesizedExpr);\n  }\n\n  // MemberExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  // CallExpression [?Yield, ?Await] TemplateLiteral[?Yield, ?Await, +Tagged]\n  parseTaggedTemplateExpression(\n    base: N.Expression,\n    startPos: number,\n    startLoc: Position,\n    state: N.ParseSubscriptState,\n  ): N.TaggedTemplateExpression {\n    const node: N.TaggedTemplateExpression = this.startNodeAt(\n      startPos,\n      startLoc,\n    );\n    node.tag = base;\n    node.quasi = this.parseTemplate(true);\n    if (state.optionalChainMember) {\n      this.raise(startPos, Errors.OptionalChainingNoTemplate);\n    }\n    return this.finishNode(node, \"TaggedTemplateExpression\");\n  }\n\n  atPossibleAsyncArrow(base: N.Expression): boolean {\n    return (\n      base.type === \"Identifier\" &&\n      base.name === \"async\" &&\n      this.state.lastTokEnd === base.end &&\n      !this.canInsertSemicolon() &&\n      // check there are no escape sequences, such as \\u{61}sync\n      base.end - base.start === 5 &&\n      base.start === this.state.potentialArrowAt\n    );\n  }\n\n  finishCallExpression<T: N.CallExpression | N.OptionalCallExpression>(\n    node: T,\n    optional: boolean,\n  ): N.Expression {\n    if (node.callee.type === \"Import\") {\n      if (node.arguments.length === 2) {\n        if (process.env.BABEL_8_BREAKING) {\n          this.expectPlugin(\"importAssertions\");\n        } else {\n          if (!this.hasPlugin(\"moduleAttributes\")) {\n            this.expectPlugin(\"importAssertions\");\n          }\n        }\n      }\n      if (node.arguments.length === 0 || node.arguments.length > 2) {\n        this.raise(\n          node.start,\n          Errors.ImportCallArity,\n          this.hasPlugin(\"importAssertions\") ||\n            this.hasPlugin(\"moduleAttributes\")\n            ? \"one or two arguments\"\n            : \"one argument\",\n        );\n      } else {\n        for (const arg of node.arguments) {\n          if (arg.type === \"SpreadElement\") {\n            this.raise(arg.start, Errors.ImportCallSpreadArgument);\n          }\n        }\n      }\n    }\n    return this.finishNode(\n      node,\n      optional ? \"OptionalCallExpression\" : \"CallExpression\",\n    );\n  }\n\n  parseCallExpressionArguments(\n    close: TokenType,\n    dynamicImport?: boolean,\n    allowPlaceholder?: boolean,\n    nodeForExtra?: ?N.Node,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (\n            dynamicImport &&\n            !this.hasPlugin(\"importAssertions\") &&\n            !this.hasPlugin(\"moduleAttributes\")\n          ) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.ImportCallArgumentTrailingComma,\n            );\n          }\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(\n        this.parseExprListItem(false, refExpressionErrors, allowPlaceholder),\n      );\n    }\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return elts;\n  }\n\n  shouldParseAsyncArrow(): boolean {\n    return this.match(tt.arrow) && !this.canInsertSemicolon();\n  }\n\n  parseAsyncArrowFromCallExpression(\n    node: N.ArrowFunctionExpression,\n    call: N.CallExpression,\n  ): N.ArrowFunctionExpression {\n    this.resetPreviousNodeTrailingComments(call);\n    this.expect(tt.arrow);\n    this.parseArrowExpression(\n      node,\n      call.arguments,\n      true,\n      call.extra?.trailingComma,\n    );\n    // mark inner comments of `async()` as inner comments of `async () =>`\n    if (call.innerComments) {\n      setInnerComments(node, call.innerComments);\n    }\n    // mark trailing comments of `async` to be inner comments\n    if (call.callee.trailingComments) {\n      setInnerComments(node, call.callee.trailingComments);\n    }\n    return node;\n  }\n\n  // Parse a no-call expression (like argument of `new` or `::` operators).\n  // https://tc39.es/ecma262/#prod-MemberExpression\n  parseNoCallExpr(): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n    return this.parseSubscripts(this.parseExprAtom(), startPos, startLoc, true);\n  }\n\n  // Parse an atomic expression — either a single token that is an\n  // expression, an expression started by a keyword like `function` or\n  // `new`, or an expression wrapped in punctuation like `()`, `[]`,\n  // or `{}`.\n\n  // https://tc39.es/ecma262/#prod-PrimaryExpression\n  // https://tc39.es/ecma262/#prod-AsyncArrowFunction\n  // PrimaryExpression\n  // Super\n  // Import\n  // AsyncArrowFunction\n\n  parseExprAtom(refExpressionErrors?: ?ExpressionErrors): N.Expression {\n    let node;\n\n    const { type } = this.state;\n    switch (type) {\n      case tt._super:\n        return this.parseSuper();\n\n      case tt._import:\n        node = this.startNode();\n        this.next();\n\n        if (this.match(tt.dot)) {\n          return this.parseImportMetaProperty(node);\n        }\n\n        if (!this.match(tt.parenL)) {\n          this.raise(this.state.lastTokStart, Errors.UnsupportedImport);\n        }\n        return this.finishNode(node, \"Import\");\n      case tt._this:\n        node = this.startNode();\n        this.next();\n        return this.finishNode(node, \"ThisExpression\");\n\n      case tt._do: {\n        return this.parseDo(this.startNode(), false);\n      }\n\n      case tt.slash:\n      case tt.slashAssign: {\n        this.readRegexp();\n        return this.parseRegExpLiteral(this.state.value);\n      }\n\n      case tt.num:\n        return this.parseNumericLiteral(this.state.value);\n\n      case tt.bigint:\n        return this.parseBigIntLiteral(this.state.value);\n\n      case tt.decimal:\n        return this.parseDecimalLiteral(this.state.value);\n\n      case tt.string:\n        return this.parseStringLiteral(this.state.value);\n\n      case tt._null:\n        return this.parseNullLiteral();\n\n      case tt._true:\n        return this.parseBooleanLiteral(true);\n      case tt._false:\n        return this.parseBooleanLiteral(false);\n\n      case tt.parenL: {\n        const canBeArrow = this.state.potentialArrowAt === this.state.start;\n        return this.parseParenAndDistinguishExpression(canBeArrow);\n      }\n\n      case tt.bracketBarL:\n      case tt.bracketHashL: {\n        return this.parseArrayLike(\n          this.state.type === tt.bracketBarL ? tt.bracketBarR : tt.bracketR,\n          /* canBePattern */ false,\n          /* isTuple */ true,\n        );\n      }\n      case tt.bracketL: {\n        return this.parseArrayLike(\n          tt.bracketR,\n          /* canBePattern */ true,\n          /* isTuple */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt.braceBarL:\n      case tt.braceHashL: {\n        return this.parseObjectLike(\n          this.state.type === tt.braceBarL ? tt.braceBarR : tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ true,\n        );\n      }\n      case tt.braceL: {\n        return this.parseObjectLike(\n          tt.braceR,\n          /* isPattern */ false,\n          /* isRecord */ false,\n          refExpressionErrors,\n        );\n      }\n      case tt._function:\n        return this.parseFunctionOrFunctionSent();\n\n      case tt.at:\n        this.parseDecorators();\n      // fall through\n      case tt._class:\n        node = this.startNode();\n        this.takeDecorators(node);\n        return this.parseClass(node, false);\n\n      case tt._new:\n        return this.parseNewOrNewTarget();\n\n      case tt.templateNonTail:\n      case tt.templateTail:\n        return this.parseTemplate(false);\n\n      // BindExpression[Yield]\n      //   :: MemberExpression[?Yield]\n      case tt.doubleColon: {\n        node = this.startNode();\n        this.next();\n        node.object = null;\n        const callee = (node.callee = this.parseNoCallExpr());\n        if (callee.type === \"MemberExpression\") {\n          return this.finishNode(node, \"BindExpression\");\n        } else {\n          throw this.raise(callee.start, Errors.UnsupportedBind);\n        }\n      }\n\n      case tt.privateName: {\n        // Standalone private names are only allowed in \"#x in obj\"\n        // expressions, and they are directly handled by callers of\n        // parseExprOp. If we reach this, the input is always invalid.\n        // We can throw a better error message and recover, rather than\n        // just throwing \"Unexpected token\" (which is the default\n        // behavior of this big switch statement).\n        this.raise(\n          this.state.start,\n          Errors.PrivateInExpectedIn,\n          this.state.value,\n        );\n        return this.parsePrivateName();\n      }\n\n      case tt.moduloAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.modulo, \"%\");\n      }\n\n      case tt.xorAssign: {\n        return this.parseTopicReferenceThenEqualsSign(tt.bitwiseXOR, \"^\");\n      }\n\n      case tt.bitwiseXOR:\n      case tt.modulo:\n      case tt.hash: {\n        const pipeProposal = this.getPluginOption(\n          \"pipelineOperator\",\n          \"proposal\",\n        );\n\n        if (pipeProposal) {\n          return this.parseTopicReference(pipeProposal);\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      case tt.lt: {\n        const lookaheadCh = this.input.codePointAt(this.nextTokenStart());\n        if (\n          isIdentifierStart(lookaheadCh) || // Element/Type Parameter <foo>\n          lookaheadCh === charCodes.greaterThan // Fragment <>\n        ) {\n          this.expectOnePlugin([\"jsx\", \"flow\", \"typescript\"]);\n          break;\n        } else {\n          throw this.unexpected();\n        }\n      }\n\n      default:\n        if (tokenIsIdentifier(type)) {\n          if (\n            this.isContextual(tt._module) &&\n            this.lookaheadCharCode() === charCodes.leftCurlyBrace &&\n            !this.hasFollowingLineBreak()\n          ) {\n            return this.parseModuleExpression();\n          }\n          const canBeArrow = this.state.potentialArrowAt === this.state.start;\n          const containsEsc = this.state.containsEsc;\n          const id = this.parseIdentifier();\n\n          if (\n            !containsEsc &&\n            id.name === \"async\" &&\n            !this.canInsertSemicolon()\n          ) {\n            const { type } = this.state;\n            if (type === tt._function) {\n              this.resetPreviousNodeTrailingComments(id);\n              this.next();\n              return this.parseFunction(\n                this.startNodeAtNode(id),\n                undefined,\n                true,\n              );\n            } else if (tokenIsIdentifier(type)) {\n              // If the next token begins with \"=\", commit to parsing an async\n              // arrow function. (Peeking ahead for \"=\" lets us avoid a more\n              // expensive full-token lookahead on this common path.)\n              if (this.lookaheadCharCode() === charCodes.equalsTo) {\n                // although `id` is not used in async arrow unary function,\n                // we don't need to reset `async`'s trailing comments because\n                // it will be attached to the upcoming async arrow binding identifier\n                return this.parseAsyncArrowUnaryFunction(\n                  this.startNodeAtNode(id),\n                );\n              } else {\n                // Otherwise, treat \"async\" as an identifier and let calling code\n                // deal with the current tt.name token.\n                return id;\n              }\n            } else if (type === tt._do) {\n              this.resetPreviousNodeTrailingComments(id);\n              return this.parseDo(this.startNodeAtNode(id), true);\n            }\n          }\n\n          if (\n            canBeArrow &&\n            this.match(tt.arrow) &&\n            !this.canInsertSemicolon()\n          ) {\n            this.next();\n            return this.parseArrowExpression(\n              this.startNodeAtNode(id),\n              [id],\n              false,\n            );\n          }\n\n          return id;\n        } else {\n          throw this.unexpected();\n        }\n    }\n  }\n\n  // This helper method should only be called\n  // when the parser has reached a potential Hack pipe topic token\n  // that is followed by an equals sign.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  // If we find ^= or %= in an expression position\n  // (i.e., the tt.moduloAssign or tt.xorAssign token types),\n  // and if the Hack-pipes proposal is active with ^ or % as its topicToken,\n  // then the ^ or % could be the topic token (e.g., in x |> ^==y or x |> ^===y),\n  // and so we reparse the current token as ^ or %.\n  // Otherwise, this throws an unexpected-token error.\n  parseTopicReferenceThenEqualsSign(\n    topicTokenType: TokenType,\n    topicTokenValue: string,\n  ): N.Expression {\n    const pipeProposal = this.getPluginOption(\"pipelineOperator\", \"proposal\");\n\n    if (pipeProposal) {\n      // Set the most-recent token to be a topic token\n      // given by the tokenType and tokenValue.\n      // Now the next readToken() call (in parseTopicReference)\n      // will consume that “topic token”.\n      this.state.type = topicTokenType;\n      this.state.value = topicTokenValue;\n      // Rewind the tokenizer to the end of the “topic token”,\n      // so that the following token starts at the equals sign after that topic token.\n      this.state.pos--;\n      this.state.end--;\n      this.state.endLoc.column--;\n      // Now actually consume the topic token.\n      return this.parseTopicReference(pipeProposal);\n    } else {\n      throw this.unexpected();\n    }\n  }\n\n  // This helper method should only be called\n  // when the proposal-pipeline-operator plugin is active,\n  // and when the parser has reached a potential Hack pipe topic token.\n  // Although a pipe-operator proposal is assumed to be active,\n  // its configuration might not match the current token’s type.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  parseTopicReference(pipeProposal: string): N.Expression {\n    const node = this.startNode();\n    const start = this.state.start;\n    const tokenType = this.state.type;\n\n    // Consume the current token.\n    this.next();\n\n    // If the pipe-operator plugin’s configuration matches the current token’s type,\n    // then this will return `node`, will have been finished as a topic reference.\n    // Otherwise, this will throw a `PipeTopicUnconfiguredToken` error.\n    return this.finishTopicReference(node, start, pipeProposal, tokenType);\n  }\n\n  // This helper method attempts to finish the given `node`\n  // into a topic-reference node for the given `pipeProposal`.\n  // See <https://github.com/js-choi/proposal-hack-pipes>.\n  //\n  // The method assumes that any topic token was consumed before it was called.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // and if the given `tokenType` matches the plugin’s configuration,\n  // then this method will return the finished `node`.\n  //\n  // If the `pipelineOperator` plugin is active,\n  // but if the given `tokenType` does not match the plugin’s configuration,\n  // then this method will throw a `PipeTopicUnconfiguredToken` error.\n  finishTopicReference(\n    node: N.Node,\n    start: number,\n    pipeProposal: string,\n    tokenType: TokenType,\n  ): N.Expression {\n    if (this.testTopicReferenceConfiguration(pipeProposal, start, tokenType)) {\n      // The token matches the plugin’s configuration.\n      // The token is therefore a topic reference.\n\n      // Determine the node type for the topic reference\n      // that is appropriate for the active pipe-operator proposal.\n      let nodeType;\n      if (pipeProposal === \"smart\") {\n        nodeType = \"PipelinePrimaryTopicReference\";\n      } else {\n        // The proposal must otherwise be \"hack\",\n        // as enforced by testTopicReferenceConfiguration.\n        nodeType = \"TopicReference\";\n      }\n\n      if (!this.topicReferenceIsAllowedInCurrentContext()) {\n        // The topic reference is not allowed in the current context:\n        // it is outside of a pipe body.\n        // Raise recoverable errors.\n        if (pipeProposal === \"smart\") {\n          this.raise(start, Errors.PrimaryTopicNotAllowed);\n        } else {\n          // In this case, `pipeProposal === \"hack\"` is true.\n          this.raise(start, Errors.PipeTopicUnbound);\n        }\n      }\n\n      // Register the topic reference so that its pipe body knows\n      // that its topic was used at least once.\n      this.registerTopicReference();\n\n      return this.finishNode(node, nodeType);\n    } else {\n      // The token does not match the plugin’s configuration.\n      throw this.raise(\n        start,\n        Errors.PipeTopicUnconfiguredToken,\n        tokenLabelName(tokenType),\n      );\n    }\n  }\n\n  // This helper method tests whether the given token type\n  // matches the pipelineOperator parser plugin’s configuration.\n  // If the active pipe proposal is Hack style,\n  // and if the given token is the same as the plugin configuration’s `topicToken`,\n  // then this is a valid topic reference.\n  // If the active pipe proposal is smart mix,\n  // then the topic token must always be `#`.\n  // If the active pipe proposal is neither (e.g., \"minimal\" or \"fsharp\"),\n  // then an error is thrown.\n  testTopicReferenceConfiguration(\n    pipeProposal: string,\n    start: number,\n    tokenType: TokenType,\n  ): boolean {\n    switch (pipeProposal) {\n      case \"hack\": {\n        return this.hasPlugin([\n          \"pipelineOperator\",\n          {\n            topicToken: tokenLabelName(tokenType),\n          },\n        ]);\n      }\n      case \"smart\":\n        return tokenType === tt.hash;\n      default:\n        throw this.raise(start, Errors.PipeTopicRequiresHackPipes);\n    }\n  }\n\n  // async [no LineTerminator here] AsyncArrowBindingIdentifier[?Yield] [no LineTerminator here] => AsyncConciseBody[?In]\n  parseAsyncArrowUnaryFunction(node: N.Node): N.ArrowFunctionExpression {\n    // We don't need to push a new ParameterDeclarationScope here since we are sure\n    // 1) it is an async arrow, 2) no biding pattern is allowed in params\n    this.prodParam.enter(functionFlags(true, this.prodParam.hasYield));\n    const params = [this.parseIdentifier()];\n    this.prodParam.exit();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.pos, Errors.LineTerminatorBeforeArrow);\n    }\n    this.expect(tt.arrow);\n    // let foo = async bar => {};\n    this.parseArrowExpression(node, params, true);\n    return node;\n  }\n\n  // https://github.com/tc39/proposal-do-expressions\n  // https://github.com/tc39/proposal-async-do-expressions\n  parseDo(node: N.Node, isAsync: boolean): N.DoExpression {\n    this.expectPlugin(\"doExpressions\");\n    if (isAsync) {\n      this.expectPlugin(\"asyncDoExpressions\");\n    }\n    node.async = isAsync;\n    this.next(); // eat `do`\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    if (isAsync) {\n      // AsyncDoExpression :\n      // async [no LineTerminator here] do Block[~Yield, +Await, ~Return]\n      this.prodParam.enter(PARAM_AWAIT);\n      node.body = this.parseBlock();\n      this.prodParam.exit();\n    } else {\n      node.body = this.parseBlock();\n    }\n\n    this.state.labels = oldLabels;\n    return this.finishNode(node, \"DoExpression\");\n  }\n\n  // Parse the `super` keyword\n  parseSuper(): N.Super {\n    const node = this.startNode();\n    this.next(); // eat `super`\n    if (\n      this.match(tt.parenL) &&\n      !this.scope.allowDirectSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.SuperNotAllowed);\n    } else if (\n      !this.scope.allowSuper &&\n      !this.options.allowSuperOutsideMethod\n    ) {\n      this.raise(node.start, Errors.UnexpectedSuper);\n    }\n\n    if (\n      !this.match(tt.parenL) &&\n      !this.match(tt.bracketL) &&\n      !this.match(tt.dot)\n    ) {\n      this.raise(node.start, Errors.UnsupportedSuper);\n    }\n\n    return this.finishNode(node, \"Super\");\n  }\n\n  parsePrivateName(): N.PrivateName {\n    const node = this.startNode();\n    const id = this.startNodeAt(\n      this.state.start + 1,\n      // The position is hardcoded because we merge `#` and name into a single\n      // tt.privateName token\n      new Position(\n        this.state.curLine,\n        this.state.start + 1 - this.state.lineStart,\n      ),\n    );\n    const name = this.state.value;\n    this.next(); // eat #name;\n    node.id = this.createIdentifier(id, name);\n    return this.finishNode(node, \"PrivateName\");\n  }\n\n  parseFunctionOrFunctionSent(): N.FunctionExpression | N.MetaProperty {\n    const node = this.startNode();\n\n    // We do not do parseIdentifier here because when parseFunctionOrFunctionSent\n    // is called we already know that the current token is a \"name\" with the value \"function\"\n    // This will improve perf a tiny little bit as we do not do validation but more importantly\n    // here is that parseIdentifier will remove an item from the expression stack\n    // if \"function\" or \"class\" is parsed as identifier (in objects e.g.), which should not happen here.\n    this.next(); // eat `function`\n\n    if (this.prodParam.hasYield && this.match(tt.dot)) {\n      const meta = this.createIdentifier(\n        this.startNodeAtNode(node),\n        \"function\",\n      );\n      this.next(); // eat `.`\n      // https://github.com/tc39/proposal-function.sent#syntax-1\n      if (this.match(tt._sent)) {\n        this.expectPlugin(\"functionSent\");\n      } else if (!this.hasPlugin(\"functionSent\")) {\n        // The code wasn't `function.sent` but just `function.`, so a simple error is less confusing.\n        this.unexpected();\n      }\n      return this.parseMetaProperty(node, meta, \"sent\");\n    }\n    return this.parseFunction(node);\n  }\n\n  parseMetaProperty(\n    node: N.MetaProperty,\n    meta: N.Identifier,\n    propertyName: string,\n  ): N.MetaProperty {\n    node.meta = meta;\n\n    const containsEsc = this.state.containsEsc;\n\n    node.property = this.parseIdentifier(true);\n\n    if (node.property.name !== propertyName || containsEsc) {\n      this.raise(\n        node.property.start,\n        Errors.UnsupportedMetaProperty,\n        meta.name,\n        propertyName,\n      );\n    }\n\n    return this.finishNode(node, \"MetaProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportMeta\n  parseImportMetaProperty(node: N.MetaProperty): N.MetaProperty {\n    const id = this.createIdentifier(this.startNodeAtNode(node), \"import\");\n    this.next(); // eat `.`\n\n    if (this.isContextual(tt._meta)) {\n      if (!this.inModule) {\n        this.raise(id.start, SourceTypeModuleErrors.ImportMetaOutsideModule);\n      }\n      this.sawUnambiguousESM = true;\n    }\n\n    return this.parseMetaProperty(node, id, \"meta\");\n  }\n\n  parseLiteralAtNode<T: N.Node>(\n    value: any,\n    type: $ElementType<T, \"type\">,\n    node: any,\n  ): T {\n    this.addExtra(node, \"rawValue\", value);\n    this.addExtra(node, \"raw\", this.input.slice(node.start, this.state.end));\n    node.value = value;\n    this.next();\n    return this.finishNode<T>(node, type);\n  }\n\n  parseLiteral<T: N.Node>(value: any, type: $ElementType<T, \"type\">): T {\n    const node = this.startNode();\n    return this.parseLiteralAtNode(value, type, node);\n  }\n\n  parseStringLiteral(value: any) {\n    return this.parseLiteral<N.StringLiteral>(value, \"StringLiteral\");\n  }\n\n  parseNumericLiteral(value: any) {\n    return this.parseLiteral<N.NumericLiteral>(value, \"NumericLiteral\");\n  }\n\n  parseBigIntLiteral(value: any) {\n    return this.parseLiteral<N.BigIntLiteral>(value, \"BigIntLiteral\");\n  }\n\n  parseDecimalLiteral(value: any) {\n    return this.parseLiteral<N.DecimalLiteral>(value, \"DecimalLiteral\");\n  }\n\n  parseRegExpLiteral(value: { value: any, pattern: string, flags: string }) {\n    const node = this.parseLiteral<N.RegExpLiteral>(\n      value.value,\n      \"RegExpLiteral\",\n    );\n    node.pattern = value.pattern;\n    node.flags = value.flags;\n    return node;\n  }\n\n  parseBooleanLiteral(value: boolean) {\n    const node = this.startNode();\n    node.value = value;\n    this.next();\n    return this.finishNode<N.BooleanLiteral>(node, \"BooleanLiteral\");\n  }\n\n  parseNullLiteral() {\n    const node = this.startNode();\n    this.next();\n    return this.finishNode<N.NullLiteral>(node, \"NullLiteral\");\n  }\n\n  // https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList\n  parseParenAndDistinguishExpression(canBeArrow: boolean): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    let val;\n    this.next(); // eat `(`\n    this.expressionScope.enter(newArrowHeadScope());\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.maybeInArrowParameters = true;\n    this.state.inFSharpPipelineDirectBody = false;\n\n    const innerStartPos = this.state.start;\n    const innerStartLoc = this.state.startLoc;\n    const exprList = [];\n    const refExpressionErrors = new ExpressionErrors();\n    let first = true;\n    let spreadStart;\n    let optionalCommaStart;\n\n    while (!this.match(tt.parenR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(\n          tt.comma,\n          refExpressionErrors.optionalParameters === -1\n            ? null\n            : refExpressionErrors.optionalParameters,\n        );\n        if (this.match(tt.parenR)) {\n          optionalCommaStart = this.state.start;\n          break;\n        }\n      }\n\n      if (this.match(tt.ellipsis)) {\n        const spreadNodeStartPos = this.state.start;\n        const spreadNodeStartLoc = this.state.startLoc;\n        spreadStart = this.state.start;\n        exprList.push(\n          this.parseParenItem(\n            this.parseRestBinding(),\n            spreadNodeStartPos,\n            spreadNodeStartLoc,\n          ),\n        );\n\n        this.checkCommaAfterRest(charCodes.rightParenthesis);\n\n        break;\n      } else {\n        exprList.push(\n          this.parseMaybeAssignAllowIn(\n            refExpressionErrors,\n            this.parseParenItem,\n          ),\n        );\n      }\n    }\n\n    const innerEndPos = this.state.lastTokEnd;\n    const innerEndLoc = this.state.lastTokEndLoc;\n    this.expect(tt.parenR);\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    let arrowNode = this.startNodeAt(startPos, startLoc);\n    if (\n      canBeArrow &&\n      this.shouldParseArrow(exprList) &&\n      (arrowNode = this.parseArrow(arrowNode))\n    ) {\n      this.expressionScope.validateAsPattern();\n      this.expressionScope.exit();\n      this.parseArrowExpression(arrowNode, exprList, false);\n      return arrowNode;\n    }\n    this.expressionScope.exit();\n\n    if (!exprList.length) {\n      this.unexpected(this.state.lastTokStart);\n    }\n    if (optionalCommaStart) this.unexpected(optionalCommaStart);\n    if (spreadStart) this.unexpected(spreadStart);\n    this.checkExpressionErrors(refExpressionErrors, true);\n\n    this.toReferencedListDeep(exprList, /* isParenthesizedExpr */ true);\n    if (exprList.length > 1) {\n      val = this.startNodeAt(innerStartPos, innerStartLoc);\n      val.expressions = exprList;\n      // finish node at current location so it can pick up comments after `)`\n      this.finishNode(val, \"SequenceExpression\");\n      this.resetEndLocation(val, innerEndPos, innerEndLoc);\n    } else {\n      val = exprList[0];\n    }\n\n    if (!this.options.createParenthesizedExpressions) {\n      this.addExtra(val, \"parenthesized\", true);\n      this.addExtra(val, \"parenStart\", startPos);\n\n      this.takeSurroundingComments(val, startPos, this.state.lastTokEnd);\n\n      return val;\n    }\n\n    const parenExpression = this.startNodeAt(startPos, startLoc);\n    parenExpression.expression = val;\n    this.finishNode(parenExpression, \"ParenthesizedExpression\");\n    return parenExpression;\n  }\n\n  // eslint-disable-next-line no-unused-vars -- `params` is used in typescript plugin\n  shouldParseArrow(params: Array<N.Node>): boolean {\n    return !this.canInsertSemicolon();\n  }\n\n  parseArrow(node: N.ArrowFunctionExpression): ?N.ArrowFunctionExpression {\n    if (this.eat(tt.arrow)) {\n      return node;\n    }\n  }\n\n  parseParenItem(\n    node: N.Expression,\n    startPos: number, // eslint-disable-line no-unused-vars\n    startLoc: Position, // eslint-disable-line no-unused-vars\n  ): N.Expression {\n    return node;\n  }\n\n  parseNewOrNewTarget(): N.NewExpression | N.MetaProperty {\n    const node = this.startNode();\n    this.next();\n    if (this.match(tt.dot)) {\n      // https://tc39.es/ecma262/#prod-NewTarget\n      const meta = this.createIdentifier(this.startNodeAtNode(node), \"new\");\n      this.next();\n      const metaProp = this.parseMetaProperty(node, meta, \"target\");\n\n      if (!this.scope.inNonArrowFunction && !this.scope.inClass) {\n        this.raise(metaProp.start, Errors.UnexpectedNewTarget);\n      }\n\n      return metaProp;\n    }\n\n    return this.parseNew(node);\n  }\n\n  // New's precedence is slightly tricky. It must allow its argument to\n  // be a `[]` or dot subscript expression, but not a call — at least,\n  // not without wrapping it in parentheses. Thus, it uses the noCalls\n  // argument to parseSubscripts to prevent it from consuming the\n  // argument list.\n  // https://tc39.es/ecma262/#prod-NewExpression\n  parseNew(node: N.Expression): N.NewExpression {\n    node.callee = this.parseNoCallExpr();\n    if (node.callee.type === \"Import\") {\n      this.raise(node.callee.start, Errors.ImportCallNotNewExpression);\n    } else if (this.isOptionalChain(node.callee)) {\n      this.raise(this.state.lastTokEnd, Errors.OptionalChainingNoNew);\n    } else if (this.eat(tt.questionDot)) {\n      this.raise(this.state.start, Errors.OptionalChainingNoNew);\n    }\n\n    this.parseNewArguments(node);\n    return this.finishNode(node, \"NewExpression\");\n  }\n\n  parseNewArguments(node: N.NewExpression): void {\n    if (this.eat(tt.parenL)) {\n      const args = this.parseExprList(tt.parenR);\n      this.toReferencedList(args);\n      // $FlowFixMe (parseExprList should be all non-null in this case)\n      node.arguments = args;\n    } else {\n      node.arguments = [];\n    }\n  }\n\n  // Parse template expression.\n\n  parseTemplateElement(isTagged: boolean): N.TemplateElement {\n    const { start, end, value } = this.state;\n    const elemStart = start + 1;\n    const elem = this.startNodeAt(\n      elemStart,\n      createPositionWithColumnOffset(this.state.startLoc, 1),\n    );\n    if (value === null) {\n      if (!isTagged) {\n        this.raise(start + 2, Errors.InvalidEscapeSequenceTemplate);\n      }\n    }\n\n    const isTail = this.match(tt.templateTail);\n    const endOffset = isTail ? -1 : -2;\n    const elemEnd = end + endOffset;\n    elem.value = {\n      raw: this.input.slice(elemStart, elemEnd).replace(/\\r\\n?/g, \"\\n\"),\n      cooked: value === null ? null : value.slice(1, endOffset),\n    };\n    elem.tail = isTail;\n    this.next();\n    this.finishNode(elem, \"TemplateElement\");\n    this.resetEndLocation(\n      elem,\n      elemEnd,\n      createPositionWithColumnOffset(this.state.lastTokEndLoc, endOffset),\n    );\n    return elem;\n  }\n\n  // https://tc39.es/ecma262/#prod-TemplateLiteral\n  parseTemplate(isTagged: boolean): N.TemplateLiteral {\n    const node = this.startNode();\n    node.expressions = [];\n    let curElt = this.parseTemplateElement(isTagged);\n    node.quasis = [curElt];\n    while (!curElt.tail) {\n      node.expressions.push(this.parseTemplateSubstitution());\n      this.readTemplateContinuation();\n      node.quasis.push((curElt = this.parseTemplateElement(isTagged)));\n    }\n    return this.finishNode(node, \"TemplateLiteral\");\n  }\n\n  // This is overwritten by the TypeScript plugin to parse template types\n  parseTemplateSubstitution(): N.Expression {\n    return this.parseExpression();\n  }\n\n  // Parse an object literal, binding pattern, or record.\n\n  parseObjectLike<T: N.ObjectPattern | N.ObjectExpression>(\n    close: TokenType,\n    isPattern: boolean,\n    isRecord?: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): T {\n    if (isRecord) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const propHash: any = Object.create(null);\n    let first = true;\n    const node = this.startNode();\n\n    node.properties = [];\n    this.next();\n\n    while (!this.match(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          this.addExtra(node, \"trailingComma\", this.state.lastTokStart);\n          break;\n        }\n      }\n\n      let prop;\n      if (isPattern) {\n        prop = this.parseBindingProperty();\n      } else {\n        prop = this.parsePropertyDefinition(refExpressionErrors);\n        this.checkProto(prop, isRecord, propHash, refExpressionErrors);\n      }\n\n      if (\n        isRecord &&\n        !this.isObjectProperty(prop) &&\n        prop.type !== \"SpreadElement\"\n      ) {\n        this.raise(prop.start, Errors.InvalidRecordProperty);\n      }\n\n      // $FlowIgnore\n      if (prop.shorthand) {\n        this.addExtra(prop, \"shorthand\", true);\n      }\n\n      node.properties.push(prop);\n    }\n\n    this.next();\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    let type = \"ObjectExpression\";\n    if (isPattern) {\n      type = \"ObjectPattern\";\n    } else if (isRecord) {\n      type = \"RecordExpression\";\n    }\n    return this.finishNode(node, type);\n  }\n\n  // Check grammar production:\n  //   IdentifierName *_opt PropertyName\n  // It is used in `parsePropertyDefinition` to detect AsyncMethod and Accessors\n  maybeAsyncOrAccessorProp(prop: N.ObjectProperty): boolean {\n    return (\n      !prop.computed &&\n      prop.key.type === \"Identifier\" &&\n      (this.isLiteralPropertyName() ||\n        this.match(tt.bracketL) ||\n        this.match(tt.star))\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-PropertyDefinition\n  parsePropertyDefinition(\n    refExpressionErrors?: ?ExpressionErrors,\n  ): N.ObjectMember | N.SpreadElement {\n    let decorators = [];\n    if (this.match(tt.at)) {\n      if (this.hasPlugin(\"decorators\")) {\n        this.raise(this.state.start, Errors.UnsupportedPropertyDecorator);\n      }\n\n      // we needn't check if decorators (stage 0) plugin is enabled since it's checked by\n      // the call to this.parseDecorator\n      while (this.match(tt.at)) {\n        decorators.push(this.parseDecorator());\n      }\n    }\n\n    const prop = this.startNode();\n    let isAsync = false;\n    let isAccessor = false;\n    let startPos;\n    let startLoc;\n\n    if (this.match(tt.ellipsis)) {\n      if (decorators.length) this.unexpected();\n      return this.parseSpread();\n    }\n\n    if (decorators.length) {\n      prop.decorators = decorators;\n      decorators = [];\n    }\n\n    prop.method = false;\n\n    if (refExpressionErrors) {\n      startPos = this.state.start;\n      startLoc = this.state.startLoc;\n    }\n\n    let isGenerator = this.eat(tt.star);\n    this.parsePropertyNamePrefixOperator(prop);\n    const containsEsc = this.state.containsEsc;\n    const key = this.parsePropertyName(prop);\n\n    if (!isGenerator && !containsEsc && this.maybeAsyncOrAccessorProp(prop)) {\n      const keyName = key.name;\n      // https://tc39.es/ecma262/#prod-AsyncMethod\n      // https://tc39.es/ecma262/#prod-AsyncGeneratorMethod\n      if (keyName === \"async\" && !this.hasPrecedingLineBreak()) {\n        isAsync = true;\n        this.resetPreviousNodeTrailingComments(key);\n        isGenerator = this.eat(tt.star);\n        this.parsePropertyName(prop);\n      }\n      // get PropertyName[?Yield, ?Await] () { FunctionBody[~Yield, ~Await] }\n      // set PropertyName[?Yield, ?Await] ( PropertySetParameterList ) { FunctionBody[~Yield, ~Await] }\n      if (keyName === \"get\" || keyName === \"set\") {\n        isAccessor = true;\n        this.resetPreviousNodeTrailingComments(key);\n        prop.kind = keyName;\n        if (this.match(tt.star)) {\n          isGenerator = true;\n          this.raise(this.state.pos, Errors.AccessorIsGenerator, keyName);\n          this.next();\n        }\n        this.parsePropertyName(prop);\n      }\n    }\n\n    this.parseObjPropValue(\n      prop,\n      startPos,\n      startLoc,\n      isGenerator,\n      isAsync,\n      false /* isPattern */,\n      isAccessor,\n      refExpressionErrors,\n    );\n\n    return prop;\n  }\n\n  getGetterSetterExpectedParamCount(\n    method: N.ObjectMethod | N.ClassMethod,\n  ): number {\n    return method.kind === \"get\" ? 0 : 1;\n  }\n\n  // This exists so we can override within the ESTree plugin\n  getObjectOrClassMethodParams(method: N.ObjectMethod | N.ClassMethod) {\n    return method.params;\n  }\n\n  // get methods aren't allowed to have any parameters\n  // set methods must have exactly 1 parameter which is not a rest parameter\n  checkGetterSetterParams(method: N.ObjectMethod | N.ClassMethod): void {\n    const paramCount = this.getGetterSetterExpectedParamCount(method);\n    const params = this.getObjectOrClassMethodParams(method);\n\n    const start = method.start;\n\n    if (params.length !== paramCount) {\n      if (method.kind === \"get\") {\n        this.raise(start, Errors.BadGetterArity);\n      } else {\n        this.raise(start, Errors.BadSetterArity);\n      }\n    }\n\n    if (\n      method.kind === \"set\" &&\n      params[params.length - 1]?.type === \"RestElement\"\n    ) {\n      this.raise(start, Errors.BadSetterRestParameter);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-MethodDefinition\n  parseObjectMethod(\n    prop: N.ObjectMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n  ): ?N.ObjectMethod {\n    if (isAccessor) {\n      // isAccessor implies isAsync: false, isPattern: false, isGenerator: false\n      this.parseMethod(\n        prop,\n        // This _should_ be false, but with error recovery, we allow it to be\n        // set for informational purposes\n        isGenerator,\n        /* isAsync */ false,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n      this.checkGetterSetterParams(prop);\n      return prop;\n    }\n\n    if (isAsync || isGenerator || this.match(tt.parenL)) {\n      if (isPattern) this.unexpected();\n      prop.kind = \"method\";\n      prop.method = true;\n      return this.parseMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        /* isConstructor */ false,\n        false,\n        \"ObjectMethod\",\n      );\n    }\n  }\n\n  // if `isPattern` is true, parse https://tc39.es/ecma262/#prod-BindingProperty\n  // else https://tc39.es/ecma262/#prod-PropertyDefinition\n  parseObjectProperty(\n    prop: N.ObjectProperty,\n    startPos: ?number,\n    startLoc: ?Position,\n    isPattern: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): ?N.ObjectProperty {\n    prop.shorthand = false;\n\n    if (this.eat(tt.colon)) {\n      prop.value = isPattern\n        ? this.parseMaybeDefault(this.state.start, this.state.startLoc)\n        : this.parseMaybeAssignAllowIn(refExpressionErrors);\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n\n    if (!prop.computed && prop.key.type === \"Identifier\") {\n      // PropertyDefinition:\n      //   IdentifierReference\n      //   CoverInitializedName\n      // Note: `{ eval } = {}` will be checked in `checkLVal` later.\n      this.checkReservedWord(prop.key.name, prop.key.start, true, false);\n\n      if (isPattern) {\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else if (this.match(tt.eq)) {\n        const shorthandAssign = this.state.start;\n        if (refExpressionErrors != null) {\n          if (refExpressionErrors.shorthandAssign === -1) {\n            refExpressionErrors.shorthandAssign = shorthandAssign;\n          }\n        } else {\n          this.raise(shorthandAssign, Errors.InvalidCoverInitializedName);\n        }\n        prop.value = this.parseMaybeDefault(\n          startPos,\n          startLoc,\n          cloneIdentifier(prop.key),\n        );\n      } else {\n        prop.value = cloneIdentifier(prop.key);\n      }\n      prop.shorthand = true;\n\n      return this.finishNode(prop, \"ObjectProperty\");\n    }\n  }\n\n  parseObjPropValue(\n    prop: any,\n    startPos: ?number,\n    startLoc: ?Position,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isPattern: boolean,\n    isAccessor: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n  ): void {\n    const node =\n      this.parseObjectMethod(\n        prop,\n        isGenerator,\n        isAsync,\n        isPattern,\n        isAccessor,\n      ) ||\n      this.parseObjectProperty(\n        prop,\n        startPos,\n        startLoc,\n        isPattern,\n        refExpressionErrors,\n      );\n\n    if (!node) this.unexpected();\n\n    // $FlowFixMe\n    return node;\n  }\n\n  parsePropertyName(\n    prop: N.ObjectOrClassMember | N.ClassMember | N.TsNamedTypeElementBase,\n  ): N.Expression | N.Identifier {\n    if (this.eat(tt.bracketL)) {\n      (prop: $FlowSubtype<N.ObjectOrClassMember>).computed = true;\n      prop.key = this.parseMaybeAssignAllowIn();\n      this.expect(tt.bracketR);\n    } else {\n      // We check if it's valid for it to be a private name when we push it.\n      const { type, value } = this.state;\n      let key;\n      // most un-computed property names are identifiers\n      if (tokenIsKeywordOrIdentifier(type)) {\n        key = this.parseIdentifier(true);\n      } else {\n        switch (type) {\n          case tt.num:\n            key = this.parseNumericLiteral(value);\n            break;\n          case tt.string:\n            key = this.parseStringLiteral(value);\n            break;\n          case tt.bigint:\n            key = this.parseBigIntLiteral(value);\n            break;\n          case tt.decimal:\n            key = this.parseDecimalLiteral(value);\n            break;\n          case tt.privateName: {\n            // the class private key has been handled in parseClassElementName\n            const privateKeyPos = this.state.start + 1;\n            this.raise(privateKeyPos, Errors.UnexpectedPrivateField);\n            key = this.parsePrivateName();\n            break;\n          }\n          default:\n            throw this.unexpected();\n        }\n      }\n      (prop: $FlowFixMe).key = key;\n      if (type !== tt.privateName) {\n        // ClassPrivateProperty is never computed, so we don't assign in that case.\n        prop.computed = false;\n      }\n    }\n\n    return prop.key;\n  }\n\n  // Initialize empty function node.\n\n  initFunction(node: N.BodilessFunctionOrMethodBase, isAsync: ?boolean): void {\n    node.id = null;\n    node.generator = false;\n    node.async = !!isAsync;\n  }\n\n  // Parse object or class method.\n\n  parseMethod<T: N.MethodLike>(\n    node: T,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowDirectSuper: boolean,\n    type: string,\n    inClassScope: boolean = false,\n  ): T {\n    this.initFunction(node, isAsync);\n    node.generator = !!isGenerator;\n    const allowModifiers = isConstructor; // For TypeScript parameter properties\n    this.scope.enter(\n      SCOPE_FUNCTION |\n        SCOPE_SUPER |\n        (inClassScope ? SCOPE_CLASS : 0) |\n        (allowDirectSuper ? SCOPE_DIRECT_SUPER : 0),\n    );\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n    this.parseFunctionParams((node: any), allowModifiers);\n    this.parseFunctionBodyAndFinish(node, type, true);\n    this.prodParam.exit();\n    this.scope.exit();\n\n    return node;\n  }\n\n  // parse an array literal or tuple literal\n  // https://tc39.es/ecma262/#prod-ArrayLiteral\n  // https://tc39.es/proposal-record-tuple/#prod-TupleLiteral\n  parseArrayLike(\n    close: TokenType,\n    canBePattern: boolean,\n    isTuple: boolean,\n    refExpressionErrors: ?ExpressionErrors,\n  ): N.ArrayExpression | N.TupleExpression {\n    if (isTuple) {\n      this.expectPlugin(\"recordAndTuple\");\n    }\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = false;\n    const node = this.startNode();\n    this.next();\n    node.elements = this.parseExprList(\n      close,\n      /* allowEmpty */ !isTuple,\n      refExpressionErrors,\n      node,\n    );\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n    return this.finishNode(\n      node,\n      isTuple ? \"TupleExpression\" : \"ArrayExpression\",\n    );\n  }\n\n  // Parse arrow function expression.\n  // If the parameters are provided, they will be converted to an\n  // assignable list.\n  parseArrowExpression(\n    node: N.ArrowFunctionExpression,\n    params: ?(N.Expression[]),\n    isAsync: boolean,\n    trailingCommaPos: ?number,\n  ): N.ArrowFunctionExpression {\n    this.scope.enter(SCOPE_FUNCTION | SCOPE_ARROW);\n    let flags = functionFlags(isAsync, false);\n    // ConciseBody and AsyncConciseBody inherit [In]\n    if (!this.match(tt.bracketL) && this.prodParam.hasIn) {\n      flags |= PARAM_IN;\n    }\n    this.prodParam.enter(flags);\n    this.initFunction(node, isAsync);\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n\n    if (params) {\n      this.state.maybeInArrowParameters = true;\n      this.setArrowFunctionParameters(node, params, trailingCommaPos);\n    }\n    this.state.maybeInArrowParameters = false;\n    this.parseFunctionBody(node, true);\n\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n\n    return this.finishNode(node, \"ArrowFunctionExpression\");\n  }\n\n  setArrowFunctionParameters(\n    node: N.ArrowFunctionExpression,\n    params: N.Expression[],\n    trailingCommaPos: ?number,\n  ): void {\n    node.params = this.toAssignableList(params, trailingCommaPos, false);\n  }\n\n  parseFunctionBodyAndFinish(\n    node: N.BodilessFunctionOrMethodBase,\n    type: string,\n    isMethod?: boolean = false,\n  ): void {\n    // $FlowIgnore (node is not bodiless if we get here)\n    this.parseFunctionBody(node, false, isMethod);\n    this.finishNode(node, type);\n  }\n\n  // Parse function body and check parameters.\n  parseFunctionBody(\n    node: N.Function,\n    allowExpression: ?boolean,\n    isMethod?: boolean = false,\n  ): void {\n    const isExpression = allowExpression && !this.match(tt.braceL);\n    this.expressionScope.enter(newExpressionScope());\n\n    if (isExpression) {\n      // https://tc39.es/ecma262/#prod-ExpressionBody\n      node.body = this.parseMaybeAssign();\n      this.checkParams(node, false, allowExpression, false);\n    } else {\n      const oldStrict = this.state.strict;\n      // Start a new scope with regard to labels\n      // flag (restore them to their old value afterwards).\n      const oldLabels = this.state.labels;\n      this.state.labels = [];\n\n      // FunctionBody[Yield, Await]:\n      //   StatementList[?Yield, ?Await, +Return] opt\n      this.prodParam.enter(this.prodParam.currentFlags() | PARAM_RETURN);\n      node.body = this.parseBlock(\n        true,\n        false,\n        // Strict mode function checks after we parse the statements in the function body.\n        (hasStrictModeDirective: boolean) => {\n          const nonSimple = !this.isSimpleParamList(node.params);\n\n          if (hasStrictModeDirective && nonSimple) {\n            // This logic is here to align the error location with the ESTree plugin.\n            const errorPos =\n              // $FlowIgnore\n              (node.kind === \"method\" || node.kind === \"constructor\") &&\n              // $FlowIgnore\n              !!node.key\n                ? node.key.end\n                : node.start;\n            this.raise(errorPos, Errors.IllegalLanguageModeDirective);\n          }\n\n          const strictModeChanged = !oldStrict && this.state.strict;\n\n          // Add the params to varDeclaredNames to ensure that an error is thrown\n          // if a let/const declaration in the function clashes with one of the params.\n          this.checkParams(\n            node,\n            !this.state.strict && !allowExpression && !isMethod && !nonSimple,\n            allowExpression,\n            strictModeChanged,\n          );\n\n          // Ensure the function name isn't a forbidden identifier in strict mode, e.g. 'eval'\n          if (this.state.strict && node.id) {\n            this.checkLVal(\n              node.id,\n              \"function name\",\n              BIND_OUTSIDE,\n              undefined,\n              undefined,\n              strictModeChanged,\n            );\n          }\n        },\n      );\n      this.prodParam.exit();\n      this.state.labels = oldLabels;\n    }\n    this.expressionScope.exit();\n  }\n\n  isSimpleParamList(\n    params: $ReadOnlyArray<N.Pattern | N.TSParameterProperty>,\n  ): boolean {\n    for (let i = 0, len = params.length; i < len; i++) {\n      if (params[i].type !== \"Identifier\") return false;\n    }\n    return true;\n  }\n\n  checkParams(\n    node: N.Function,\n    allowDuplicates: boolean,\n    // eslint-disable-next-line no-unused-vars\n    isArrowFunction: ?boolean,\n    strictModeChanged?: boolean = true,\n  ): void {\n    const checkClashes = new Set();\n    for (const param of node.params) {\n      this.checkLVal(\n        param,\n        \"function parameter list\",\n        BIND_VAR,\n        allowDuplicates ? null : checkClashes,\n        undefined,\n        strictModeChanged,\n      );\n    }\n  }\n\n  // Parses a comma-separated list of expressions, and returns them as\n  // an array. `close` is the token type that ends the list, and\n  // `allowEmpty` can be turned on to allow subsequent commas with\n  // nothing in between them to be parsed as `null` (which is needed\n  // for array literals).\n\n  parseExprList(\n    close: TokenType,\n    allowEmpty?: boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    nodeForExtra?: ?N.Node,\n  ): $ReadOnlyArray<?N.Expression> {\n    const elts = [];\n    let first = true;\n\n    while (!this.eat(close)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.match(close)) {\n          if (nodeForExtra) {\n            this.addExtra(\n              nodeForExtra,\n              \"trailingComma\",\n              this.state.lastTokStart,\n            );\n          }\n          this.next();\n          break;\n        }\n      }\n\n      elts.push(this.parseExprListItem(allowEmpty, refExpressionErrors));\n    }\n    return elts;\n  }\n\n  parseExprListItem(\n    allowEmpty: ?boolean,\n    refExpressionErrors?: ?ExpressionErrors,\n    allowPlaceholder: ?boolean,\n  ): ?N.Expression {\n    let elt;\n    if (this.match(tt.comma)) {\n      if (!allowEmpty) {\n        this.raise(this.state.pos, Errors.UnexpectedToken, \",\");\n      }\n      elt = null;\n    } else if (this.match(tt.ellipsis)) {\n      const spreadNodeStartPos = this.state.start;\n      const spreadNodeStartLoc = this.state.startLoc;\n\n      elt = this.parseParenItem(\n        this.parseSpread(refExpressionErrors),\n        spreadNodeStartPos,\n        spreadNodeStartLoc,\n      );\n    } else if (this.match(tt.question)) {\n      this.expectPlugin(\"partialApplication\");\n      if (!allowPlaceholder) {\n        this.raise(this.state.start, Errors.UnexpectedArgumentPlaceholder);\n      }\n      const node = this.startNode();\n      this.next();\n      elt = this.finishNode(node, \"ArgumentPlaceholder\");\n    } else {\n      elt = this.parseMaybeAssignAllowIn(\n        refExpressionErrors,\n        this.parseParenItem,\n      );\n    }\n    return elt;\n  }\n\n  // Parse the next token as an identifier. If `liberal` is true (used\n  // when parsing properties), it will also convert keywords into\n  // identifiers.\n  // This shouldn't be used to parse the keywords of meta properties, since they\n  // are not identifiers and cannot contain escape sequences.\n\n  parseIdentifier(liberal?: boolean): N.Identifier {\n    const node = this.startNode();\n    const name = this.parseIdentifierName(node.start, liberal);\n\n    return this.createIdentifier(node, name);\n  }\n\n  createIdentifier(node: N.Identifier, name: string): N.Identifier {\n    node.name = name;\n    node.loc.identifierName = name;\n\n    return this.finishNode(node, \"Identifier\");\n  }\n\n  parseIdentifierName(pos: number, liberal?: boolean): string {\n    let name: string;\n\n    const { start, type } = this.state;\n\n    if (tokenIsKeywordOrIdentifier(type)) {\n      name = this.state.value;\n    } else {\n      throw this.unexpected();\n    }\n\n    const tokenIsKeyword = tokenKeywordOrIdentifierIsKeyword(type);\n\n    if (liberal) {\n      // If the current token is not used as a keyword, set its type to \"tt.name\".\n      // This will prevent this.next() from throwing about unexpected escapes.\n      if (tokenIsKeyword) {\n        this.replaceToken(tt.name);\n      }\n    } else {\n      this.checkReservedWord(name, start, tokenIsKeyword, false);\n    }\n\n    this.next();\n\n    return name;\n  }\n\n  checkReservedWord(\n    word: string,\n    startLoc: number,\n    checkKeywords: boolean,\n    isBinding: boolean,\n  ): void {\n    // Every JavaScript reserved word is 10 characters or less.\n    if (word.length > 10) {\n      return;\n    }\n    // Most identifiers are not reservedWord-like, they don't need special\n    // treatments afterward, which very likely ends up throwing errors\n    if (!canBeReservedWord(word)) {\n      return;\n    }\n\n    if (word === \"yield\") {\n      if (this.prodParam.hasYield) {\n        this.raise(startLoc, Errors.YieldBindingIdentifier);\n        return;\n      }\n    } else if (word === \"await\") {\n      if (this.prodParam.hasAwait) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifier);\n        return;\n      } else if (this.scope.inStaticBlock) {\n        this.raise(startLoc, Errors.AwaitBindingIdentifierInStaticBlock);\n        return;\n      } else {\n        this.expressionScope.recordAsyncArrowParametersError(\n          startLoc,\n          Errors.AwaitBindingIdentifier,\n        );\n      }\n    } else if (word === \"arguments\") {\n      if (this.scope.inClassAndNotInNonArrowFunction) {\n        this.raise(startLoc, Errors.ArgumentsInClass);\n        return;\n      }\n    }\n\n    if (checkKeywords && isKeyword(word)) {\n      this.raise(startLoc, Errors.UnexpectedKeyword, word);\n      return;\n    }\n\n    const reservedTest = !this.state.strict\n      ? isReservedWord\n      : isBinding\n      ? isStrictBindReservedWord\n      : isStrictReservedWord;\n\n    if (reservedTest(word, this.inModule)) {\n      this.raise(startLoc, Errors.UnexpectedReservedWord, word);\n    }\n  }\n\n  isAwaitAllowed(): boolean {\n    if (this.prodParam.hasAwait) return true;\n    if (this.options.allowAwaitOutsideFunction && !this.scope.inFunction) {\n      return true;\n    }\n    return false;\n  }\n\n  // Parses await expression inside async function.\n\n  parseAwait(startPos: number, startLoc: Position): N.AwaitExpression {\n    const node = this.startNodeAt(startPos, startLoc);\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.AwaitExpressionFormalParameter,\n    );\n\n    if (this.eat(tt.star)) {\n      this.raise(node.start, Errors.ObsoleteAwaitStar);\n    }\n\n    if (!this.scope.inFunction && !this.options.allowAwaitOutsideFunction) {\n      if (this.isAmbiguousAwait()) {\n        this.ambiguousScriptDifferentAst = true;\n      } else {\n        this.sawUnambiguousESM = true;\n      }\n    }\n\n    if (!this.state.soloAwait) {\n      node.argument = this.parseMaybeUnary(null, true);\n    }\n\n    return this.finishNode(node, \"AwaitExpression\");\n  }\n\n  isAmbiguousAwait(): boolean {\n    if (this.hasPrecedingLineBreak()) return true;\n    const { type } = this.state;\n    return (\n      // All the following expressions are ambiguous:\n      //   await + 0, await - 0, await ( 0 ), await [ 0 ], await / 0 /u, await ``\n      type === tt.plusMin ||\n      type === tt.parenL ||\n      type === tt.bracketL ||\n      tokenIsTemplate(type) ||\n      // Sometimes the tokenizer generates tt.slash for regexps, and this is\n      // handler by parseExprAtom\n      type === tt.regexp ||\n      type === tt.slash ||\n      // This code could be parsed both as a modulo operator or as an intrinsic:\n      //   await %x(0)\n      (this.hasPlugin(\"v8intrinsic\") && type === tt.modulo)\n    );\n  }\n\n  // Parses yield expression inside generator.\n\n  parseYield(): N.YieldExpression {\n    const node = this.startNode();\n\n    this.expressionScope.recordParameterInitializerError(\n      node.start,\n      Errors.YieldInParameter,\n    );\n\n    this.next();\n    let delegating = false;\n    let argument = null;\n    if (!this.hasPrecedingLineBreak()) {\n      delegating = this.eat(tt.star);\n      switch (this.state.type) {\n        case tt.semi:\n        case tt.eof:\n        case tt.braceR:\n        case tt.parenR:\n        case tt.bracketR:\n        case tt.braceBarR:\n        case tt.colon:\n        case tt.comma:\n          // The above is the complete set of tokens that can\n          // follow an AssignmentExpression, and none of them\n          // can start an AssignmentExpression\n          if (!delegating) break;\n        /* fallthrough */\n        default:\n          argument = this.parseMaybeAssign();\n      }\n    }\n    node.delegate = delegating;\n    node.argument = argument;\n    return this.finishNode(node, \"YieldExpression\");\n  }\n\n  // Validates a pipeline (for any of the pipeline Babylon plugins) at the point\n  // of the infix operator `|>`.\n\n  checkPipelineAtInfixOperator(left: N.Expression, leftStartPos: number) {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      if (left.type === \"SequenceExpression\") {\n        // Ensure that the pipeline head is not a comma-delimited\n        // sequence expression.\n        this.raise(leftStartPos, Errors.PipelineHeadSequenceExpression);\n      }\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a Hack-style pipe body is parsed.\n  // The `startPos` is the starting position of the pipe body.\n\n  checkHackPipeBodyEarlyErrors(startPos: number): void {\n    if (!this.topicReferenceWasUsedInCurrentContext()) {\n      // A Hack pipe body must use the topic reference at least once.\n      this.raise(startPos, Errors.PipeTopicUnused);\n    }\n  }\n\n  parseSmartPipelineBodyInStyle(\n    childExpr: N.Expression,\n    startPos: number,\n    startLoc: Position,\n  ): N.PipelineBody {\n    const bodyNode = this.startNodeAt(startPos, startLoc);\n    if (this.isSimpleReference(childExpr)) {\n      bodyNode.callee = childExpr;\n      return this.finishNode(bodyNode, \"PipelineBareFunction\");\n    } else {\n      this.checkSmartPipeTopicBodyEarlyErrors(startPos);\n      bodyNode.expression = childExpr;\n      return this.finishNode(bodyNode, \"PipelineTopicExpression\");\n    }\n  }\n\n  isSimpleReference(expression: N.Expression): boolean {\n    switch (expression.type) {\n      case \"MemberExpression\":\n        return (\n          !expression.computed && this.isSimpleReference(expression.object)\n        );\n      case \"Identifier\":\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  // This helper method is to be called immediately\n  // after a topic-style smart-mix pipe body is parsed.\n  // The `startPos` is the starting position of the pipe body.\n\n  checkSmartPipeTopicBodyEarlyErrors(startPos: number): void {\n    // If the following token is invalidly `=>`, then throw a human-friendly error\n    // instead of something like 'Unexpected token, expected \";\"'.\n    // For example, `x => x |> y => #` (assuming `#` is the topic reference)\n    // groups into `x => (x |> y) => #`,\n    // and `(x |> y) => #` is an invalid arrow function.\n    // This is because smart-mix `|>` has tighter precedence than `=>`.\n    if (this.match(tt.arrow)) {\n      throw this.raise(this.state.start, Errors.PipelineBodyNoArrow);\n    }\n\n    // A topic-style smart-mix pipe body must use the topic reference at least once.\n    else if (!this.topicReferenceWasUsedInCurrentContext()) {\n      this.raise(startPos, Errors.PipelineTopicUnused);\n    }\n  }\n\n  // Enable topic references from outer contexts within Hack-style pipe bodies.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references.\n  // The function then calls a callback, then resets the parser\n  // to the old topic-context state that it had before the function was called.\n\n  withTopicBindingContext<T>(callback: () => T): T {\n    const outerContextTopicState = this.state.topicContext;\n    this.state.topicContext = {\n      // Enable the use of the primary topic reference.\n      maxNumOfResolvableTopics: 1,\n      // Hide the use of any topic references from outer contexts.\n      maxTopicIndex: null,\n    };\n\n    try {\n      return callback();\n    } finally {\n      this.state.topicContext = outerContextTopicState;\n    }\n  }\n\n  // This helper method is used only with the deprecated smart-mix pipe proposal.\n  // Disables topic references from outer contexts within syntax constructs\n  // such as the bodies of iteration statements.\n  // The function modifies the parser's topic-context state to enable or disable\n  // the use of topic references with the smartPipelines plugin. They then run a\n  // callback, then they reset the parser to the old topic-context state that it\n  // had before the function was called.\n\n  withSmartMixTopicForbiddingContext<T>(callback: () => T): T {\n    if (this.hasPlugin([\"pipelineOperator\", { proposal: \"smart\" }])) {\n      // Reset the parser’s topic context only if the smart-mix pipe proposal is active.\n      const outerContextTopicState = this.state.topicContext;\n      this.state.topicContext = {\n        // Disable the use of the primary topic reference.\n        maxNumOfResolvableTopics: 0,\n        // Hide the use of any topic references from outer contexts.\n        maxTopicIndex: null,\n      };\n\n      try {\n        return callback();\n      } finally {\n        this.state.topicContext = outerContextTopicState;\n      }\n    } else {\n      // If the pipe proposal is \"minimal\", \"fsharp\", or \"hack\",\n      // or if no pipe proposal is active,\n      // then the callback result is returned\n      // without touching any extra parser state.\n      return callback();\n    }\n  }\n\n  withSoloAwaitPermittingContext<T>(callback: () => T): T {\n    const outerContextSoloAwaitState = this.state.soloAwait;\n    this.state.soloAwait = true;\n\n    try {\n      return callback();\n    } finally {\n      this.state.soloAwait = outerContextSoloAwaitState;\n    }\n  }\n\n  allowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToSet = PARAM_IN & ~flags;\n    if (prodParamToSet) {\n      this.prodParam.enter(flags | PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  disallowInAnd<T>(callback: () => T): T {\n    const flags = this.prodParam.currentFlags();\n    const prodParamToClear = PARAM_IN & flags;\n    if (prodParamToClear) {\n      this.prodParam.enter(flags & ~PARAM_IN);\n      try {\n        return callback();\n      } finally {\n        this.prodParam.exit();\n      }\n    }\n    return callback();\n  }\n\n  // Register the use of a topic reference within the current\n  // topic-binding context.\n  registerTopicReference(): void {\n    this.state.topicContext.maxTopicIndex = 0;\n  }\n\n  topicReferenceIsAllowedInCurrentContext(): boolean {\n    return this.state.topicContext.maxNumOfResolvableTopics >= 1;\n  }\n\n  topicReferenceWasUsedInCurrentContext(): boolean {\n    return (\n      this.state.topicContext.maxTopicIndex != null &&\n      this.state.topicContext.maxTopicIndex >= 0\n    );\n  }\n\n  parseFSharpPipelineBody(prec: number): N.Expression {\n    const startPos = this.state.start;\n    const startLoc = this.state.startLoc;\n\n    this.state.potentialArrowAt = this.state.start;\n    const oldInFSharpPipelineDirectBody = this.state.inFSharpPipelineDirectBody;\n    this.state.inFSharpPipelineDirectBody = true;\n\n    const ret = this.parseExprOp(\n      this.parseMaybeUnaryOrPrivate(),\n      startPos,\n      startLoc,\n      prec,\n    );\n\n    this.state.inFSharpPipelineDirectBody = oldInFSharpPipelineDirectBody;\n\n    return ret;\n  }\n\n  // https://github.com/tc39/proposal-js-module-blocks\n  parseModuleExpression(): N.ModuleExpression {\n    this.expectPlugin(\"moduleBlocks\");\n    const node = this.startNode<N.ModuleExpression>();\n    this.next(); // eat \"module\"\n    this.eat(tt.braceL);\n\n    const revertScopes = this.initializeScopes(/** inModule */ true);\n    this.enterInitialScopes();\n\n    const program = this.startNode<N.Program>();\n    try {\n      node.body = this.parseProgram(program, tt.braceR, \"module\");\n    } finally {\n      revertScopes();\n    }\n    this.eat(tt.braceR);\n    return this.finishNode<N.ModuleExpression>(node, \"ModuleExpression\");\n  }\n\n  // Used in Flow plugin\n  parsePropertyNamePrefixOperator(\n    // eslint-disable-next-line no-unused-vars\n    prop: N.ObjectOrClassMember | N.ClassMember,\n  ): void {}\n}\n","// @flow\n\nimport * as N from \"../types\";\nimport {\n  tokenIsIdentifier,\n  tokenIsLoop,\n  tokenIsTemplate,\n  tt,\n  type TokenType,\n  getExportedToken,\n} from \"../tokenizer/types\";\nimport ExpressionParser from \"./expression\";\nimport { Errors, SourceTypeModuleErrors } from \"./error\";\nimport { isIdentifierChar, isIdentifierStart } from \"../util/identifier\";\nimport { lineBreak } from \"../util/whitespace\";\nimport * as charCodes from \"charcodes\";\nimport {\n  BIND_CLASS,\n  BIND_LEXICAL,\n  BIND_VAR,\n  BIND_FUNCTION,\n  SCOPE_CLASS,\n  SCOPE_FUNCTION,\n  SCOPE_OTHER,\n  SCOPE_SIMPLE_CATCH,\n  SCOPE_STATIC_BLOCK,\n  SCOPE_SUPER,\n  CLASS_ELEMENT_OTHER,\n  CLASS_ELEMENT_INSTANCE_GETTER,\n  CLASS_ELEMENT_INSTANCE_SETTER,\n  CLASS_ELEMENT_STATIC_GETTER,\n  CLASS_ELEMENT_STATIC_SETTER,\n  type BindingTypes,\n} from \"../util/scopeflags\";\nimport { ExpressionErrors } from \"./util\";\nimport { PARAM, functionFlags } from \"../util/production-parameter\";\nimport {\n  newExpressionScope,\n  newParameterDeclarationScope,\n} from \"../util/expression-scope\";\nimport type { SourceType } from \"../options\";\nimport { Token } from \"../tokenizer\";\nimport { createPositionWithColumnOffset } from \"../util/location\";\nimport { cloneStringLiteral, cloneIdentifier } from \"./node\";\n\nconst loopLabel = { kind: \"loop\" },\n  switchLabel = { kind: \"switch\" };\n\nconst FUNC_NO_FLAGS = 0b000,\n  FUNC_STATEMENT = 0b001,\n  FUNC_HANGING_STATEMENT = 0b010,\n  FUNC_NULLABLE_ID = 0b100;\n\nconst loneSurrogate = /[\\uD800-\\uDFFF]/u;\n\nconst keywordRelationalOperator = /in(?:stanceof)?/y;\n\n/**\n * Convert tokens for backward Babel 7 compat.\n * tt.privateName => tt.hash + tt.name\n * tt.templateTail => tt.backquote/tt.braceR + tt.template + tt.backquote\n * tt.templateNonTail => tt.backquote/tt.braceR + tt.template + tt.dollarBraceL\n * For performance reasons this routine mutates `tokens`, it is okay\n * here since we execute `parseTopLevel` once for every file.\n * @param {*} tokens\n * @returns\n */\nfunction babel7CompatTokens(tokens, input) {\n  for (let i = 0; i < tokens.length; i++) {\n    const token = tokens[i];\n    const { type } = token;\n    if (typeof type === \"number\") {\n      if (!process.env.BABEL_8_BREAKING) {\n        if (type === tt.privateName) {\n          const { loc, start, value, end } = token;\n          const hashEndPos = start + 1;\n          const hashEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          tokens.splice(\n            i,\n            1,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.hash),\n              value: \"#\",\n              start: start,\n              end: hashEndPos,\n              startLoc: loc.start,\n              endLoc: hashEndLoc,\n            }),\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.name),\n              value: value,\n              start: hashEndPos,\n              end: end,\n              startLoc: hashEndLoc,\n              endLoc: loc.end,\n            }),\n          );\n          i++;\n          continue;\n        }\n\n        if (tokenIsTemplate(type)) {\n          const { loc, start, value, end } = token;\n          const backquoteEnd = start + 1;\n          const backquoteEndLoc = createPositionWithColumnOffset(loc.start, 1);\n          let startToken;\n          if (input.charCodeAt(start) === charCodes.graveAccent) {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          } else {\n            // $FlowIgnore: hacky way to create token\n            startToken = new Token({\n              type: getExportedToken(tt.braceR),\n              value: \"}\",\n              start: start,\n              end: backquoteEnd,\n              startLoc: loc.start,\n              endLoc: backquoteEndLoc,\n            });\n          }\n          let templateValue,\n            templateElementEnd,\n            templateElementEndLoc,\n            endToken;\n          if (type === tt.templateTail) {\n            // ends with '`'\n            templateElementEnd = end - 1;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -1);\n            templateValue = value === null ? null : value.slice(1, -1);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.backQuote),\n              value: \"`\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          } else {\n            // ends with `${`\n            templateElementEnd = end - 2;\n            templateElementEndLoc = createPositionWithColumnOffset(loc.end, -2);\n            templateValue = value === null ? null : value.slice(1, -2);\n            // $FlowIgnore: hacky way to create token\n            endToken = new Token({\n              type: getExportedToken(tt.dollarBraceL),\n              value: \"${\",\n              start: templateElementEnd,\n              end: end,\n              startLoc: templateElementEndLoc,\n              endLoc: loc.end,\n            });\n          }\n          tokens.splice(\n            i,\n            1,\n            startToken,\n            // $FlowIgnore: hacky way to create token\n            new Token({\n              type: getExportedToken(tt.template),\n              value: templateValue,\n              start: backquoteEnd,\n              end: templateElementEnd,\n              startLoc: backquoteEndLoc,\n              endLoc: templateElementEndLoc,\n            }),\n            endToken,\n          );\n          i += 2;\n          continue;\n        }\n      }\n      // $FlowIgnore: we manipulate `token` for performance reasons\n      token.type = getExportedToken(type);\n    }\n  }\n  return tokens;\n}\nexport default class StatementParser extends ExpressionParser {\n  // ### Statement parsing\n\n  // Parse a program. Initializes the parser, reads any number of\n  // statements, and wraps them in a Program node.  Optionally takes a\n  // `program` argument.  If present, the statements will be appended\n  // to its body instead of creating a new node.\n\n  parseTopLevel(file: N.File, program: N.Program): N.File {\n    file.program = this.parseProgram(program);\n    file.comments = this.state.comments;\n\n    if (this.options.tokens) {\n      file.tokens = babel7CompatTokens(this.tokens, this.input);\n    }\n\n    return this.finishNode(file, \"File\");\n  }\n\n  parseProgram(\n    program: N.Program,\n    end: TokenType = tt.eof,\n    sourceType: SourceType = this.options.sourceType,\n  ): N.Program {\n    program.sourceType = sourceType;\n    program.interpreter = this.parseInterpreterDirective();\n    this.parseBlockBody(program, true, true, end);\n    if (\n      this.inModule &&\n      !this.options.allowUndeclaredExports &&\n      this.scope.undefinedExports.size > 0\n    ) {\n      for (const [name] of Array.from(this.scope.undefinedExports)) {\n        const pos = this.scope.undefinedExports.get(name);\n        // $FlowIssue\n        this.raise(pos, Errors.ModuleExportUndefined, name);\n      }\n    }\n    return this.finishNode<N.Program>(program, \"Program\");\n  }\n\n  // TODO\n\n  /**\n   * cast a Statement to a Directive. This method mutates input statement.\n   *\n   * @param {N.Statement} stmt\n   * @returns {N.Directive}\n   * @memberof StatementParser\n   */\n  stmtToDirective(stmt: N.Statement): N.Directive {\n    const directive = (stmt: any);\n    directive.type = \"Directive\";\n    directive.value = directive.expression;\n    delete directive.expression;\n\n    const directiveLiteral = directive.value;\n    const expressionValue = directiveLiteral.value;\n    const raw = this.input.slice(directiveLiteral.start, directiveLiteral.end);\n    const val = (directiveLiteral.value = raw.slice(1, -1)); // remove quotes\n\n    this.addExtra(directiveLiteral, \"raw\", raw);\n    this.addExtra(directiveLiteral, \"rawValue\", val);\n    this.addExtra(directiveLiteral, \"expressionValue\", expressionValue);\n\n    directiveLiteral.type = \"DirectiveLiteral\";\n\n    return directive;\n  }\n\n  parseInterpreterDirective(): N.InterpreterDirective | null {\n    if (!this.match(tt.interpreterDirective)) {\n      return null;\n    }\n\n    const node = this.startNode();\n    node.value = this.state.value;\n    this.next();\n    return this.finishNode(node, \"InterpreterDirective\");\n  }\n\n  isLet(context: ?string): boolean {\n    if (!this.isContextual(tt._let)) {\n      return false;\n    }\n    return this.isLetKeyword(context);\n  }\n\n  /**\n   * Assuming we have seen a contextual `let`, check if it starts a variable declaration\n   so that `left` should be interpreted as a `let` keyword.\n   *\n   * @param {?string} context When `context` is non nullish, it will return early and _skip_ checking\n                              if the next token after `let` is `{` or a keyword relational operator\n   * @returns {boolean}\n   * @memberof StatementParser\n   */\n  isLetKeyword(context: ?string): boolean {\n    const next = this.nextTokenStart();\n    const nextCh = this.codePointAtPos(next);\n    // For ambiguous cases, determine if a LexicalDeclaration (or only a\n    // Statement) is allowed here. If context is not empty then only a Statement\n    // is allowed. However, `let [` is an explicit negative lookahead for\n    // ExpressionStatement, so special-case it first.\n    // Also, `let \\` is never valid as an expression so this must be a keyword.\n    if (\n      nextCh === charCodes.backslash ||\n      nextCh === charCodes.leftSquareBracket\n    ) {\n      return true;\n    }\n    if (context) return false;\n\n    if (nextCh === charCodes.leftCurlyBrace) return true;\n\n    if (isIdentifierStart(nextCh)) {\n      keywordRelationalOperator.lastIndex = next;\n      if (keywordRelationalOperator.test(this.input)) {\n        // We have seen `in` or `instanceof` so far, now check if the identfier\n        // ends here\n        const endCh = this.codePointAtPos(keywordRelationalOperator.lastIndex);\n        if (!isIdentifierChar(endCh) && endCh !== charCodes.backslash) {\n          return false;\n        }\n      }\n      return true;\n    }\n    return false;\n  }\n\n  // Parse a single statement.\n  //\n  // If expecting a statement and finding a slash operator, parse a\n  // regular expression literal. This is to handle cases like\n  // `if (foo) /blah/.exec(foo)`, where looking at the previous token\n  // does not help.\n  // https://tc39.es/ecma262/#prod-Statement\n  // ImportDeclaration and ExportDeclaration are also handled here so we can throw recoverable errors\n  // when they are not at the top level\n  parseStatement(context: ?string, topLevel?: boolean): N.Statement {\n    if (this.match(tt.at)) {\n      this.parseDecorators(true);\n    }\n    return this.parseStatementContent(context, topLevel);\n  }\n\n  parseStatementContent(context: ?string, topLevel: ?boolean): N.Statement {\n    let starttype = this.state.type;\n    const node = this.startNode();\n    let kind;\n\n    if (this.isLet(context)) {\n      starttype = tt._var;\n      kind = \"let\";\n    }\n\n    // Most types of statements are recognized by the keyword they\n    // start with. Many are trivial to parse, some require a bit of\n    // complexity.\n\n    switch (starttype) {\n      case tt._break:\n        return this.parseBreakContinueStatement(node, /* isBreak */ true);\n      case tt._continue:\n        return this.parseBreakContinueStatement(node, /* isBreak */ false);\n      case tt._debugger:\n        return this.parseDebuggerStatement(node);\n      case tt._do:\n        return this.parseDoStatement(node);\n      case tt._for:\n        return this.parseForStatement(node);\n      case tt._function:\n        if (this.lookaheadCharCode() === charCodes.dot) break;\n        if (context) {\n          if (this.state.strict) {\n            this.raise(this.state.start, Errors.StrictFunction);\n          } else if (context !== \"if\" && context !== \"label\") {\n            this.raise(this.state.start, Errors.SloppyFunction);\n          }\n        }\n        return this.parseFunctionStatement(node, false, !context);\n\n      case tt._class:\n        if (context) this.unexpected();\n        return this.parseClass(node, true);\n\n      case tt._if:\n        return this.parseIfStatement(node);\n      case tt._return:\n        return this.parseReturnStatement(node);\n      case tt._switch:\n        return this.parseSwitchStatement(node);\n      case tt._throw:\n        return this.parseThrowStatement(node);\n      case tt._try:\n        return this.parseTryStatement(node);\n\n      case tt._const:\n      case tt._var:\n        kind = kind || this.state.value;\n        if (context && kind !== \"var\") {\n          this.raise(this.state.start, Errors.UnexpectedLexicalDeclaration);\n        }\n        return this.parseVarStatement(node, kind);\n\n      case tt._while:\n        return this.parseWhileStatement(node);\n      case tt._with:\n        return this.parseWithStatement(node);\n      case tt.braceL:\n        return this.parseBlock();\n      case tt.semi:\n        return this.parseEmptyStatement(node);\n      case tt._import: {\n        const nextTokenCharCode = this.lookaheadCharCode();\n        if (\n          nextTokenCharCode === charCodes.leftParenthesis || // import()\n          nextTokenCharCode === charCodes.dot // import.meta\n        ) {\n          break;\n        }\n      }\n      // fall through\n      case tt._export: {\n        if (!this.options.allowImportExportEverywhere && !topLevel) {\n          this.raise(this.state.start, Errors.UnexpectedImportExport);\n        }\n\n        this.next(); // eat `import`/`export`\n\n        let result;\n        if (starttype === tt._import) {\n          result = this.parseImport(node);\n\n          if (\n            result.type === \"ImportDeclaration\" &&\n            (!result.importKind || result.importKind === \"value\")\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        } else {\n          result = this.parseExport(node);\n\n          if (\n            (result.type === \"ExportNamedDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            (result.type === \"ExportAllDeclaration\" &&\n              (!result.exportKind || result.exportKind === \"value\")) ||\n            result.type === \"ExportDefaultDeclaration\"\n          ) {\n            this.sawUnambiguousESM = true;\n          }\n        }\n\n        this.assertModuleNodeAllowed(node);\n\n        return result;\n      }\n\n      default: {\n        if (this.isAsyncFunction()) {\n          if (context) {\n            this.raise(\n              this.state.start,\n              Errors.AsyncFunctionInSingleStatementContext,\n            );\n          }\n          this.next();\n          return this.parseFunctionStatement(node, true, !context);\n        }\n      }\n    }\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n    const maybeName = this.state.value;\n    const expr = this.parseExpression();\n\n    if (\n      tokenIsIdentifier(starttype) &&\n      expr.type === \"Identifier\" &&\n      this.eat(tt.colon)\n    ) {\n      return this.parseLabeledStatement(node, maybeName, expr, context);\n    } else {\n      return this.parseExpressionStatement(node, expr);\n    }\n  }\n\n  assertModuleNodeAllowed(node: N.Node): void {\n    if (!this.options.allowImportExportEverywhere && !this.inModule) {\n      this.raise(node.start, SourceTypeModuleErrors.ImportOutsideModule);\n    }\n  }\n\n  takeDecorators(node: N.HasDecorators): void {\n    const decorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    if (decorators.length) {\n      node.decorators = decorators;\n      this.resetStartLocationFromNode(node, decorators[0]);\n      this.state.decoratorStack[this.state.decoratorStack.length - 1] = [];\n    }\n  }\n\n  canHaveLeadingDecorator(): boolean {\n    return this.match(tt._class);\n  }\n\n  parseDecorators(allowExport?: boolean): void {\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    while (this.match(tt.at)) {\n      const decorator = this.parseDecorator();\n      currentContextDecorators.push(decorator);\n    }\n\n    if (this.match(tt._export)) {\n      if (!allowExport) {\n        this.unexpected();\n      }\n\n      if (\n        this.hasPlugin(\"decorators\") &&\n        !this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorExportClass);\n      }\n    } else if (!this.canHaveLeadingDecorator()) {\n      throw this.raise(this.state.start, Errors.UnexpectedLeadingDecorator);\n    }\n  }\n\n  parseDecorator(): N.Decorator {\n    this.expectOnePlugin([\"decorators-legacy\", \"decorators\"]);\n\n    const node = this.startNode();\n    this.next();\n\n    if (this.hasPlugin(\"decorators\")) {\n      // Every time a decorator class expression is evaluated, a new empty array is pushed onto the stack\n      // So that the decorators of any nested class expressions will be dealt with separately\n      this.state.decoratorStack.push([]);\n\n      const startPos = this.state.start;\n      const startLoc = this.state.startLoc;\n      let expr: N.Expression;\n\n      if (this.eat(tt.parenL)) {\n        expr = this.parseExpression();\n        this.expect(tt.parenR);\n      } else {\n        expr = this.parseIdentifier(false);\n\n        while (this.eat(tt.dot)) {\n          const node = this.startNodeAt(startPos, startLoc);\n          node.object = expr;\n          node.property = this.parseIdentifier(true);\n          node.computed = false;\n          expr = this.finishNode(node, \"MemberExpression\");\n        }\n      }\n\n      node.expression = this.parseMaybeDecoratorArguments(expr);\n      this.state.decoratorStack.pop();\n    } else {\n      node.expression = this.parseExprSubscripts();\n    }\n    return this.finishNode(node, \"Decorator\");\n  }\n\n  parseMaybeDecoratorArguments(expr: N.Expression): N.Expression {\n    if (this.eat(tt.parenL)) {\n      const node = this.startNodeAtNode(expr);\n      node.callee = expr;\n      node.arguments = this.parseCallExpressionArguments(tt.parenR, false);\n      this.toReferencedList(node.arguments);\n      return this.finishNode(node, \"CallExpression\");\n    }\n\n    return expr;\n  }\n\n  parseBreakContinueStatement(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ): N.BreakStatement | N.ContinueStatement {\n    this.next();\n\n    if (this.isLineTerminator()) {\n      node.label = null;\n    } else {\n      node.label = this.parseIdentifier();\n      this.semicolon();\n    }\n\n    this.verifyBreakContinue(node, isBreak);\n\n    return this.finishNode(\n      node,\n      isBreak ? \"BreakStatement\" : \"ContinueStatement\",\n    );\n  }\n\n  verifyBreakContinue(\n    node: N.BreakStatement | N.ContinueStatement,\n    isBreak: boolean,\n  ) {\n    let i;\n    for (i = 0; i < this.state.labels.length; ++i) {\n      const lab = this.state.labels[i];\n      if (node.label == null || lab.name === node.label.name) {\n        if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break;\n        if (node.label && isBreak) break;\n      }\n    }\n    if (i === this.state.labels.length) {\n      this.raise(\n        node.start,\n        Errors.IllegalBreakContinue,\n        isBreak ? \"break\" : \"continue\",\n      );\n    }\n  }\n\n  parseDebuggerStatement(node: N.DebuggerStatement): N.DebuggerStatement {\n    this.next();\n    this.semicolon();\n    return this.finishNode(node, \"DebuggerStatement\");\n  }\n\n  parseHeaderExpression(): N.Expression {\n    this.expect(tt.parenL);\n    const val = this.parseExpression();\n    this.expect(tt.parenR);\n    return val;\n  }\n\n  parseDoStatement(node: N.DoWhileStatement): N.DoWhileStatement {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body's body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body's body.\n        this.parseStatement(\"do\"),\n      );\n\n    this.state.labels.pop();\n\n    this.expect(tt._while);\n    node.test = this.parseHeaderExpression();\n    this.eat(tt.semi);\n    return this.finishNode(node, \"DoWhileStatement\");\n  }\n\n  // Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n  // loop is non-trivial. Basically, we have to parse the init `var`\n  // statement or expression, disallowing the `in` operator (see\n  // the second parameter to `parseExpression`), and then check\n  // whether the next token is `in` or `of`. When there is no init\n  // part (semicolon immediately after the opening parenthesis), it\n  // is a regular `for` loop.\n\n  parseForStatement(node: N.Node): N.ForLike {\n    this.next();\n    this.state.labels.push(loopLabel);\n\n    let awaitAt = -1;\n    if (this.isAwaitAllowed() && this.eatContextual(tt._await)) {\n      awaitAt = this.state.lastTokStart;\n    }\n    this.scope.enter(SCOPE_OTHER);\n    this.expect(tt.parenL);\n\n    if (this.match(tt.semi)) {\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, null);\n    }\n\n    const startsWithLet = this.isContextual(tt._let);\n    const isLet = startsWithLet && this.isLetKeyword();\n    if (this.match(tt._var) || this.match(tt._const) || isLet) {\n      const init = this.startNode();\n      const kind = isLet ? \"let\" : this.state.value;\n      this.next();\n      this.parseVar(init, true, kind);\n      this.finishNode(init, \"VariableDeclaration\");\n\n      if (\n        (this.match(tt._in) || this.isContextual(tt._of)) &&\n        init.declarations.length === 1\n      ) {\n        return this.parseForIn(node, init, awaitAt);\n      }\n      if (awaitAt > -1) {\n        this.unexpected(awaitAt);\n      }\n      return this.parseFor(node, init);\n    }\n\n    // Check whether the first token is possibly a contextual keyword, so that\n    // we can forbid `for (async of` if this turns out to be a for-of loop.\n    const startsWithAsync = this.isContextual(tt._async);\n\n    const refExpressionErrors = new ExpressionErrors();\n    const init = this.parseExpression(true, refExpressionErrors);\n    const isForOf = this.isContextual(tt._of);\n    if (isForOf) {\n      // Check for leading tokens that are forbidden in for-of loops:\n      if (startsWithLet) {\n        this.raise(init.start, Errors.ForOfLet);\n      } else if (\n        // `for await (async of []);` is allowed.\n        awaitAt === -1 &&\n        startsWithAsync &&\n        init.type === \"Identifier\"\n      ) {\n        // This catches the case where the `async` in `for (async of` was\n        // parsed as an identifier. If it was parsed as the start of an async\n        // arrow function (e.g. `for (async of => {} of []);`), the LVal check\n        // further down will raise a more appropriate error.\n        this.raise(init.start, Errors.ForOfAsync);\n      }\n    }\n    if (isForOf || this.match(tt._in)) {\n      this.toAssignable(init, /* isLHS */ true);\n      const description = isForOf ? \"for-of statement\" : \"for-in statement\";\n      this.checkLVal(init, description);\n      return this.parseForIn(node, init, awaitAt);\n    } else {\n      this.checkExpressionErrors(refExpressionErrors, true);\n    }\n    if (awaitAt > -1) {\n      this.unexpected(awaitAt);\n    }\n    return this.parseFor(node, init);\n  }\n\n  parseFunctionStatement(\n    node: N.FunctionDeclaration,\n    isAsync?: boolean,\n    declarationPosition?: boolean,\n  ): N.FunctionDeclaration {\n    this.next();\n    return this.parseFunction(\n      node,\n      FUNC_STATEMENT | (declarationPosition ? 0 : FUNC_HANGING_STATEMENT),\n      isAsync,\n    );\n  }\n\n  parseIfStatement(node: N.IfStatement): N.IfStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    node.consequent = this.parseStatement(\"if\");\n    node.alternate = this.eat(tt._else) ? this.parseStatement(\"if\") : null;\n    return this.finishNode(node, \"IfStatement\");\n  }\n\n  parseReturnStatement(node: N.ReturnStatement): N.ReturnStatement {\n    if (!this.prodParam.hasReturn && !this.options.allowReturnOutsideFunction) {\n      this.raise(this.state.start, Errors.IllegalReturn);\n    }\n\n    this.next();\n\n    // In `return` (and `break`/`continue`), the keywords with\n    // optional arguments, we eagerly look for a semicolon or the\n    // possibility to insert one.\n\n    if (this.isLineTerminator()) {\n      node.argument = null;\n    } else {\n      node.argument = this.parseExpression();\n      this.semicolon();\n    }\n\n    return this.finishNode(node, \"ReturnStatement\");\n  }\n\n  parseSwitchStatement(node: N.SwitchStatement): N.SwitchStatement {\n    this.next();\n    node.discriminant = this.parseHeaderExpression();\n    const cases = (node.cases = []);\n    this.expect(tt.braceL);\n    this.state.labels.push(switchLabel);\n    this.scope.enter(SCOPE_OTHER);\n\n    // Statements under must be grouped (by label) in SwitchCase\n    // nodes. `cur` is used to keep the node that we are currently\n    // adding statements to.\n\n    let cur;\n    for (let sawDefault; !this.match(tt.braceR); ) {\n      if (this.match(tt._case) || this.match(tt._default)) {\n        const isCase = this.match(tt._case);\n        if (cur) this.finishNode(cur, \"SwitchCase\");\n        cases.push((cur = this.startNode()));\n        cur.consequent = [];\n        this.next();\n        if (isCase) {\n          cur.test = this.parseExpression();\n        } else {\n          if (sawDefault) {\n            this.raise(\n              this.state.lastTokStart,\n              Errors.MultipleDefaultsInSwitch,\n            );\n          }\n          sawDefault = true;\n          cur.test = null;\n        }\n        this.expect(tt.colon);\n      } else {\n        if (cur) {\n          cur.consequent.push(this.parseStatement(null));\n        } else {\n          this.unexpected();\n        }\n      }\n    }\n    this.scope.exit();\n    if (cur) this.finishNode(cur, \"SwitchCase\");\n    this.next(); // Closing brace\n    this.state.labels.pop();\n    return this.finishNode(node, \"SwitchStatement\");\n  }\n\n  parseThrowStatement(node: N.ThrowStatement): N.ThrowStatement {\n    this.next();\n    if (this.hasPrecedingLineBreak()) {\n      this.raise(this.state.lastTokEnd, Errors.NewlineAfterThrow);\n    }\n    node.argument = this.parseExpression();\n    this.semicolon();\n    return this.finishNode(node, \"ThrowStatement\");\n  }\n\n  parseCatchClauseParam(): N.Pattern {\n    const param = this.parseBindingAtom();\n\n    const simple = param.type === \"Identifier\";\n    this.scope.enter(simple ? SCOPE_SIMPLE_CATCH : 0);\n    this.checkLVal(param, \"catch clause\", BIND_LEXICAL);\n\n    return param;\n  }\n\n  parseTryStatement(node: N.TryStatement): N.TryStatement {\n    this.next();\n\n    node.block = this.parseBlock();\n    node.handler = null;\n\n    if (this.match(tt._catch)) {\n      const clause = this.startNode();\n      this.next();\n      if (this.match(tt.parenL)) {\n        this.expect(tt.parenL);\n        clause.param = this.parseCatchClauseParam();\n        this.expect(tt.parenR);\n      } else {\n        clause.param = null;\n        this.scope.enter(SCOPE_OTHER);\n      }\n\n      // Parse the catch clause's body.\n      clause.body =\n        // For the smartPipelines plugin: Disable topic references from outer\n        // contexts within the catch clause's body.\n        this.withSmartMixTopicForbiddingContext(() =>\n          // Parse the catch clause's body.\n          this.parseBlock(false, false),\n        );\n\n      this.scope.exit();\n      node.handler = this.finishNode(clause, \"CatchClause\");\n    }\n\n    node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null;\n\n    if (!node.handler && !node.finalizer) {\n      this.raise(node.start, Errors.NoCatchOrFinally);\n    }\n\n    return this.finishNode(node, \"TryStatement\");\n  }\n\n  parseVarStatement(\n    node: N.VariableDeclaration,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    this.next();\n    this.parseVar(node, false, kind);\n    this.semicolon();\n    return this.finishNode(node, \"VariableDeclaration\");\n  }\n\n  parseWhileStatement(node: N.WhileStatement): N.WhileStatement {\n    this.next();\n    node.test = this.parseHeaderExpression();\n    this.state.labels.push(loopLabel);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"while\"),\n      );\n\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"WhileStatement\");\n  }\n\n  parseWithStatement(node: N.WithStatement): N.WithStatement {\n    if (this.state.strict) {\n      this.raise(this.state.start, Errors.StrictWith);\n    }\n    this.next();\n    node.object = this.parseHeaderExpression();\n\n    // Parse the statement body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the with statement's body.\n      // They are permitted in function default-parameter expressions, which are\n      // part of the outer context, outside of the with statement's body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the statement body.\n        this.parseStatement(\"with\"),\n      );\n\n    return this.finishNode(node, \"WithStatement\");\n  }\n\n  parseEmptyStatement(node: N.EmptyStatement): N.EmptyStatement {\n    this.next();\n    return this.finishNode(node, \"EmptyStatement\");\n  }\n\n  parseLabeledStatement(\n    node: N.LabeledStatement,\n    maybeName: string,\n    expr: N.Identifier,\n    context: ?string,\n  ): N.LabeledStatement {\n    for (const label of this.state.labels) {\n      if (label.name === maybeName) {\n        this.raise(expr.start, Errors.LabelRedeclaration, maybeName);\n      }\n    }\n\n    const kind = tokenIsLoop(this.state.type)\n      ? \"loop\"\n      : this.match(tt._switch)\n      ? \"switch\"\n      : null;\n    for (let i = this.state.labels.length - 1; i >= 0; i--) {\n      const label = this.state.labels[i];\n      if (label.statementStart === node.start) {\n        label.statementStart = this.state.start;\n        label.kind = kind;\n      } else {\n        break;\n      }\n    }\n\n    this.state.labels.push({\n      name: maybeName,\n      kind: kind,\n      statementStart: this.state.start,\n    });\n    node.body = this.parseStatement(\n      context\n        ? context.indexOf(\"label\") === -1\n          ? context + \"label\"\n          : context\n        : \"label\",\n    );\n\n    this.state.labels.pop();\n    node.label = expr;\n    return this.finishNode(node, \"LabeledStatement\");\n  }\n\n  parseExpressionStatement(\n    node: N.ExpressionStatement,\n    expr: N.Expression,\n  ): N.Statement {\n    node.expression = expr;\n    this.semicolon();\n    return this.finishNode(node, \"ExpressionStatement\");\n  }\n\n  // Parse a semicolon-enclosed block of statements, handling `\"use\n  // strict\"` declarations when `allowDirectives` is true (used for\n  // function bodies).\n\n  parseBlock(\n    allowDirectives?: boolean = false,\n    createNewLexicalScope?: boolean = true,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): N.BlockStatement {\n    const node = this.startNode();\n    if (allowDirectives) {\n      this.state.strictErrors.clear();\n    }\n    this.expect(tt.braceL);\n    if (createNewLexicalScope) {\n      this.scope.enter(SCOPE_OTHER);\n    }\n    this.parseBlockBody(\n      node,\n      allowDirectives,\n      false,\n      tt.braceR,\n      afterBlockParse,\n    );\n    if (createNewLexicalScope) {\n      this.scope.exit();\n    }\n    return this.finishNode(node, \"BlockStatement\");\n  }\n\n  isValidDirective(stmt: N.Statement): boolean {\n    return (\n      stmt.type === \"ExpressionStatement\" &&\n      stmt.expression.type === \"StringLiteral\" &&\n      !stmt.expression.extra.parenthesized\n    );\n  }\n\n  parseBlockBody(\n    node: N.BlockStatementLike,\n    allowDirectives: ?boolean,\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const body = (node.body = []);\n    const directives = (node.directives = []);\n    this.parseBlockOrModuleBlockBody(\n      body,\n      allowDirectives ? directives : undefined,\n      topLevel,\n      end,\n      afterBlockParse,\n    );\n  }\n\n  // Undefined directives means that directives are not allowed.\n  // https://tc39.es/ecma262/#prod-Block\n  // https://tc39.es/ecma262/#prod-ModuleBody\n  parseBlockOrModuleBlockBody(\n    body: N.Statement[],\n    directives: ?(N.Directive[]),\n    topLevel: boolean,\n    end: TokenType,\n    afterBlockParse?: (hasStrictModeDirective: boolean) => void,\n  ): void {\n    const oldStrict = this.state.strict;\n    let hasStrictModeDirective = false;\n    let parsedNonDirective = false;\n\n    while (!this.match(end)) {\n      const stmt = this.parseStatement(null, topLevel);\n\n      if (directives && !parsedNonDirective) {\n        if (this.isValidDirective(stmt)) {\n          const directive = this.stmtToDirective(stmt);\n          directives.push(directive);\n\n          if (\n            !hasStrictModeDirective &&\n            directive.value.value === \"use strict\"\n          ) {\n            hasStrictModeDirective = true;\n            this.setStrict(true);\n          }\n\n          continue;\n        }\n        parsedNonDirective = true;\n        // clear strict errors since the strict mode will not change within the block\n        this.state.strictErrors.clear();\n      }\n      body.push(stmt);\n    }\n\n    if (afterBlockParse) {\n      afterBlockParse.call(this, hasStrictModeDirective);\n    }\n\n    if (!oldStrict) {\n      this.setStrict(false);\n    }\n\n    this.next();\n  }\n\n  // Parse a regular `for` loop. The disambiguation code in\n  // `parseStatement` will already have parsed the init statement or\n  // expression.\n\n  parseFor(\n    node: N.ForStatement,\n    init: ?(N.VariableDeclaration | N.Expression),\n  ): N.ForStatement {\n    node.init = init;\n    this.semicolon(/* allowAsi */ false);\n    node.test = this.match(tt.semi) ? null : this.parseExpression();\n    this.semicolon(/* allowAsi */ false);\n    node.update = this.match(tt.parenR) ? null : this.parseExpression();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin: Disable topic references from outer\n      // contexts within the loop body. They are permitted in test expressions,\n      // outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse the loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, \"ForStatement\");\n  }\n\n  // Parse a `for`/`in` and `for`/`of` loop, which are almost\n  // same from parser's perspective.\n\n  parseForIn(\n    node: N.ForInOf,\n    init: N.VariableDeclaration | N.AssignmentPattern,\n    awaitAt: number,\n  ): N.ForInOf {\n    const isForIn = this.match(tt._in);\n    this.next();\n\n    if (isForIn) {\n      if (awaitAt > -1) this.unexpected(awaitAt);\n    } else {\n      node.await = awaitAt > -1;\n    }\n\n    if (\n      init.type === \"VariableDeclaration\" &&\n      init.declarations[0].init != null &&\n      (!isForIn ||\n        this.state.strict ||\n        init.kind !== \"var\" ||\n        init.declarations[0].id.type !== \"Identifier\")\n    ) {\n      this.raise(\n        init.start,\n        Errors.ForInOfLoopInitializer,\n        isForIn ? \"for-in\" : \"for-of\",\n      );\n    } else if (init.type === \"AssignmentPattern\") {\n      this.raise(init.start, Errors.InvalidLhs, \"for-loop\");\n    }\n\n    node.left = init;\n    node.right = isForIn\n      ? this.parseExpression()\n      : this.parseMaybeAssignAllowIn();\n    this.expect(tt.parenR);\n\n    // Parse the loop body.\n    node.body =\n      // For the smartPipelines plugin:\n      // Disable topic references from outer contexts within the loop body.\n      // They are permitted in test expressions, outside of the loop body.\n      this.withSmartMixTopicForbiddingContext(() =>\n        // Parse loop body.\n        this.parseStatement(\"for\"),\n      );\n\n    this.scope.exit();\n    this.state.labels.pop();\n\n    return this.finishNode(node, isForIn ? \"ForInStatement\" : \"ForOfStatement\");\n  }\n\n  // Parse a list of variable declarations.\n\n  parseVar(\n    node: N.VariableDeclaration,\n    isFor: boolean,\n    kind: \"var\" | \"let\" | \"const\",\n  ): N.VariableDeclaration {\n    const declarations = (node.declarations = []);\n    const isTypescript = this.hasPlugin(\"typescript\");\n    node.kind = kind;\n    for (;;) {\n      const decl = this.startNode();\n      this.parseVarId(decl, kind);\n      if (this.eat(tt.eq)) {\n        decl.init = isFor\n          ? this.parseMaybeAssignDisallowIn()\n          : this.parseMaybeAssignAllowIn();\n      } else {\n        if (\n          kind === \"const\" &&\n          !(this.match(tt._in) || this.isContextual(tt._of))\n        ) {\n          // `const` with no initializer is allowed in TypeScript.\n          // It could be a declaration like `const x: number;`.\n          if (!isTypescript) {\n            this.raise(\n              this.state.lastTokEnd,\n              Errors.DeclarationMissingInitializer,\n              \"Const declarations\",\n            );\n          }\n        } else if (\n          decl.id.type !== \"Identifier\" &&\n          !(isFor && (this.match(tt._in) || this.isContextual(tt._of)))\n        ) {\n          this.raise(\n            this.state.lastTokEnd,\n            Errors.DeclarationMissingInitializer,\n            \"Complex binding patterns\",\n          );\n        }\n        decl.init = null;\n      }\n      declarations.push(this.finishNode(decl, \"VariableDeclarator\"));\n      if (!this.eat(tt.comma)) break;\n    }\n    return node;\n  }\n\n  parseVarId(decl: N.VariableDeclarator, kind: \"var\" | \"let\" | \"const\"): void {\n    decl.id = this.parseBindingAtom();\n    this.checkLVal(\n      decl.id,\n      \"variable declaration\",\n      kind === \"var\" ? BIND_VAR : BIND_LEXICAL,\n      undefined,\n      kind !== \"var\",\n    );\n  }\n\n  // Parse a function declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseFunction<T: N.NormalFunction>(\n    node: T,\n    statement?: number = FUNC_NO_FLAGS,\n    isAsync?: boolean = false,\n  ): T {\n    const isStatement = statement & FUNC_STATEMENT;\n    const isHangingStatement = statement & FUNC_HANGING_STATEMENT;\n    const requireId = !!isStatement && !(statement & FUNC_NULLABLE_ID);\n\n    this.initFunction(node, isAsync);\n\n    if (this.match(tt.star) && isHangingStatement) {\n      this.raise(this.state.start, Errors.GeneratorInSingleStatementContext);\n    }\n    node.generator = this.eat(tt.star);\n\n    if (isStatement) {\n      node.id = this.parseFunctionId(requireId);\n    }\n\n    const oldMaybeInArrowParameters = this.state.maybeInArrowParameters;\n    this.state.maybeInArrowParameters = false;\n    this.scope.enter(SCOPE_FUNCTION);\n    this.prodParam.enter(functionFlags(isAsync, node.generator));\n\n    if (!isStatement) {\n      node.id = this.parseFunctionId();\n    }\n\n    this.parseFunctionParams(node, /* allowModifiers */ false);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the function body. They are permitted in function\n    // default-parameter expressions, outside of the function body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the function body.\n      this.parseFunctionBodyAndFinish(\n        node,\n        isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\",\n      );\n    });\n\n    this.prodParam.exit();\n    this.scope.exit();\n\n    if (isStatement && !isHangingStatement) {\n      // We need to register this _after_ parsing the function body\n      // because of TypeScript body-less function declarations,\n      // which shouldn't be added to the scope.\n      this.registerFunctionStatementId(node);\n    }\n\n    this.state.maybeInArrowParameters = oldMaybeInArrowParameters;\n    return node;\n  }\n\n  parseFunctionId(requireId?: boolean): ?N.Identifier {\n    return requireId || tokenIsIdentifier(this.state.type)\n      ? this.parseIdentifier()\n      : null;\n  }\n\n  parseFunctionParams(node: N.Function, allowModifiers?: boolean): void {\n    this.expect(tt.parenL);\n    this.expressionScope.enter(newParameterDeclarationScope());\n    node.params = this.parseBindingList(\n      tt.parenR,\n      charCodes.rightParenthesis,\n      /* allowEmpty */ false,\n      allowModifiers,\n    );\n\n    this.expressionScope.exit();\n  }\n\n  registerFunctionStatementId(node: N.Function): void {\n    if (!node.id) return;\n\n    // If it is a regular function declaration in sloppy mode, then it is\n    // subject to Annex B semantics (BIND_FUNCTION). Otherwise, the binding\n    // mode depends on properties of the current scope (see\n    // treatFunctionsAsVar).\n    this.scope.declareName(\n      node.id.name,\n      this.state.strict || node.generator || node.async\n        ? this.scope.treatFunctionsAsVar\n          ? BIND_VAR\n          : BIND_LEXICAL\n        : BIND_FUNCTION,\n      node.id.start,\n    );\n  }\n\n  // Parse a class declaration or literal (depending on the\n  // `isStatement` parameter).\n\n  parseClass<T: N.Class>(\n    node: T,\n    isStatement: /* T === ClassDeclaration */ boolean,\n    optionalId?: boolean,\n  ): T {\n    this.next();\n    this.takeDecorators(node);\n\n    // A class definition is always strict mode code.\n    const oldStrict = this.state.strict;\n    this.state.strict = true;\n\n    this.parseClassId(node, isStatement, optionalId);\n    this.parseClassSuper(node);\n    // this.state.strict is restored in parseClassBody\n    node.body = this.parseClassBody(!!node.superClass, oldStrict);\n\n    return this.finishNode(\n      node,\n      isStatement ? \"ClassDeclaration\" : \"ClassExpression\",\n    );\n  }\n\n  isClassProperty(): boolean {\n    return this.match(tt.eq) || this.match(tt.semi) || this.match(tt.braceR);\n  }\n\n  isClassMethod(): boolean {\n    return this.match(tt.parenL);\n  }\n\n  isNonstaticConstructor(method: N.ClassMethod | N.ClassProperty): boolean {\n    return (\n      !method.computed &&\n      !method.static &&\n      (method.key.name === \"constructor\" || // Identifier\n        method.key.value === \"constructor\") // String literal\n    );\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassBody\n  parseClassBody(hadSuperClass: boolean, oldStrict: boolean): N.ClassBody {\n    this.classScope.enter();\n\n    const state: N.ParseClassMemberState = {\n      hadConstructor: false,\n      hadSuperClass,\n    };\n    let decorators: N.Decorator[] = [];\n    const classBody: N.ClassBody = this.startNode();\n    classBody.body = [];\n\n    this.expect(tt.braceL);\n\n    // For the smartPipelines plugin: Disable topic references from outer\n    // contexts within the class body.\n    this.withSmartMixTopicForbiddingContext(() => {\n      // Parse the contents within the braces.\n      while (!this.match(tt.braceR)) {\n        if (this.eat(tt.semi)) {\n          if (decorators.length > 0) {\n            throw this.raise(this.state.lastTokEnd, Errors.DecoratorSemicolon);\n          }\n          continue;\n        }\n\n        if (this.match(tt.at)) {\n          decorators.push(this.parseDecorator());\n          continue;\n        }\n\n        const member = this.startNode();\n\n        // steal the decorators if there are any\n        if (decorators.length) {\n          member.decorators = decorators;\n          this.resetStartLocationFromNode(member, decorators[0]);\n          decorators = [];\n        }\n\n        this.parseClassMember(classBody, member, state);\n\n        if (\n          member.kind === \"constructor\" &&\n          member.decorators &&\n          member.decorators.length > 0\n        ) {\n          this.raise(member.start, Errors.DecoratorConstructor);\n        }\n      }\n    });\n\n    this.state.strict = oldStrict;\n\n    this.next(); // eat `}`\n\n    if (decorators.length) {\n      throw this.raise(this.state.start, Errors.TrailingDecorator);\n    }\n\n    this.classScope.exit();\n\n    return this.finishNode(classBody, \"ClassBody\");\n  }\n\n  // returns true if the current identifier is a method/field name,\n  // false if it is a modifier\n  parseClassMemberFromModifier(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n  ): boolean {\n    const key = this.parseIdentifier(true); // eats the modifier\n\n    if (this.isClassMethod()) {\n      const method: N.ClassMethod = (member: any);\n\n      // a method named like the modifier\n      method.kind = \"method\";\n      method.computed = false;\n      method.key = key;\n      method.static = false;\n      this.pushClassMethod(\n        classBody,\n        method,\n        false,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n      return true;\n    } else if (this.isClassProperty()) {\n      const prop: N.ClassProperty = (member: any);\n\n      // a property named like the modifier\n      prop.computed = false;\n      prop.key = key;\n      prop.static = false;\n      classBody.body.push(this.parseClassProperty(prop));\n      return true;\n    }\n    this.resetPreviousNodeTrailingComments(key);\n    return false;\n  }\n\n  parseClassMember(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n  ): void {\n    const isStatic = this.isContextual(tt._static);\n\n    if (isStatic) {\n      if (this.parseClassMemberFromModifier(classBody, member)) {\n        // a class element named 'static'\n        return;\n      }\n      if (this.eat(tt.braceL)) {\n        this.parseClassStaticBlock(classBody, ((member: any): N.StaticBlock));\n        return;\n      }\n    }\n\n    this.parseClassMemberWithIsStatic(classBody, member, state, isStatic);\n  }\n\n  parseClassMemberWithIsStatic(\n    classBody: N.ClassBody,\n    member: N.ClassMember,\n    state: N.ParseClassMemberState,\n    isStatic: boolean,\n  ) {\n    const publicMethod: $FlowSubtype<N.ClassMethod> = member;\n    const privateMethod: $FlowSubtype<N.ClassPrivateMethod> = member;\n    const publicProp: $FlowSubtype<N.ClassMethod> = member;\n    const privateProp: $FlowSubtype<N.ClassPrivateMethod> = member;\n\n    const method: typeof publicMethod | typeof privateMethod = publicMethod;\n    const publicMember: typeof publicMethod | typeof publicProp = publicMethod;\n\n    member.static = isStatic;\n    this.parsePropertyNamePrefixOperator(member);\n\n    if (this.eat(tt.star)) {\n      // a generator\n      method.kind = \"method\";\n      const isPrivateName = this.match(tt.privateName);\n      this.parseClassElementName(method);\n\n      if (isPrivateName) {\n        // Private generator method\n        this.pushClassPrivateMethod(classBody, privateMethod, true, false);\n        return;\n      }\n\n      if (this.isNonstaticConstructor(publicMethod)) {\n        this.raise(publicMethod.key.start, Errors.ConstructorIsGenerator);\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        true,\n        false,\n        /* isConstructor */ false,\n        false,\n      );\n\n      return;\n    }\n\n    const isContextual =\n      tokenIsIdentifier(this.state.type) && !this.state.containsEsc;\n    const isPrivate = this.match(tt.privateName);\n    const key = this.parseClassElementName(member);\n    const maybeQuestionTokenStart = this.state.start;\n\n    this.parsePostMemberNameModifiers(publicMember);\n\n    if (this.isClassMethod()) {\n      method.kind = \"method\";\n\n      if (isPrivate) {\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n        return;\n      }\n\n      // a normal method\n      const isConstructor = this.isNonstaticConstructor(publicMethod);\n      let allowsDirectSuper = false;\n      if (isConstructor) {\n        publicMethod.kind = \"constructor\";\n\n        // TypeScript allows multiple overloaded constructor declarations.\n        if (state.hadConstructor && !this.hasPlugin(\"typescript\")) {\n          this.raise(key.start, Errors.DuplicateConstructor);\n        }\n        if (isConstructor && this.hasPlugin(\"typescript\") && member.override) {\n          this.raise(key.start, Errors.OverrideOnConstructor);\n        }\n        state.hadConstructor = true;\n        allowsDirectSuper = state.hadSuperClass;\n      }\n\n      this.pushClassMethod(\n        classBody,\n        publicMethod,\n        false,\n        false,\n        isConstructor,\n        allowsDirectSuper,\n      );\n    } else if (this.isClassProperty()) {\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else if (\n      isContextual &&\n      key.name === \"async\" &&\n      !this.isLineTerminator()\n    ) {\n      // an async method\n      this.resetPreviousNodeTrailingComments(key);\n      const isGenerator = this.eat(tt.star);\n\n      if (publicMember.optional) {\n        this.unexpected(maybeQuestionTokenStart);\n      }\n\n      method.kind = \"method\";\n      // The so-called parsed name would have been \"async\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(method);\n      this.parsePostMemberNameModifiers(publicMember);\n\n      if (isPrivate) {\n        // private async method\n        this.pushClassPrivateMethod(\n          classBody,\n          privateMethod,\n          isGenerator,\n          true,\n        );\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAsync);\n        }\n\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          isGenerator,\n          true,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n    } else if (\n      isContextual &&\n      (key.name === \"get\" || key.name === \"set\") &&\n      !(this.match(tt.star) && this.isLineTerminator())\n    ) {\n      // `get\\n*` is an uninitialized property named 'get' followed by a generator.\n      // a getter or setter\n      this.resetPreviousNodeTrailingComments(key);\n      method.kind = key.name;\n      // The so-called parsed name would have been \"get/set\": get the real name.\n      const isPrivate = this.match(tt.privateName);\n      this.parseClassElementName(publicMethod);\n\n      if (isPrivate) {\n        // private getter/setter\n        this.pushClassPrivateMethod(classBody, privateMethod, false, false);\n      } else {\n        if (this.isNonstaticConstructor(publicMethod)) {\n          this.raise(publicMethod.key.start, Errors.ConstructorIsAccessor);\n        }\n        this.pushClassMethod(\n          classBody,\n          publicMethod,\n          false,\n          false,\n          /* isConstructor */ false,\n          false,\n        );\n      }\n\n      this.checkGetterSetterParams(publicMethod);\n    } else if (this.isLineTerminator()) {\n      // an uninitialized class property (due to ASI, since we don't otherwise recognize the next token)\n      if (isPrivate) {\n        this.pushClassPrivateProperty(classBody, privateProp);\n      } else {\n        this.pushClassProperty(classBody, publicProp);\n      }\n    } else {\n      this.unexpected();\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassElementName\n  parseClassElementName(member: N.ClassMember): N.Expression | N.Identifier {\n    const { type, value, start } = this.state;\n    if (\n      (type === tt.name || type === tt.string) &&\n      member.static &&\n      value === \"prototype\"\n    ) {\n      this.raise(start, Errors.StaticPrototype);\n    }\n\n    if (type === tt.privateName) {\n      if (value === \"constructor\") {\n        this.raise(start, Errors.ConstructorClassPrivateField);\n      }\n      const key = this.parsePrivateName();\n      member.key = key;\n      return key;\n    }\n\n    return this.parsePropertyName(member);\n  }\n\n  parseClassStaticBlock(\n    classBody: N.ClassBody,\n    member: N.StaticBlock & { decorators?: Array<N.Decorator> },\n  ) {\n    // Start a new lexical scope\n    this.scope.enter(SCOPE_CLASS | SCOPE_STATIC_BLOCK | SCOPE_SUPER);\n    // Start a new scope with regard to loop labels\n    const oldLabels = this.state.labels;\n    this.state.labels = [];\n    // ClassStaticBlockStatementList:\n    //   StatementList[~Yield, ~Await, ~Return] opt\n    this.prodParam.enter(PARAM);\n    const body = (member.body = []);\n    this.parseBlockOrModuleBlockBody(body, undefined, false, tt.braceR);\n    this.prodParam.exit();\n    this.scope.exit();\n    this.state.labels = oldLabels;\n    classBody.body.push(this.finishNode<N.StaticBlock>(member, \"StaticBlock\"));\n    if (member.decorators?.length) {\n      this.raise(member.start, Errors.DecoratorStaticBlock);\n    }\n  }\n\n  pushClassProperty(classBody: N.ClassBody, prop: N.ClassProperty) {\n    if (\n      !prop.computed &&\n      (prop.key.name === \"constructor\" || prop.key.value === \"constructor\")\n    ) {\n      // Non-computed field, which is either an identifier named \"constructor\"\n      // or a string literal named \"constructor\"\n      this.raise(prop.key.start, Errors.ConstructorClassField);\n    }\n\n    classBody.body.push(this.parseClassProperty(prop));\n  }\n\n  pushClassPrivateProperty(\n    classBody: N.ClassBody,\n    prop: N.ClassPrivateProperty,\n  ) {\n    const node = this.parseClassPrivateProperty(prop);\n    classBody.body.push(node);\n\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      CLASS_ELEMENT_OTHER,\n      node.key.start,\n    );\n  }\n\n  pushClassMethod(\n    classBody: N.ClassBody,\n    method: N.ClassMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n    isConstructor: boolean,\n    allowsDirectSuper: boolean,\n  ): void {\n    classBody.body.push(\n      this.parseMethod(\n        method,\n        isGenerator,\n        isAsync,\n        isConstructor,\n        allowsDirectSuper,\n        \"ClassMethod\",\n        true,\n      ),\n    );\n  }\n\n  pushClassPrivateMethod(\n    classBody: N.ClassBody,\n    method: N.ClassPrivateMethod,\n    isGenerator: boolean,\n    isAsync: boolean,\n  ): void {\n    const node = this.parseMethod(\n      method,\n      isGenerator,\n      isAsync,\n      /* isConstructor */ false,\n      false,\n      \"ClassPrivateMethod\",\n      true,\n    );\n    classBody.body.push(node);\n\n    const kind =\n      node.kind === \"get\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_GETTER\n          : CLASS_ELEMENT_INSTANCE_GETTER\n        : node.kind === \"set\"\n        ? node.static\n          ? CLASS_ELEMENT_STATIC_SETTER\n          : CLASS_ELEMENT_INSTANCE_SETTER\n        : CLASS_ELEMENT_OTHER;\n    this.declareClassPrivateMethodInScope(node, kind);\n  }\n\n  declareClassPrivateMethodInScope(\n    node: N.ClassPrivateMethod | N.EstreeMethodDefinition | N.TSDeclareMethod,\n    kind: number,\n  ) {\n    this.classScope.declarePrivateName(\n      this.getPrivateNameSV(node.key),\n      kind,\n      node.key.start,\n    );\n  }\n\n  // Overridden in typescript.js\n  parsePostMemberNameModifiers(\n    // eslint-disable-next-line no-unused-vars\n    methodOrProp: N.ClassMethod | N.ClassProperty,\n  ): void {}\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassPrivateProperty(\n    node: N.ClassPrivateProperty,\n  ): N.ClassPrivateProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassPrivateProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-FieldDefinition\n  parseClassProperty(node: N.ClassProperty): N.ClassProperty {\n    this.parseInitializer(node);\n    this.semicolon();\n    return this.finishNode(node, \"ClassProperty\");\n  }\n\n  // https://tc39.es/ecma262/#prod-Initializer\n  parseInitializer(node: N.ClassProperty | N.ClassPrivateProperty): void {\n    this.scope.enter(SCOPE_CLASS | SCOPE_SUPER);\n    this.expressionScope.enter(newExpressionScope());\n    this.prodParam.enter(PARAM);\n    node.value = this.eat(tt.eq) ? this.parseMaybeAssignAllowIn() : null;\n    this.expressionScope.exit();\n    this.prodParam.exit();\n    this.scope.exit();\n  }\n\n  parseClassId(\n    node: N.Class,\n    isStatement: boolean,\n    optionalId: ?boolean,\n    bindingType: BindingTypes = BIND_CLASS,\n  ): void {\n    if (tokenIsIdentifier(this.state.type)) {\n      node.id = this.parseIdentifier();\n      if (isStatement) {\n        this.checkLVal(node.id, \"class name\", bindingType);\n      }\n    } else {\n      if (optionalId || !isStatement) {\n        node.id = null;\n      } else {\n        this.unexpected(null, Errors.MissingClassName);\n      }\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ClassHeritage\n  parseClassSuper(node: N.Class): void {\n    node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null;\n  }\n\n  // Parses module export declaration.\n  // https://tc39.es/ecma262/#prod-ExportDeclaration\n\n  parseExport(node: N.Node): N.AnyExport {\n    const hasDefault = this.maybeParseExportDefaultSpecifier(node);\n    const parseAfterDefault = !hasDefault || this.eat(tt.comma);\n    const hasStar = parseAfterDefault && this.eatExportStar(node);\n    const hasNamespace =\n      hasStar && this.maybeParseExportNamespaceSpecifier(node);\n    const parseAfterNamespace =\n      parseAfterDefault && (!hasNamespace || this.eat(tt.comma));\n    const isFromRequired = hasDefault || hasStar;\n\n    if (hasStar && !hasNamespace) {\n      if (hasDefault) this.unexpected();\n      this.parseExportFrom(node, true);\n\n      return this.finishNode(node, \"ExportAllDeclaration\");\n    }\n\n    const hasSpecifiers = this.maybeParseExportNamedSpecifiers(node);\n\n    if (\n      (hasDefault && parseAfterDefault && !hasStar && !hasSpecifiers) ||\n      (hasNamespace && parseAfterNamespace && !hasSpecifiers)\n    ) {\n      throw this.unexpected(null, tt.braceL);\n    }\n\n    let hasDeclaration;\n    if (isFromRequired || hasSpecifiers) {\n      hasDeclaration = false;\n      this.parseExportFrom(node, isFromRequired);\n    } else {\n      hasDeclaration = this.maybeParseExportDeclaration(node);\n    }\n\n    if (isFromRequired || hasSpecifiers || hasDeclaration) {\n      this.checkExport(node, true, false, !!node.source);\n      return this.finishNode(node, \"ExportNamedDeclaration\");\n    }\n\n    if (this.eat(tt._default)) {\n      // export default ...\n      node.declaration = this.parseExportDefaultExpression();\n      this.checkExport(node, true, true);\n\n      return this.finishNode(node, \"ExportDefaultDeclaration\");\n    }\n\n    throw this.unexpected(null, tt.braceL);\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  eatExportStar(node: N.Node): boolean {\n    return this.eat(tt.star);\n  }\n\n  maybeParseExportDefaultSpecifier(node: N.Node): boolean {\n    if (this.isExportDefaultSpecifier()) {\n      // export defaultObj ...\n      this.expectPlugin(\"exportDefaultFrom\");\n      const specifier = this.startNode();\n      specifier.exported = this.parseIdentifier(true);\n      node.specifiers = [this.finishNode(specifier, \"ExportDefaultSpecifier\")];\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamespaceSpecifier(node: N.Node): boolean {\n    if (this.isContextual(tt._as)) {\n      if (!node.specifiers) node.specifiers = [];\n\n      const specifier = this.startNodeAt(\n        this.state.lastTokStart,\n        this.state.lastTokStartLoc,\n      );\n\n      this.next();\n\n      specifier.exported = this.parseModuleExportName();\n      node.specifiers.push(\n        this.finishNode(specifier, \"ExportNamespaceSpecifier\"),\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportNamedSpecifiers(node: N.Node): boolean {\n    if (this.match(tt.braceL)) {\n      if (!node.specifiers) node.specifiers = [];\n      const isTypeExport = node.exportKind === \"type\";\n      node.specifiers.push(...this.parseExportSpecifiers(isTypeExport));\n\n      node.source = null;\n      node.declaration = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseExportDeclaration(node: N.Node): boolean {\n    if (this.shouldParseExportDeclaration()) {\n      node.specifiers = [];\n      node.source = null;\n      if (this.hasPlugin(\"importAssertions\")) {\n        node.assertions = [];\n      }\n      node.declaration = this.parseExportDeclaration(node);\n      return true;\n    }\n    return false;\n  }\n\n  isAsyncFunction(): boolean {\n    if (!this.isContextual(tt._async)) return false;\n    const next = this.nextTokenStart();\n    return (\n      !lineBreak.test(this.input.slice(this.state.pos, next)) &&\n      this.isUnparsedContextual(next, \"function\")\n    );\n  }\n\n  parseExportDefaultExpression(): N.Expression | N.Declaration {\n    const expr = this.startNode();\n\n    const isAsync = this.isAsyncFunction();\n\n    if (this.match(tt._function) || isAsync) {\n      this.next();\n      if (isAsync) {\n        this.next();\n      }\n\n      return this.parseFunction(\n        expr,\n        FUNC_STATEMENT | FUNC_NULLABLE_ID,\n        isAsync,\n      );\n    } else if (this.match(tt._class)) {\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt.at)) {\n      if (\n        this.hasPlugin(\"decorators\") &&\n        this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")\n      ) {\n        this.raise(this.state.start, Errors.DecoratorBeforeExport);\n      }\n      this.parseDecorators(false);\n      return this.parseClass(expr, true, true);\n    } else if (this.match(tt._const) || this.match(tt._var) || this.isLet()) {\n      throw this.raise(this.state.start, Errors.UnsupportedDefaultExport);\n    } else {\n      const res = this.parseMaybeAssignAllowIn();\n      this.semicolon();\n      return res;\n    }\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  parseExportDeclaration(node: N.ExportNamedDeclaration): ?N.Declaration {\n    return this.parseStatement(null);\n  }\n\n  isExportDefaultSpecifier(): boolean {\n    const { type } = this.state;\n    if (tokenIsIdentifier(type)) {\n      if ((type === tt._async && !this.state.containsEsc) || type === tt._let) {\n        return false;\n      }\n      if (\n        (type === tt._type || type === tt._interface) &&\n        !this.state.containsEsc\n      ) {\n        const { type: nextType } = this.lookahead();\n        // If we see any variable name other than `from` after `type` keyword,\n        // we consider it as flow/typescript type exports\n        // note that this approach may fail on some pedantic cases\n        // export type from = number\n        if (\n          (tokenIsIdentifier(nextType) && nextType !== tt._from) ||\n          nextType === tt.braceL\n        ) {\n          this.expectOnePlugin([\"flow\", \"typescript\"]);\n          return false;\n        }\n      }\n    } else if (!this.match(tt._default)) {\n      return false;\n    }\n\n    const next = this.nextTokenStart();\n    const hasFrom = this.isUnparsedContextual(next, \"from\");\n    if (\n      this.input.charCodeAt(next) === charCodes.comma ||\n      (tokenIsIdentifier(this.state.type) && hasFrom)\n    ) {\n      return true;\n    }\n    // lookahead again when `export default from` is seen\n    if (this.match(tt._default) && hasFrom) {\n      const nextAfterFrom = this.input.charCodeAt(\n        this.nextTokenStartSince(next + 4),\n      );\n      return (\n        nextAfterFrom === charCodes.quotationMark ||\n        nextAfterFrom === charCodes.apostrophe\n      );\n    }\n    return false;\n  }\n\n  parseExportFrom(node: N.ExportNamedDeclaration, expect?: boolean): void {\n    if (this.eatContextual(tt._from)) {\n      node.source = this.parseImportSource();\n      this.checkExport(node);\n      const assertions = this.maybeParseImportAssertions();\n      if (assertions) {\n        node.assertions = assertions;\n      }\n    } else if (expect) {\n      this.unexpected();\n    }\n\n    this.semicolon();\n  }\n\n  shouldParseExportDeclaration(): boolean {\n    const { type } = this.state;\n    if (type === tt.at) {\n      this.expectOnePlugin([\"decorators\", \"decorators-legacy\"]);\n      if (this.hasPlugin(\"decorators\")) {\n        if (this.getPluginOption(\"decorators\", \"decoratorsBeforeExport\")) {\n          this.unexpected(this.state.start, Errors.DecoratorBeforeExport);\n        } else {\n          return true;\n        }\n      }\n    }\n\n    return (\n      type === tt._var ||\n      type === tt._const ||\n      type === tt._function ||\n      type === tt._class ||\n      this.isLet() ||\n      this.isAsyncFunction()\n    );\n  }\n\n  checkExport(\n    node: N.ExportNamedDeclaration,\n    checkNames?: boolean,\n    isDefault?: boolean,\n    isFrom?: boolean,\n  ): void {\n    if (checkNames) {\n      // Check for duplicate exports\n      if (isDefault) {\n        // Default exports\n        this.checkDuplicateExports(node, \"default\");\n        if (this.hasPlugin(\"exportDefaultFrom\")) {\n          const declaration = ((node: any): N.ExportDefaultDeclaration)\n            .declaration;\n          if (\n            declaration.type === \"Identifier\" &&\n            declaration.name === \"from\" &&\n            declaration.end - declaration.start === 4 && // does not contain escape\n            !declaration.extra?.parenthesized\n          ) {\n            this.raise(declaration.start, Errors.ExportDefaultFromAsIdentifier);\n          }\n        }\n      } else if (node.specifiers && node.specifiers.length) {\n        // Named exports\n        for (const specifier of node.specifiers) {\n          const { exported } = specifier;\n          const exportedName =\n            exported.type === \"Identifier\" ? exported.name : exported.value;\n          this.checkDuplicateExports(specifier, exportedName);\n          // $FlowIgnore\n          if (!isFrom && specifier.local) {\n            const { local } = specifier;\n            if (local.type !== \"Identifier\") {\n              this.raise(\n                specifier.start,\n                Errors.ExportBindingIsString,\n                local.value,\n                exportedName,\n              );\n            } else {\n              // check for keywords used as local names\n              this.checkReservedWord(local.name, local.start, true, false);\n              // check if export is defined\n              this.scope.checkLocalExport(local);\n            }\n          }\n        }\n      } else if (node.declaration) {\n        // Exported declarations\n        if (\n          node.declaration.type === \"FunctionDeclaration\" ||\n          node.declaration.type === \"ClassDeclaration\"\n        ) {\n          const id = node.declaration.id;\n          if (!id) throw new Error(\"Assertion failure\");\n\n          this.checkDuplicateExports(node, id.name);\n        } else if (node.declaration.type === \"VariableDeclaration\") {\n          for (const declaration of node.declaration.declarations) {\n            this.checkDeclaration(declaration.id);\n          }\n        }\n      }\n    }\n\n    const currentContextDecorators =\n      this.state.decoratorStack[this.state.decoratorStack.length - 1];\n    // If node.declaration is a class, it will take all decorators in the current context.\n    // Thus we should throw if we see non-empty decorators here.\n    if (currentContextDecorators.length) {\n      throw this.raise(node.start, Errors.UnsupportedDecoratorExport);\n    }\n  }\n\n  checkDeclaration(node: N.Pattern | N.ObjectProperty): void {\n    if (node.type === \"Identifier\") {\n      this.checkDuplicateExports(node, node.name);\n    } else if (node.type === \"ObjectPattern\") {\n      for (const prop of node.properties) {\n        this.checkDeclaration(prop);\n      }\n    } else if (node.type === \"ArrayPattern\") {\n      for (const elem of node.elements) {\n        if (elem) {\n          this.checkDeclaration(elem);\n        }\n      }\n    } else if (node.type === \"ObjectProperty\") {\n      this.checkDeclaration(node.value);\n    } else if (node.type === \"RestElement\") {\n      this.checkDeclaration(node.argument);\n    } else if (node.type === \"AssignmentPattern\") {\n      this.checkDeclaration(node.left);\n    }\n  }\n\n  checkDuplicateExports(\n    node:\n      | N.Identifier\n      | N.StringLiteral\n      | N.ExportNamedDeclaration\n      | N.ExportSpecifier\n      | N.ExportDefaultSpecifier,\n    name: string,\n  ): void {\n    if (this.exportedIdentifiers.has(name)) {\n      this.raise(\n        node.start,\n        name === \"default\"\n          ? Errors.DuplicateDefaultExport\n          : Errors.DuplicateExport,\n        name,\n      );\n    }\n    this.exportedIdentifiers.add(name);\n  }\n\n  // Parses a comma-separated list of module exports.\n\n  parseExportSpecifiers(isInTypeExport: boolean): Array<N.ExportSpecifier> {\n    const nodes = [];\n    let first = true;\n\n    // export { x, y as z } [from '...']\n    this.expect(tt.braceL);\n\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      const isString = this.match(tt.string);\n      const node = this.startNode();\n      node.local = this.parseModuleExportName();\n      nodes.push(\n        this.parseExportSpecifier(\n          node,\n          isString,\n          isInTypeExport,\n          isMaybeTypeOnly,\n        ),\n      );\n    }\n\n    return nodes;\n  }\n\n  parseExportSpecifier(\n    node: any,\n    isString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript parser */\n    isInTypeExport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ExportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      node.exported = this.parseModuleExportName();\n    } else if (isString) {\n      node.exported = cloneStringLiteral(node.local);\n    } else if (!node.exported) {\n      node.exported = cloneIdentifier(node.local);\n    }\n    return this.finishNode<N.ExportSpecifier>(node, \"ExportSpecifier\");\n  }\n\n  // https://tc39.es/ecma262/#prod-ModuleExportName\n  parseModuleExportName(): N.StringLiteral | N.Identifier {\n    if (this.match(tt.string)) {\n      const result = this.parseStringLiteral(this.state.value);\n      const surrogate = result.value.match(loneSurrogate);\n      if (surrogate) {\n        this.raise(\n          result.start,\n          Errors.ModuleExportNameHasLoneSurrogate,\n          surrogate[0].charCodeAt(0).toString(16),\n        );\n      }\n      return result;\n    }\n    return this.parseIdentifier(true);\n  }\n\n  // Parses import declaration.\n  // https://tc39.es/ecma262/#prod-ImportDeclaration\n\n  parseImport(node: N.Node): N.AnyImport {\n    // import '...'\n    node.specifiers = [];\n    if (!this.match(tt.string)) {\n      // check if we have a default import like\n      // import React from \"react\";\n      const hasDefault = this.maybeParseDefaultImportSpecifier(node);\n      /* we are checking if we do not have a default import, then it is obvious that we need named imports\n       * import { get } from \"axios\";\n       * but if we do have a default import\n       * we need to check if we have a comma after that and\n       * that is where this `|| this.eat` condition comes into play\n       */\n      const parseNext = !hasDefault || this.eat(tt.comma);\n      // if we do have to parse the next set of specifiers, we first check for star imports\n      // import React, * from \"react\";\n      const hasStar = parseNext && this.maybeParseStarImportSpecifier(node);\n      // now we check if we need to parse the next imports\n      // but only if they are not importing * (everything)\n      if (parseNext && !hasStar) this.parseNamedImportSpecifiers(node);\n      this.expectContextual(tt._from);\n    }\n    node.source = this.parseImportSource();\n    // https://github.com/tc39/proposal-import-assertions\n    // parse module import assertions if the next token is `assert` or ignore\n    // and finish the ImportDeclaration node.\n    const assertions = this.maybeParseImportAssertions();\n    if (assertions) {\n      node.assertions = assertions;\n    } else if (!process.env.BABEL_8_BREAKING) {\n      const attributes = this.maybeParseModuleAttributes();\n      if (attributes) {\n        node.attributes = attributes;\n      }\n    }\n\n    this.semicolon();\n    return this.finishNode(node, \"ImportDeclaration\");\n  }\n\n  parseImportSource(): N.StringLiteral {\n    if (!this.match(tt.string)) this.unexpected();\n    return this.parseExprAtom();\n  }\n\n  // eslint-disable-next-line no-unused-vars\n  shouldParseDefaultImport(node: N.ImportDeclaration): boolean {\n    return tokenIsIdentifier(this.state.type);\n  }\n\n  parseImportSpecifierLocal(\n    node: N.ImportDeclaration,\n    specifier: N.Node,\n    type: string,\n    contextDescription: string,\n  ): void {\n    specifier.local = this.parseIdentifier();\n    this.checkLVal(specifier.local, contextDescription, BIND_LEXICAL);\n    node.specifiers.push(this.finishNode(specifier, type));\n  }\n\n  /**\n   * parse assert entries\n   *\n   * @see {@link https://tc39.es/proposal-import-assertions/#prod-AssertEntries |AssertEntries}\n   * @returns {N.ImportAttribute[]}\n   * @memberof StatementParser\n   */\n  parseAssertEntries(): N.ImportAttribute[] {\n    const attrs = [];\n    const attrNames = new Set();\n\n    do {\n      if (this.match(tt.braceR)) {\n        break;\n      }\n\n      const node = this.startNode<N.ImportAttribute>();\n\n      // parse AssertionKey : IdentifierName, StringLiteral\n      const keyName = this.state.value;\n      // check if we already have an entry for an attribute\n      // if a duplicate entry is found, throw an error\n      // for now this logic will come into play only when someone declares `type` twice\n      if (attrNames.has(keyName)) {\n        this.raise(\n          this.state.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          keyName,\n        );\n      }\n      attrNames.add(keyName);\n      if (this.match(tt.string)) {\n        node.key = this.parseStringLiteral(keyName);\n      } else {\n        node.key = this.parseIdentifier(true);\n      }\n      this.expect(tt.colon);\n\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode<N.ImportAttribute>(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  /**\n   * parse module attributes\n   * @deprecated It will be removed in Babel 8\n   * @returns\n   * @memberof StatementParser\n   */\n  maybeParseModuleAttributes() {\n    if (this.match(tt._with) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"moduleAttributes\");\n      this.next();\n    } else {\n      if (this.hasPlugin(\"moduleAttributes\")) return [];\n      return null;\n    }\n    const attrs = [];\n    const attributes = new Set();\n    do {\n      const node = this.startNode();\n      node.key = this.parseIdentifier(true);\n\n      if (node.key.name !== \"type\") {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributeDifferentFromType,\n          node.key.name,\n        );\n      }\n\n      if (attributes.has(node.key.name)) {\n        this.raise(\n          node.key.start,\n          Errors.ModuleAttributesWithDuplicateKeys,\n          node.key.name,\n        );\n      }\n      attributes.add(node.key.name);\n      this.expect(tt.colon);\n      if (!this.match(tt.string)) {\n        throw this.unexpected(\n          this.state.start,\n          Errors.ModuleAttributeInvalidValue,\n        );\n      }\n      node.value = this.parseStringLiteral(this.state.value);\n      this.finishNode(node, \"ImportAttribute\");\n      attrs.push(node);\n    } while (this.eat(tt.comma));\n\n    return attrs;\n  }\n\n  maybeParseImportAssertions() {\n    // [no LineTerminator here] AssertClause\n    if (this.isContextual(tt._assert) && !this.hasPrecedingLineBreak()) {\n      this.expectPlugin(\"importAssertions\");\n      this.next(); // eat `assert`\n    } else {\n      if (this.hasPlugin(\"importAssertions\")) return [];\n      return null;\n    }\n    // https://tc39.es/proposal-import-assertions/#prod-AssertClause\n    this.eat(tt.braceL);\n    const attrs = this.parseAssertEntries();\n    this.eat(tt.braceR);\n\n    return attrs;\n  }\n\n  maybeParseDefaultImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.shouldParseDefaultImport(node)) {\n      // import defaultObj, { x, y as z } from '...'\n      this.parseImportSpecifierLocal(\n        node,\n        this.startNode(),\n        \"ImportDefaultSpecifier\",\n        \"default import specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  maybeParseStarImportSpecifier(node: N.ImportDeclaration): boolean {\n    if (this.match(tt.star)) {\n      const specifier = this.startNode();\n      this.next();\n      this.expectContextual(tt._as);\n\n      this.parseImportSpecifierLocal(\n        node,\n        specifier,\n        \"ImportNamespaceSpecifier\",\n        \"import namespace specifier\",\n      );\n      return true;\n    }\n    return false;\n  }\n\n  parseNamedImportSpecifiers(node: N.ImportDeclaration) {\n    let first = true;\n    this.expect(tt.braceL);\n    while (!this.eat(tt.braceR)) {\n      if (first) {\n        first = false;\n      } else {\n        // Detect an attempt to deep destructure\n        if (this.eat(tt.colon)) {\n          throw this.raise(this.state.start, Errors.DestructureNamedImport);\n        }\n\n        this.expect(tt.comma);\n        if (this.eat(tt.braceR)) break;\n      }\n\n      const specifier = this.startNode();\n      const importedIsString = this.match(tt.string);\n      const isMaybeTypeOnly = this.isContextual(tt._type);\n      specifier.imported = this.parseModuleExportName();\n      const importSpecifier = this.parseImportSpecifier(\n        specifier,\n        importedIsString,\n        node.importKind === \"type\" || node.importKind === \"typeof\",\n        isMaybeTypeOnly,\n      );\n      node.specifiers.push(importSpecifier);\n    }\n  }\n\n  // https://tc39.es/ecma262/#prod-ImportSpecifier\n  parseImportSpecifier(\n    specifier: any,\n    importedIsString: boolean,\n    /* eslint-disable no-unused-vars -- used in TypeScript and Flow parser */\n    isInTypeOnlyImport: boolean,\n    isMaybeTypeOnly: boolean,\n    /* eslint-enable no-unused-vars */\n  ): N.ImportSpecifier {\n    if (this.eatContextual(tt._as)) {\n      specifier.local = this.parseIdentifier();\n    } else {\n      const { imported } = specifier;\n      if (importedIsString) {\n        throw this.raise(\n          specifier.start,\n          Errors.ImportBindingIsString,\n          imported.value,\n        );\n      }\n      this.checkReservedWord(imported.name, specifier.start, true, true);\n      if (!specifier.local) {\n        specifier.local = cloneIdentifier(imported);\n      }\n    }\n    this.checkLVal(specifier.local, \"import specifier\", BIND_LEXICAL);\n    return this.finishNode(specifier, \"ImportSpecifier\");\n  }\n\n  // This is used in flow and typescript plugin\n  // Determine whether a parameter is a this param\n  isThisParam(\n    param: N.Pattern | N.Identifier | N.TSParameterProperty,\n  ): boolean {\n    return param.type === \"Identifier\" && param.name === \"this\";\n  }\n}\n","// @flow\n\nimport type { Options } from \"../options\";\nimport type { File /*::, JSXOpeningElement */ } from \"../types\";\nimport type { PluginList } from \"../plugin-utils\";\nimport { getOptions } from \"../options\";\nimport StatementParser from \"./statement\";\nimport ScopeHandler from \"../util/scope\";\n\nexport type PluginsMap = Map<string, { [string]: any }>;\n\nexport default class Parser extends StatementParser {\n  // Forward-declaration so typescript plugin can override jsx plugin\n  /*::\n  +jsxParseOpeningElementAfterName: (\n    node: JSXOpeningElement,\n  ) => JSXOpeningElement;\n  */\n\n  constructor(options: ?Options, input: string) {\n    options = getOptions(options);\n    super(options, input);\n\n    this.options = options;\n    this.initializeScopes();\n    this.plugins = pluginsMap(this.options.plugins);\n    this.filename = options.sourceFilename;\n  }\n\n  // This can be overwritten, for example, by the TypeScript plugin.\n  getScopeHandler(): Class<ScopeHandler<*>> {\n    return ScopeHandler;\n  }\n\n  parse(): File {\n    this.enterInitialScopes();\n    const file = this.startNode();\n    const program = this.startNode();\n    this.nextToken();\n    file.errors = null;\n    this.parseTopLevel(file, program);\n    file.errors = this.state.errors;\n    return file;\n  }\n}\n\nfunction pluginsMap(plugins: PluginList): PluginsMap {\n  const pluginMap: PluginsMap = new Map();\n  for (const plugin of plugins) {\n    const [name, options] = Array.isArray(plugin) ? plugin : [plugin, {}];\n    if (!pluginMap.has(name)) pluginMap.set(name, options || {});\n  }\n  return pluginMap;\n}\n","// @flow\n\nimport { type Options } from \"./options\";\nimport {\n  hasPlugin,\n  validatePlugins,\n  mixinPluginNames,\n  mixinPlugins,\n  type PluginList,\n} from \"./plugin-utils\";\nimport Parser from \"./parser\";\n\nimport { getExportedToken, tt as internalTokenTypes } from \"./tokenizer/types\";\nimport \"./tokenizer/context\";\n\nimport type { Expression, File } from \"./types\";\n\nexport function parse(input: string, options?: Options): File {\n  if (options?.sourceType === \"unambiguous\") {\n    options = {\n      ...options,\n    };\n    try {\n      options.sourceType = \"module\";\n      const parser = getParser(options, input);\n      const ast = parser.parse();\n\n      if (parser.sawUnambiguousESM) {\n        return ast;\n      }\n\n      if (parser.ambiguousScriptDifferentAst) {\n        // Top level await introduces code which can be both a valid script and\n        // a valid module, but which produces different ASTs:\n        //    await\n        //    0\n        // can be parsed either as an AwaitExpression, or as two ExpressionStatements.\n        try {\n          options.sourceType = \"script\";\n          return getParser(options, input).parse();\n        } catch {}\n      } else {\n        // This is both a valid module and a valid script, but\n        // we parse it as a script by default\n        ast.program.sourceType = \"script\";\n      }\n\n      return ast;\n    } catch (moduleError) {\n      try {\n        options.sourceType = \"script\";\n        return getParser(options, input).parse();\n      } catch {}\n\n      throw moduleError;\n    }\n  } else {\n    return getParser(options, input).parse();\n  }\n}\n\nexport function parseExpression(input: string, options?: Options): Expression {\n  const parser = getParser(options, input);\n  if (parser.options.strictMode) {\n    parser.state.strict = true;\n  }\n  return parser.getExpression();\n}\n\nfunction generateExportedTokenTypes(internalTokenTypes) {\n  const tokenTypes = {};\n  for (const typeName of Object.keys(internalTokenTypes)) {\n    tokenTypes[typeName] = getExportedToken(internalTokenTypes[typeName]);\n  }\n  return tokenTypes;\n}\n\nexport const tokTypes = generateExportedTokenTypes(internalTokenTypes);\n\nfunction getParser(options: ?Options, input: string): Parser {\n  let cls = Parser;\n  if (options?.plugins) {\n    validatePlugins(options.plugins);\n    cls = getParserClass(options.plugins);\n  }\n\n  return new cls(options, input);\n}\n\nconst parserClassCache: { [key: string]: Class<Parser> } = {};\n\n/** Get a Parser class with plugins applied. */\nfunction getParserClass(pluginsFromOptions: PluginList): Class<Parser> {\n  const pluginList = mixinPluginNames.filter(name =>\n    hasPlugin(pluginsFromOptions, name),\n  );\n\n  const key = pluginList.join(\"/\");\n  let cls = parserClassCache[key];\n  if (!cls) {\n    cls = Parser;\n    for (const plugin of pluginList) {\n      cls = mixinPlugins[plugin](cls);\n    }\n    parserClassCache[key] = cls;\n  }\n  return cls;\n}\n"]},"metadata":{},"sourceType":"script"}