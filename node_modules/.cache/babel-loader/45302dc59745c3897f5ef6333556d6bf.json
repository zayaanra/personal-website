{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.ensure = ensure;\nexports.get = get;\nexports.getDependencies = getDependencies;\nexports.list = void 0;\nexports.minVersion = minVersion;\n\nvar _traverse = require(\"@babel/traverse\");\n\nvar _t = require(\"@babel/types\");\n\nvar _helpers = require(\"./helpers\");\n\nconst {\n  assignmentExpression,\n  cloneNode,\n  expressionStatement,\n  file: t_file,\n  identifier,\n  variableDeclaration,\n  variableDeclarator\n} = _t;\n\nfunction makePath(path) {\n  const parts = [];\n\n  for (; path.parentPath; path = path.parentPath) {\n    parts.push(path.key);\n    if (path.inList) parts.push(path.listKey);\n  }\n\n  return parts.reverse().join(\".\");\n}\n\nlet fileClass = undefined;\n\nfunction getHelperMetadata(file) {\n  const globals = new Set();\n  const localBindingNames = new Set();\n  const dependencies = new Map();\n  let exportName;\n  let exportPath;\n  const exportBindingAssignments = [];\n  const importPaths = [];\n  const importBindingsReferences = [];\n  const dependencyVisitor = {\n    ImportDeclaration(child) {\n      const name = child.node.source.value;\n\n      if (!_helpers.default[name]) {\n        throw child.buildCodeFrameError(`Unknown helper ${name}`);\n      }\n\n      if (child.get(\"specifiers\").length !== 1 || !child.get(\"specifiers.0\").isImportDefaultSpecifier()) {\n        throw child.buildCodeFrameError(\"Helpers can only import a default value\");\n      }\n\n      const bindingIdentifier = child.node.specifiers[0].local;\n      dependencies.set(bindingIdentifier, name);\n      importPaths.push(makePath(child));\n    },\n\n    ExportDefaultDeclaration(child) {\n      const decl = child.get(\"declaration\");\n\n      if (decl.isFunctionDeclaration()) {\n        if (!decl.node.id) {\n          throw decl.buildCodeFrameError(\"Helpers should give names to their exported func declaration\");\n        }\n\n        exportName = decl.node.id.name;\n      }\n\n      exportPath = makePath(child);\n    },\n\n    ExportAllDeclaration(child) {\n      throw child.buildCodeFrameError(\"Helpers can only export default\");\n    },\n\n    ExportNamedDeclaration(child) {\n      throw child.buildCodeFrameError(\"Helpers can only export default\");\n    },\n\n    Statement(child) {\n      if (child.isModuleDeclaration()) return;\n      child.skip();\n    }\n\n  };\n  const referenceVisitor = {\n    Program(path) {\n      const bindings = path.scope.getAllBindings();\n      Object.keys(bindings).forEach(name => {\n        if (name === exportName) return;\n        if (dependencies.has(bindings[name].identifier)) return;\n        localBindingNames.add(name);\n      });\n    },\n\n    ReferencedIdentifier(child) {\n      const name = child.node.name;\n      const binding = child.scope.getBinding(name);\n\n      if (!binding) {\n        globals.add(name);\n      } else if (dependencies.has(binding.identifier)) {\n        importBindingsReferences.push(makePath(child));\n      }\n    },\n\n    AssignmentExpression(child) {\n      const left = child.get(\"left\");\n      if (!(exportName in left.getBindingIdentifiers())) return;\n\n      if (!left.isIdentifier()) {\n        throw left.buildCodeFrameError(\"Only simple assignments to exports are allowed in helpers\");\n      }\n\n      const binding = child.scope.getBinding(exportName);\n\n      if (binding != null && binding.scope.path.isProgram()) {\n        exportBindingAssignments.push(makePath(child));\n      }\n    }\n\n  };\n  (0, _traverse.default)(file.ast, dependencyVisitor, file.scope);\n  (0, _traverse.default)(file.ast, referenceVisitor, file.scope);\n  if (!exportPath) throw new Error(\"Helpers must default-export something.\");\n  exportBindingAssignments.reverse();\n  return {\n    globals: Array.from(globals),\n    localBindingNames: Array.from(localBindingNames),\n    dependencies,\n    exportBindingAssignments,\n    exportPath,\n    exportName,\n    importBindingsReferences,\n    importPaths\n  };\n}\n\nfunction permuteHelperAST(file, metadata, id, localBindings, getDependency) {\n  if (localBindings && !id) {\n    throw new Error(\"Unexpected local bindings for module-based helpers.\");\n  }\n\n  if (!id) return;\n  const {\n    localBindingNames,\n    dependencies,\n    exportBindingAssignments,\n    exportPath,\n    exportName,\n    importBindingsReferences,\n    importPaths\n  } = metadata;\n  const dependenciesRefs = {};\n  dependencies.forEach((name, id) => {\n    dependenciesRefs[id.name] = typeof getDependency === \"function\" && getDependency(name) || id;\n  });\n  const toRename = {};\n  const bindings = new Set(localBindings || []);\n  localBindingNames.forEach(name => {\n    let newName = name;\n\n    while (bindings.has(newName)) newName = \"_\" + newName;\n\n    if (newName !== name) toRename[name] = newName;\n  });\n\n  if (id.type === \"Identifier\" && exportName !== id.name) {\n    toRename[exportName] = id.name;\n  }\n\n  const visitor = {\n    Program(path) {\n      const exp = path.get(exportPath);\n      const imps = importPaths.map(p => path.get(p));\n      const impsBindingRefs = importBindingsReferences.map(p => path.get(p));\n      const decl = exp.get(\"declaration\");\n\n      if (id.type === \"Identifier\") {\n        if (decl.isFunctionDeclaration()) {\n          exp.replaceWith(decl);\n        } else {\n          exp.replaceWith(variableDeclaration(\"var\", [variableDeclarator(id, decl.node)]));\n        }\n      } else if (id.type === \"MemberExpression\") {\n        if (decl.isFunctionDeclaration()) {\n          exportBindingAssignments.forEach(assignPath => {\n            const assign = path.get(assignPath);\n            assign.replaceWith(assignmentExpression(\"=\", id, assign.node));\n          });\n          exp.replaceWith(decl);\n          path.pushContainer(\"body\", expressionStatement(assignmentExpression(\"=\", id, identifier(exportName))));\n        } else {\n          exp.replaceWith(expressionStatement(assignmentExpression(\"=\", id, decl.node)));\n        }\n      } else {\n        throw new Error(\"Unexpected helper format.\");\n      }\n\n      Object.keys(toRename).forEach(name => {\n        path.scope.rename(name, toRename[name]);\n      });\n\n      for (const path of imps) path.remove();\n\n      for (const path of impsBindingRefs) {\n        const node = cloneNode(dependenciesRefs[path.node.name]);\n        path.replaceWith(node);\n      }\n\n      path.stop();\n    }\n\n  };\n  (0, _traverse.default)(file.ast, visitor, file.scope);\n}\n\nconst helperData = Object.create(null);\n\nfunction loadHelper(name) {\n  if (!helperData[name]) {\n    const helper = _helpers.default[name];\n\n    if (!helper) {\n      throw Object.assign(new ReferenceError(`Unknown helper ${name}`), {\n        code: \"BABEL_HELPER_UNKNOWN\",\n        helper: name\n      });\n    }\n\n    const fn = () => {\n      const file = {\n        ast: t_file(helper.ast())\n      };\n\n      if (fileClass) {\n        return new fileClass({\n          filename: `babel-helper://${name}`\n        }, file);\n      }\n\n      return file;\n    };\n\n    const metadata = getHelperMetadata(fn());\n    helperData[name] = {\n      build(getDependency, id, localBindings) {\n        const file = fn();\n        permuteHelperAST(file, metadata, id, localBindings, getDependency);\n        return {\n          nodes: file.ast.program.body,\n          globals: metadata.globals\n        };\n      },\n\n      minVersion() {\n        return helper.minVersion;\n      },\n\n      dependencies: metadata.dependencies\n    };\n  }\n\n  return helperData[name];\n}\n\nfunction get(name, getDependency, id, localBindings) {\n  return loadHelper(name).build(getDependency, id, localBindings);\n}\n\nfunction minVersion(name) {\n  return loadHelper(name).minVersion();\n}\n\nfunction getDependencies(name) {\n  return Array.from(loadHelper(name).dependencies.values());\n}\n\nfunction ensure(name, newFileClass) {\n  if (!fileClass) {\n    fileClass = newFileClass;\n  }\n\n  loadHelper(name);\n}\n\nconst list = Object.keys(_helpers.default).map(name => name.replace(/^_/, \"\"));\nexports.list = list;\nvar _default = get;\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/@babel/helpers/lib/index.js"],"names":["Object","defineProperty","exports","value","default","ensure","get","getDependencies","list","minVersion","_traverse","require","_t","_helpers","assignmentExpression","cloneNode","expressionStatement","file","t_file","identifier","variableDeclaration","variableDeclarator","makePath","path","parts","parentPath","push","key","inList","listKey","reverse","join","fileClass","undefined","getHelperMetadata","globals","Set","localBindingNames","dependencies","Map","exportName","exportPath","exportBindingAssignments","importPaths","importBindingsReferences","dependencyVisitor","ImportDeclaration","child","name","node","source","buildCodeFrameError","length","isImportDefaultSpecifier","bindingIdentifier","specifiers","local","set","ExportDefaultDeclaration","decl","isFunctionDeclaration","id","ExportAllDeclaration","ExportNamedDeclaration","Statement","isModuleDeclaration","skip","referenceVisitor","Program","bindings","scope","getAllBindings","keys","forEach","has","add","ReferencedIdentifier","binding","getBinding","AssignmentExpression","left","getBindingIdentifiers","isIdentifier","isProgram","ast","Error","Array","from","permuteHelperAST","metadata","localBindings","getDependency","dependenciesRefs","toRename","newName","type","visitor","exp","imps","map","p","impsBindingRefs","replaceWith","assignPath","assign","pushContainer","rename","remove","stop","helperData","create","loadHelper","helper","ReferenceError","code","fn","filename","build","nodes","program","body","values","newFileClass","replace","_default"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\nexports.ensure = ensure;\nexports.get = get;\nexports.getDependencies = getDependencies;\nexports.list = void 0;\nexports.minVersion = minVersion;\n\nvar _traverse = require(\"@babel/traverse\");\n\nvar _t = require(\"@babel/types\");\n\nvar _helpers = require(\"./helpers\");\n\nconst {\n  assignmentExpression,\n  cloneNode,\n  expressionStatement,\n  file: t_file,\n  identifier,\n  variableDeclaration,\n  variableDeclarator\n} = _t;\n\nfunction makePath(path) {\n  const parts = [];\n\n  for (; path.parentPath; path = path.parentPath) {\n    parts.push(path.key);\n    if (path.inList) parts.push(path.listKey);\n  }\n\n  return parts.reverse().join(\".\");\n}\n\nlet fileClass = undefined;\n\nfunction getHelperMetadata(file) {\n  const globals = new Set();\n  const localBindingNames = new Set();\n  const dependencies = new Map();\n  let exportName;\n  let exportPath;\n  const exportBindingAssignments = [];\n  const importPaths = [];\n  const importBindingsReferences = [];\n  const dependencyVisitor = {\n    ImportDeclaration(child) {\n      const name = child.node.source.value;\n\n      if (!_helpers.default[name]) {\n        throw child.buildCodeFrameError(`Unknown helper ${name}`);\n      }\n\n      if (child.get(\"specifiers\").length !== 1 || !child.get(\"specifiers.0\").isImportDefaultSpecifier()) {\n        throw child.buildCodeFrameError(\"Helpers can only import a default value\");\n      }\n\n      const bindingIdentifier = child.node.specifiers[0].local;\n      dependencies.set(bindingIdentifier, name);\n      importPaths.push(makePath(child));\n    },\n\n    ExportDefaultDeclaration(child) {\n      const decl = child.get(\"declaration\");\n\n      if (decl.isFunctionDeclaration()) {\n        if (!decl.node.id) {\n          throw decl.buildCodeFrameError(\"Helpers should give names to their exported func declaration\");\n        }\n\n        exportName = decl.node.id.name;\n      }\n\n      exportPath = makePath(child);\n    },\n\n    ExportAllDeclaration(child) {\n      throw child.buildCodeFrameError(\"Helpers can only export default\");\n    },\n\n    ExportNamedDeclaration(child) {\n      throw child.buildCodeFrameError(\"Helpers can only export default\");\n    },\n\n    Statement(child) {\n      if (child.isModuleDeclaration()) return;\n      child.skip();\n    }\n\n  };\n  const referenceVisitor = {\n    Program(path) {\n      const bindings = path.scope.getAllBindings();\n      Object.keys(bindings).forEach(name => {\n        if (name === exportName) return;\n        if (dependencies.has(bindings[name].identifier)) return;\n        localBindingNames.add(name);\n      });\n    },\n\n    ReferencedIdentifier(child) {\n      const name = child.node.name;\n      const binding = child.scope.getBinding(name);\n\n      if (!binding) {\n        globals.add(name);\n      } else if (dependencies.has(binding.identifier)) {\n        importBindingsReferences.push(makePath(child));\n      }\n    },\n\n    AssignmentExpression(child) {\n      const left = child.get(\"left\");\n      if (!(exportName in left.getBindingIdentifiers())) return;\n\n      if (!left.isIdentifier()) {\n        throw left.buildCodeFrameError(\"Only simple assignments to exports are allowed in helpers\");\n      }\n\n      const binding = child.scope.getBinding(exportName);\n\n      if (binding != null && binding.scope.path.isProgram()) {\n        exportBindingAssignments.push(makePath(child));\n      }\n    }\n\n  };\n  (0, _traverse.default)(file.ast, dependencyVisitor, file.scope);\n  (0, _traverse.default)(file.ast, referenceVisitor, file.scope);\n  if (!exportPath) throw new Error(\"Helpers must default-export something.\");\n  exportBindingAssignments.reverse();\n  return {\n    globals: Array.from(globals),\n    localBindingNames: Array.from(localBindingNames),\n    dependencies,\n    exportBindingAssignments,\n    exportPath,\n    exportName,\n    importBindingsReferences,\n    importPaths\n  };\n}\n\nfunction permuteHelperAST(file, metadata, id, localBindings, getDependency) {\n  if (localBindings && !id) {\n    throw new Error(\"Unexpected local bindings for module-based helpers.\");\n  }\n\n  if (!id) return;\n  const {\n    localBindingNames,\n    dependencies,\n    exportBindingAssignments,\n    exportPath,\n    exportName,\n    importBindingsReferences,\n    importPaths\n  } = metadata;\n  const dependenciesRefs = {};\n  dependencies.forEach((name, id) => {\n    dependenciesRefs[id.name] = typeof getDependency === \"function\" && getDependency(name) || id;\n  });\n  const toRename = {};\n  const bindings = new Set(localBindings || []);\n  localBindingNames.forEach(name => {\n    let newName = name;\n\n    while (bindings.has(newName)) newName = \"_\" + newName;\n\n    if (newName !== name) toRename[name] = newName;\n  });\n\n  if (id.type === \"Identifier\" && exportName !== id.name) {\n    toRename[exportName] = id.name;\n  }\n\n  const visitor = {\n    Program(path) {\n      const exp = path.get(exportPath);\n      const imps = importPaths.map(p => path.get(p));\n      const impsBindingRefs = importBindingsReferences.map(p => path.get(p));\n      const decl = exp.get(\"declaration\");\n\n      if (id.type === \"Identifier\") {\n        if (decl.isFunctionDeclaration()) {\n          exp.replaceWith(decl);\n        } else {\n          exp.replaceWith(variableDeclaration(\"var\", [variableDeclarator(id, decl.node)]));\n        }\n      } else if (id.type === \"MemberExpression\") {\n        if (decl.isFunctionDeclaration()) {\n          exportBindingAssignments.forEach(assignPath => {\n            const assign = path.get(assignPath);\n            assign.replaceWith(assignmentExpression(\"=\", id, assign.node));\n          });\n          exp.replaceWith(decl);\n          path.pushContainer(\"body\", expressionStatement(assignmentExpression(\"=\", id, identifier(exportName))));\n        } else {\n          exp.replaceWith(expressionStatement(assignmentExpression(\"=\", id, decl.node)));\n        }\n      } else {\n        throw new Error(\"Unexpected helper format.\");\n      }\n\n      Object.keys(toRename).forEach(name => {\n        path.scope.rename(name, toRename[name]);\n      });\n\n      for (const path of imps) path.remove();\n\n      for (const path of impsBindingRefs) {\n        const node = cloneNode(dependenciesRefs[path.node.name]);\n        path.replaceWith(node);\n      }\n\n      path.stop();\n    }\n\n  };\n  (0, _traverse.default)(file.ast, visitor, file.scope);\n}\n\nconst helperData = Object.create(null);\n\nfunction loadHelper(name) {\n  if (!helperData[name]) {\n    const helper = _helpers.default[name];\n\n    if (!helper) {\n      throw Object.assign(new ReferenceError(`Unknown helper ${name}`), {\n        code: \"BABEL_HELPER_UNKNOWN\",\n        helper: name\n      });\n    }\n\n    const fn = () => {\n      const file = {\n        ast: t_file(helper.ast())\n      };\n\n      if (fileClass) {\n        return new fileClass({\n          filename: `babel-helper://${name}`\n        }, file);\n      }\n\n      return file;\n    };\n\n    const metadata = getHelperMetadata(fn());\n    helperData[name] = {\n      build(getDependency, id, localBindings) {\n        const file = fn();\n        permuteHelperAST(file, metadata, id, localBindings, getDependency);\n        return {\n          nodes: file.ast.program.body,\n          globals: metadata.globals\n        };\n      },\n\n      minVersion() {\n        return helper.minVersion;\n      },\n\n      dependencies: metadata.dependencies\n    };\n  }\n\n  return helperData[name];\n}\n\nfunction get(name, getDependency, id, localBindings) {\n  return loadHelper(name).build(getDependency, id, localBindings);\n}\n\nfunction minVersion(name) {\n  return loadHelper(name).minVersion();\n}\n\nfunction getDependencies(name) {\n  return Array.from(loadHelper(name).dependencies.values());\n}\n\nfunction ensure(name, newFileClass) {\n  if (!fileClass) {\n    fileClass = newFileClass;\n  }\n\n  loadHelper(name);\n}\n\nconst list = Object.keys(_helpers.default).map(name => name.replace(/^_/, \"\"));\nexports.list = list;\nvar _default = get;\nexports.default = _default;"]},"metadata":{},"sourceType":"script"}