{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExportAllDeclaration = ExportAllDeclaration;\nexports.ExportDefaultDeclaration = ExportDefaultDeclaration;\nexports.ExportDefaultSpecifier = ExportDefaultSpecifier;\nexports.ExportNamedDeclaration = ExportNamedDeclaration;\nexports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;\nexports.ExportSpecifier = ExportSpecifier;\nexports.ImportAttribute = ImportAttribute;\nexports.ImportDeclaration = ImportDeclaration;\nexports.ImportDefaultSpecifier = ImportDefaultSpecifier;\nexports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\nexports.ImportSpecifier = ImportSpecifier;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  isClassDeclaration,\n  isExportDefaultSpecifier,\n  isExportNamespaceSpecifier,\n  isImportDefaultSpecifier,\n  isImportNamespaceSpecifier,\n  isStatement\n} = _t;\n\nfunction ImportSpecifier(node) {\n  if (node.importKind === \"type\" || node.importKind === \"typeof\") {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  this.print(node.imported, node);\n\n  if (node.local && node.local.name !== node.imported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.local, node);\n  }\n}\n\nfunction ImportDefaultSpecifier(node) {\n  this.print(node.local, node);\n}\n\nfunction ExportDefaultSpecifier(node) {\n  this.print(node.exported, node);\n}\n\nfunction ExportSpecifier(node) {\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n\n  this.print(node.local, node);\n\n  if (node.exported && node.local.name !== node.exported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.exported, node);\n  }\n}\n\nfunction ExportNamespaceSpecifier(node) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.exported, node);\n}\n\nfunction ExportAllDeclaration(node) {\n  this.word(\"export\");\n  this.space();\n\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n\n  this.token(\"*\");\n  this.space();\n  this.word(\"from\");\n  this.space();\n  this.print(node.source, node);\n  this.printAssertions(node);\n  this.semicolon();\n}\n\nfunction ExportNamedDeclaration(node) {\n  if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) {\n    this.printJoin(node.declaration.decorators, node);\n  }\n\n  this.word(\"export\");\n  this.space();\n  ExportDeclaration.apply(this, arguments);\n}\n\nfunction ExportDefaultDeclaration(node) {\n  if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) {\n    this.printJoin(node.declaration.decorators, node);\n  }\n\n  this.word(\"export\");\n  this.space();\n  this.word(\"default\");\n  this.space();\n  ExportDeclaration.apply(this, arguments);\n}\n\nfunction ExportDeclaration(node) {\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    if (node.exportKind === \"type\") {\n      this.word(\"type\");\n      this.space();\n    }\n\n    const specifiers = node.specifiers.slice(0);\n    let hasSpecial = false;\n\n    for (;;) {\n      const first = specifiers[0];\n\n      if (isExportDefaultSpecifier(first) || isExportNamespaceSpecifier(first)) {\n        hasSpecial = true;\n        this.print(specifiers.shift(), node);\n\n        if (specifiers.length) {\n          this.token(\",\");\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (specifiers.length || !specifiers.length && !hasSpecial) {\n      this.token(\"{\");\n\n      if (specifiers.length) {\n        this.space();\n        this.printList(specifiers, node);\n        this.space();\n      }\n\n      this.token(\"}\");\n    }\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      this.print(node.source, node);\n      this.printAssertions(node);\n    }\n\n    this.semicolon();\n  }\n}\n\nfunction ImportDeclaration(node) {\n  this.word(\"import\");\n  this.space();\n\n  if (node.importKind === \"type\" || node.importKind === \"typeof\") {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  const specifiers = node.specifiers.slice(0);\n\n  if (specifiers != null && specifiers.length) {\n    for (;;) {\n      const first = specifiers[0];\n\n      if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {\n        this.print(specifiers.shift(), node);\n\n        if (specifiers.length) {\n          this.token(\",\");\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (specifiers.length) {\n      this.token(\"{\");\n      this.space();\n      this.printList(specifiers, node);\n      this.space();\n      this.token(\"}\");\n    }\n\n    this.space();\n    this.word(\"from\");\n    this.space();\n  }\n\n  this.print(node.source, node);\n  this.printAssertions(node);\n  {\n    var _node$attributes;\n\n    if ((_node$attributes = node.attributes) != null && _node$attributes.length) {\n      this.space();\n      this.word(\"with\");\n      this.space();\n      this.printList(node.attributes, node);\n    }\n  }\n  this.semicolon();\n}\n\nfunction ImportAttribute(node) {\n  this.print(node.key);\n  this.token(\":\");\n  this.space();\n  this.print(node.value);\n}\n\nfunction ImportNamespaceSpecifier(node) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.local, node);\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/@babel/generator/lib/generators/modules.js"],"names":["Object","defineProperty","exports","value","ExportAllDeclaration","ExportDefaultDeclaration","ExportDefaultSpecifier","ExportNamedDeclaration","ExportNamespaceSpecifier","ExportSpecifier","ImportAttribute","ImportDeclaration","ImportDefaultSpecifier","ImportNamespaceSpecifier","ImportSpecifier","_t","require","isClassDeclaration","isExportDefaultSpecifier","isExportNamespaceSpecifier","isImportDefaultSpecifier","isImportNamespaceSpecifier","isStatement","node","importKind","word","space","print","imported","local","name","exported","exportKind","token","source","printAssertions","semicolon","format","decoratorsBeforeExport","declaration","printJoin","decorators","ExportDeclaration","apply","arguments","declar","specifiers","slice","hasSpecial","first","shift","length","printList","_node$attributes","attributes","key"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExportAllDeclaration = ExportAllDeclaration;\nexports.ExportDefaultDeclaration = ExportDefaultDeclaration;\nexports.ExportDefaultSpecifier = ExportDefaultSpecifier;\nexports.ExportNamedDeclaration = ExportNamedDeclaration;\nexports.ExportNamespaceSpecifier = ExportNamespaceSpecifier;\nexports.ExportSpecifier = ExportSpecifier;\nexports.ImportAttribute = ImportAttribute;\nexports.ImportDeclaration = ImportDeclaration;\nexports.ImportDefaultSpecifier = ImportDefaultSpecifier;\nexports.ImportNamespaceSpecifier = ImportNamespaceSpecifier;\nexports.ImportSpecifier = ImportSpecifier;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  isClassDeclaration,\n  isExportDefaultSpecifier,\n  isExportNamespaceSpecifier,\n  isImportDefaultSpecifier,\n  isImportNamespaceSpecifier,\n  isStatement\n} = _t;\n\nfunction ImportSpecifier(node) {\n  if (node.importKind === \"type\" || node.importKind === \"typeof\") {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  this.print(node.imported, node);\n\n  if (node.local && node.local.name !== node.imported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.local, node);\n  }\n}\n\nfunction ImportDefaultSpecifier(node) {\n  this.print(node.local, node);\n}\n\nfunction ExportDefaultSpecifier(node) {\n  this.print(node.exported, node);\n}\n\nfunction ExportSpecifier(node) {\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n\n  this.print(node.local, node);\n\n  if (node.exported && node.local.name !== node.exported.name) {\n    this.space();\n    this.word(\"as\");\n    this.space();\n    this.print(node.exported, node);\n  }\n}\n\nfunction ExportNamespaceSpecifier(node) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.exported, node);\n}\n\nfunction ExportAllDeclaration(node) {\n  this.word(\"export\");\n  this.space();\n\n  if (node.exportKind === \"type\") {\n    this.word(\"type\");\n    this.space();\n  }\n\n  this.token(\"*\");\n  this.space();\n  this.word(\"from\");\n  this.space();\n  this.print(node.source, node);\n  this.printAssertions(node);\n  this.semicolon();\n}\n\nfunction ExportNamedDeclaration(node) {\n  if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) {\n    this.printJoin(node.declaration.decorators, node);\n  }\n\n  this.word(\"export\");\n  this.space();\n  ExportDeclaration.apply(this, arguments);\n}\n\nfunction ExportDefaultDeclaration(node) {\n  if (this.format.decoratorsBeforeExport && isClassDeclaration(node.declaration)) {\n    this.printJoin(node.declaration.decorators, node);\n  }\n\n  this.word(\"export\");\n  this.space();\n  this.word(\"default\");\n  this.space();\n  ExportDeclaration.apply(this, arguments);\n}\n\nfunction ExportDeclaration(node) {\n  if (node.declaration) {\n    const declar = node.declaration;\n    this.print(declar, node);\n    if (!isStatement(declar)) this.semicolon();\n  } else {\n    if (node.exportKind === \"type\") {\n      this.word(\"type\");\n      this.space();\n    }\n\n    const specifiers = node.specifiers.slice(0);\n    let hasSpecial = false;\n\n    for (;;) {\n      const first = specifiers[0];\n\n      if (isExportDefaultSpecifier(first) || isExportNamespaceSpecifier(first)) {\n        hasSpecial = true;\n        this.print(specifiers.shift(), node);\n\n        if (specifiers.length) {\n          this.token(\",\");\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (specifiers.length || !specifiers.length && !hasSpecial) {\n      this.token(\"{\");\n\n      if (specifiers.length) {\n        this.space();\n        this.printList(specifiers, node);\n        this.space();\n      }\n\n      this.token(\"}\");\n    }\n\n    if (node.source) {\n      this.space();\n      this.word(\"from\");\n      this.space();\n      this.print(node.source, node);\n      this.printAssertions(node);\n    }\n\n    this.semicolon();\n  }\n}\n\nfunction ImportDeclaration(node) {\n  this.word(\"import\");\n  this.space();\n\n  if (node.importKind === \"type\" || node.importKind === \"typeof\") {\n    this.word(node.importKind);\n    this.space();\n  }\n\n  const specifiers = node.specifiers.slice(0);\n\n  if (specifiers != null && specifiers.length) {\n    for (;;) {\n      const first = specifiers[0];\n\n      if (isImportDefaultSpecifier(first) || isImportNamespaceSpecifier(first)) {\n        this.print(specifiers.shift(), node);\n\n        if (specifiers.length) {\n          this.token(\",\");\n          this.space();\n        }\n      } else {\n        break;\n      }\n    }\n\n    if (specifiers.length) {\n      this.token(\"{\");\n      this.space();\n      this.printList(specifiers, node);\n      this.space();\n      this.token(\"}\");\n    }\n\n    this.space();\n    this.word(\"from\");\n    this.space();\n  }\n\n  this.print(node.source, node);\n  this.printAssertions(node);\n  {\n    var _node$attributes;\n\n    if ((_node$attributes = node.attributes) != null && _node$attributes.length) {\n      this.space();\n      this.word(\"with\");\n      this.space();\n      this.printList(node.attributes, node);\n    }\n  }\n  this.semicolon();\n}\n\nfunction ImportAttribute(node) {\n  this.print(node.key);\n  this.token(\":\");\n  this.space();\n  this.print(node.value);\n}\n\nfunction ImportNamespaceSpecifier(node) {\n  this.token(\"*\");\n  this.space();\n  this.word(\"as\");\n  this.space();\n  this.print(node.local, node);\n}"]},"metadata":{},"sourceType":"script"}