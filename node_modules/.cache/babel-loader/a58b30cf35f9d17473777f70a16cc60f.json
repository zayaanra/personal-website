{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _assert = require(\"assert\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  identifier,\n  importDeclaration,\n  importDefaultSpecifier,\n  importNamespaceSpecifier,\n  importSpecifier,\n  memberExpression,\n  stringLiteral,\n  variableDeclaration,\n  variableDeclarator\n} = _t;\n\nclass ImportBuilder {\n  constructor(importedSource, scope, hub) {\n    this._statements = [];\n    this._resultName = null;\n    this._scope = null;\n    this._hub = null;\n    this._importedSource = void 0;\n    this._scope = scope;\n    this._hub = hub;\n    this._importedSource = importedSource;\n  }\n\n  done() {\n    return {\n      statements: this._statements,\n      resultName: this._resultName\n    };\n  }\n\n  import() {\n    this._statements.push(importDeclaration([], stringLiteral(this._importedSource)));\n\n    return this;\n  }\n\n  require() {\n    this._statements.push(expressionStatement(callExpression(identifier(\"require\"), [stringLiteral(this._importedSource)])));\n\n    return this;\n  }\n\n  namespace() {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"namespace\";\n\n    const local = this._scope.generateUidIdentifier(name);\n\n    const statement = this._statements[this._statements.length - 1];\n\n    _assert(statement.type === \"ImportDeclaration\");\n\n    _assert(statement.specifiers.length === 0);\n\n    statement.specifiers = [importNamespaceSpecifier(local)];\n    this._resultName = cloneNode(local);\n    return this;\n  }\n\n  default(name) {\n    name = this._scope.generateUidIdentifier(name);\n    const statement = this._statements[this._statements.length - 1];\n\n    _assert(statement.type === \"ImportDeclaration\");\n\n    _assert(statement.specifiers.length === 0);\n\n    statement.specifiers = [importDefaultSpecifier(name)];\n    this._resultName = cloneNode(name);\n    return this;\n  }\n\n  named(name, importName) {\n    if (importName === \"default\") return this.default(name);\n    name = this._scope.generateUidIdentifier(name);\n    const statement = this._statements[this._statements.length - 1];\n\n    _assert(statement.type === \"ImportDeclaration\");\n\n    _assert(statement.specifiers.length === 0);\n\n    statement.specifiers = [importSpecifier(name, identifier(importName))];\n    this._resultName = cloneNode(name);\n    return this;\n  }\n\n  var(name) {\n    name = this._scope.generateUidIdentifier(name);\n    let statement = this._statements[this._statements.length - 1];\n\n    if (statement.type !== \"ExpressionStatement\") {\n      _assert(this._resultName);\n\n      statement = expressionStatement(this._resultName);\n\n      this._statements.push(statement);\n    }\n\n    this._statements[this._statements.length - 1] = variableDeclaration(\"var\", [variableDeclarator(name, statement.expression)]);\n    this._resultName = cloneNode(name);\n    return this;\n  }\n\n  defaultInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireDefault\"));\n  }\n\n  wildcardInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireWildcard\"));\n  }\n\n  _interop(callee) {\n    const statement = this._statements[this._statements.length - 1];\n\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = callExpression(callee, [statement.expression]);\n    } else if (statement.type === \"VariableDeclaration\") {\n      _assert(statement.declarations.length === 1);\n\n      statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init]);\n    } else {\n      _assert.fail(\"Unexpected type.\");\n    }\n\n    return this;\n  }\n\n  prop(name) {\n    const statement = this._statements[this._statements.length - 1];\n\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = memberExpression(statement.expression, identifier(name));\n    } else if (statement.type === \"VariableDeclaration\") {\n      _assert(statement.declarations.length === 1);\n\n      statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name));\n    } else {\n      _assert.fail(\"Unexpected type:\" + statement.type);\n    }\n\n    return this;\n  }\n\n  read(name) {\n    this._resultName = memberExpression(this._resultName, identifier(name));\n  }\n\n}\n\nexports.default = ImportBuilder;","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/@babel/helper-module-imports/lib/import-builder.js"],"names":["Object","defineProperty","exports","value","default","_assert","require","_t","callExpression","cloneNode","expressionStatement","identifier","importDeclaration","importDefaultSpecifier","importNamespaceSpecifier","importSpecifier","memberExpression","stringLiteral","variableDeclaration","variableDeclarator","ImportBuilder","constructor","importedSource","scope","hub","_statements","_resultName","_scope","_hub","_importedSource","done","statements","resultName","import","push","namespace","name","local","generateUidIdentifier","statement","length","type","specifiers","named","importName","var","expression","defaultInterop","_interop","addHelper","wildcardInterop","callee","declarations","init","fail","prop","read"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _assert = require(\"assert\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  callExpression,\n  cloneNode,\n  expressionStatement,\n  identifier,\n  importDeclaration,\n  importDefaultSpecifier,\n  importNamespaceSpecifier,\n  importSpecifier,\n  memberExpression,\n  stringLiteral,\n  variableDeclaration,\n  variableDeclarator\n} = _t;\n\nclass ImportBuilder {\n  constructor(importedSource, scope, hub) {\n    this._statements = [];\n    this._resultName = null;\n    this._scope = null;\n    this._hub = null;\n    this._importedSource = void 0;\n    this._scope = scope;\n    this._hub = hub;\n    this._importedSource = importedSource;\n  }\n\n  done() {\n    return {\n      statements: this._statements,\n      resultName: this._resultName\n    };\n  }\n\n  import() {\n    this._statements.push(importDeclaration([], stringLiteral(this._importedSource)));\n\n    return this;\n  }\n\n  require() {\n    this._statements.push(expressionStatement(callExpression(identifier(\"require\"), [stringLiteral(this._importedSource)])));\n\n    return this;\n  }\n\n  namespace(name = \"namespace\") {\n    const local = this._scope.generateUidIdentifier(name);\n\n    const statement = this._statements[this._statements.length - 1];\n\n    _assert(statement.type === \"ImportDeclaration\");\n\n    _assert(statement.specifiers.length === 0);\n\n    statement.specifiers = [importNamespaceSpecifier(local)];\n    this._resultName = cloneNode(local);\n    return this;\n  }\n\n  default(name) {\n    name = this._scope.generateUidIdentifier(name);\n    const statement = this._statements[this._statements.length - 1];\n\n    _assert(statement.type === \"ImportDeclaration\");\n\n    _assert(statement.specifiers.length === 0);\n\n    statement.specifiers = [importDefaultSpecifier(name)];\n    this._resultName = cloneNode(name);\n    return this;\n  }\n\n  named(name, importName) {\n    if (importName === \"default\") return this.default(name);\n    name = this._scope.generateUidIdentifier(name);\n    const statement = this._statements[this._statements.length - 1];\n\n    _assert(statement.type === \"ImportDeclaration\");\n\n    _assert(statement.specifiers.length === 0);\n\n    statement.specifiers = [importSpecifier(name, identifier(importName))];\n    this._resultName = cloneNode(name);\n    return this;\n  }\n\n  var(name) {\n    name = this._scope.generateUidIdentifier(name);\n    let statement = this._statements[this._statements.length - 1];\n\n    if (statement.type !== \"ExpressionStatement\") {\n      _assert(this._resultName);\n\n      statement = expressionStatement(this._resultName);\n\n      this._statements.push(statement);\n    }\n\n    this._statements[this._statements.length - 1] = variableDeclaration(\"var\", [variableDeclarator(name, statement.expression)]);\n    this._resultName = cloneNode(name);\n    return this;\n  }\n\n  defaultInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireDefault\"));\n  }\n\n  wildcardInterop() {\n    return this._interop(this._hub.addHelper(\"interopRequireWildcard\"));\n  }\n\n  _interop(callee) {\n    const statement = this._statements[this._statements.length - 1];\n\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = callExpression(callee, [statement.expression]);\n    } else if (statement.type === \"VariableDeclaration\") {\n      _assert(statement.declarations.length === 1);\n\n      statement.declarations[0].init = callExpression(callee, [statement.declarations[0].init]);\n    } else {\n      _assert.fail(\"Unexpected type.\");\n    }\n\n    return this;\n  }\n\n  prop(name) {\n    const statement = this._statements[this._statements.length - 1];\n\n    if (statement.type === \"ExpressionStatement\") {\n      statement.expression = memberExpression(statement.expression, identifier(name));\n    } else if (statement.type === \"VariableDeclaration\") {\n      _assert(statement.declarations.length === 1);\n\n      statement.declarations[0].init = memberExpression(statement.declarations[0].init, identifier(name));\n    } else {\n      _assert.fail(\"Unexpected type:\" + statement.type);\n    }\n\n    return this;\n  }\n\n  read(name) {\n    this._resultName = memberExpression(this._resultName, identifier(name));\n  }\n\n}\n\nexports.default = ImportBuilder;"]},"metadata":{},"sourceType":"script"}