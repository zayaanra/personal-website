{"ast":null,"code":"import { processColor } from './Colors';\nimport { makeShareable, isConfigured } from './core';\nimport { _updatePropsJS } from './js-reanimated';\nimport { shouldBeUseWeb } from './PlatformChecker'; // copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\n\nexport const colorProps = ['backgroundColor', 'borderBottomColor', 'borderColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor', 'borderStartColor', 'borderEndColor', 'color', 'shadowColor', 'textDecorationColor', 'tintColor', 'textShadowColor', 'overlayColor'];\nexport const ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\nlet updatePropsByPlatform;\n\nif (shouldBeUseWeb()) {\n  updatePropsByPlatform = (_, updates, maybeViewRef) => {\n    'worklet';\n\n    if (maybeViewRef) {\n      maybeViewRef.items.forEach((item, _) => {\n        _updatePropsJS(updates, item);\n      });\n    }\n  };\n} else {\n  updatePropsByPlatform = (viewDescriptors, updates, _) => {\n    'worklet';\n\n    for (const key in updates) {\n      if (ColorProperties.indexOf(key) !== -1) {\n        updates[key] = processColor(updates[key]);\n      }\n    }\n\n    viewDescriptors.value.forEach(viewDescriptor => {\n      _updateProps(viewDescriptor.tag, viewDescriptor.name || 'RCTView', updates);\n    });\n  };\n}\n\nexport const updateProps = updatePropsByPlatform;\nexport const updatePropsJestWrapper = (viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) => {\n  adapters.forEach(adapter => {\n    adapter(updates);\n  });\n  animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);\n  updateProps(viewDescriptors, updates, maybeViewRef);\n};\nexport default updateProps;","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js"],"names":["processColor","makeShareable","isConfigured","_updatePropsJS","shouldBeUseWeb","colorProps","ColorProperties","updatePropsByPlatform","_","updates","maybeViewRef","items","forEach","item","viewDescriptors","key","indexOf","value","viewDescriptor","_updateProps","tag","name","updateProps","updatePropsJestWrapper","animatedStyle","adapters","adapter","current","Object","assign"],"mappings":"AAAA,SAASA,YAAT,QAA6B,UAA7B;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,QAA5C;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,SAASC,cAAT,QAA+B,mBAA/B,C,CACA;;AACA,OAAO,MAAMC,UAAU,GAAG,CACtB,iBADsB,EAEtB,mBAFsB,EAGtB,aAHsB,EAItB,iBAJsB,EAKtB,kBALsB,EAMtB,gBANsB,EAOtB,kBAPsB,EAQtB,gBARsB,EAStB,OATsB,EAUtB,aAVsB,EAWtB,qBAXsB,EAYtB,WAZsB,EAatB,iBAbsB,EActB,cAdsB,CAAnB;AAgBP,OAAO,MAAMC,eAAe,GAAG,CAACJ,YAAY,EAAb,GAAkB,EAAlB,GAAuBD,aAAa,CAACI,UAAD,CAA5D;AACP,IAAIE,qBAAJ;;AACA,IAAIH,cAAc,EAAlB,EAAsB;AAClBG,EAAAA,qBAAqB,GAAG,CAACC,CAAD,EAAIC,OAAJ,EAAaC,YAAb,KAA8B;AAClD;;AACA,QAAIA,YAAJ,EAAkB;AACdA,MAAAA,YAAY,CAACC,KAAb,CAAmBC,OAAnB,CAA2B,CAACC,IAAD,EAAOL,CAAP,KAAa;AACpCL,QAAAA,cAAc,CAACM,OAAD,EAAUI,IAAV,CAAd;AACH,OAFD;AAGH;AACJ,GAPD;AAQH,CATD,MAUK;AACDN,EAAAA,qBAAqB,GAAG,CAACO,eAAD,EAAkBL,OAAlB,EAA2BD,CAA3B,KAAiC;AACrD;;AACA,SAAK,MAAMO,GAAX,IAAkBN,OAAlB,EAA2B;AACvB,UAAIH,eAAe,CAACU,OAAhB,CAAwBD,GAAxB,MAAiC,CAAC,CAAtC,EAAyC;AACrCN,QAAAA,OAAO,CAACM,GAAD,CAAP,GAAef,YAAY,CAACS,OAAO,CAACM,GAAD,CAAR,CAA3B;AACH;AACJ;;AACDD,IAAAA,eAAe,CAACG,KAAhB,CAAsBL,OAAtB,CAA+BM,cAAD,IAAoB;AAC9CC,MAAAA,YAAY,CAACD,cAAc,CAACE,GAAhB,EAAqBF,cAAc,CAACG,IAAf,IAAuB,SAA5C,EAAuDZ,OAAvD,CAAZ;AACH,KAFD;AAGH,GAVD;AAWH;;AACD,OAAO,MAAMa,WAAW,GAAGf,qBAApB;AACP,OAAO,MAAMgB,sBAAsB,GAAG,CAACT,eAAD,EAAkBL,OAAlB,EAA2BC,YAA3B,EAAyCc,aAAzC,EAAwDC,QAAxD,KAAqE;AACvGA,EAAAA,QAAQ,CAACb,OAAT,CAAkBc,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACjB,OAAD,CAAP;AACH,GAFD;AAGAe,EAAAA,aAAa,CAACG,OAAd,CAAsBV,KAAtB,GAA8BW,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBL,aAAa,CAACG,OAAd,CAAsBV,KAAxC,CAAd,EAA8DR,OAA9D,CAA9B;AACAa,EAAAA,WAAW,CAACR,eAAD,EAAkBL,OAAlB,EAA2BC,YAA3B,CAAX;AACH,CANM;AAOP,eAAeY,WAAf","sourcesContent":["import { processColor } from './Colors';\nimport { makeShareable, isConfigured } from './core';\nimport { _updatePropsJS } from './js-reanimated';\nimport { shouldBeUseWeb } from './PlatformChecker';\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\nexport const colorProps = [\n    'backgroundColor',\n    'borderBottomColor',\n    'borderColor',\n    'borderLeftColor',\n    'borderRightColor',\n    'borderTopColor',\n    'borderStartColor',\n    'borderEndColor',\n    'color',\n    'shadowColor',\n    'textDecorationColor',\n    'tintColor',\n    'textShadowColor',\n    'overlayColor',\n];\nexport const ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\nlet updatePropsByPlatform;\nif (shouldBeUseWeb()) {\n    updatePropsByPlatform = (_, updates, maybeViewRef) => {\n        'worklet';\n        if (maybeViewRef) {\n            maybeViewRef.items.forEach((item, _) => {\n                _updatePropsJS(updates, item);\n            });\n        }\n    };\n}\nelse {\n    updatePropsByPlatform = (viewDescriptors, updates, _) => {\n        'worklet';\n        for (const key in updates) {\n            if (ColorProperties.indexOf(key) !== -1) {\n                updates[key] = processColor(updates[key]);\n            }\n        }\n        viewDescriptors.value.forEach((viewDescriptor) => {\n            _updateProps(viewDescriptor.tag, viewDescriptor.name || 'RCTView', updates);\n        });\n    };\n}\nexport const updateProps = updatePropsByPlatform;\nexport const updatePropsJestWrapper = (viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) => {\n    adapters.forEach((adapter) => {\n        adapter(updates);\n    });\n    animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);\n    updateProps(viewDescriptors, updates, maybeViewRef);\n};\nexport default updateProps;\n"]},"metadata":{},"sourceType":"module"}