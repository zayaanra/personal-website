{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._getTypeAnnotation = _getTypeAnnotation;\nexports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nexports.couldBeBaseType = couldBeBaseType;\nexports.getTypeAnnotation = getTypeAnnotation;\nexports.isBaseType = isBaseType;\nexports.isGenericType = isGenericType;\n\nvar inferers = require(\"./inferers\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  anyTypeAnnotation,\n  isAnyTypeAnnotation,\n  isBooleanTypeAnnotation,\n  isEmptyTypeAnnotation,\n  isFlowBaseAnnotation,\n  isGenericTypeAnnotation,\n  isIdentifier,\n  isMixedTypeAnnotation,\n  isNumberTypeAnnotation,\n  isStringTypeAnnotation,\n  isTypeAnnotation,\n  isUnionTypeAnnotation,\n  isVoidTypeAnnotation,\n  stringTypeAnnotation,\n  voidTypeAnnotation\n} = _t;\n\nfunction getTypeAnnotation() {\n  if (this.typeAnnotation) return this.typeAnnotation;\n  let type = this._getTypeAnnotation() || anyTypeAnnotation();\n  if (isTypeAnnotation(type)) type = type.typeAnnotation;\n  return this.typeAnnotation = type;\n}\n\nconst typeAnnotationInferringNodes = new WeakSet();\n\nfunction _getTypeAnnotation() {\n  const node = this.node;\n\n  if (!node) {\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      const declar = this.parentPath.parentPath;\n      const declarParent = declar.parentPath;\n\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return stringTypeAnnotation();\n      }\n\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return anyTypeAnnotation();\n      }\n\n      return voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n\n  if (typeAnnotationInferringNodes.has(node)) {\n    return;\n  }\n\n  typeAnnotationInferringNodes.add(node);\n\n  try {\n    var _inferer;\n\n    let inferer = inferers[node.type];\n\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n\n    inferer = inferers[this.parentPath.type];\n\n    if ((_inferer = inferer) != null && _inferer.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\n\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === \"string\") {\n    return isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(`Unknown base type ${baseName}`);\n    }\n  }\n}\n\nfunction couldBeBaseType(name) {\n  const type = this.getTypeAnnotation();\n  if (isAnyTypeAnnotation(type)) return true;\n\n  if (isUnionTypeAnnotation(type)) {\n    for (const type2 of type.types) {\n      if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\nfunction baseTypeStrictlyMatches(rightArg) {\n  const left = this.getTypeAnnotation();\n  const right = rightArg.getTypeAnnotation();\n\n  if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n\n  return false;\n}\n\nfunction isGenericType(genericName) {\n  const type = this.getTypeAnnotation();\n  return isGenericTypeAnnotation(type) && isIdentifier(type.id, {\n    name: genericName\n  });\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/@babel/traverse/lib/path/inference/index.js"],"names":["Object","defineProperty","exports","value","_getTypeAnnotation","baseTypeStrictlyMatches","couldBeBaseType","getTypeAnnotation","isBaseType","isGenericType","inferers","require","_t","anyTypeAnnotation","isAnyTypeAnnotation","isBooleanTypeAnnotation","isEmptyTypeAnnotation","isFlowBaseAnnotation","isGenericTypeAnnotation","isIdentifier","isMixedTypeAnnotation","isNumberTypeAnnotation","isStringTypeAnnotation","isTypeAnnotation","isUnionTypeAnnotation","isVoidTypeAnnotation","stringTypeAnnotation","voidTypeAnnotation","typeAnnotation","type","typeAnnotationInferringNodes","WeakSet","node","key","parentPath","isVariableDeclarator","declar","declarParent","isForInStatement","isForOfStatement","has","add","_inferer","inferer","call","validParent","delete","baseName","soft","_isBaseType","Error","name","type2","types","rightArg","left","right","genericName","id"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports._getTypeAnnotation = _getTypeAnnotation;\nexports.baseTypeStrictlyMatches = baseTypeStrictlyMatches;\nexports.couldBeBaseType = couldBeBaseType;\nexports.getTypeAnnotation = getTypeAnnotation;\nexports.isBaseType = isBaseType;\nexports.isGenericType = isGenericType;\n\nvar inferers = require(\"./inferers\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  anyTypeAnnotation,\n  isAnyTypeAnnotation,\n  isBooleanTypeAnnotation,\n  isEmptyTypeAnnotation,\n  isFlowBaseAnnotation,\n  isGenericTypeAnnotation,\n  isIdentifier,\n  isMixedTypeAnnotation,\n  isNumberTypeAnnotation,\n  isStringTypeAnnotation,\n  isTypeAnnotation,\n  isUnionTypeAnnotation,\n  isVoidTypeAnnotation,\n  stringTypeAnnotation,\n  voidTypeAnnotation\n} = _t;\n\nfunction getTypeAnnotation() {\n  if (this.typeAnnotation) return this.typeAnnotation;\n  let type = this._getTypeAnnotation() || anyTypeAnnotation();\n  if (isTypeAnnotation(type)) type = type.typeAnnotation;\n  return this.typeAnnotation = type;\n}\n\nconst typeAnnotationInferringNodes = new WeakSet();\n\nfunction _getTypeAnnotation() {\n  const node = this.node;\n\n  if (!node) {\n    if (this.key === \"init\" && this.parentPath.isVariableDeclarator()) {\n      const declar = this.parentPath.parentPath;\n      const declarParent = declar.parentPath;\n\n      if (declar.key === \"left\" && declarParent.isForInStatement()) {\n        return stringTypeAnnotation();\n      }\n\n      if (declar.key === \"left\" && declarParent.isForOfStatement()) {\n        return anyTypeAnnotation();\n      }\n\n      return voidTypeAnnotation();\n    } else {\n      return;\n    }\n  }\n\n  if (node.typeAnnotation) {\n    return node.typeAnnotation;\n  }\n\n  if (typeAnnotationInferringNodes.has(node)) {\n    return;\n  }\n\n  typeAnnotationInferringNodes.add(node);\n\n  try {\n    var _inferer;\n\n    let inferer = inferers[node.type];\n\n    if (inferer) {\n      return inferer.call(this, node);\n    }\n\n    inferer = inferers[this.parentPath.type];\n\n    if ((_inferer = inferer) != null && _inferer.validParent) {\n      return this.parentPath.getTypeAnnotation();\n    }\n  } finally {\n    typeAnnotationInferringNodes.delete(node);\n  }\n}\n\nfunction isBaseType(baseName, soft) {\n  return _isBaseType(baseName, this.getTypeAnnotation(), soft);\n}\n\nfunction _isBaseType(baseName, type, soft) {\n  if (baseName === \"string\") {\n    return isStringTypeAnnotation(type);\n  } else if (baseName === \"number\") {\n    return isNumberTypeAnnotation(type);\n  } else if (baseName === \"boolean\") {\n    return isBooleanTypeAnnotation(type);\n  } else if (baseName === \"any\") {\n    return isAnyTypeAnnotation(type);\n  } else if (baseName === \"mixed\") {\n    return isMixedTypeAnnotation(type);\n  } else if (baseName === \"empty\") {\n    return isEmptyTypeAnnotation(type);\n  } else if (baseName === \"void\") {\n    return isVoidTypeAnnotation(type);\n  } else {\n    if (soft) {\n      return false;\n    } else {\n      throw new Error(`Unknown base type ${baseName}`);\n    }\n  }\n}\n\nfunction couldBeBaseType(name) {\n  const type = this.getTypeAnnotation();\n  if (isAnyTypeAnnotation(type)) return true;\n\n  if (isUnionTypeAnnotation(type)) {\n    for (const type2 of type.types) {\n      if (isAnyTypeAnnotation(type2) || _isBaseType(name, type2, true)) {\n        return true;\n      }\n    }\n\n    return false;\n  } else {\n    return _isBaseType(name, type, true);\n  }\n}\n\nfunction baseTypeStrictlyMatches(rightArg) {\n  const left = this.getTypeAnnotation();\n  const right = rightArg.getTypeAnnotation();\n\n  if (!isAnyTypeAnnotation(left) && isFlowBaseAnnotation(left)) {\n    return right.type === left.type;\n  }\n\n  return false;\n}\n\nfunction isGenericType(genericName) {\n  const type = this.getTypeAnnotation();\n  return isGenericTypeAnnotation(type) && isIdentifier(type.id, {\n    name: genericName\n  });\n}"]},"metadata":{},"sourceType":"script"}