{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = pathToPattern;\n\nfunction _path() {\n  const data = require(\"path\");\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nconst sep = `\\\\${_path().sep}`;\nconst endSep = `(?:${sep}|$)`;\nconst substitution = `[^${sep}]+`;\nconst starPat = `(?:${substitution}${sep})`;\nconst starPatLast = `(?:${substitution}${endSep})`;\nconst starStarPat = `${starPat}*?`;\nconst starStarPatLast = `${starPat}*?${starPatLast}?`;\n\nfunction escapeRegExp(string) {\n  return string.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n}\n\nfunction pathToPattern(pattern, dirname) {\n  const parts = _path().resolve(dirname, pattern).split(_path().sep);\n\n  return new RegExp([\"^\", ...parts.map((part, i) => {\n    const last = i === parts.length - 1;\n    if (part === \"**\") return last ? starStarPatLast : starStarPat;\n    if (part === \"*\") return last ? starPatLast : starPat;\n\n    if (part.indexOf(\"*.\") === 0) {\n      return substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep);\n    }\n\n    return escapeRegExp(part) + (last ? endSep : sep);\n  })].join(\"\"));\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/@babel/core/lib/config/pattern-to-regex.js"],"names":["Object","defineProperty","exports","value","default","pathToPattern","_path","data","require","sep","endSep","substitution","starPat","starPatLast","starStarPat","starStarPatLast","escapeRegExp","string","replace","pattern","dirname","parts","resolve","split","RegExp","map","part","i","last","length","indexOf","slice","join"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,aAAlB;;AAEA,SAASC,KAAT,GAAiB;AACf,QAAMC,IAAI,GAAGC,OAAO,CAAC,MAAD,CAApB;;AAEAF,EAAAA,KAAK,GAAG,YAAY;AAClB,WAAOC,IAAP;AACD,GAFD;;AAIA,SAAOA,IAAP;AACD;;AAED,MAAME,GAAG,GAAI,KAAIH,KAAK,GAAGG,GAAI,EAA7B;AACA,MAAMC,MAAM,GAAI,MAAKD,GAAI,KAAzB;AACA,MAAME,YAAY,GAAI,KAAIF,GAAI,IAA9B;AACA,MAAMG,OAAO,GAAI,MAAKD,YAAa,GAAEF,GAAI,GAAzC;AACA,MAAMI,WAAW,GAAI,MAAKF,YAAa,GAAED,MAAO,GAAhD;AACA,MAAMI,WAAW,GAAI,GAAEF,OAAQ,IAA/B;AACA,MAAMG,eAAe,GAAI,GAAEH,OAAQ,KAAIC,WAAY,GAAnD;;AAEA,SAASG,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,SAAOA,MAAM,CAACC,OAAP,CAAe,qBAAf,EAAsC,MAAtC,CAAP;AACD;;AAED,SAASb,aAAT,CAAuBc,OAAvB,EAAgCC,OAAhC,EAAyC;AACvC,QAAMC,KAAK,GAAGf,KAAK,GAAGgB,OAAR,CAAgBF,OAAhB,EAAyBD,OAAzB,EAAkCI,KAAlC,CAAwCjB,KAAK,GAAGG,GAAhD,CAAd;;AAEA,SAAO,IAAIe,MAAJ,CAAW,CAAC,GAAD,EAAM,GAAGH,KAAK,CAACI,GAAN,CAAU,CAACC,IAAD,EAAOC,CAAP,KAAa;AAChD,UAAMC,IAAI,GAAGD,CAAC,KAAKN,KAAK,CAACQ,MAAN,GAAe,CAAlC;AACA,QAAIH,IAAI,KAAK,IAAb,EAAmB,OAAOE,IAAI,GAAGb,eAAH,GAAqBD,WAAhC;AACnB,QAAIY,IAAI,KAAK,GAAb,EAAkB,OAAOE,IAAI,GAAGf,WAAH,GAAiBD,OAA5B;;AAElB,QAAIc,IAAI,CAACI,OAAL,CAAa,IAAb,MAAuB,CAA3B,EAA8B;AAC5B,aAAOnB,YAAY,GAAGK,YAAY,CAACU,IAAI,CAACK,KAAL,CAAW,CAAX,CAAD,CAA3B,IAA8CH,IAAI,GAAGlB,MAAH,GAAYD,GAA9D,CAAP;AACD;;AAED,WAAOO,YAAY,CAACU,IAAD,CAAZ,IAAsBE,IAAI,GAAGlB,MAAH,GAAYD,GAAtC,CAAP;AACD,GAV0B,CAAT,EAUduB,IAVc,CAUT,EAVS,CAAX,CAAP;AAWD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = pathToPattern;\n\nfunction _path() {\n  const data = require(\"path\");\n\n  _path = function () {\n    return data;\n  };\n\n  return data;\n}\n\nconst sep = `\\\\${_path().sep}`;\nconst endSep = `(?:${sep}|$)`;\nconst substitution = `[^${sep}]+`;\nconst starPat = `(?:${substitution}${sep})`;\nconst starPatLast = `(?:${substitution}${endSep})`;\nconst starStarPat = `${starPat}*?`;\nconst starStarPatLast = `${starPat}*?${starPatLast}?`;\n\nfunction escapeRegExp(string) {\n  return string.replace(/[|\\\\{}()[\\]^$+*?.]/g, \"\\\\$&\");\n}\n\nfunction pathToPattern(pattern, dirname) {\n  const parts = _path().resolve(dirname, pattern).split(_path().sep);\n\n  return new RegExp([\"^\", ...parts.map((part, i) => {\n    const last = i === parts.length - 1;\n    if (part === \"**\") return last ? starStarPatLast : starStarPat;\n    if (part === \"*\") return last ? starPatLast : starPat;\n\n    if (part.indexOf(\"*.\") === 0) {\n      return substitution + escapeRegExp(part.slice(1)) + (last ? endSep : sep);\n    }\n\n    return escapeRegExp(part) + (last ? endSep : sep);\n  })].join(\"\"));\n}"]},"metadata":{},"sourceType":"script"}