{"ast":null,"code":"import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\nimport invariant from 'invariant';\nimport { adapt } from '../core/AnimatedBlock';\n\nfunction reduce(fn) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)));\n}\n\nfunction reduceFrom(fn, initialValue) {\n  return input => input.reduce((a, b) => fn(val(a), val(b)), initialValue);\n}\n\nfunction infix(fn) {\n  return input => fn(val(input[0]), val(input[1]));\n}\n\nfunction single(fn) {\n  return input => fn(val(input[0]));\n}\n\nconst OPERATIONS = {\n  // arithmetic\n  add: reduce((a, b) => a + b),\n  sub: reduce((a, b) => a - b),\n  multiply: reduce((a, b) => a * b),\n  divide: reduce((a, b) => a / b),\n  pow: reduce((a, b) => Math.pow(a, b)),\n  modulo: reduce((a, b) => (a % b + b) % b),\n  sqrt: single(a => Math.sqrt(a)),\n  log: single(a => Math.log(a)),\n  sin: single(a => Math.sin(a)),\n  cos: single(a => Math.cos(a)),\n  tan: single(a => Math.tan(a)),\n  acos: single(a => Math.acos(a)),\n  asin: single(a => Math.asin(a)),\n  atan: single(a => Math.atan(a)),\n  exp: single(a => Math.exp(a)),\n  round: single(a => Math.round(a)),\n  abs: single(a => Math.abs(a)),\n  ceil: single(a => Math.ceil(a)),\n  floor: single(a => Math.floor(a)),\n  max: reduce((a, b) => Math.max(a, b)),\n  min: reduce((a, b) => Math.min(a, b)),\n  // logical\n  and: reduceFrom((a, b) => a && b, true),\n  or: reduceFrom((a, b) => a || b, false),\n  not: single(a => !a),\n  defined: single(a => a !== null && a !== undefined && !isNaN(a)),\n  // comparing\n  lessThan: infix((a, b) => a < b),\n\n  /* eslint-disable-next-line eqeqeq */\n  eq: infix((a, b) => a == b),\n  greaterThan: infix((a, b) => a > b),\n  lessOrEq: infix((a, b) => a <= b),\n  greaterOrEq: infix((a, b) => a >= b),\n\n  /* eslint-disable-next-line eqeqeq */\n  neq: infix((a, b) => a != b)\n};\n\nclass AnimatedOperator extends AnimatedNode {\n  _input;\n  _op;\n  _operation;\n\n  constructor(operator, input) {\n    invariant(typeof operator === 'string', `Reanimated: Animated.operator node first argument should be of type String, but got: ${operator}`);\n    invariant(input.every(el => el instanceof AnimatedNode || typeof el === 'string' || typeof el === 'number'), `Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got ${input}`);\n    super({\n      type: 'op',\n      op: operator,\n      input\n    }, input);\n    this._op = operator;\n    this._input = input;\n  }\n\n  toString() {\n    return `AnimatedOperator, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (!this._operation) {\n      this._operation = OPERATIONS[this._op];\n      invariant(this._operation, `Illegal operator '%s'`, this._op);\n    }\n\n    return this._operation(this._input);\n  }\n\n}\n\nexport function createAnimatedOperator(name) {\n  return function () {\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return new AnimatedOperator(name, args.map(adapt));\n  };\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedOperator.js"],"names":["AnimatedNode","val","invariant","adapt","reduce","fn","input","a","b","reduceFrom","initialValue","infix","single","OPERATIONS","add","sub","multiply","divide","pow","Math","modulo","sqrt","log","sin","cos","tan","acos","asin","atan","exp","round","abs","ceil","floor","max","min","and","or","not","defined","undefined","isNaN","lessThan","eq","greaterThan","lessOrEq","greaterOrEq","neq","AnimatedOperator","_input","_op","_operation","constructor","operator","every","el","type","op","toString","__nodeID","__onEvaluate","createAnimatedOperator","name","args","map"],"mappings":"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","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\n\nimport invariant from 'invariant';\nimport { adapt } from '../core/AnimatedBlock';\n\nfunction reduce(fn) {\n  return (input) => input.reduce((a, b) => fn(val(a), val(b)));\n}\n\nfunction reduceFrom(fn, initialValue) {\n  return (input) => input.reduce((a, b) => fn(val(a), val(b)), initialValue);\n}\n\nfunction infix(fn) {\n  return (input) => fn(val(input[0]), val(input[1]));\n}\n\nfunction single(fn) {\n  return (input) => fn(val(input[0]));\n}\n\nconst OPERATIONS = {\n  // arithmetic\n  add: reduce((a, b) => a + b),\n  sub: reduce((a, b) => a - b),\n  multiply: reduce((a, b) => a * b),\n  divide: reduce((a, b) => a / b),\n  pow: reduce((a, b) => Math.pow(a, b)),\n  modulo: reduce((a, b) => ((a % b) + b) % b),\n  sqrt: single((a) => Math.sqrt(a)),\n  log: single((a) => Math.log(a)),\n  sin: single((a) => Math.sin(a)),\n  cos: single((a) => Math.cos(a)),\n  tan: single((a) => Math.tan(a)),\n  acos: single((a) => Math.acos(a)),\n  asin: single((a) => Math.asin(a)),\n  atan: single((a) => Math.atan(a)),\n  exp: single((a) => Math.exp(a)),\n  round: single((a) => Math.round(a)),\n  abs: single((a) => Math.abs(a)),\n  ceil: single((a) => Math.ceil(a)),\n  floor: single((a) => Math.floor(a)),\n  max: reduce((a, b) => Math.max(a, b)),\n  min: reduce((a, b) => Math.min(a, b)),\n\n  // logical\n  and: reduceFrom((a, b) => a && b, true),\n  or: reduceFrom((a, b) => a || b, false),\n  not: single((a) => !a),\n  defined: single((a) => a !== null && a !== undefined && !isNaN(a)),\n\n  // comparing\n  lessThan: infix((a, b) => a < b),\n  /* eslint-disable-next-line eqeqeq */\n  eq: infix((a, b) => a == b),\n  greaterThan: infix((a, b) => a > b),\n  lessOrEq: infix((a, b) => a <= b),\n  greaterOrEq: infix((a, b) => a >= b),\n  /* eslint-disable-next-line eqeqeq */\n  neq: infix((a, b) => a != b),\n};\n\nclass AnimatedOperator extends AnimatedNode {\n  _input;\n  _op;\n  _operation;\n\n  constructor(operator, input) {\n    invariant(\n      typeof operator === 'string',\n      `Reanimated: Animated.operator node first argument should be of type String, but got: ${operator}`\n    );\n    invariant(\n      input.every(\n        (el) =>\n          el instanceof AnimatedNode ||\n          typeof el === 'string' ||\n          typeof el === 'number'\n      ),\n      `Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got ${input}`\n    );\n    super({ type: 'op', op: operator, input }, input);\n    this._op = operator;\n    this._input = input;\n  }\n\n  toString() {\n    return `AnimatedOperator, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    if (!this._operation) {\n      this._operation = OPERATIONS[this._op];\n      invariant(this._operation, `Illegal operator '%s'`, this._op);\n    }\n    return this._operation(this._input);\n  }\n}\n\nexport function createAnimatedOperator(name) {\n  return (...args) => new AnimatedOperator(name, args.map(adapt));\n}\n"]},"metadata":{},"sourceType":"module"}