{"ast":null,"code":"import { cond, sub, pow, divide, multiply, add, block, set, lessThan, proc, abs } from '../base';\nconst VELOCITY_EPS = 5;\n\nfunction decay(clock, state, config) {\n  const lastTime = cond(state.time, state.time, clock);\n  const deltaTime = sub(clock, lastTime); // v0 = v / 1000\n  // v = v0 * powf(deceleration, dt);\n  // v = v * 1000;\n  // x0 = x;\n  // x = x0 + v0 * deceleration * (1 - powf(deceleration, dt)) / (1 - deceleration)\n\n  const kv = pow(config.deceleration, deltaTime);\n  const kx = divide(multiply(config.deceleration, sub(1, kv)), sub(1, config.deceleration));\n  const v0 = divide(state.velocity, 1000);\n  const v = multiply(v0, kv, 1000);\n  const x = add(state.position, multiply(v0, kx));\n  return block([set(state.position, x), set(state.velocity, v), set(state.time, clock), cond(lessThan(abs(v), VELOCITY_EPS), set(state.finished, 1))]);\n}\n\nconst procDecay = proc((clock, time, velocity, position, finished, deceleration) => decay(clock, {\n  time,\n  velocity,\n  position,\n  finished\n}, {\n  deceleration\n}));\nexport default function decayAnimation(clock, _ref, _ref2) {\n  let {\n    time,\n    velocity,\n    position,\n    finished\n  } = _ref;\n  let {\n    deceleration\n  } = _ref2;\n  return procDecay(clock, time, velocity, position, finished, deceleration);\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated1/animations/decay.js"],"names":["cond","sub","pow","divide","multiply","add","block","set","lessThan","proc","abs","VELOCITY_EPS","decay","clock","state","config","lastTime","time","deltaTime","kv","deceleration","kx","v0","velocity","v","x","position","finished","procDecay","decayAnimation"],"mappings":"AAAA,SACEA,IADF,EAEEC,GAFF,EAGEC,GAHF,EAIEC,MAJF,EAKEC,QALF,EAMEC,GANF,EAOEC,KAPF,EAQEC,GARF,EASEC,QATF,EAUEC,IAVF,EAWEC,GAXF,QAYO,SAZP;AAcA,MAAMC,YAAY,GAAG,CAArB;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsBC,KAAtB,EAA6BC,MAA7B,EAAqC;AACnC,QAAMC,QAAQ,GAAGhB,IAAI,CAACc,KAAK,CAACG,IAAP,EAAaH,KAAK,CAACG,IAAnB,EAAyBJ,KAAzB,CAArB;AACA,QAAMK,SAAS,GAAGjB,GAAG,CAACY,KAAD,EAAQG,QAAR,CAArB,CAFmC,CAInC;AACA;AACA;AAEA;AACA;;AACA,QAAMG,EAAE,GAAGjB,GAAG,CAACa,MAAM,CAACK,YAAR,EAAsBF,SAAtB,CAAd;AACA,QAAMG,EAAE,GAAGlB,MAAM,CACfC,QAAQ,CAACW,MAAM,CAACK,YAAR,EAAsBnB,GAAG,CAAC,CAAD,EAAIkB,EAAJ,CAAzB,CADO,EAEflB,GAAG,CAAC,CAAD,EAAIc,MAAM,CAACK,YAAX,CAFY,CAAjB;AAIA,QAAME,EAAE,GAAGnB,MAAM,CAACW,KAAK,CAACS,QAAP,EAAiB,IAAjB,CAAjB;AACA,QAAMC,CAAC,GAAGpB,QAAQ,CAACkB,EAAD,EAAKH,EAAL,EAAS,IAAT,CAAlB;AACA,QAAMM,CAAC,GAAGpB,GAAG,CAACS,KAAK,CAACY,QAAP,EAAiBtB,QAAQ,CAACkB,EAAD,EAAKD,EAAL,CAAzB,CAAb;AACA,SAAOf,KAAK,CAAC,CACXC,GAAG,CAACO,KAAK,CAACY,QAAP,EAAiBD,CAAjB,CADQ,EAEXlB,GAAG,CAACO,KAAK,CAACS,QAAP,EAAiBC,CAAjB,CAFQ,EAGXjB,GAAG,CAACO,KAAK,CAACG,IAAP,EAAaJ,KAAb,CAHQ,EAIXb,IAAI,CAACQ,QAAQ,CAACE,GAAG,CAACc,CAAD,CAAJ,EAASb,YAAT,CAAT,EAAiCJ,GAAG,CAACO,KAAK,CAACa,QAAP,EAAiB,CAAjB,CAApC,CAJO,CAAD,CAAZ;AAMD;;AAED,MAAMC,SAAS,GAAGnB,IAAI,CACpB,CAACI,KAAD,EAAQI,IAAR,EAAcM,QAAd,EAAwBG,QAAxB,EAAkCC,QAAlC,EAA4CP,YAA5C,KACER,KAAK,CAACC,KAAD,EAAQ;AAAEI,EAAAA,IAAF;AAAQM,EAAAA,QAAR;AAAkBG,EAAAA,QAAlB;AAA4BC,EAAAA;AAA5B,CAAR,EAAgD;AAAEP,EAAAA;AAAF,CAAhD,CAFa,CAAtB;AAKA,eAAe,SAASS,cAAT,CACbhB,KADa,eAIb;AAAA,MAFA;AAAEI,IAAAA,IAAF;AAAQM,IAAAA,QAAR;AAAkBG,IAAAA,QAAlB;AAA4BC,IAAAA;AAA5B,GAEA;AAAA,MADA;AAAEP,IAAAA;AAAF,GACA;AACA,SAAOQ,SAAS,CAACf,KAAD,EAAQI,IAAR,EAAcM,QAAd,EAAwBG,QAAxB,EAAkCC,QAAlC,EAA4CP,YAA5C,CAAhB;AACD","sourcesContent":["import {\n  cond,\n  sub,\n  pow,\n  divide,\n  multiply,\n  add,\n  block,\n  set,\n  lessThan,\n  proc,\n  abs,\n} from '../base';\n\nconst VELOCITY_EPS = 5;\n\nfunction decay(clock, state, config) {\n  const lastTime = cond(state.time, state.time, clock);\n  const deltaTime = sub(clock, lastTime);\n\n  // v0 = v / 1000\n  // v = v0 * powf(deceleration, dt);\n  // v = v * 1000;\n\n  // x0 = x;\n  // x = x0 + v0 * deceleration * (1 - powf(deceleration, dt)) / (1 - deceleration)\n  const kv = pow(config.deceleration, deltaTime);\n  const kx = divide(\n    multiply(config.deceleration, sub(1, kv)),\n    sub(1, config.deceleration)\n  );\n  const v0 = divide(state.velocity, 1000);\n  const v = multiply(v0, kv, 1000);\n  const x = add(state.position, multiply(v0, kx));\n  return block([\n    set(state.position, x),\n    set(state.velocity, v),\n    set(state.time, clock),\n    cond(lessThan(abs(v), VELOCITY_EPS), set(state.finished, 1)),\n  ]);\n}\n\nconst procDecay = proc(\n  (clock, time, velocity, position, finished, deceleration) =>\n    decay(clock, { time, velocity, position, finished }, { deceleration })\n);\n\nexport default function decayAnimation(\n  clock,\n  { time, velocity, position, finished },\n  { deceleration }\n) {\n  return procDecay(clock, time, velocity, position, finished, deceleration);\n}\n"]},"metadata":{},"sourceType":"module"}