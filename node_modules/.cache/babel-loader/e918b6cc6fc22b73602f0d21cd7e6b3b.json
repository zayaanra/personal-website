{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.explode = explode;\nexports.merge = merge;\nexports.verify = verify;\n\nvar virtualTypes = require(\"./path/lib/virtual-types\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  DEPRECATED_KEYS,\n  FLIPPED_ALIAS_KEYS,\n  TYPES\n} = _t;\n\nfunction explode(visitor) {\n  if (visitor._exploded) return visitor;\n  visitor._exploded = true;\n\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n    const parts = nodeType.split(\"|\");\n    if (parts.length === 1) continue;\n    const fns = visitor[nodeType];\n    delete visitor[nodeType];\n\n    for (const part of parts) {\n      visitor[part] = fns;\n    }\n  }\n\n  verify(visitor);\n  delete visitor.__esModule;\n  ensureEntranceObjects(visitor);\n  ensureCallbackArrays(visitor);\n\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n    const wrapper = virtualTypes[nodeType];\n    if (!wrapper) continue;\n    const fns = visitor[nodeType];\n\n    for (const type of Object.keys(fns)) {\n      fns[type] = wrapCheck(wrapper, fns[type]);\n    }\n\n    delete visitor[nodeType];\n\n    if (wrapper.types) {\n      for (const type of wrapper.types) {\n        if (visitor[type]) {\n          mergePair(visitor[type], fns);\n        } else {\n          visitor[type] = fns;\n        }\n      }\n    } else {\n      mergePair(visitor, fns);\n    }\n  }\n\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n    const fns = visitor[nodeType];\n    let aliases = FLIPPED_ALIAS_KEYS[nodeType];\n    const deprecatedKey = DEPRECATED_KEYS[nodeType];\n\n    if (deprecatedKey) {\n      console.trace(`Visitor defined for ${nodeType} but it has been renamed to ${deprecatedKey}`);\n      aliases = [deprecatedKey];\n    }\n\n    if (!aliases) continue;\n    delete visitor[nodeType];\n\n    for (const alias of aliases) {\n      const existing = visitor[alias];\n\n      if (existing) {\n        mergePair(existing, fns);\n      } else {\n        visitor[alias] = Object.assign({}, fns);\n      }\n    }\n  }\n\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n    ensureCallbackArrays(visitor[nodeType]);\n  }\n\n  return visitor;\n}\n\nfunction verify(visitor) {\n  if (visitor._verified) return;\n\n  if (typeof visitor === \"function\") {\n    throw new Error(\"You passed `traverse()` a function when it expected a visitor object, \" + \"are you sure you didn't mean `{ enter: Function }`?\");\n  }\n\n  for (const nodeType of Object.keys(visitor)) {\n    if (nodeType === \"enter\" || nodeType === \"exit\") {\n      validateVisitorMethods(nodeType, visitor[nodeType]);\n    }\n\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    if (TYPES.indexOf(nodeType) < 0) {\n      throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type`);\n    }\n\n    const visitors = visitor[nodeType];\n\n    if (typeof visitors === \"object\") {\n      for (const visitorKey of Object.keys(visitors)) {\n        if (visitorKey === \"enter\" || visitorKey === \"exit\") {\n          validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors[visitorKey]);\n        } else {\n          throw new Error(\"You passed `traverse()` a visitor object with the property \" + `${nodeType} that has the invalid property ${visitorKey}`);\n        }\n      }\n    }\n  }\n\n  visitor._verified = true;\n}\n\nfunction validateVisitorMethods(path, val) {\n  const fns = [].concat(val);\n\n  for (const fn of fns) {\n    if (typeof fn !== \"function\") {\n      throw new TypeError(`Non-function found defined in ${path} with type ${typeof fn}`);\n    }\n  }\n}\n\nfunction merge(visitors) {\n  let states = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let wrapper = arguments.length > 2 ? arguments[2] : undefined;\n  const rootVisitor = {};\n\n  for (let i = 0; i < visitors.length; i++) {\n    const visitor = visitors[i];\n    const state = states[i];\n    explode(visitor);\n\n    for (const type of Object.keys(visitor)) {\n      let visitorType = visitor[type];\n\n      if (state || wrapper) {\n        visitorType = wrapWithStateOrWrapper(visitorType, state, wrapper);\n      }\n\n      const nodeVisitor = rootVisitor[type] = rootVisitor[type] || {};\n      mergePair(nodeVisitor, visitorType);\n    }\n  }\n\n  return rootVisitor;\n}\n\nfunction wrapWithStateOrWrapper(oldVisitor, state, wrapper) {\n  const newVisitor = {};\n\n  for (const key of Object.keys(oldVisitor)) {\n    let fns = oldVisitor[key];\n    if (!Array.isArray(fns)) continue;\n    fns = fns.map(function (fn) {\n      let newFn = fn;\n\n      if (state) {\n        newFn = function (path) {\n          return fn.call(state, path, state);\n        };\n      }\n\n      if (wrapper) {\n        newFn = wrapper(state.key, key, newFn);\n      }\n\n      if (newFn !== fn) {\n        newFn.toString = () => fn.toString();\n      }\n\n      return newFn;\n    });\n    newVisitor[key] = fns;\n  }\n\n  return newVisitor;\n}\n\nfunction ensureEntranceObjects(obj) {\n  for (const key of Object.keys(obj)) {\n    if (shouldIgnoreKey(key)) continue;\n    const fns = obj[key];\n\n    if (typeof fns === \"function\") {\n      obj[key] = {\n        enter: fns\n      };\n    }\n  }\n}\n\nfunction ensureCallbackArrays(obj) {\n  if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];\n  if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];\n}\n\nfunction wrapCheck(wrapper, fn) {\n  const newFn = function (path) {\n    if (wrapper.checkPath(path)) {\n      return fn.apply(this, arguments);\n    }\n  };\n\n  newFn.toString = () => fn.toString();\n\n  return newFn;\n}\n\nfunction shouldIgnoreKey(key) {\n  if (key[0] === \"_\") return true;\n  if (key === \"enter\" || key === \"exit\" || key === \"shouldSkip\") return true;\n\n  if (key === \"denylist\" || key === \"noScope\" || key === \"skipKeys\" || key === \"blacklist\") {\n    return true;\n  }\n\n  return false;\n}\n\nfunction mergePair(dest, src) {\n  for (const key of Object.keys(src)) {\n    dest[key] = [].concat(dest[key] || [], src[key]);\n  }\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/@babel/traverse/lib/visitors.js"],"names":["Object","defineProperty","exports","value","explode","merge","verify","virtualTypes","require","_t","DEPRECATED_KEYS","FLIPPED_ALIAS_KEYS","TYPES","visitor","_exploded","nodeType","keys","shouldIgnoreKey","parts","split","length","fns","part","__esModule","ensureEntranceObjects","ensureCallbackArrays","wrapper","type","wrapCheck","types","mergePair","aliases","deprecatedKey","console","trace","alias","existing","assign","_verified","Error","validateVisitorMethods","indexOf","visitors","visitorKey","path","val","concat","fn","TypeError","states","rootVisitor","i","state","visitorType","wrapWithStateOrWrapper","nodeVisitor","oldVisitor","newVisitor","key","Array","isArray","map","newFn","call","toString","obj","enter","exit","checkPath","apply","arguments","dest","src"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.explode = explode;\nexports.merge = merge;\nexports.verify = verify;\n\nvar virtualTypes = require(\"./path/lib/virtual-types\");\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  DEPRECATED_KEYS,\n  FLIPPED_ALIAS_KEYS,\n  TYPES\n} = _t;\n\nfunction explode(visitor) {\n  if (visitor._exploded) return visitor;\n  visitor._exploded = true;\n\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n    const parts = nodeType.split(\"|\");\n    if (parts.length === 1) continue;\n    const fns = visitor[nodeType];\n    delete visitor[nodeType];\n\n    for (const part of parts) {\n      visitor[part] = fns;\n    }\n  }\n\n  verify(visitor);\n  delete visitor.__esModule;\n  ensureEntranceObjects(visitor);\n  ensureCallbackArrays(visitor);\n\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n    const wrapper = virtualTypes[nodeType];\n    if (!wrapper) continue;\n    const fns = visitor[nodeType];\n\n    for (const type of Object.keys(fns)) {\n      fns[type] = wrapCheck(wrapper, fns[type]);\n    }\n\n    delete visitor[nodeType];\n\n    if (wrapper.types) {\n      for (const type of wrapper.types) {\n        if (visitor[type]) {\n          mergePair(visitor[type], fns);\n        } else {\n          visitor[type] = fns;\n        }\n      }\n    } else {\n      mergePair(visitor, fns);\n    }\n  }\n\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n    const fns = visitor[nodeType];\n    let aliases = FLIPPED_ALIAS_KEYS[nodeType];\n    const deprecatedKey = DEPRECATED_KEYS[nodeType];\n\n    if (deprecatedKey) {\n      console.trace(`Visitor defined for ${nodeType} but it has been renamed to ${deprecatedKey}`);\n      aliases = [deprecatedKey];\n    }\n\n    if (!aliases) continue;\n    delete visitor[nodeType];\n\n    for (const alias of aliases) {\n      const existing = visitor[alias];\n\n      if (existing) {\n        mergePair(existing, fns);\n      } else {\n        visitor[alias] = Object.assign({}, fns);\n      }\n    }\n  }\n\n  for (const nodeType of Object.keys(visitor)) {\n    if (shouldIgnoreKey(nodeType)) continue;\n    ensureCallbackArrays(visitor[nodeType]);\n  }\n\n  return visitor;\n}\n\nfunction verify(visitor) {\n  if (visitor._verified) return;\n\n  if (typeof visitor === \"function\") {\n    throw new Error(\"You passed `traverse()` a function when it expected a visitor object, \" + \"are you sure you didn't mean `{ enter: Function }`?\");\n  }\n\n  for (const nodeType of Object.keys(visitor)) {\n    if (nodeType === \"enter\" || nodeType === \"exit\") {\n      validateVisitorMethods(nodeType, visitor[nodeType]);\n    }\n\n    if (shouldIgnoreKey(nodeType)) continue;\n\n    if (TYPES.indexOf(nodeType) < 0) {\n      throw new Error(`You gave us a visitor for the node type ${nodeType} but it's not a valid type`);\n    }\n\n    const visitors = visitor[nodeType];\n\n    if (typeof visitors === \"object\") {\n      for (const visitorKey of Object.keys(visitors)) {\n        if (visitorKey === \"enter\" || visitorKey === \"exit\") {\n          validateVisitorMethods(`${nodeType}.${visitorKey}`, visitors[visitorKey]);\n        } else {\n          throw new Error(\"You passed `traverse()` a visitor object with the property \" + `${nodeType} that has the invalid property ${visitorKey}`);\n        }\n      }\n    }\n  }\n\n  visitor._verified = true;\n}\n\nfunction validateVisitorMethods(path, val) {\n  const fns = [].concat(val);\n\n  for (const fn of fns) {\n    if (typeof fn !== \"function\") {\n      throw new TypeError(`Non-function found defined in ${path} with type ${typeof fn}`);\n    }\n  }\n}\n\nfunction merge(visitors, states = [], wrapper) {\n  const rootVisitor = {};\n\n  for (let i = 0; i < visitors.length; i++) {\n    const visitor = visitors[i];\n    const state = states[i];\n    explode(visitor);\n\n    for (const type of Object.keys(visitor)) {\n      let visitorType = visitor[type];\n\n      if (state || wrapper) {\n        visitorType = wrapWithStateOrWrapper(visitorType, state, wrapper);\n      }\n\n      const nodeVisitor = rootVisitor[type] = rootVisitor[type] || {};\n      mergePair(nodeVisitor, visitorType);\n    }\n  }\n\n  return rootVisitor;\n}\n\nfunction wrapWithStateOrWrapper(oldVisitor, state, wrapper) {\n  const newVisitor = {};\n\n  for (const key of Object.keys(oldVisitor)) {\n    let fns = oldVisitor[key];\n    if (!Array.isArray(fns)) continue;\n    fns = fns.map(function (fn) {\n      let newFn = fn;\n\n      if (state) {\n        newFn = function (path) {\n          return fn.call(state, path, state);\n        };\n      }\n\n      if (wrapper) {\n        newFn = wrapper(state.key, key, newFn);\n      }\n\n      if (newFn !== fn) {\n        newFn.toString = () => fn.toString();\n      }\n\n      return newFn;\n    });\n    newVisitor[key] = fns;\n  }\n\n  return newVisitor;\n}\n\nfunction ensureEntranceObjects(obj) {\n  for (const key of Object.keys(obj)) {\n    if (shouldIgnoreKey(key)) continue;\n    const fns = obj[key];\n\n    if (typeof fns === \"function\") {\n      obj[key] = {\n        enter: fns\n      };\n    }\n  }\n}\n\nfunction ensureCallbackArrays(obj) {\n  if (obj.enter && !Array.isArray(obj.enter)) obj.enter = [obj.enter];\n  if (obj.exit && !Array.isArray(obj.exit)) obj.exit = [obj.exit];\n}\n\nfunction wrapCheck(wrapper, fn) {\n  const newFn = function (path) {\n    if (wrapper.checkPath(path)) {\n      return fn.apply(this, arguments);\n    }\n  };\n\n  newFn.toString = () => fn.toString();\n\n  return newFn;\n}\n\nfunction shouldIgnoreKey(key) {\n  if (key[0] === \"_\") return true;\n  if (key === \"enter\" || key === \"exit\" || key === \"shouldSkip\") return true;\n\n  if (key === \"denylist\" || key === \"noScope\" || key === \"skipKeys\" || key === \"blacklist\") {\n    return true;\n  }\n\n  return false;\n}\n\nfunction mergePair(dest, src) {\n  for (const key of Object.keys(src)) {\n    dest[key] = [].concat(dest[key] || [], src[key]);\n  }\n}"]},"metadata":{},"sourceType":"script"}