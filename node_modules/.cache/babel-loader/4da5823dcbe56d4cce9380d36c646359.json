{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  BOOLEAN_NUMBER_BINARY_OPERATORS,\n  createFlowUnionType,\n  createTSUnionType,\n  createTypeAnnotationBasedOnTypeof,\n  createUnionTypeAnnotation,\n  isTSTypeAnnotation,\n  numberTypeAnnotation,\n  voidTypeAnnotation\n} = _t;\n\nfunction _default(node) {\n  if (!this.isReferenced()) return;\n  const binding = this.scope.getBinding(node.name);\n\n  if (binding) {\n    if (binding.identifier.typeAnnotation) {\n      return binding.identifier.typeAnnotation;\n    } else {\n      return getTypeAnnotationBindingConstantViolations(binding, this, node.name);\n    }\n  }\n\n  if (node.name === \"undefined\") {\n    return voidTypeAnnotation();\n  } else if (node.name === \"NaN\" || node.name === \"Infinity\") {\n    return numberTypeAnnotation();\n  } else if (node.name === \"arguments\") {}\n}\n\nfunction getTypeAnnotationBindingConstantViolations(binding, path, name) {\n  const types = [];\n  const functionConstantViolations = [];\n  let constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);\n  const testType = getConditionalAnnotation(binding, path, name);\n\n  if (testType) {\n    const testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);\n    constantViolations = constantViolations.filter(path => testConstantViolations.indexOf(path) < 0);\n    types.push(testType.typeAnnotation);\n  }\n\n  if (constantViolations.length) {\n    constantViolations.push(...functionConstantViolations);\n\n    for (const violation of constantViolations) {\n      types.push(violation.getTypeAnnotation());\n    }\n  }\n\n  if (!types.length) {\n    return;\n  }\n\n  if (isTSTypeAnnotation(types[0]) && createTSUnionType) {\n    return createTSUnionType(types);\n  }\n\n  if (createFlowUnionType) {\n    return createFlowUnionType(types);\n  }\n\n  return createUnionTypeAnnotation(types);\n}\n\nfunction getConstantViolationsBefore(binding, path, functions) {\n  const violations = binding.constantViolations.slice();\n  violations.unshift(binding.path);\n  return violations.filter(violation => {\n    violation = violation.resolve();\n\n    const status = violation._guessExecutionStatusRelativeTo(path);\n\n    if (functions && status === \"unknown\") functions.push(violation);\n    return status === \"before\";\n  });\n}\n\nfunction inferAnnotationFromBinaryExpression(name, path) {\n  const operator = path.node.operator;\n  const right = path.get(\"right\").resolve();\n  const left = path.get(\"left\").resolve();\n  let target;\n\n  if (left.isIdentifier({\n    name\n  })) {\n    target = right;\n  } else if (right.isIdentifier({\n    name\n  })) {\n    target = left;\n  }\n\n  if (target) {\n    if (operator === \"===\") {\n      return target.getTypeAnnotation();\n    }\n\n    if (BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {\n      return numberTypeAnnotation();\n    }\n\n    return;\n  }\n\n  if (operator !== \"===\" && operator !== \"==\") return;\n  let typeofPath;\n  let typePath;\n\n  if (left.isUnaryExpression({\n    operator: \"typeof\"\n  })) {\n    typeofPath = left;\n    typePath = right;\n  } else if (right.isUnaryExpression({\n    operator: \"typeof\"\n  })) {\n    typeofPath = right;\n    typePath = left;\n  }\n\n  if (!typeofPath) return;\n  if (!typeofPath.get(\"argument\").isIdentifier({\n    name\n  })) return;\n  typePath = typePath.resolve();\n  if (!typePath.isLiteral()) return;\n  const typeValue = typePath.node.value;\n  if (typeof typeValue !== \"string\") return;\n  return createTypeAnnotationBasedOnTypeof(typeValue);\n}\n\nfunction getParentConditionalPath(binding, path, name) {\n  let parentPath;\n\n  while (parentPath = path.parentPath) {\n    if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {\n      if (path.key === \"test\") {\n        return;\n      }\n\n      return parentPath;\n    }\n\n    if (parentPath.isFunction()) {\n      if (parentPath.parentPath.scope.getBinding(name) !== binding) return;\n    }\n\n    path = parentPath;\n  }\n}\n\nfunction getConditionalAnnotation(binding, path, name) {\n  const ifStatement = getParentConditionalPath(binding, path, name);\n  if (!ifStatement) return;\n  const test = ifStatement.get(\"test\");\n  const paths = [test];\n  const types = [];\n\n  for (let i = 0; i < paths.length; i++) {\n    const path = paths[i];\n\n    if (path.isLogicalExpression()) {\n      if (path.node.operator === \"&&\") {\n        paths.push(path.get(\"left\"));\n        paths.push(path.get(\"right\"));\n      }\n    } else if (path.isBinaryExpression()) {\n      const type = inferAnnotationFromBinaryExpression(name, path);\n      if (type) types.push(type);\n    }\n  }\n\n  if (types.length) {\n    if (isTSTypeAnnotation(types[0]) && createTSUnionType) {\n      return {\n        typeAnnotation: createTSUnionType(types),\n        ifStatement\n      };\n    }\n\n    if (createFlowUnionType) {\n      return {\n        typeAnnotation: createFlowUnionType(types),\n        ifStatement\n      };\n    }\n\n    return {\n      typeAnnotation: createUnionTypeAnnotation(types),\n      ifStatement\n    };\n  }\n\n  return getConditionalAnnotation(ifStatement, name);\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/@babel/traverse/lib/path/inference/inferer-reference.js"],"names":["Object","defineProperty","exports","value","default","_default","_t","require","BOOLEAN_NUMBER_BINARY_OPERATORS","createFlowUnionType","createTSUnionType","createTypeAnnotationBasedOnTypeof","createUnionTypeAnnotation","isTSTypeAnnotation","numberTypeAnnotation","voidTypeAnnotation","node","isReferenced","binding","scope","getBinding","name","identifier","typeAnnotation","getTypeAnnotationBindingConstantViolations","path","types","functionConstantViolations","constantViolations","getConstantViolationsBefore","testType","getConditionalAnnotation","testConstantViolations","ifStatement","filter","indexOf","push","length","violation","getTypeAnnotation","functions","violations","slice","unshift","resolve","status","_guessExecutionStatusRelativeTo","inferAnnotationFromBinaryExpression","operator","right","get","left","target","isIdentifier","typeofPath","typePath","isUnaryExpression","isLiteral","typeValue","getParentConditionalPath","parentPath","isIfStatement","isConditionalExpression","key","isFunction","test","paths","i","isLogicalExpression","isBinaryExpression","type"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = _default;\n\nvar _t = require(\"@babel/types\");\n\nconst {\n  BOOLEAN_NUMBER_BINARY_OPERATORS,\n  createFlowUnionType,\n  createTSUnionType,\n  createTypeAnnotationBasedOnTypeof,\n  createUnionTypeAnnotation,\n  isTSTypeAnnotation,\n  numberTypeAnnotation,\n  voidTypeAnnotation\n} = _t;\n\nfunction _default(node) {\n  if (!this.isReferenced()) return;\n  const binding = this.scope.getBinding(node.name);\n\n  if (binding) {\n    if (binding.identifier.typeAnnotation) {\n      return binding.identifier.typeAnnotation;\n    } else {\n      return getTypeAnnotationBindingConstantViolations(binding, this, node.name);\n    }\n  }\n\n  if (node.name === \"undefined\") {\n    return voidTypeAnnotation();\n  } else if (node.name === \"NaN\" || node.name === \"Infinity\") {\n    return numberTypeAnnotation();\n  } else if (node.name === \"arguments\") {}\n}\n\nfunction getTypeAnnotationBindingConstantViolations(binding, path, name) {\n  const types = [];\n  const functionConstantViolations = [];\n  let constantViolations = getConstantViolationsBefore(binding, path, functionConstantViolations);\n  const testType = getConditionalAnnotation(binding, path, name);\n\n  if (testType) {\n    const testConstantViolations = getConstantViolationsBefore(binding, testType.ifStatement);\n    constantViolations = constantViolations.filter(path => testConstantViolations.indexOf(path) < 0);\n    types.push(testType.typeAnnotation);\n  }\n\n  if (constantViolations.length) {\n    constantViolations.push(...functionConstantViolations);\n\n    for (const violation of constantViolations) {\n      types.push(violation.getTypeAnnotation());\n    }\n  }\n\n  if (!types.length) {\n    return;\n  }\n\n  if (isTSTypeAnnotation(types[0]) && createTSUnionType) {\n    return createTSUnionType(types);\n  }\n\n  if (createFlowUnionType) {\n    return createFlowUnionType(types);\n  }\n\n  return createUnionTypeAnnotation(types);\n}\n\nfunction getConstantViolationsBefore(binding, path, functions) {\n  const violations = binding.constantViolations.slice();\n  violations.unshift(binding.path);\n  return violations.filter(violation => {\n    violation = violation.resolve();\n\n    const status = violation._guessExecutionStatusRelativeTo(path);\n\n    if (functions && status === \"unknown\") functions.push(violation);\n    return status === \"before\";\n  });\n}\n\nfunction inferAnnotationFromBinaryExpression(name, path) {\n  const operator = path.node.operator;\n  const right = path.get(\"right\").resolve();\n  const left = path.get(\"left\").resolve();\n  let target;\n\n  if (left.isIdentifier({\n    name\n  })) {\n    target = right;\n  } else if (right.isIdentifier({\n    name\n  })) {\n    target = left;\n  }\n\n  if (target) {\n    if (operator === \"===\") {\n      return target.getTypeAnnotation();\n    }\n\n    if (BOOLEAN_NUMBER_BINARY_OPERATORS.indexOf(operator) >= 0) {\n      return numberTypeAnnotation();\n    }\n\n    return;\n  }\n\n  if (operator !== \"===\" && operator !== \"==\") return;\n  let typeofPath;\n  let typePath;\n\n  if (left.isUnaryExpression({\n    operator: \"typeof\"\n  })) {\n    typeofPath = left;\n    typePath = right;\n  } else if (right.isUnaryExpression({\n    operator: \"typeof\"\n  })) {\n    typeofPath = right;\n    typePath = left;\n  }\n\n  if (!typeofPath) return;\n  if (!typeofPath.get(\"argument\").isIdentifier({\n    name\n  })) return;\n  typePath = typePath.resolve();\n  if (!typePath.isLiteral()) return;\n  const typeValue = typePath.node.value;\n  if (typeof typeValue !== \"string\") return;\n  return createTypeAnnotationBasedOnTypeof(typeValue);\n}\n\nfunction getParentConditionalPath(binding, path, name) {\n  let parentPath;\n\n  while (parentPath = path.parentPath) {\n    if (parentPath.isIfStatement() || parentPath.isConditionalExpression()) {\n      if (path.key === \"test\") {\n        return;\n      }\n\n      return parentPath;\n    }\n\n    if (parentPath.isFunction()) {\n      if (parentPath.parentPath.scope.getBinding(name) !== binding) return;\n    }\n\n    path = parentPath;\n  }\n}\n\nfunction getConditionalAnnotation(binding, path, name) {\n  const ifStatement = getParentConditionalPath(binding, path, name);\n  if (!ifStatement) return;\n  const test = ifStatement.get(\"test\");\n  const paths = [test];\n  const types = [];\n\n  for (let i = 0; i < paths.length; i++) {\n    const path = paths[i];\n\n    if (path.isLogicalExpression()) {\n      if (path.node.operator === \"&&\") {\n        paths.push(path.get(\"left\"));\n        paths.push(path.get(\"right\"));\n      }\n    } else if (path.isBinaryExpression()) {\n      const type = inferAnnotationFromBinaryExpression(name, path);\n      if (type) types.push(type);\n    }\n  }\n\n  if (types.length) {\n    if (isTSTypeAnnotation(types[0]) && createTSUnionType) {\n      return {\n        typeAnnotation: createTSUnionType(types),\n        ifStatement\n      };\n    }\n\n    if (createFlowUnionType) {\n      return {\n        typeAnnotation: createFlowUnionType(types),\n        ifStatement\n      };\n    }\n\n    return {\n      typeAnnotation: createUnionTypeAnnotation(types),\n      ifStatement\n    };\n  }\n\n  return getConditionalAnnotation(ifStatement, name);\n}"]},"metadata":{},"sourceType":"script"}