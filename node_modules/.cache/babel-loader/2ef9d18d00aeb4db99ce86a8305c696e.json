{"ast":null,"code":"import { withTiming, withSpring } from '../../animation';\nimport { BaseAnimationBuilder } from './BaseAnimationBuilder';\nexport class ComplexAnimationBuilder extends BaseAnimationBuilder {\n  static easing(easingFunction) {\n    const instance = this.createInstance();\n    return instance.easing(easingFunction);\n  }\n\n  easing(easingFunction) {\n    this.easingV = easingFunction;\n    return this;\n  }\n\n  static rotate(degree) {\n    const instance = this.createInstance();\n    return instance.rotate(degree);\n  }\n\n  rotate(degree) {\n    this.rotateV = degree;\n    return this;\n  }\n\n  static springify() {\n    const instance = this.createInstance();\n    return instance.springify();\n  }\n\n  springify() {\n    this.type = withSpring;\n    return this;\n  }\n\n  static damping(damping) {\n    const instance = this.createInstance();\n    return instance.damping(damping);\n  }\n\n  damping(damping) {\n    this.dampingV = damping;\n    return this;\n  }\n\n  static mass(mass) {\n    const instance = this.createInstance();\n    return instance.mass(mass);\n  }\n\n  mass(mass) {\n    this.massV = mass;\n    return this;\n  }\n\n  static stiffness(stiffness) {\n    const instance = this.createInstance();\n    return instance.stiffness(stiffness);\n  }\n\n  stiffness(stiffness) {\n    this.stiffnessV = stiffness;\n    return this;\n  }\n\n  static overshootClamping(overshootClamping) {\n    const instance = this.createInstance();\n    return instance.overshootClamping(overshootClamping);\n  }\n\n  overshootClamping(overshootClamping) {\n    this.overshootClampingV = overshootClamping;\n    return this;\n  }\n\n  static restDisplacementThreshold(restDisplacementThreshold) {\n    const instance = this.createInstance();\n    return instance.restDisplacementThreshold(restDisplacementThreshold);\n  }\n\n  restDisplacementThreshold(restDisplacementThreshold) {\n    this.restDisplacementThresholdV = restDisplacementThreshold;\n    return this;\n  }\n\n  static restSpeedThreshold(restSpeedThreshold) {\n    const instance = this.createInstance();\n    return instance.restSpeedThreshold(restSpeedThreshold);\n  }\n\n  restSpeedThreshold(restSpeedThreshold) {\n    this.restSpeedThresholdV = restSpeedThreshold;\n    return this;\n  }\n\n  getAnimationAndConfig() {\n    const duration = this.durationV;\n    const easing = this.easingV;\n    const rotate = this.rotateV;\n    const type = this.type ? this.type : withTiming;\n    const damping = this.dampingV;\n    const mass = this.massV;\n    const stiffness = this.stiffnessV;\n    const overshootClamping = this.overshootClampingV;\n    const restDisplacementThreshold = this.restDisplacementThresholdV;\n    const restSpeedThreshold = this.restSpeedThresholdV;\n    const animation = type;\n    const config = {};\n\n    if (type === withTiming) {\n      if (easing) {\n        config.easing = easing;\n      }\n\n      if (duration) {\n        config.duration = duration;\n      }\n\n      if (rotate) {\n        config.rotate = rotate;\n      }\n    } else {\n      if (damping) {\n        config.damping = damping;\n      }\n\n      if (mass) {\n        config.mass = mass;\n      }\n\n      if (stiffness) {\n        config.stiffness = stiffness;\n      }\n\n      if (overshootClamping) {\n        config.overshootClamping = overshootClamping;\n      }\n\n      if (restDisplacementThreshold) {\n        config.restDisplacementThreshold = restDisplacementThreshold;\n      }\n\n      if (restSpeedThreshold) {\n        config.restSpeedThreshold = restSpeedThreshold;\n      }\n\n      if (rotate) {\n        config.rotate = rotate;\n      }\n    }\n\n    return [animation, config];\n  }\n\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/animationBuilder/ComplexAnimationBuilder.js"],"names":["withTiming","withSpring","BaseAnimationBuilder","ComplexAnimationBuilder","easing","easingFunction","instance","createInstance","easingV","rotate","degree","rotateV","springify","type","damping","dampingV","mass","massV","stiffness","stiffnessV","overshootClamping","overshootClampingV","restDisplacementThreshold","restDisplacementThresholdV","restSpeedThreshold","restSpeedThresholdV","getAnimationAndConfig","duration","durationV","animation","config"],"mappings":"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","sourcesContent":["import { withTiming, withSpring } from '../../animation';\nimport { BaseAnimationBuilder } from './BaseAnimationBuilder';\nexport class ComplexAnimationBuilder extends BaseAnimationBuilder {\n    static easing(easingFunction) {\n        const instance = this.createInstance();\n        return instance.easing(easingFunction);\n    }\n    easing(easingFunction) {\n        this.easingV = easingFunction;\n        return this;\n    }\n    static rotate(degree) {\n        const instance = this.createInstance();\n        return instance.rotate(degree);\n    }\n    rotate(degree) {\n        this.rotateV = degree;\n        return this;\n    }\n    static springify() {\n        const instance = this.createInstance();\n        return instance.springify();\n    }\n    springify() {\n        this.type = withSpring;\n        return this;\n    }\n    static damping(damping) {\n        const instance = this.createInstance();\n        return instance.damping(damping);\n    }\n    damping(damping) {\n        this.dampingV = damping;\n        return this;\n    }\n    static mass(mass) {\n        const instance = this.createInstance();\n        return instance.mass(mass);\n    }\n    mass(mass) {\n        this.massV = mass;\n        return this;\n    }\n    static stiffness(stiffness) {\n        const instance = this.createInstance();\n        return instance.stiffness(stiffness);\n    }\n    stiffness(stiffness) {\n        this.stiffnessV = stiffness;\n        return this;\n    }\n    static overshootClamping(overshootClamping) {\n        const instance = this.createInstance();\n        return instance.overshootClamping(overshootClamping);\n    }\n    overshootClamping(overshootClamping) {\n        this.overshootClampingV = overshootClamping;\n        return this;\n    }\n    static restDisplacementThreshold(restDisplacementThreshold) {\n        const instance = this.createInstance();\n        return instance.restDisplacementThreshold(restDisplacementThreshold);\n    }\n    restDisplacementThreshold(restDisplacementThreshold) {\n        this.restDisplacementThresholdV = restDisplacementThreshold;\n        return this;\n    }\n    static restSpeedThreshold(restSpeedThreshold) {\n        const instance = this.createInstance();\n        return instance.restSpeedThreshold(restSpeedThreshold);\n    }\n    restSpeedThreshold(restSpeedThreshold) {\n        this.restSpeedThresholdV = restSpeedThreshold;\n        return this;\n    }\n    getAnimationAndConfig() {\n        const duration = this.durationV;\n        const easing = this.easingV;\n        const rotate = this.rotateV;\n        const type = this.type ? this.type : withTiming;\n        const damping = this.dampingV;\n        const mass = this.massV;\n        const stiffness = this.stiffnessV;\n        const overshootClamping = this.overshootClampingV;\n        const restDisplacementThreshold = this.restDisplacementThresholdV;\n        const restSpeedThreshold = this.restSpeedThresholdV;\n        const animation = type;\n        const config = {};\n        if (type === withTiming) {\n            if (easing) {\n                config.easing = easing;\n            }\n            if (duration) {\n                config.duration = duration;\n            }\n            if (rotate) {\n                config.rotate = rotate;\n            }\n        }\n        else {\n            if (damping) {\n                config.damping = damping;\n            }\n            if (mass) {\n                config.mass = mass;\n            }\n            if (stiffness) {\n                config.stiffness = stiffness;\n            }\n            if (overshootClamping) {\n                config.overshootClamping = overshootClamping;\n            }\n            if (restDisplacementThreshold) {\n                config.restDisplacementThreshold = restDisplacementThreshold;\n            }\n            if (restSpeedThreshold) {\n                config.restSpeedThreshold = restSpeedThreshold;\n            }\n            if (rotate) {\n                config.rotate = rotate;\n            }\n        }\n        return [animation, config];\n    }\n}\n"]},"metadata":{},"sourceType":"module"}