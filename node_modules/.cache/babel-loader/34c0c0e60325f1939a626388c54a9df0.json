{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionValidator = void 0;\n\nvar _findSuggestion = require(\"./find-suggestion\");\n\nclass OptionValidator {\n  constructor(descriptor) {\n    this.descriptor = descriptor;\n  }\n\n  validateTopLevelOptions(options, TopLevelOptionShape) {\n    const validOptionNames = Object.keys(TopLevelOptionShape);\n\n    for (const option of Object.keys(options)) {\n      if (!validOptionNames.includes(option)) {\n        throw new Error(this.formatMessage(`'${option}' is not a valid top-level option.\n- Did you mean '${(0, _findSuggestion.findSuggestion)(option, validOptionNames)}'?`));\n      }\n    }\n  }\n\n  validateBooleanOption(name, value, defaultValue) {\n    if (value === undefined) {\n      return defaultValue;\n    } else {\n      this.invariant(typeof value === \"boolean\", `'${name}' option must be a boolean.`);\n    }\n\n    return value;\n  }\n\n  validateStringOption(name, value, defaultValue) {\n    if (value === undefined) {\n      return defaultValue;\n    } else {\n      this.invariant(typeof value === \"string\", `'${name}' option must be a string.`);\n    }\n\n    return value;\n  }\n\n  invariant(condition, message) {\n    if (!condition) {\n      throw new Error(this.formatMessage(message));\n    }\n  }\n\n  formatMessage(message) {\n    return `${this.descriptor}: ${message}`;\n  }\n\n}\n\nexports.OptionValidator = OptionValidator;","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/@babel/helper-validator-option/lib/validator.js"],"names":["Object","defineProperty","exports","value","OptionValidator","_findSuggestion","require","constructor","descriptor","validateTopLevelOptions","options","TopLevelOptionShape","validOptionNames","keys","option","includes","Error","formatMessage","findSuggestion","validateBooleanOption","name","defaultValue","undefined","invariant","validateStringOption","condition","message"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,eAAR,GAA0B,KAAK,CAA/B;;AAEA,IAAIC,eAAe,GAAGC,OAAO,CAAC,mBAAD,CAA7B;;AAEA,MAAMF,eAAN,CAAsB;AACpBG,EAAAA,WAAW,CAACC,UAAD,EAAa;AACtB,SAAKA,UAAL,GAAkBA,UAAlB;AACD;;AAEDC,EAAAA,uBAAuB,CAACC,OAAD,EAAUC,mBAAV,EAA+B;AACpD,UAAMC,gBAAgB,GAAGZ,MAAM,CAACa,IAAP,CAAYF,mBAAZ,CAAzB;;AAEA,SAAK,MAAMG,MAAX,IAAqBd,MAAM,CAACa,IAAP,CAAYH,OAAZ,CAArB,EAA2C;AACzC,UAAI,CAACE,gBAAgB,CAACG,QAAjB,CAA0BD,MAA1B,CAAL,EAAwC;AACtC,cAAM,IAAIE,KAAJ,CAAU,KAAKC,aAAL,CAAoB,IAAGH,MAAO;AACtD,kBAAkB,CAAC,GAAGT,eAAe,CAACa,cAApB,EAAoCJ,MAApC,EAA4CF,gBAA5C,CAA8D,IADxD,CAAV,CAAN;AAED;AACF;AACF;;AAEDO,EAAAA,qBAAqB,CAACC,IAAD,EAAOjB,KAAP,EAAckB,YAAd,EAA4B;AAC/C,QAAIlB,KAAK,KAAKmB,SAAd,EAAyB;AACvB,aAAOD,YAAP;AACD,KAFD,MAEO;AACL,WAAKE,SAAL,CAAe,OAAOpB,KAAP,KAAiB,SAAhC,EAA4C,IAAGiB,IAAK,6BAApD;AACD;;AAED,WAAOjB,KAAP;AACD;;AAEDqB,EAAAA,oBAAoB,CAACJ,IAAD,EAAOjB,KAAP,EAAckB,YAAd,EAA4B;AAC9C,QAAIlB,KAAK,KAAKmB,SAAd,EAAyB;AACvB,aAAOD,YAAP;AACD,KAFD,MAEO;AACL,WAAKE,SAAL,CAAe,OAAOpB,KAAP,KAAiB,QAAhC,EAA2C,IAAGiB,IAAK,4BAAnD;AACD;;AAED,WAAOjB,KAAP;AACD;;AAEDoB,EAAAA,SAAS,CAACE,SAAD,EAAYC,OAAZ,EAAqB;AAC5B,QAAI,CAACD,SAAL,EAAgB;AACd,YAAM,IAAIT,KAAJ,CAAU,KAAKC,aAAL,CAAmBS,OAAnB,CAAV,CAAN;AACD;AACF;;AAEDT,EAAAA,aAAa,CAACS,OAAD,EAAU;AACrB,WAAQ,GAAE,KAAKlB,UAAW,KAAIkB,OAAQ,EAAtC;AACD;;AA5CmB;;AAgDtBxB,OAAO,CAACE,eAAR,GAA0BA,eAA1B","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.OptionValidator = void 0;\n\nvar _findSuggestion = require(\"./find-suggestion\");\n\nclass OptionValidator {\n  constructor(descriptor) {\n    this.descriptor = descriptor;\n  }\n\n  validateTopLevelOptions(options, TopLevelOptionShape) {\n    const validOptionNames = Object.keys(TopLevelOptionShape);\n\n    for (const option of Object.keys(options)) {\n      if (!validOptionNames.includes(option)) {\n        throw new Error(this.formatMessage(`'${option}' is not a valid top-level option.\n- Did you mean '${(0, _findSuggestion.findSuggestion)(option, validOptionNames)}'?`));\n      }\n    }\n  }\n\n  validateBooleanOption(name, value, defaultValue) {\n    if (value === undefined) {\n      return defaultValue;\n    } else {\n      this.invariant(typeof value === \"boolean\", `'${name}' option must be a boolean.`);\n    }\n\n    return value;\n  }\n\n  validateStringOption(name, value, defaultValue) {\n    if (value === undefined) {\n      return defaultValue;\n    } else {\n      this.invariant(typeof value === \"string\", `'${name}' option must be a string.`);\n    }\n\n    return value;\n  }\n\n  invariant(condition, message) {\n    if (!condition) {\n      throw new Error(this.formatMessage(message));\n    }\n  }\n\n  formatMessage(message) {\n    return `${this.descriptor}: ${message}`;\n  }\n\n}\n\nexports.OptionValidator = OptionValidator;"]},"metadata":{},"sourceType":"script"}