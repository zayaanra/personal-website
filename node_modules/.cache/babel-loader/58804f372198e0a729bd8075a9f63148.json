{"ast":null,"code":"import { useEffect, useRef } from 'react';\nimport { processColor } from '../Colors';\nimport { makeRemote } from '../core';\nimport { isWeb } from '../PlatformChecker';\nimport { colorProps } from '../UpdateProps';\nimport WorkletEventHandler from '../WorkletEventHandler';\nexport function useEvent(handler) {\n  let eventNames = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  let rebuild = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  const initRef = useRef(null);\n\n  if (initRef.current === null) {\n    initRef.current = new WorkletEventHandler(handler, eventNames);\n  } else if (rebuild) {\n    initRef.current.updateWorklet(handler);\n  }\n\n  useEffect(() => {\n    return () => {\n      initRef.current = null;\n    };\n  }, []);\n  return initRef;\n}\nexport function useHandler(handlers, dependencies) {\n  const initRef = useRef(null);\n\n  if (initRef.current === null) {\n    initRef.current = {\n      context: makeRemote({}),\n      savedDependencies: []\n    };\n  }\n\n  useEffect(() => {\n    return () => {\n      initRef.current = null;\n    };\n  }, []);\n  const {\n    context,\n    savedDependencies\n  } = initRef.current;\n  dependencies = buildDependencies(dependencies, handlers);\n  const doDependenciesDiffer = !areDependenciesEqual(dependencies, savedDependencies);\n  initRef.current.savedDependencies = dependencies;\n  const useWeb = isWeb();\n  return {\n    context,\n    doDependenciesDiffer,\n    useWeb\n  };\n} // builds one big hash from multiple worklets' hashes\n\nexport function buildWorkletsHash(handlers) {\n  return Object.values(handlers).reduce((acc, worklet) => // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n  acc + worklet.__workletHash.toString(), '');\n} // builds dependencies array for gesture handlers\n\nexport function buildDependencies(dependencies, handlers) {\n  const handlersList = Object.values(handlers).filter(handler => handler !== undefined);\n\n  if (!dependencies) {\n    dependencies = handlersList.map(handler => {\n      return {\n        workletHash: handler.__workletHash,\n        closure: handler._closure\n      };\n    });\n  } else {\n    dependencies.push(buildWorkletsHash(handlersList));\n  }\n\n  return dependencies;\n} // this is supposed to work as useEffect comparison\n\nexport function areDependenciesEqual(nextDeps, prevDeps) {\n  function is(x, y) {\n    /* eslint-disable no-self-compare */\n    return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;\n    /* eslint-enable no-self-compare */\n  }\n\n  const objectIs = typeof Object.is === 'function' ? Object.is : is;\n\n  function areHookInputsEqual(nextDeps, prevDeps) {\n    if (!nextDeps || !prevDeps || prevDeps.length !== nextDeps.length) {\n      return false;\n    }\n\n    for (let i = 0; i < prevDeps.length; ++i) {\n      if (!objectIs(nextDeps[i], prevDeps[i])) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  return areHookInputsEqual(nextDeps, prevDeps);\n}\nexport function hasColorProps(updates) {\n  const colorPropsSet = new Set(colorProps);\n\n  for (const key in updates) {\n    if (colorPropsSet.has(key)) {\n      return true;\n    }\n  }\n\n  return false;\n}\nexport function parseColors(updates) {\n  'worklet';\n\n  for (const key in updates) {\n    if (colorProps.indexOf(key) !== -1) {\n      updates[key] = processColor(updates[key]);\n    }\n  }\n}\nexport function canApplyOptimalisation(upadterFn) {\n  const FUNCTIONLESS_FLAG = 0b00000001;\n  const STATEMENTLESS_FLAG = 0b00000010; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\n  const optimalization = upadterFn.__optimalization;\n  return optimalization & FUNCTIONLESS_FLAG && optimalization & STATEMENTLESS_FLAG;\n}\nexport function isAnimated(prop) {\n  'worklet';\n\n  const propsToCheck = [prop];\n\n  while (propsToCheck.length > 0) {\n    const currentProp = propsToCheck.pop();\n\n    if (Array.isArray(currentProp)) {\n      for (const item of currentProp) {\n        propsToCheck.push(item);\n      }\n    } else if ((currentProp === null || currentProp === void 0 ? void 0 : currentProp.onFrame) !== undefined) {\n      return true;\n    } else if (typeof currentProp === 'object') {\n      for (const item of Object.values(currentProp)) {\n        propsToCheck.push(item);\n      }\n    } // if none of the above, it's not the animated prop, check next one\n\n  } // when none of the props were animated return false\n\n\n  return false;\n}\nexport function styleDiff(oldStyle, newStyle) {\n  'worklet';\n\n  const diff = {};\n  Object.keys(oldStyle).forEach(key => {\n    if (newStyle[key] === undefined) {\n      diff[key] = null;\n    }\n  });\n  Object.keys(newStyle).forEach(key => {\n    const value = newStyle[key];\n    const oldValue = oldStyle[key];\n\n    if (isAnimated(value)) {\n      // do nothing\n      return;\n    }\n\n    if (oldValue !== value && JSON.stringify(oldValue) !== JSON.stringify(value)) {\n      // I'd use deep equal here but that'd take additional work and this was easier\n      diff[key] = value;\n    }\n  });\n  return diff;\n}\nexport function getStyleWithoutAnimations(newStyle) {\n  'worklet';\n\n  const diff = {};\n\n  for (const key in newStyle) {\n    const value = newStyle[key];\n\n    if (isAnimated(value)) {\n      continue;\n    }\n\n    diff[key] = value;\n  }\n\n  return diff;\n}\nexport const validateAnimatedStyles = styles => {\n  'worklet';\n\n  if (typeof styles !== 'object') {\n    throw new Error(`useAnimatedStyle has to return an object, found ${typeof styles} instead`);\n  } else if (Array.isArray(styles)) {\n    throw new Error('useAnimatedStyle has to return an object and cannot return static styles combined with dynamic ones. Please do merging where a component receives props.');\n  }\n};","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated2/hook/utils.js"],"names":["useEffect","useRef","processColor","makeRemote","isWeb","colorProps","WorkletEventHandler","useEvent","handler","eventNames","rebuild","initRef","current","updateWorklet","useHandler","handlers","dependencies","context","savedDependencies","buildDependencies","doDependenciesDiffer","areDependenciesEqual","useWeb","buildWorkletsHash","Object","values","reduce","acc","worklet","__workletHash","toString","handlersList","filter","undefined","map","workletHash","closure","_closure","push","nextDeps","prevDeps","is","x","y","objectIs","areHookInputsEqual","length","i","hasColorProps","updates","colorPropsSet","Set","key","has","parseColors","indexOf","canApplyOptimalisation","upadterFn","FUNCTIONLESS_FLAG","STATEMENTLESS_FLAG","optimalization","__optimalization","isAnimated","prop","propsToCheck","currentProp","pop","Array","isArray","item","onFrame","styleDiff","oldStyle","newStyle","diff","keys","forEach","value","oldValue","JSON","stringify","getStyleWithoutAnimations","validateAnimatedStyles","styles","Error"],"mappings":"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","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { processColor } from '../Colors';\nimport { makeRemote } from '../core';\nimport { isWeb } from '../PlatformChecker';\nimport { colorProps } from '../UpdateProps';\nimport WorkletEventHandler from '../WorkletEventHandler';\nexport function useEvent(handler, eventNames = [], rebuild = false) {\n    const initRef = useRef(null);\n    if (initRef.current === null) {\n        initRef.current = new WorkletEventHandler(handler, eventNames);\n    }\n    else if (rebuild) {\n        initRef.current.updateWorklet(handler);\n    }\n    useEffect(() => {\n        return () => {\n            initRef.current = null;\n        };\n    }, []);\n    return initRef;\n}\nexport function useHandler(handlers, dependencies) {\n    const initRef = useRef(null);\n    if (initRef.current === null) {\n        initRef.current = {\n            context: makeRemote({}),\n            savedDependencies: [],\n        };\n    }\n    useEffect(() => {\n        return () => {\n            initRef.current = null;\n        };\n    }, []);\n    const { context, savedDependencies } = initRef.current;\n    dependencies = buildDependencies(dependencies, handlers);\n    const doDependenciesDiffer = !areDependenciesEqual(dependencies, savedDependencies);\n    initRef.current.savedDependencies = dependencies;\n    const useWeb = isWeb();\n    return { context, doDependenciesDiffer, useWeb };\n}\n// builds one big hash from multiple worklets' hashes\nexport function buildWorkletsHash(handlers) {\n    return Object.values(handlers).reduce((acc, worklet) => \n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    acc + worklet.__workletHash.toString(), '');\n}\n// builds dependencies array for gesture handlers\nexport function buildDependencies(dependencies, handlers) {\n    const handlersList = Object.values(handlers).filter((handler) => handler !== undefined);\n    if (!dependencies) {\n        dependencies = handlersList.map((handler) => {\n            return {\n                workletHash: handler.__workletHash,\n                closure: handler._closure,\n            };\n        });\n    }\n    else {\n        dependencies.push(buildWorkletsHash(handlersList));\n    }\n    return dependencies;\n}\n// this is supposed to work as useEffect comparison\nexport function areDependenciesEqual(nextDeps, prevDeps) {\n    function is(x, y) {\n        /* eslint-disable no-self-compare */\n        return (x === y && (x !== 0 || 1 / x === 1 / y)) || (x !== x && y !== y);\n        /* eslint-enable no-self-compare */\n    }\n    const objectIs = typeof Object.is === 'function' ? Object.is : is;\n    function areHookInputsEqual(nextDeps, prevDeps) {\n        if (!nextDeps || !prevDeps || prevDeps.length !== nextDeps.length) {\n            return false;\n        }\n        for (let i = 0; i < prevDeps.length; ++i) {\n            if (!objectIs(nextDeps[i], prevDeps[i])) {\n                return false;\n            }\n        }\n        return true;\n    }\n    return areHookInputsEqual(nextDeps, prevDeps);\n}\nexport function hasColorProps(updates) {\n    const colorPropsSet = new Set(colorProps);\n    for (const key in updates) {\n        if (colorPropsSet.has(key)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function parseColors(updates) {\n    'worklet';\n    for (const key in updates) {\n        if (colorProps.indexOf(key) !== -1) {\n            updates[key] = processColor(updates[key]);\n        }\n    }\n}\nexport function canApplyOptimalisation(upadterFn) {\n    const FUNCTIONLESS_FLAG = 0b00000001;\n    const STATEMENTLESS_FLAG = 0b00000010;\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    const optimalization = upadterFn.__optimalization;\n    return (optimalization & FUNCTIONLESS_FLAG && optimalization & STATEMENTLESS_FLAG);\n}\nexport function isAnimated(prop) {\n    'worklet';\n    const propsToCheck = [prop];\n    while (propsToCheck.length > 0) {\n        const currentProp = propsToCheck.pop();\n        if (Array.isArray(currentProp)) {\n            for (const item of currentProp) {\n                propsToCheck.push(item);\n            }\n        }\n        else if ((currentProp === null || currentProp === void 0 ? void 0 : currentProp.onFrame) !== undefined) {\n            return true;\n        }\n        else if (typeof currentProp === 'object') {\n            for (const item of Object.values(currentProp)) {\n                propsToCheck.push(item);\n            }\n        }\n        // if none of the above, it's not the animated prop, check next one\n    }\n    // when none of the props were animated return false\n    return false;\n}\nexport function styleDiff(oldStyle, newStyle) {\n    'worklet';\n    const diff = {};\n    Object.keys(oldStyle).forEach((key) => {\n        if (newStyle[key] === undefined) {\n            diff[key] = null;\n        }\n    });\n    Object.keys(newStyle).forEach((key) => {\n        const value = newStyle[key];\n        const oldValue = oldStyle[key];\n        if (isAnimated(value)) {\n            // do nothing\n            return;\n        }\n        if (oldValue !== value &&\n            JSON.stringify(oldValue) !== JSON.stringify(value)) {\n            // I'd use deep equal here but that'd take additional work and this was easier\n            diff[key] = value;\n        }\n    });\n    return diff;\n}\nexport function getStyleWithoutAnimations(newStyle) {\n    'worklet';\n    const diff = {};\n    for (const key in newStyle) {\n        const value = newStyle[key];\n        if (isAnimated(value)) {\n            continue;\n        }\n        diff[key] = value;\n    }\n    return diff;\n}\nexport const validateAnimatedStyles = (styles) => {\n    'worklet';\n    if (typeof styles !== 'object') {\n        throw new Error(`useAnimatedStyle has to return an object, found ${typeof styles} instead`);\n    }\n    else if (Array.isArray(styles)) {\n        throw new Error('useAnimatedStyle has to return an object and cannot return static styles combined with dynamic ones. Please do merging where a component receives props.');\n    }\n};\n"]},"metadata":{},"sourceType":"module"}