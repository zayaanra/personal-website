{"ast":null,"code":"import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\nimport ReanimatedModule from '../../ReanimatedModule';\nimport invariant from 'invariant';\n\nfunction sanitizeValue(value) {\n  return value === null || value === undefined || typeof value === 'string' ? value : Number(value);\n}\n\nconst CONSTANT_VALUES = new Map();\n\nfunction initializeConstantValues() {\n  if (CONSTANT_VALUES.size !== 0) {\n    return;\n  }\n\n  [0, -1, 1, -2, 2].forEach(v => CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true)));\n}\n/**\n * This class has been made internal in order to omit dependencies' cycles which\n * were caused by imperative setValue and interpolate – they are currently exposed with AnimatedValue.js\n */\n\n\nexport default class InternalAnimatedValue extends AnimatedNode {\n  static valueForConstant(number) {\n    initializeConstantValues();\n    return CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true);\n  }\n\n  constructor(value) {\n    let constant = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    invariant(value !== null, 'Animated.Value cannot be set to the null');\n    super({\n      type: 'value',\n      value: sanitizeValue(value)\n    });\n    this._startingValue = this._value = value;\n    this._animation = null;\n    this._constant = constant;\n  }\n\n  __detach() {\n    if (!this._constant) {\n      if (ReanimatedModule.getValue) {\n        ReanimatedModule.getValue(this.__nodeID, val => this.__nodeConfig.value = val);\n      } else {\n        this.__nodeConfig.value = this.__getValue();\n      }\n    }\n\n    this.__detachAnimation(this._animation);\n\n    super.__detach();\n  }\n\n  __detachAnimation(animation) {\n    animation && animation.__detach();\n\n    if (this._animation === animation) {\n      this._animation = null;\n    }\n  }\n\n  __attachAnimation(animation) {\n    this.__detachAnimation(this._animation);\n\n    this._animation = animation;\n  }\n\n  __onEvaluate() {\n    if (this.__inputNodes && this.__inputNodes.length) {\n      this.__inputNodes.forEach(val);\n    }\n\n    return this._value;\n  } // AnimatedValue will override this method to modify the value of a native node.\n\n\n  setValue(value) {\n    this.__detachAnimation(this._animation);\n\n    this._updateValue(value);\n  }\n\n  _updateValue(value) {\n    this._value = value;\n\n    this.__forceUpdateCache(value);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated1/core/InternalAnimatedValue.js"],"names":["AnimatedNode","val","ReanimatedModule","invariant","sanitizeValue","value","undefined","Number","CONSTANT_VALUES","Map","initializeConstantValues","size","forEach","v","set","InternalAnimatedValue","valueForConstant","number","get","constructor","constant","type","_startingValue","_value","_animation","_constant","__detach","getValue","__nodeID","__nodeConfig","__getValue","__detachAnimation","animation","__attachAnimation","__onEvaluate","__inputNodes","length","setValue","_updateValue","__forceUpdateCache"],"mappings":"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","sourcesContent":["import AnimatedNode from './AnimatedNode';\nimport { val } from '../val';\nimport ReanimatedModule from '../../ReanimatedModule';\nimport invariant from 'invariant';\n\nfunction sanitizeValue(value) {\n  return value === null || value === undefined || typeof value === 'string'\n    ? value\n    : Number(value);\n}\n\nconst CONSTANT_VALUES = new Map();\n\nfunction initializeConstantValues() {\n  if (CONSTANT_VALUES.size !== 0) {\n    return;\n  }\n  [0, -1, 1, -2, 2].forEach((v) =>\n    CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true))\n  );\n}\n\n/**\n * This class has been made internal in order to omit dependencies' cycles which\n * were caused by imperative setValue and interpolate – they are currently exposed with AnimatedValue.js\n */\nexport default class InternalAnimatedValue extends AnimatedNode {\n  static valueForConstant(number) {\n    initializeConstantValues();\n    return (\n      CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true)\n    );\n  }\n\n  constructor(value, constant = false) {\n    invariant(value !== null, 'Animated.Value cannot be set to the null');\n    super({ type: 'value', value: sanitizeValue(value) });\n    this._startingValue = this._value = value;\n    this._animation = null;\n    this._constant = constant;\n  }\n\n  __detach() {\n    if (!this._constant) {\n      if (ReanimatedModule.getValue) {\n        ReanimatedModule.getValue(\n          this.__nodeID,\n          (val) => (this.__nodeConfig.value = val)\n        );\n      } else {\n        this.__nodeConfig.value = this.__getValue();\n      }\n    }\n    this.__detachAnimation(this._animation);\n    super.__detach();\n  }\n\n  __detachAnimation(animation) {\n    animation && animation.__detach();\n    if (this._animation === animation) {\n      this._animation = null;\n    }\n  }\n\n  __attachAnimation(animation) {\n    this.__detachAnimation(this._animation);\n    this._animation = animation;\n  }\n\n  __onEvaluate() {\n    if (this.__inputNodes && this.__inputNodes.length) {\n      this.__inputNodes.forEach(val);\n    }\n    return this._value;\n  }\n\n  // AnimatedValue will override this method to modify the value of a native node.\n  setValue(value) {\n    this.__detachAnimation(this._animation);\n    this._updateValue(value);\n  }\n\n  _updateValue(value) {\n    this._value = value;\n    this.__forceUpdateCache(value);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}