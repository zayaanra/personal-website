{"ast":null,"code":"import invariant from 'invariant';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport InternalAnimatedValue from './InternalAnimatedValue';\n\nclass AnimatedBlock extends AnimatedNode {\n  _array;\n\n  constructor(array) {\n    invariant(array.every(el => el instanceof AnimatedNode), `Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`);\n    super({\n      type: 'block',\n      block: array\n    }, array);\n    this._array = array;\n  }\n\n  toString() {\n    return `AnimatedBlock, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    let result;\n\n    this._array.forEach(node => {\n      result = val(node);\n    });\n\n    return result;\n  }\n\n}\n\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && v?.__isProxy) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n\n    return v.__val;\n  } // TODO: cache some typical static values (e.g. 0, 1, -1)\n\n\n  return v instanceof AnimatedNode ? v : InternalAnimatedValue.valueForConstant(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v) ? new AnimatedBlock(v.map(node => adapt(node))) : nodify(v);\n}","map":{"version":3,"sources":["C:/Users/rahma/Desktop/Projects/Python/website/personal-website/frontend/app/node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedBlock.js"],"names":["invariant","val","AnimatedNode","InternalAnimatedValue","AnimatedBlock","_array","constructor","array","every","el","type","block","toString","__nodeID","__onEvaluate","result","forEach","node","createAnimatedBlock","items","adapt","nodify","v","__isProxy","__val","valueForConstant","Array","isArray","map"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,WAAtB;AACA,SAASC,GAAT,QAAoB,QAApB;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,qBAAP,MAAkC,yBAAlC;;AAEA,MAAMC,aAAN,SAA4BF,YAA5B,CAAyC;AACvCG,EAAAA,MAAM;;AAENC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjBP,IAAAA,SAAS,CACPO,KAAK,CAACC,KAAN,CAAaC,EAAD,IAAQA,EAAE,YAAYP,YAAlC,CADO,EAEN,2IAFM,CAAT;AAIA,UAAM;AAAEQ,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,KAAK,EAAEJ;AAAxB,KAAN,EAAuCA,KAAvC;AACA,SAAKF,MAAL,GAAcE,KAAd;AACD;;AAEDK,EAAAA,QAAQ,GAAG;AACT,WAAQ,sBAAqB,KAAKC,QAAS,EAA3C;AACD;;AAEDC,EAAAA,YAAY,GAAG;AACb,QAAIC,MAAJ;;AACA,SAAKV,MAAL,CAAYW,OAAZ,CAAqBC,IAAD,IAAU;AAC5BF,MAAAA,MAAM,GAAGd,GAAG,CAACgB,IAAD,CAAZ;AACD,KAFD;;AAGA,WAAOF,MAAP;AACD;;AAtBsC;;AAyBzC,OAAO,SAASG,mBAAT,CAA6BC,KAA7B,EAAoC;AACzC,SAAOC,KAAK,CAACD,KAAD,CAAZ;AACD;;AAED,SAASE,MAAT,CAAgBC,CAAhB,EAAmB;AACjB,MAAI,OAAOA,CAAP,KAAa,QAAb,IAAyBA,CAAC,EAAEC,SAAhC,EAA2C;AACzC,QAAI,CAACD,CAAC,CAACE,KAAP,EAAc;AACZF,MAAAA,CAAC,CAACE,KAAF,GAAU,IAAIrB,qBAAJ,CAA0B,CAA1B,CAAV;AACD;;AACD,WAAOmB,CAAC,CAACE,KAAT;AACD,GANgB,CAOjB;;;AACA,SAAOF,CAAC,YAAYpB,YAAb,GACHoB,CADG,GAEHnB,qBAAqB,CAACsB,gBAAtB,CAAuCH,CAAvC,CAFJ;AAGD;;AAED,OAAO,SAASF,KAAT,CAAeE,CAAf,EAAkB;AACvB,SAAOI,KAAK,CAACC,OAAN,CAAcL,CAAd,IACH,IAAIlB,aAAJ,CAAkBkB,CAAC,CAACM,GAAF,CAAOX,IAAD,IAAUG,KAAK,CAACH,IAAD,CAArB,CAAlB,CADG,GAEHI,MAAM,CAACC,CAAD,CAFV;AAGD","sourcesContent":["import invariant from 'invariant';\nimport { val } from '../val';\nimport AnimatedNode from './AnimatedNode';\nimport InternalAnimatedValue from './InternalAnimatedValue';\n\nclass AnimatedBlock extends AnimatedNode {\n  _array;\n\n  constructor(array) {\n    invariant(\n      array.every((el) => el instanceof AnimatedNode),\n      `Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`\n    );\n    super({ type: 'block', block: array }, array);\n    this._array = array;\n  }\n\n  toString() {\n    return `AnimatedBlock, id: ${this.__nodeID}`;\n  }\n\n  __onEvaluate() {\n    let result;\n    this._array.forEach((node) => {\n      result = val(node);\n    });\n    return result;\n  }\n}\n\nexport function createAnimatedBlock(items) {\n  return adapt(items);\n}\n\nfunction nodify(v) {\n  if (typeof v === 'object' && v?.__isProxy) {\n    if (!v.__val) {\n      v.__val = new InternalAnimatedValue(0);\n    }\n    return v.__val;\n  }\n  // TODO: cache some typical static values (e.g. 0, 1, -1)\n  return v instanceof AnimatedNode\n    ? v\n    : InternalAnimatedValue.valueForConstant(v);\n}\n\nexport function adapt(v) {\n  return Array.isArray(v)\n    ? new AnimatedBlock(v.map((node) => adapt(node)))\n    : nodify(v);\n}\n"]},"metadata":{},"sourceType":"module"}